%!PS-Adobe-2.0
%%Creator: dvips(k) 5.92b Copyright 2002 Radical Eye Software
%%Title: JAIR06_Downward.dvi
%%Pages: 56
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Times-Roman Times-Bold Times-Italic CMSY8 CMMI10 CMR7
%%+ CMR8 Courier CMSY10 CMR10 CMMI8 Times-BoldItalic CMEX10 CMR9 CMMI9
%%+ CMSY9 CMSY6 CMTI10 Helvetica Helvetica-Bold CMR5
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -t letter JAIR06_Downward.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2006.07.12:1710
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: psfrag.pro
%%
%% This is file `psfrag.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% psfrag.dtx  (with options: `filepro')
%% 
%% Copyright (c) 1996 Craig Barratt, Michael C. Grant, and David Carlisle.
%% All rights reserved.
%% 
%% This file is part of the PSfrag package.
%% 
userdict begin
/PSfragLib 90 dict def
/PSfragDict 6 dict def
/PSfrag { PSfragLib begin load exec end } bind def
end
PSfragLib begin
/RO /readonly      load def
/CP /currentpoint  load def
/CM /currentmatrix load def
/B { bind RO def } bind def
/X { exch def } B
/MD { { X } forall } B
/OE { end exec PSfragLib begin } B
/S false def
/tstr 8 string def
/islev2 { languagelevel } stopped { false } { 2 ge } ifelse def
[ /sM /tM /srcM /dstM /dM /idM /srcFM /dstFM ] { matrix def } forall
sM currentmatrix RO pop
dM defaultmatrix RO idM invertmatrix RO pop
srcFM identmatrix pop
/Hide { gsave { CP } stopped not newpath clip { moveto } if } B
/Unhide { { CP } stopped not grestore { moveto } if } B
/setrepl islev2 {{ /glob currentglobal def true setglobal array astore
                   globaldict exch /PSfrags exch put glob setglobal }}
                {{ array astore /PSfrags X }} ifelse B
/getrepl islev2 {{ globaldict /PSfrags get aload length }}
                {{ PSfrags aload length }} ifelse B
/convert {
   /src X src length string
   /c 0 def src length {
      dup c src c get dup 32 lt { pop 32 } if put /c c 1 add def
   } repeat
} B
/Begin {
    /saver save def
    srcFM exch 3 exch put
    0 ne /debugMode X 0 setrepl
    dup /S exch dict def { S 3 1 roll exch convert exch put } repeat
    srcM CM dup invertmatrix pop
    mark { currentdict { end } stopped { pop exit } if } loop
    PSfragDict counttomark { begin } repeat pop
} B
/End {
    mark { currentdict end dup PSfragDict eq { pop exit } if } loop
    counttomark { begin } repeat pop
    getrepl saver restore
    7 idiv dup /S exch dict def {
        6 array astore /mtrx X tstr cvs /K X
        S K [ S K known { S K get aload pop } if mtrx ] put
    } repeat
} B
/Place {
    tstr cvs /K X
    S K known {
        bind /proc X tM CM pop
        CP /cY X /cX X
        0 0 transform idtransform neg /aY X neg /aX X
        S K get dup length /maxiter X
        /iter 1 def {
            iter maxiter ne { /saver save def } if
            tM setmatrix aX aY translate
            [ exch aload pop idtransform ] concat
            cX neg cY neg translate cX cY moveto
            /proc load OE
            iter maxiter ne { saver restore /iter iter 1 add def } if
        } forall
        /noXY { CP /cY X /cX X } stopped def
        tM setmatrix noXY { newpath } { cX cY moveto } ifelse
    } {
        Hide OE Unhide
    } ifelse
} B
/normalize {
    2 index dup mul 2 index dup mul add sqrt div
    dup 4 -1 roll exch mul 3 1 roll mul
} B
/replace {
    aload pop MD
    CP /bY X /lX X gsave sM setmatrix
    str stringwidth abs exch abs add dup 0 eq
        { pop } { 360 exch div dup scale } ifelse
    lX neg bY neg translate newpath lX bY moveto
    str { /ch X ( ) dup 0 ch put false charpath ch Kproc } forall
    flattenpath pathbbox [ /uY /uX /lY /lX ] MD
    CP grestore moveto
    currentfont /FontMatrix get dstFM copy dup
    0 get 0 lt { uX lX /uX X /lX X } if
    3 get 0 lt { uY lY /uY X /lY X } if
    /cX uX lX add 0.5 mul def
    /cY uY lY add 0.5 mul def
    debugMode { gsave 0 setgray 1 setlinewidth
        lX lY moveto lX uY lineto uX uY lineto uX lY lineto closepath
        lX bY moveto uX bY lineto lX cY moveto uX cY lineto
        cX lY moveto cX uY lineto stroke
    grestore } if
    dstFM dup invertmatrix dstM CM srcM
    2 { dstM concatmatrix } repeat pop
    getrepl /temp X
        S str convert get {
            aload pop [ /rot /scl /loc /K ] MD
            /aX cX def /aY cY def
            loc {
                dup 66  eq { /aY bY def } { % B
                dup 98  eq { /aY lY def } { % b
                dup 108 eq { /aX lX def } { % l
                dup 114 eq { /aX uX def } { % r
                dup 116 eq { /aY uY def }   % t
                if } ifelse } ifelse } ifelse } ifelse pop
            } forall
            K srcFM rot tM rotate dstM
            2 { tM concatmatrix } repeat aload pop pop pop
            2 { scl normalize 4 2 roll } repeat
            aX aY transform
            /temp temp 7 add def
        } forall
    temp setrepl
} B
/Rif {
    S 3 index convert known { pop replace } { exch pop OE } ifelse
} B
/XA { bind [ /Kproc /str } B /XC { ] 2 array astore def } B
/xs   { pop } XA XC
/xks  { /kern load OE } XA /kern XC
/xas  { pop ax ay rmoveto } XA /ay /ax XC
/xws  { c eq { cx cy rmoveto } if } XA /c /cy /cx XC
/xaws { ax ay rmoveto c eq { cx cy rmoveto } if }
    XA /ay /ax /c /cy /cx XC
/raws { xaws { awidthshow } Rif } B
/rws  { xws { widthshow } Rif } B
/rks  { xks { kshow } Rif } B
/ras  { xas { ashow } Rif } B
/rs   { xs { show } Rif } B
/rrs { getrepl dup 2 add -1 roll //restore exec setrepl } B
PSfragDict begin
islev2 not { /restore { /rrs PSfrag } B } if
/show       { /rs   PSfrag } B
/kshow      { /rks  PSfrag } B
/ashow      { /ras  PSfrag } B
/widthshow  { /rws  PSfrag } B
/awidthshow { /raws PSfrag } B
end PSfragDict RO pop
end

%%EndProcSet
%%BeginProcSet: 8r.enc
% File  8r.enc as of 2002-03-12 for PSNFSS 9
%
% This is the encoding vector for Type1 and TrueType fonts to be used
% with TeX.  This file is part of the PSNFSS bundle, version 9
% 
% Authors: S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry, W. Schmidt
%
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida + Euro.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (6) /Euro is assigned to 128, as in Windows ANSI
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there down to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /Euro /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def

%%EndProcSet
%%BeginProcSet: bbad153f.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmsy10 cmsy5 cmsy6 cmsy7 cmsy8 cmsy9
%
/TeXbbad153fEncoding [
/minus /periodcentered /multiply /asteriskmath /divide /diamondmath
/plusminus /minusplus /circleplus /circleminus /circlemultiply
/circledivide /circledot /circlecopyrt /openbullet /bullet
/equivasymptotic /equivalence /reflexsubset /reflexsuperset /lessequal
/greaterequal /precedesequal /followsequal /similar /approxequal
/propersubset /propersuperset /lessmuch /greatermuch /precedes /follows
/arrowleft /arrowright /arrowup /arrowdown /arrowboth /arrownortheast
/arrowsoutheast /similarequal /arrowdblleft /arrowdblright /arrowdblup
/arrowdbldown /arrowdblboth /arrownorthwest /arrowsouthwest /proportional
/prime /infinity /element /owner /triangle /triangleinv /negationslash
/mapsto /universal /existential /logicalnot /emptyset /Rfractur /Ifractur
/latticetop /perpendicular /aleph /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /union /intersection
/unionmulti /logicaland /logicalor /turnstileleft /turnstileright
/floorleft /floorright /ceilingleft /ceilingright /braceleft /braceright
/angbracketleft /angbracketright /bar /bardbl /arrowbothv /arrowdblbothv
/backslash /wreathproduct /radical /coproduct /nabla /integral
/unionsq /intersectionsq /subsetsqequal /supersetsqequal /section
/dagger /daggerdbl /paragraph /club /diamond /heart /spade /arrowleft
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/minus /periodcentered /multiply /asteriskmath /divide /diamondmath
/plusminus /minusplus /circleplus /circleminus /.notdef /.notdef
/circlemultiply /circledivide /circledot /circlecopyrt /openbullet
/bullet /equivasymptotic /equivalence /reflexsubset /reflexsuperset
/lessequal /greaterequal /precedesequal /followsequal /similar
/approxequal /propersubset /propersuperset /lessmuch /greatermuch
/precedes /follows /arrowleft /spade /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: cmmi10.pfb
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 161 /Gamma put
dup 162 /Delta put
dup 163 /Theta put
dup 164 /Lambda put
dup 165 /Xi put
dup 166 /Pi put
dup 167 /Sigma put
dup 168 /Upsilon put
dup 169 /Phi put
dup 170 /Psi put
dup 173 /Omega put
dup 174 /alpha put
dup 175 /beta put
dup 176 /gamma put
dup 177 /delta put
dup 178 /epsilon1 put
dup 179 /zeta put
dup 180 /eta put
dup 181 /theta put
dup 182 /iota put
dup 183 /kappa put
dup 184 /lambda put
dup 185 /mu put
dup 186 /nu put
dup 187 /xi put
dup 188 /pi put
dup 189 /rho put
dup 190 /sigma put
dup 191 /tau put
dup 192 /upsilon put
dup 193 /phi put
dup 194 /chi put
dup 195 /psi put
dup 196 /tie put
dup 0 /Gamma put
dup 1 /Delta put
dup 2 /Theta put
dup 3 /Lambda put
dup 4 /Xi put
dup 5 /Pi put
dup 6 /Sigma put
dup 7 /Upsilon put
dup 8 /Phi put
dup 9 /Psi put
dup 10 /Omega put
dup 11 /alpha put
dup 12 /beta put
dup 13 /gamma put
dup 14 /delta put
dup 15 /epsilon1 put
dup 16 /zeta put
dup 17 /eta put
dup 18 /theta put
dup 19 /iota put
dup 20 /kappa put
dup 21 /lambda put
dup 22 /mu put
dup 23 /nu put
dup 24 /xi put
dup 25 /pi put
dup 26 /rho put
dup 27 /sigma put
dup 28 /tau put
dup 29 /upsilon put
dup 30 /phi put
dup 31 /chi put
dup 32 /psi put
dup 33 /omega put
dup 34 /epsilon put
dup 35 /theta1 put
dup 36 /pi1 put
dup 37 /rho1 put
dup 38 /sigma1 put
dup 39 /phi1 put
dup 40 /arrowlefttophalf put
dup 41 /arrowleftbothalf put
dup 42 /arrowrighttophalf put
dup 43 /arrowrightbothalf put
dup 44 /arrowhookleft put
dup 45 /arrowhookright put
dup 46 /triangleright put
dup 47 /triangleleft put
dup 48 /zerooldstyle put
dup 49 /oneoldstyle put
dup 50 /twooldstyle put
dup 51 /threeoldstyle put
dup 52 /fouroldstyle put
dup 53 /fiveoldstyle put
dup 54 /sixoldstyle put
dup 55 /sevenoldstyle put
dup 56 /eightoldstyle put
dup 57 /nineoldstyle put
dup 58 /period put
dup 59 /comma put
dup 60 /less put
dup 61 /slash put
dup 62 /greater put
dup 63 /star put
dup 64 /partialdiff put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /flat put
dup 92 /natural put
dup 93 /sharp put
dup 94 /slurbelow put
dup 95 /slurabove put
dup 96 /lscript put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /dotlessi put
dup 124 /dotlessj put
dup 125 /weierstrass put
dup 126 /vector put
dup 127 /tie put
dup 128 /psi put
dup 160 /space put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
/UniqueID 5087385 def
currentdict end
currentfile eexec

80347982AB3942D930E069A70D0D48311D725E830D1C76FBA12E12486E989C9874C2B527F092
5722787027F44470D484262C360CDFDDDF3657533A57BB16F73048BFBBFCB73A650484015441
FDC837ADD94AC8FBD2022E3EC8F115D4B4BB7B7F15388F22CC6198EFE768BD9FCEB3446EE4A8
DC27D6CD152485384EF5F59381FFDA43F2D20C8FB08AA27AB2015B774DB10DACFDCD33E60F17
8C461553146AB427BDD7DA12534BA078AD3D780414930DA4F8D58ABEFD45DB119B10EB409DD8
97923C6E705479464A4B310B58348C4B42393988FEF4925CF984423AAF65FEA9F0E64629953B
CF50B919D968D99BD185F83112B2759CC411764E9BDE677F57C5EE5AC555448D5F81A16259DE
D1E11BF4119D53E8AB07A802DF900D3A2D5CCC1C6876D29C5E9EFFB7AF3EF83400B0910C0787
3A8C56FA7B1EB1BA426043B00CC95DBEDC6E136CBBBCB3F67509964F9F281EBF81FE5B018122
EAF66C4A838487E82E186E006093042848A903EFB3469AB6B4049767AADB95C30408DFD58D8A
10F4CB22168DECD9F3EE100F07B49AA44C92139B669CC312BA20192454EB2375BE6284B02665
9D964B96AE82D4942E758027FCF23C25ED01115AF27CE7F20EFE2A822BB684004F20243A49C9
E93301FC21B80815C033C3E2BA58EF53DA2157D524B395F2B37ABCA13BC6A2F42E824AB7E471
06176B0D6DB267FBB795AC7425582DF2E3DC55863468A9200742BD7B552C48F8CF58BC21343B
D3B95ABFA140F33F37C6F3F78B0D8A5154EB7C1F62EC598267F13E841A3E64172663935AC8B6
65D86540D316DDECE329C008049C5E74B27D59022C5515059BC3B89370B1BC6A169C888BB325
E0B74282D6F053A50DA4024ED1E433271A32AB8C17D41C632B41CF9F3ECD5FE124DAF7AEA7CE
8A63047B245822930D517DF7BAAAFA69D2D17F7D93CEBD47DEB85405D720DE0BB4DCAE731A8E
27BDBB6E6BE38D168B7DAFF815ACFC32CE367374BF9FD98C0AE5BA1BCCDB84D94B5C173ABC92
F7D18E19A68F64A2241A0A1639108DC46B8A04EAD17662B7BBFF3D3D9A95D5937698573BFAC6
4973DC8D8B8D9F68C52D0C133119ECA4FAE72F7553D276C817003234A98337D7C037C0F1BCE8
A80457113BCD97515C002D20F836FA086A3277727873EC2B64A92BEDB01193491134B6692A08
DE4A201A3F11DBE070D797F7629AD487D2B8DBF89A0631956C93864A4460AA3BCC8EC6B98DB7
5209AA1B4A2E2B1B9866CC7F3BEE4E0EB0DD68627A97A3FE6141FAF10A2CE00391796C5438DB
AD93FBD065D1ED7E8B7879E0D1BE9AC145B9AA91756EB6EB81146048072303229CB8DCEB133E
572EC8E2BC954BADCE75356EC8EA0C7F76CA08533E874BBAEAADB89D86CEB974A52DE0F9A434
80E5076265AA6EE49ECC896182E6091EB30B7DA8CD0E3A26AE7FC03BA5C0D56526ECC6F2D6F6
91D84DC9E7DF306863FE0B6DAB3CBC588C28292DF3F7A47D9C4E3652C72F6BBFB3F4983CAF59
C7D877103DE7AD73F95A100AE860B4E55814F00A7026C306E85B8A48F8F69CA48AE710950A2A
1F2892F31A3849CF917002086DCA5F66B84EFEECADAACEB33A0932E394A5E17628D52E725FC0
C69E8B00C9DF81DFA32B2970756D947A9F56831B19FA3A2F2795017381C05919032FC19A6B8E
D2D0188DC35923F486A62C8AE61E0A5BC681A57DC20223629C0339F67D689B63D842909188E2
CB82A4E0471B9F17CB8FDC6A6D2C3AA6FEA17A756B4D4860FB72B50CC39CC7E5329DC202A5D9
0160DCECB7ED07B9CFAEB7E766887C9B93727E5DF348FD2F5158A2424F443A8C72811CFC9CD9
E2CE8219667D7364E85BB01D8CBD63CC11533CB0D14B793D5E1DA99278E636CFE6A34AB61D46
44DFB5939746F67C71EA1632A43F457583D3478D159400E04CB7BFD0011048ECFE912EA5B72F
6C01F941C78CE1FDFE23370848D6DB1C88D27C9118B3C8C8CF0BBF33FF12B509D3594E187F52
05B9E96F9854002E8944B8126A8B2B41BD572E7FE727B10441F3B4B303FB576084008DF04128
F28A3BA5BF987BDD3AD278F316615D70634C47E6C924A9CC634A249D1D57DF395AFFD6B0C524
68061B62CCB46EC8CF95AE99EFA5DEAADC48F433ACE21B45CB502F37F06EF95B4D8880FCE2EA
E511E2F7130A96097066127391923616B95EB7E3D70CAED613BAE4F2D65E6AB1F81D63745FCF
A57A9BC5788BD1288607539A0EB5D7C139FCAC70436ABE12B7D57C1D915C3AE1575CC7EEDC26
297231B8A510CEECD3F0B291782BB1C342BD44219F004AC2F1A869F1448354BE54DD59CC8CC8
DEB38E3B8F4899845DA13CCB707CC10D715B01CF3D7D3BD1246A449F90E96D40BC79F879B7AF
43B7A09D9DD4884F7563910E4CDA099284CF094D1D0246583B01F1E687F0A365B463E7C7B4F3
70E924900712B02B20792D0DB404E08ED5ABBCA0F1F447292857A96F3F73CCCBC73F223C7FFB
BC96E095E349CC72D2A37DC40D196FB55782050E83C7097617FE0D2C663D32A7F03460EBF9E1
904A12877EE0D4A4053BD5B673B3B65BDBAF76D7BE76E4F49A0C0912A87BF7BFEE30BC1E91A9
55729D55B0691D2E573B7CA693ADA3E865E87F4C48122AB163919CEDEEAB29E83020E4391D59
00AE2FF0F086AB51FEA2FBE72549C4CD3A674C8EEC28AF24EE314876F4ECB7F161CB9F55A2FD
8611C48F3E8396DF873D8EFD9141474A86B8906CC01736588436A3636933ED22C8B8D97611D6
26BA7667B33BBB0DDD4EE1FDA2E89A3F03A18516456C029B96AB181F945C6C81990E19A732E9
ADE2DC846D19386E874ECF08F33C48C812BD31E6056FB1ECB4049E6C66A5FC814A77709745E6
9A645627D45362E798F3336BD9996C42B37134CCBD6A4BBE9D938DAF6EC6240A4C4F4DBD4E68
1C77127B4D3DCBC7D770AF6FE20529F19FB6B332D0B6CC01B4E4B2ECFA05F2F768775B311574
F662C4487683A979D3A65E824E55EECBF4789664EE971B374F62F34918524BF9671A57C8A7BE
A7518A1D5FD3B27A5D116A6B0F9E3A9E4CE276A5D103FE6A4FA0E28B6F68F5A4D89C032B298C
B03ECBB2E1D94A4199C6255D93BB029AFAA00B7D6E658713FAF433F2777FA3A0AF6F898D88A4
D32FC6C3E0D8BFC67CA1AD7B9D6FEC4A2A99325D83CBF1F6165842FA8D033D7682EE635A5DC1
185DE824BDB8EA5BC7F3BC046E83527228F17459BA440F783D08F1DD156DC0BEE9E8EAB6F8B9
950C39DC03000F0488EA4071047ED99C550FB8AB843AA639B6289B7284EA8E69AC785AA88066
D9F3D4090D01878D960DEAE07C2A13B8015556AB50AEF2BB8FA969764D3CB40AD44D5A9E548D
E2BD511FB8E38AD40181ED288C8FF88B04120295677DC6228939DFC33B7764BA80C32D4664B6
61D7407309CDDC605428A7F4CED1F86708466E0BA2F05D4DD7244A803341D0B0D86E48DECC59
25A75DC331472BBF13E3D024B85ECF438073303ABCA65B8309BC57E64AA97C244F6B89E82B17
F68D520E28182F101116F48A34E349107DCC6ADD53F2084CD42720E35946F520E56669BD5EAF
BB02185D6EADF788D2AAF54D2E2C2ECACDFC7C91765BAF663BE838114B333687A1B7DBCD498C
8A28876426B354E6B5556EA862DE3C0305645B75235A32A2AD5DA5C9B9CA573D6C88A3CB4CA8
847F60F731454F264150DE6EFDB9BE02E6F5B868DEDC1E7C55F2C46F99F80AFE84260B4D94FC
5947754F7D98E96D932DD3D13E78ADF22B9A06360B38E7395B7E2339C07FEA445F16C2022C0E
B8CEA6EF469AEFBA3A398FBF747F271C26E1870A86732E4D23B9BD9A564CAB079620105583FA
E5EEDA2B5395E39DAA46FE5865D29ECDBCAB4D5FFF236CA8834777B0D1CD347DEEA5EFA2F387
006125E46AF358867E7CCA258AD4A5222373749041225381D44BDB3BFB3661FC5CB3EF365444
B2D19559411E3861C3468AD08A3330D842F16439E1C7CC62F639EACE059BAD656B292C9D8C3F
F72FB53CBFC7F942A57C78A9B4EE3C531413D57C2EBAABF4F32956626AFCE2BA1F7FECF1D36B
B77BFA4DEC303C0F3B0B011BF3A079A32DE973D5198F82771ABE8017F9D0D40473B996CFAD73
A36D4DC52BB211880E1924CF30E191C1BBA6FE59F54E0F0DC2471BF45830ECD99893A96E136B
1A45EC4EA86E357A5A8BB49B2161AC9A7472454D5BF9748F34177036D448D14BE4171F0B81DA
E7008F0C3ED828FEB647F0D06661ECD3997B3D87648CA02D3B6BC5AF94CBCFA12EA2B41DDE42
B61DA7C83CD97B66C7C0EE10EF0A4EC5E063A24B5AE434C55753E6A8245A0F745669801755DE
324CE91D1CEE35E5B44CA4D6CE8DC88E15057A20B14035DB0B84B4E9D938F68236992C1A5F3F
7620D04972807F8C4FBB3A610B5E3C5295E2A34C14504E2DD400019A770A8F28344B981DC493
976B115228E575B89406EAEB7FAE63933FD79FD29A1A489DC4B5C516F09830CF7DF23889ED50
2457176F21D1D3D192EC42A5C39E7D301D4BD47CD9B56191C5CB0D1923AE941B336451EC95B9
519326AC3014798A56C22A9CB24FDDC6C46184F14B6068854D0FDA7192F97F7B783B7F51053B
3DCFF411F4C965649F7E61880B194037C6C69CB15907E7989F4188B1B1FA92CCB2EC1F43DD09
6B3B1D991DE5882F43AF1E023F2A4437F684757EAFAA011EE65F1D9507E79C44873366253EB7
84CDE128401BCFFCCCFC56DC8900376552F45397EF8F5D40D5D1BEE737C6C307A475819A5D33
7F4B02BF28461EA571CDD79F39F9491B37108525EC550E9D8A90AE63D56A1A733CCA38407505
C1A7690C67529EF6E51E117ED62274135F8744241CF456F827E15D512E78DFF679A117FCD7EB
45D7818BFE675607F002E8902B6A179B4210296EB19A6B5BC646371784FF5137220B6FB81DE4
5FCD8901A4A0FCEBFCED40F456F6F09D59C66B0BDE0EDFF2070D64B1EEEAB48C1885A939463C
4ED7E10D194A31F9859D58F160C881C7E7679052EF3D0BD0037088C5BE74CF9CD8B441655AC4
C21C063D5CF157E63D154E2A3C0FA0A1B796B7EE86207252EAB2A8F6BCED4901CFD178EF5B0C
BF5EE7CD9270AD1B1055025C14AAA045A9C2D6F01A9AA133870EFE0A7FC63104EC2B4AFBC027
7013E787E82B9581B38E70F585F4F2E01E4E7804ABE534F97D8F92C460A609492ABAE7D236E2
70CA04C2E5ADAEC2BFF1F219208B2F8BF5CFB5F13EE94D3B9A601DCC6D9AB03EF624DDF287A3
A950856F44B3A31E54D64468BF8BF92F4432937DE368FD31D7A2E0710CAAB3D479B52105E910
787A4C6A97C11496550971442CD159755924C31ABDCEA68A874A9C6529DB2563BE8880576C07
7C4C5A20262C89FF4391ABB2DFCF24500708D191BDE0FE49FF456AF3D8355E56B0729BFDEC11
884ECCC7CC061B44F48766D6C2F31793A5898A8F5900587995A2A19FF4619131F5E665C98C19
1C2D6F9511DA129C471823E78138C038B17314B37FED7AD3190C938F040BA89E65EA6DF47460
6138937EB395AFFD6CCB55FC0371F8BA2650CF2846015A912D67A848D29B06563A76A65B5CDD
EF34D1B76DDDB801B3CC0B910B8487BE26DAC3695DDDEFDED0347228D046AE30B64637C3DB66
35E697493A0E72AE1C2CFC611BB42F9138F608DB7DE51CDE8520CAEBBEB05A29F7578395CBBA
7B01DCF6AE7664EEA3DC1554A62028DBB478A18F6EB6EC084917427CF6D40689468406C923BE
93E0A8DFC250DE798B7211E91855FF7CD3DFDC9D0F67E52DF1AC3C2020B593C77E8A5E6FC3D5
7AF2957B4F876A90A9493941F316AC9C1CD05F73C1301537574A7EF78D73D23C31C1D4689387
A2D4396185442858A745B98D81F2580586C88D6CF54AEE1517549241B59292C8DA1F6FAFC3F6
1F2E82315ECF37E5E8306F4FD0FB4B4D0BBDEDD2BA55ACA3EA3EB02705571DBCDF339F326842
0DA8A59DDBF5CF721D9BAC5A1BE8CB3C0B4FF98D6B15A2DF24215EF121CC06F4700F2609C817
C7C4A0659AEF7C646DDF125E9ACE18348DA6770D3DFA3B9486D9971834A7EA6881368A9612F5
293601FAE200974434D1C24354AC8E9335D5DCFC27D447CCAE4B0923CF15178484B24C944FBD
847A64B146D0F77DEB7665247E855C600237B1E311FAAAB4E80A2B8058F6F26054D111E94142
1A2A143F3C4106A506F844DCB8EEEE5ABB05C2D0B4563C1D1080B42EC330D3DEBE87B65D9FE0
A684FB5D125F7EC7ADD81FA8D82E938BD2AD25E1DF6E473BFD81659317C91BD2256FB4164888
73DD9D67CA6D52BD2C5524903C68989C3F5132F029EF0A078B8C2DB830186A2DC9CC47B9E6AD
6AAC42FC7A12BF5FB5386C558A73DD4AD02D7DD4FDAB2152B138326D968EF837B79A3BA3C0FC
A3A629D8143DD8B974F8326851AFE08BAEC65344751A2B076D71EF4F49148E6FC9F3CD520645
604726239FCB202117EE1CAA906E37AD6CADB6AB92B1D31D277FA27F6930ACB68D128CD0AD70
60C4960C4B409664C8580F1C5F3B93E673A74B8094284837117A644F0CA9398FDAE7CBB29DB6
AAD38CE5CDF855E84B3794DEB9362E1DAFFF74ED1E87561A4D33A7B6C93D18F231ED180B0D11
2D789C9E7B35B31EEF4D5FE50329D6AE3E9324DCD038EDF01F1B10E249CE33E8BC8E77E84483
96FB9B74B316EE1A78F2463AF742CC468215923BFC5477A74A353A3CB7286AF8D782111B09CC
436ED7E7126E5C70122E81142DA5F1056694F2CE5D5706C6C3DD6384CC42563E5BEA094392D2
876486F313B8409A2A03CE6718B7F5A58A6BDC7D7E3967D6F7D2F2A1652D578C0C43438B67F2
E67AFCEFE2F1A031330A1337D7442AA8D15A4B1B0DDF56AE3477599A1C04370BB06C5075A9CD
D5D9A6BD26B3901F46D90B45098E5940B44BD1485840CB585B8B8BA7CD45625803FC1420C850
F434E84DF2CDB1C6E2B48716DC287BDBDE64CF54C9EF6C3DF4BC3452798A72DF4C2AEA80415C
9521648EBE5B65ED763B5A393AAAAC1227C1E017DF5FF4F2428423373BD6D5FD39D90599D30F
8D39740D6255FB22ADECA70C5EC3A8F87A59EF93EBE91BFD0C9AA2BEE6B3748B3914752F0E5A
34D2624FAABCD7EAE3D4051B088C9AE1105B541DC62EEBFB0161D05818A73DE9606A3BE82B2A
37D1F7F22CA33F57AA00A40F3189FB57BB46658710E278833C08F3C5D428BCA99ED499E1B3AE
16892C9ABAAF45E29C7036D1B0EF9F17FC51399EE7E7BD85EC424EC4AC17275D980FFD2EB1BB
92E78B2B38868AE908740E0CC26F414334CEF4E8CF5222F46E1AA40E0032E59FFCBB395B4ECA
2573730D1965B2D4939F24A154B6E44334BC0C465360BC2827B14E03E0F428DF065E9F36D256
E9A76F41C0F81747DE63134EFC9CEE6DDFF528FD0FE979237FDDA7782127B2A44B2F97A2611E
FB1B03BC3846CC19C86330F9D2B4B557D47B5367D597E4964257C0109A26DEB44CCA07186DF2
D26769BBCD6BC499B3717D6DEC05675016943C69EF60BE9E2A004340202288D22D6476A05A27
FFB9A4C7A2AB606619ADF733C05C38C80B1E2300CF34A1E32213B83735EF20991D4C487472B0
571AF8F33EAC2B12E0F302C63371A42F1F27DF2027211D6ED6EF86766E35151B67AAABBA4B46
9F5F2164CECB46FB0866EEA5480B615D6F9BEC31CFC9A898148363C039BA8DD87FE65F1F9C8F
754A1D38B643BDED590D7E4B45DA77B64FDC835CB412C5CBA906DC46A7C9D3584B4EA5F7701F
257DF04B12274B3833957D2869D52433EBD119E69278D93D7423C0AC9AF9DE81B6CB125C02E5
723C495492060D6CC6B4BCBA6033601A6BB3131A474BB29FF433A1F3FA9EDADAB29F591F029F
ECBFC5CBD578BF738D57F8AC962C6C4196FECD4CCE3B8679A2B805E736ED48F01E027151421D
1AC18D5473F299FD612542DF45DF5E8CDE582D236BA5A3A7554C7111BD2D9AE4BFD5D53C025B
BB737716686C68645C01327F7E91AAAC5FB9B31EC344CD1BE4427C612F3E397C8C9756C7B30C
D4A31FFC6EA5C0BBB2453D2FC5AF8CECC5BF27F3D22E919E9B4C70BDE1E55A39461821B30266
B8DD029B63683997CE276A28EB79E52DB38E3E00FC6C9F0C98A2ADE2A3FCCF651329F33E754A
A2637EE13D8F0275BD9E3670E9B6DF5E5C7B60FF2E9BC284895179A6B54A6501B09C90CE1F53
7B181DB63CFA3502B27699C0FA32BFAEF33560EAF17035A22B24AD1A92204835506F9AB0636C
7E1C4B9BDE7B1E3C85A6746574082D5A66DD35BF0925B91BC10F973B607D990EA83AFE2B43D0
D12B61D5246A4B2E6399C626A2215C6B477B33355DB9977D26F0F4E0E750EFD66855852780E4
70DAE19BE56CCAD5DA484E8A1405860F582219BD238F18084A13DBA3BB6673190846660FD16F
243A0188B6626FBE383F47C9D115AC75810B9FC34F56F4B223D6ECEC3CC04A64D56CC48029DB
AD5CB5723F037904AA357A377635B0693F08BE60F7AE5E4825C939A53D481553C1E5A5D57DF6
073D9E94E402AEC39387B6534B10D27E16A85F20F20D17627EE9CFBF60CE0B42C6472C7A21ED
5FB251748D454C7B7FC51C447C6AEE85E84FD3112EAFB348EC75D99D8FE3F1942C261D1D8FE2
1CF2D4A7350F05B983594E1F47BE21E1BA9A263273ED14B9161B494D50B9B9EB5FFBDFB088CC
1CFE9A639A8E405BED650531A96D1C3313617FE5E0DAB14A2E3E95CD4A0B018A08AFFF8C5E0B
9728642B9BB9905689CC6FEBD1072CC9881DB5BD7F102BD4CEAC2D861F3AEF8F1E24DEB48A0D
E5C10011828BF7F0EFDA8992F6EC5C053F050790739D0D9D04272FE9FAC41B86562075AB2030
C9329A89224DE27FA74F61FD49D8CF7F13F0A5E69600E075A6090AECB2DB740A6507AA28A7F1
57B20558FFA64A4DE9DEC8F877EB9DF61ECE54E3281AE89C207005EA3C9F5E64F2966BAE9DB2
21365367B95AD4107A842FA8AEDA660FE530D0B37E5B8E46A2956E7DAF0A5231E33FB6D96395
CFC427B7F6866C1730BD33BF55A4C43A769585D54699B5B956751B6E441ADD82A2E5ABD2B9D3
3608E9333F408B931E77D48258415A789435EAFB9A164E651162F587565CC912731A5F840D03
9CB7EA0D281A34BBAB93238A449D8E8DDCF9B36DF3D8DD2DFDC5278B98F0BC3E070E3C354A3A
39F9A97A92397D6D0F618F522A600035529518D6D90420A8D79AA2AA712CADAFBF5DCAB8E183
D4AB84232717D60DA8C9711DD697F2F46A2223DC3E48008DCFC18618C35D237FC2D7A84F709F
D570BAD4BA6D5BB74835E3540746B0535F04EAC2EF06A74134742AC32E0C4D2A726EB4155C23
3275C7348BBA01064F695ADFC933B502006D654C2B21213918E177D3E4751908A3A6FEB3E612
268DBF27A6C253738D34396F50EE834F075AA4AEF14FF3A3BD5CB25DF06253212F75ABFC9BDF
7F480D66719C3A5619DABBE3EAD77F6AD80A6B7A6D83AF722BACC170293F9A5E51BF9B4152E6
4DA40806AF4417E4FD9308A4D8EA2645EFAA35B30A6214DCAA83E2F531DBB02AFF7015EA1149
A333CD619B7B614BA3B5069ACFD80C2D4DD5D19BAD17C3AC5FCDA1818719A9CAD9913E187027
7B6383290E27702BD87E10AB54B531B0A7662398585F7B67CFA1EB1E252E5C477025D77AD4D9
D7D943C3B5F6127EF5BF7F422CA9AF4A648E4213E1D6A9B6F02AE5119F91385B93F00C438A27
ABA9D0D1E52AF1CAC6A56C9E2FE7D5D37B9EFC4BAC853C23D07531F8F7879313247F9A978468
5048DB25AF1CC60602089DBA16F25E9AB0855D83BA874C00E28ED5633EB234EA457467BFC887
27A17C570FFB595ED41AA2EAD4D68703D0D70EF899E43E3ABFAF95447349DC61EE1F070E8F5F
580D691D80913A1DE2EED591859D684670E5CB9E3CD6354DBB51F66B5DB8469364E709033D02
C5F13179E5400C71A9A82FD4FDCB5DC94E53B116506B41EBA9B34741D3B5BAC7468FC68527A1
E51C12A45DC6A61C55B21CD9F8C3FCDBCD037044833BEF5B8EFEAE27A1C406DF2DF775BDBA2B
055C86BDD754577C83632A70D63023D3A80ACFCF501D3407CD7B880D7BF5C9A6EF55F643AEFC
6306BD9080505AB7395F809BA5BDC8CF5BF56BFF4D2F2DA56425FE88211CA111426425D4BD5D
1D606C1377C2EB7014A6EC0392D74A059E5CA21BB6C505DF776AAC0704488DADC008DC89843F
73806262ECB38180595CEAFC29311113C41E8FEC8A6BC75A4CD616A02607B1B0C3F4C2423C98
F45B76ABB69CA4E43F37E2F3CBE32A0947B8FABB8664C0070D72B4A464381DCBAF741319E659
7D5E648BA2A11F5B7CE3A45A83E094A1537E7E7DE0150210A675EA77F9B563423F71B2221AD3
FFF529649172CCE6F6493AFA7D2FBCC812C269309C426E8570C6992255BB8CA8157C9F2958E4
C63FC2CDCCA1A3EC1AF935CC9C35B71CF779E87B51A16DC602BFDB4C9CA1653E1BD1AA6DACB8
C038276107AD61D6E33D65B6B98E28091D4568B49DEDB9E9023F2977B4FE952FECCB1ADE607E
3C60D74DE8662C1A08C6C4F6A8E50F91C62D104A7812DFC67EAADB90E674686585680A0F2EB9
8CC92A793F13DF552E6C695623CD5F161A15807FB396DE2C4B32E0E168D765EC0AC448089A24
5B65FEE72EB77E1593EF910B1750BD29BD0DCF35890311254BE990D9E4B558753B34600C67F2
6B24E701287462CF8A7CCBDA97CFE5060A8C36F8CFFC8A50555C576B443D6556E14541F7C5EF
1B6E11CE520946F91918E10E90BA750FAEB158A82317039AB53ABFBE65B0D3989FE4128FCC22
124E162D559F03AB07E2FF289087B48582428CB9B124BAEF00A16D4678C0708BB70F692F8ECD
4D417B8DA0371716D3B5939D56D8AEC084CC07D0FF21A5F69C1EFCCE09FEE5466D7944B1598A
8152EA86FD11F3FD1FFC2D0BE04EC6C36CFC39CD29DF6F32E4A030548333EC9C9ED69471A989
368488364FA7C8D83992D35E01868114852B9BC5E66B43BDA19F82102261426FFA730C327C16
A92C2D840BC951183A666C4761B2383EA8698B5740671142E07B5161B7988D39239AA04934A1
928EE775D311C59F12D3BEEF3CE7EC9BF6DBC9DBBFFA124AD23568747DEE4AFE3310D19FD2F0
31D782E4FC8980D315FED5BE69715AE90F45A26D5DEF008316DB5237B6254EC881F5F42B22A7
70A9998430DFC54E223E1CB1F2C3CC21CC968C3A9CAD2F935699129A0B05E76D7850FA8F630A
6A76B6B428F022C17F7E72A0AD107F044CE76574ECDE1F674DEB9DFCFA5C860F199490958B06
18F599CFDAC6B2FC5040C32D1632428D250F97A5E5C686C2767808C71A3D6E86F619D651EE5F
BEE3F6EBB220CF2E34E3D0B7B9EC38F2B0FC78085867579D98DFF2DEE6ED400B19E34237FCD7
5BCB901F2E6A3DE5D721A239BFB003CB4F5C58DE63E8F7F8A6647C06275236ACB4C1199EF950
EE7CC5FA7B0CBD4852B3062C1CB39137C29289A42CBAD2BEFB0116F948EFA5637F75C0325848
86F85008300C3B12E01D9B15E5EFF2D44FBB3C6FF28694298FD8F8DFA6817138DD586FA00D0A
D7EBF5CD8A63949B54AC4D90FC8863490561EACA5207259A76E3EF1890A2B59099C14BD58F42
CF224C34F1305F4E30E9F12E7AF0519E80938035A2728D433D75211C73B9740EBA4926B9676D
874E41953C4E59A48579D3ACC872952A65ADE2ABEDD6128CE9C40B058D126C68EA0D40B0A081
CE1604CDD5EEA12AC901CC12AF8771E39B66487A9C94B35D882D46C5F3C43BE6AF8654CB09EA
74A24A58CBFF5A25EBF7D98E08DB4CAE7D71F112503FE689A27D75DE94B94D7F0A8F6F4F9CC8
29C1A441EBF4A22A85FF6479AFBB1A4252AFD7FABA9B1CAF518F1A2C67392B44FF9E173A6621
8C1DA8CED86B17861052E3F9B758D06CF8864B7B8B7B55322A5E50629229FB515754697C0269
41F7AAA8C6D0AD6682440A4908BDFF03C4D413C3A7353F6C9275788610F8C8340EA671506F17
4EC79EB0EBEC7BE8E62470601B32ABAC9AA3E2678367063A57CD950349635726DB14DE55B488
8E481DE009CCE2676EBC510CD94A12ACDA187D096ED6417AA1E8B781299CED175C4243EE8D51
E1AC2382FFCBA41F49D19F60761052E59B75A2D0D4CD2EA45B1859CF449B7DB95FA7311F52EC
28A8D028D2343A958DD54500756D2CC13BA81E72B69F01DBFB636C9299A2F0D3A147740AED1F
D12C59B2D7D8F0761A86B140D3545F38A21A8D6205A57CB7160FD7C5971266FB21A518CFC331
39AFB70DA7485350EE8FB0134762604617AF0ED255F06616DE76569F48A2474D7F56A1829DF3
0034F290B30E3F2B34C433C11C1DBA265059490AD1704DA42526125EB03298F86C56495FF67E
63B06416A7B4FA2C2D086FB7E9A7EC218DE891051219E566566FC1B9C16EDE9FD2293183CD29
16E3572B0D770356EB2BDD7FD92794C270D364D12D14DB02C65A6E6D636C8DC0150372FAA09E
488E28525048EE8A866FE1ECC868F6059597225BB1C588A12349996BFAD2F6D0131F04185E1E
FD125A2B4C4B8F2C32B6A307874B0D94DAA68CCBBF71D8427FBE1ACC6B3B279A52AA66CD6F5A
5B1E3DE70523ABA543F44074A6491ACEFBC6DAC617F805F99CFDC01BB5DD8500265878FEB2D4
E75BC616D30F63D11EBAAB94EA65A4BF64A484210A08C0604BF0BC0275899F5AF6D217B914F6
AC9AA108F921309F9580701530CA11E8B5AF77D22767151FC64BE8AA6E4EA7B595E7AD726ADF
A2872D007EBBC41EDB3380CED9743A88424A665E37B941DE405DB5BDFCF89D4F8BFA6A636C97
3254709C81BC54570266EE5FC66FE4717CCBCA5CC309755E8AA8915E16E4C3D032E2D295A2E3
9F81AA5E712A29DF3D6F1DA12B51D414E60FFDA3499CBB74847210196C06FDC32A42E3417319
8ED7A9EEE1CB52E97C221C79D0BE506C6C8B493EADA00E172112B0B525E9EBE24A081518432A
F7BE557EF7F37D1CC2DF1E86AF4EF353E8DFD731EEA986E5C203B343320BC3D35F4FA4423FBF
CBEEB1BC75F27A40F4D9F5F5282828E9545EF54F5BDED9915385E400BA937594325973069070
71E72887D2C648989B7A4183FA3E750FECF13B04FDB5FFADA6DAC6DEFDF7CBEEA85EB154EBAC
F8758A185B3EDE6F3BCC0CCF0A878DEC6D1121198361FEBE57819539E575A6E0CD675A3535A1
A245CCE669B1C31D3E87998A956EE116369CAB04EF8506ACF9E8BD2E4E43BEBDC9A067C4F1AD
A019503E9725E1C44BDCC4BE132F5BA29B56B7E281400019A9122D02D49C768346D1B7E30BDE
6E184E0107507C10C132939A052E6084B66B3A30B6F4E855D489F12C9AFCE7714E68869683A5
C74A5697CF1B4D4B9BFF4E9098E98FBBA712E4E717EBFE6BA439CECD1A99F6C372D264A4A255
C3B99A41A2F04DFF796C9EECCC20AD43B5002E8E3CFD9F09831F4F02F9327E23F291C755D3A6
E57D012F519FA46A63B32FF9A98C3640517D077EE1A472CD000A80467B28027AFFBC9904D19C
EBA6FAC4F1EA359AF2F3142FCBD6C28C1F2B2DDFB1D6799888DAADFFAA52EDFEEEDA38F3F94A
79C79507BDB7782C779374A9BF2B0CB7FC5A216CCE50B8446FE894E9419E3EC6F37817CFA6AD
52434F2415369128209778A9BB1A81EE08E4F0842BC8CE8890636D6144E9BBB416344D9DEA5E
65719B332F66F9CFEDA829FC0AEF7919253ED138C92C0FF7BA23BA9EE1841A4491ECC983B1C1
162B30B75F8DB608CD41FB8FA402AC96CE57D6E27060CB88BCB47FFF9132B63814964E162EDC
F06A2F9452EEE25E1DD7340FBB273F1759BF9FAA1B2D252563A97ADFB26412C605C2C87F5725
753497293A53FE3B708D2394E19BC998AAE5580A62BA5924A00C90EEF883A69C3310C64E52BB
C41B70B89DFEEF80B73556FAD1D947A079E8D0BE5BBDBBCC689E6C379F5F6430E44D937696CF
99C6F3A226E27E567D945BAB4997BA2A7C04FE4D9C2CA4691B687B2EABE5188E302493326FAB
C6B5876541C4666A26B3B65C228AADCAC6BC98760F3D3735B89B2A2E3D43FC4CF6ACD11C96FC
6C3610ABDAAEB5FD4C7FEC50474BEAF06684A49B6B245956FC2936A68551DF931353C2939326
36FDF56F0DA797EC113DCCFF2E3409557028151EEF5AC29077BB032800F10E47F79CCA5C6F5D
D75FA56638FA4E59A085532C7D830808B122DCA20D9FE537A04F5279E6F96AF0F0D180EC5243
0438E8CD1A7C79CA9340C0639367FB2AF768F36637D67F7DC6C71B14DB7A35C567A66E460EC7
0B91357D13AC281D18617A861AC04A6B73608467999B1DB7D06A52832482FB4153D95E6AD9A9
885137C837BCB0D9F2AF4BBAD66C9AD04265A9BFD47DF89D6E2E990DA21CAA3883B815F541A5
9FCCD6DC47830E5E32AC631EB16E1784D94F5A31523D31509B4FDA3F13CB6D0535C7B9D5FC50
EAE72B74C5596E271CFDFACCCBB66735C67C32560667A2AF34EC48F09C574B30D4510E8BEF41
E6EC0DF52C2B26344B9EB25501BC1207C24B8844DB1852366A48A991C345A8B1484A19E7AC52
BF541D2F95EFC749AAEB3859E9030FB12EA35ECE6739FFDFF7A6809848FE1C04A6046CADB0A1
2F541366B97451BB8D3AE48E96B7E97B5BBE5ABA1B460820B24115A03DC01721F7A423650DAC
1E6C305FA5178FCAB92386687B1D1ED0B07ABE6E80A7A46143C05D8A9C8976FE3D1761C05766
12CB9AACB370ABB8352694514954D538CA0F19197EBB5A93A2BB940FC8B5256B183C769D382F
61B0AF9C9A98FDE7BA8BF56C4F4882E0209FE14108BBBECBB8338A768692CE2499F2B612B6DE
3D617D16B5AA3BF42ED95A2B2BBC438461FF8136420417E2CD2B1A8FF07F1FFE31A9DC926D59
B968CDA1E6946260224CB22E598B1452AD408C56E8D085F90404DEE4FC07062C72BB12564162
33385EEB99F2B67C5A0D6B1044D29D972567AB47FC55BC918A704DDC2F30F12A148E660CB724
0A412C6FCDA1A34B7B8AC1025F384C41CBD2773FA11A868349DB8EB97AB311220261493A57E2
D48A2492A23F0DD6DE1F1A3D84F4F665EED8A7163C7A339D669ABE07A854E4B614C126CFB10A
E94E76E20C0B855AF9E96C46BE1DCEDAD02CA27692F792AD423135E4BB034395C71C6A87BB23
A549D63823FA513320AA22C24CB1EB499F150BE279199BDBE09FA0E5D2B0394FED0CD68E13AB
B329304424D14D1BF7C2DB7D5D78F7A857FF6FE7A9E121D3BC71D3E178779FEDB2F966A92EEB
6CEAE29A21461DA66535E418972DA8337358AC715E50562508CD7330FFB465FCB613BF5AFEAA
2D2E13CEF53DCCFEC3D7029CE1088E73174A9D226E174AC7A80EAF60CFADD4BC51F934F794BF
24AEED2FDA5486D883BD597EC42D4201B49BA0F89401129B0094188B698D09B1E82E2898E1E1
3FAFDE14F40E3F7B8E5CC25FBC45F123F48FA0D0A7846D4F94C27CD4635C8EB988C92C03F824
FC4C0E7DF36F0E01D36B4349FEAF75EB5D8C23E513E65F247F0CB86709944007B62313F4BFD4
E3499B67CD55A3DE0A1E030B74BC3A97B7D9AF2EDFA06A41BF4BBBA292BFB500255247026812
4B13EF6135E45E213C46AB4BC40EC5F57FDFFC62233A1D294EF1A0984F4399C925B42A2F597A
64044943D0DC84247E98D231C2D35986C58A0C62006C1E4C0D6FDC531BDF7FFF5183DF316D61
185BF17326E745C5B533E0B7A51433FF5691D84DF17AFEBF80303F9D5F05C797B3E767D788A3
BDD1191D7A6D576FE079784263E782CC6B284AE0D59EA5D60842BF0A7F55CE33067076597578
60AB8F0609E46E9B4036DDD034F5AB39D1B0A639BC8BD55FD4C800CF360014D16BFD3828ECBF
97409AF47EA32B61F162BFB3C58DCE3039692C566BF70B2A8B6F2CED7479DB7C0FE286EAE554
B601025D57AA3F26F1F6E85D17FA279899FB61BE82B59F6C70E0ACC2E600652304FFEF3E6771
C348E2C088F7837A7CF37CD1C74CF0B78299D26B5EC1AE192471FBD996FA3FFE6169087957C9
50B70C7BD174722FA2EBB27F6542F526D3D0842F17449389F3E6CE0B5712CDC5B1CEAE6C7776
0B8B41E8444FB992928844B224F4FFBE0A4EB44027E0A75E74DFADFAAF1566F957C1999F768C
AC8A735F17DF653F58BB9BA4AF0985A0CB32FABBE787B9A133B8AE7D68C1B41FD3E138DD26AC
083DFE79A8C879256E5BBBD14E7B31478E3DE8ABA60893ED06F2C6479445644E795F46A9C95F
308867AFE83D0CB1DDA4C68E8634DA9E30694ACE6EA93AF1D1E9670616A7AD444F9B6CE89978
062B81346D81DC0C058F3740FBD591408A8A4F6EEBAFB5D7772FEE8F467B83713448DBDDB5D0
90E6481BBD8636BA2FD30B79E9AAE4A98E673094FA6A597A8F0DF0B74C9BB69AF42F5FD4DB7A
0468409A39EA5CF8D4882B9606E881A59A729EECF60339D5225090157843A69CEE675AA56785
8B49FAA306D8A8D6BD630D7E38C54E88CCD548F96B22E93F780CCC6FBAD75976AA2D966FD300
429B03F166E241C575A0469C17E427ED8502CE6A49A8CE1AFA36D2BB914A2E0F2BE4B2794D3A
E15C8E5914B36BF9880B575D65B86C1D620B3BD6F9587EEB090CCF1AC48C73930D76614BDB37
BE7FF457AD7E07D812D10C2E425334E0E66F83F024F2FBC764F7E9C9D07A35EB9297BC7AA519
14BAA5055D2034DDC15AEC3EAC9311D99A0B9DA9DF9642FC4D5CE51ACCFF41402B227B0528A3
4B6FBBB1F9AFDCE1706BEACC566F054B3BFEF75D735D5C92656AA780E9F78D3D67933C74BB7B
7E1A3BA96BC716BEFB31099771D1348611184BF76E78E0B75655C18C42DFD2B39F3377633FF4
CBE887574EC8AF654E91294504A59D04417F01E8C6C0EC71802D74F55020B6D15AD0333F5F50
4EAEE5C47BDA9E373C09581B8DE96B4E6FDC76A8DD8F7B4FDF62DC852973B828F2F4FCD97C90
17EDC5E0A6BDF87511A896327E39267E86C851C08317E13B413C7FA7C4B180244D1A26524368
621142189D70F26DCE33CE009EFCC33BC35B211C67C9FFD68DE3AFDE61BF54A485312D6D66E1
6BA9022B97C73D77ED530E606F54ABE858F2210821328018168BC89B5D1F0EFA0C02E4C2CA7C
C4B2BB366131DDC427504AD454F6E8A314D9A5A4994F21607A2991083331F559B29930DDF0E7
CC86A2DA421AB5E26341F26B5C9B9F1772F0B244B62C4686A2813DE622267588C0E5DB3CB458
D2C490768FD6A0AD83DF55504C3E791554FA56A474C44A26256BA539416ED3BDB54EDC8A3AC8
61CE565A334ABC80B8DB73490595E01986B45B0D82693C41DA5BFAF12B9EFEE509F25EC7678C
C1E4EF735FFEF5158E0AB72DC3939E4F361ECA40DA40368D5516A55444957866029259BC233F
C3F000F54CA33E2B82C999674B22725990A9BA8DDDA889F8DCA18A64EE31C4C82DB2BD653E55
5B147536E03C8D550CCDAE2E891D81772E10A1FC43DF9A600E025E028704D40AAF27750C81D3
F0A8E2BA60FAA0F3F4F5BD7F66C690944EA6254A33DF2A503715510772F9D8822EB0DCD03FF9
2500374920E0AB941100569ECC2C26C393DD56EE48BC914794696A4211212E8A77B1A653EE24
A02BFC350E7E8577FFA1FF9F11B587E61C08EAE8D88B073B780F5FC2FA97F6B5DC9F7439D84D
3ECC2C67B8100EAB30D6CD8F07F2F2426749A47C7EE77541FB716463F8703B6BCB80F5BD066E
94CA265473CF95D4ACEE36D05CB22C83DCC8B27C7B6BCDAB943C899937C29FE456D9D71B748F
1B57625597D7EF30813823DF79B8E368D864FFBB72251DF04F862AB1D808E25B506804443959
3BC6A7DABE86E0793C0186D7DF54BBC6012FDE7E30C4FE5DC9FAC9171D62CE801C5B77540930
F5604850AEB85A13E06620150AA55137F66E6DFC97EB36A16A9311A97039EFFBF3E5080760CC
EB073475C1E9B07E1E23FE1F65ADD9F68EAE159984DC1BE07365EA94A90E2305A90D33C46245
6CB031BB031F0D34B570F42507560AB26AE4B64772CDFF3034681B7E3CC6B610FCAA65187436
00CD4889AC7551F101B927F16188792AA47EA95BB05E2EBE5C96E92CBD487106FBF63CC9DF2D
D0E0C2339402875887CBF2DFB17C3E32E1DA3EABEEA3EE9CB461A7898A1AFE29609E67AD6DD5
7C91964296FBC5F09F4DB2C8315B1F7D9D324A8F745BDFE3EC7903279D78DE6E129D81CFFC2E
674714666791C5A6DA8484577531BED634A6F7EA50448E68D959F743279B9A80C8885CFEE79F
47DF6B9196F79FA4383B8681ED4754F901BD36C5A63FB1582857254DF71516F53D04F8617898
1F3E9D10558C4C7E613754D3CF26957E0AEE795F9DEE25EFA913D3623D98C1F96E0AF34F67B4
306BF5F593A96ED074700673DBECDC9B2BB27558525BA7544029DD9DB5828C6D8E563B5BE801
3E96131B9E2B11D67DAF49A1ADFAE1FC536F4DEC7C75DCBE0D6741697FCFB8EC8D2D3DC85FBE
8225A86EAB86652E0D32A00E59985E495D975EFF48812495EFD19DD9CCD93141D361B0D1DEE4
8ADC0611D1DE2E8EECD62FE9A162542BCAD738167AC417A156212A8229EF17605EE9A3E2AF8B
5795784CB576C5D2C8688A849E2F04B7A2310958CEF0380AB87E39F1D0270E002A11B97F866E
77C1CF7AAFAE209A57AD12DB90DB20026D92F123F3293ECA4AB07B86CE5A9EE650D3D1491156
A6199132B271607782E30F03E4A333E5E0960F798EAA25418313DF13C5D4BB186C37DFBD0392
459885CAC59FE71D22B1BA70083CC6D81F800F1033FE0A250DAF09E03CDE1865FBA52D2AF2D1
FD4072AE40706C969C1BB778CC4EEB3FCF993DADCA323BA2C6B72FC9B2C4679B9868B19A7E58
40041BAA7629877B130A05D1594C855B4853E70C8A1D1F58A20438C39C1E3800FDBEA47EC323
831783457FB0BAF72C02F0EF8BECC7D5940CFDB008CD258C094980C358471A2C6102C83EAA60
5523C535EDF3A96E699AC6627C5DABBBEDC9D06FA6906A3E524C2103CAE0E2DB5F926A1FB5A9
ADEDF9AA8663B026115791B810FE0EF2CC1E1BE6E7FFF7DDDBD27CDA85A34B3548B2129A5DCD
9071BCF917D9C6BFAE79F41DF7FFD4303525FCEE0F8D47179ACF13FF109E748B83584AE2C8C5
7FE3392653DE7EC742918F68F86E4694A8C9C3115A9E459DC45557A492DAEBBC306B73DFBE5D
27DE382E17AB54A77475A79E38BBC97FA60C738C9B017BFA6AB85960F34632C6010E321668EF
6647698D00DA3407DE9599736E3106D8C30A13C63D8B447506768A6771A3C18C7028C1E28983
1DBADBDDC8BABF7F5D2FE992594CE0F01ED186A4226F8B312329D30431148743E29A1C4E81B8
DC2290CCCB1B1781A397D4510DD2D08C81862C66353CB95DC06C67F2D783F0826CE879CE8BB7
6C93F57A64CA5EF9A563470B1143DB3ABEF694645337284C1EED1B94A8EB67F62AF99CCF1263
EE69F09109AA7AAF5F39A9488C7F0A1B3B59CCCF641B0789305B3E27B6DBC105C385B06EEAB8
CF7BB5A6A514BD597A401590DD3D8DA4E0C291621D9F2D9964A408FF77025134020215A605D7
77D1E509789DDBB548DD22A7C5A0C9FC6F2B84F9B94067AFD956AFCA3DF219F51671692A7EB4
8B0E91741BA2D2F3F533AA458F7C373ED76A155C18094E372F8C4766C93C33B142C87068E00F
9CB93ABAE9291F33D1AF2560892C50A3EE480BC84C46DBAED662A4BD34774E36310D91BFC3ED
B9BFF3D0061C5FB6207042680713CA4C272126A4D40352320CF87AA4C0AAB5B77E2B53792F62
6048BDB646480C5FDC25725FB6A11424D3F521D72730490ACD0DB15B91E94B11CDB8350BE714
1209FAFE5222129CA80113D1CAAFC9E5F84269080AD8ADD155BA2307F82D8DA59AF65A328A81
EEABA59183F6F12B9AD4EC9A10EF0732ED2F05A3BEE8C396B3663E993B02D145A5EE5F66E30E
CEAD5A7FEBC39BF46EC8F6C4CF2B31129084A58664C4A4B413F99B831807561415A15E5EEC49
585CE724128F53C19786921430DD793960103153BC86F58C760132356E51BB62F093B97A4ECC
7DEDD70427F00B45C644C523EFE1597912C4D9F53FA7E8FC6C3608338BAA4637D6EF1EEE30D1
CFE8DF2545A07388D8376499566AEEA76CB191E8DB5FE05C9D91622F262BF5564ADC064A5B3C
AA5569EC5233DE0A488CB544533FBAAF602CE67E0B09F9BBE7E0BADA637D26A7085E80BF5DF2
E06690306186F13A400B726A9BC0021A34BA050079520CBA61CC3D3C61DB0E5909C2FCC82E31
4DAEDD2228D3D4173163FAABFCCE8C4ED96829B0289799755C4484CBA8FEC61C3F53D2319010
62677888699BDB42672629733D4FB910C73B307E8DCB837F53346759455702F04A42CC42325C
29D16F4ADEC550CA0CF5C9B7EC60038D7F444883FEE1A93EE0673F67798AAA71AB3B1EDF95BA
0DFF0F45DC9D6E0588089553A091962BDB39B2D19B9395380DE4D8615F054AE7A1D8B26A16B3
A0611469ADA90C9A3818D08C89A7CA26B0CF98DEF23C8C123977F2087107A1550AC33C50F076
A30B84519EB46669EDA19728C6F4455D41DE791CAC6DEDA07A108670972C428438719F847BD6
FBA1CE8E7101E972A7D5924E749A2916FBED44BCDB2954510BA71142D7708B38DB6DF559823C
AD34881594717BE8D205679137747AF78A8AFB389175B5826903CD5819726980A7981098B02B
2F4B47DCDFD89653538327E431B843B4FBE0F0703BC3E211BA7BBD965B0407E31946757D1009
BB2EFF7E611654857FC11756351C0E2732BC8B99B20EC5E520AC9CC638010215CD5D7AAC58C8
BC907B6010F6CB74396B7486C0906F9B879B67814A23FA9E89C79F2019A935125EBCFBC931BB
9EEAE79ED464065D458E49AA025660B1543B0588B97C0D755430EFB05154814F5FCF0E58F03D
3DCF0C01197A4D4B1D94B0357CFCC6B6D9BED2F84C084AC953B3B247B46706C71E8BD717B93D
602241B21096C3E6B271B758CC50F2657481ABFB0A80B54B0D2F0AC2B14D0F552815885B2EE6
399ED0A9A2D3C133305339D97E44CA08D52C9071B8F34D06B2DEAD4549C591719BEF6194DEBF
8E7064C18B15DF49A73FBD1B32C1F16413F462857A76345A462419B74DA65FFCFDA65075CF3C
6201C6710BECB92696653C0B927000B26F5289CA6FDEE0EC2C39945ADFEAAFE397907A92D266
EC4568635EC21FB10C18BB9FF8B975ECC778C77B7E8E66C9D508E23E136F7B1C2E6E03AAFF8C
E77008005B13217B9293CE534416FBA358F1CD5CF26314E4E6880641D8B987DC504CD4F3E384
06E63B8EC62CDF13D0C739F60799AE269706761BDC78A9F80F726739DB2C211949BF1CB2F947
7E17227E18D43A875FE5ACE8446A887A14C77D01B5C9FF11C3AFCCD91C2411072632375C3F99
8343651BC7F583ABE03439CEBD67BBB3335B94193CB3CF36210C431A202B12EBD03D1AF9C6DB
B1F255D8C101BC17E301B4D37C8EC7DA0F797767C6EA0166C74411F7A5D54B7E7AA4CD62C856
99F314E11014CEC46FD5BB0C0B69A397A60D4DFEDA87B095341DF659CE1BC3A151376C2E7BE1
1A548D84F0F5777FA0C07DF33068C2EDB144719CEE27D1F6DB1FD83F254BE273BBA9CC1FB51D
B3ACA31D8BBE5AEA00F61C23BA566415E9A0E1ABC230F46E40065C0D9F2F7245C138149BE9FE
0FB69C0B945DC165176EDFFCABF56B9FAB33DFBE78966064DA91DB7706BB6C6F04AD34E042F4
C6FA48B0B9F96BF5CF68253F9AF738CF671AB6B553E23F34B6771E4BF150E6B6B0B170DD494A
8D1ACB6786CEF859F934CC7736A170BBA986EC19430D19B9F090ABADF9AC0943F36685966113
9C7645141E8A7A2DFE554F8397FB10064996783310500165171D8420D1ED8BCE593C42805A2F
9EFCB4B88D09AC7E6A4B23C21A84B94F823CB3AFE754E79B9C77D2C3E29D5D4BB0F29569875D
71D142362E1FAD2AD2186258D1DF52692311F53A608A276F70AAFAB6E301FC586B0F4C6D364B
C2F1815FDEE94EEE51BB72236F3D4B64DCECE6C7B21176CC09E6904DCC1FBDAB59260507D488
5F24270FE2A6F133D47CC2AF2AB27637ECF40EF51D8CC1352EBA3EF27C745663350C4EE97B0C
D24ED09A5BB618024436FAD4BC458A6B259BAE107DA6FDD814B646E95B1F39CA2C7E9EA5B156
A44FCF514EF96C5865DA6D96FA8876325A9F83B75C5D156ACDA42A69ACDAA7BB306A5807B013
38297F76D0CA3CA851F9178168CC5B1ED97E4723201DA85D59FA9E3EC837297AB2759B02F921
CA65072573A35A942DA915675DE04A02E5221B62D9EF635444A37E1686A816BC71F496678378
0A328F17D3F8D3754AD2606524C0FABD57F1D02676154BCE181F8B97CE2B0C0E0F06988F5AEB
5AA15E7B3A5F2080F7347D950D3B005E462336AAFF1504378DEF84AA51AA528C2CD232EF2382
63BFD3388D0FD290DC4558EAF24F56B0F74A674A3CB2E61A88F5F4E97CB9997B380B68572043
4CFC4362BA7B23C804C22793341388502F4AA4ADABE34DE967FCB82E12616A22067947F4CD26
AB2762ACE46046E73FAE30959005EB576A10FEAC6F307233BAC38DE2D70D037F56C0B0ECA2F3
A48D4C0CF69CAE3CE44B08E5B10D3F938131F5F5E6F4A9E211312B04709E73B246639938CDAC
FE24396907B7C5677335988E9D6EA7BE4D7F6850AD924E44D85D494023EF0AF57918EA99A779
34F389A5EBCC42E26B85E47EF7BCC2375DF221BB5E0294E3FFA8A51838D9ED322FB0979FEB0D
26D4E36244F5B0557EF0101B5C3D6241A1EFAB943FD5ADE870AF75E24F25772BB65B26CA14A7
034C1F69CCD38DE4AC79A8D0311978A8134810437E5A04B3363F16D4EE6D23853BC1298853AA
FD9C619279AB747475BD433D2186040A934A0F05B294D28FE45801A802DBD20AF0887B9B00BA
5C4D885643B7A645E990A49A8111E6ABDDBFF944070678E003591249551C1FD79B40795C8CE6
1F8FCF78D1BE0A44A2D32C199E46DF4A734206BD97A0954BB778C0BCA6EC76162FC4222AFEF0
4DB282A73412FFC5EF9BAB16CFFA50A8A259BA0FA1BABDA8BBDE95A321AB4196D58C12D8AF91
89EEDE485B3C951AFE3230189BADAF0652535CFEF04777F0C183489D90CADF9A6553473A18A9
A36EAE70ACD5E815C03E9964703BDDC7706FD7D14B668EA1176E438E49350DC8807A6E4EE528
33C6D110475AE6F96B6318A989B6BDC1D88D28C26606E3D71380CF186C2997E8194513D3F43F
9F570BF9C3CBF688060A12885355038E9754F89DBBD90C25FCC2922F11FF1934AAFB0EA11F8B
DB6C3257D7BA0F8E2AC7365A9FC76D3029325506AE25D8DE203D295617F85EBFA351FBCD7956
11D6FDA7F3BF6E34DF41B13138ADAF0F570BEF6784FFB896388ECC95087E0B7F425B6758D8A5
98D41A87B3F0075508B708675C56726022F450D6DAA8B60134BAD5328A36424C609E99B31480
01DBC05881FD423B95EC9772B9AD22A992062736432C390F55D692C90AC64A1272F3414C537D
FDEAF1BDBF157726C59083DD303A6E1DED50C6F5B94C61E81F9F138FD8AC67B673AB38E5CA16
6611C6726DECC1C0647D6188085056CB939E2B1D66E25BEBEAECE4B97DD342078BAB4867B7E3
CDBD2C68B9E7D88BE56D90573085C9DF10E10B19EBE83C8A1C41F58BE78B93040C928FED3B1E
98F354823619ECF7C5764F2D98E958A375A5F0CA5D884389DE854F91A766295B01FF8CDD420B
D2A52A41A0759ECED87DEAE73D27A1DACB0D0F7E4658FB724BCCEFA08B0C3D5BDC9CDD6A9463
6F8B7B4EB66971E8C599D5F15BAFEB89258185E3E935C15CE57AA6CF4F2CF79BACD605747AC4
EB081FC98BBF61D2623350375B860155B90EE6A159DEDCF7A33604D7E83C50AE7804E9A43462
2239C5A7D891859D31CF7A37DF61BAB489D857E93D5C2C8CAEE4C61E7F4E3316DC35FF616189
7D5529EB2656ABC3367ADAC4EA3342C2EF308DA183C6F40402E231586A37198970612951B383
FBA8E8C375123429CEC97A52B455CA8B384913E1527E77EC48AE423B6BE28F3F8E0FE77F8D19
7BC6FE350D817C8858CE5BABB5A6BC1276F905BA942A1601784CE8E8ED96DDEEE65D9EDE4FC7
D5BC5BFF2FC3A966FD25961A430A063DF3D8766631774C9625F1CAC03C135B6B122D4B5F68C0
659B1B2CB634D067218E127A589F87FD1EC9715443A08284837ED2BBDDE3325B7EC288992F1B
5166EA175EFA6FDA164E8391DE99E4A88F43199C3DBD617667D6FCC2561A1642F45D76564EA5
B0E925BC960CFCA1194F67743B854899EF834404C8596279150CC61909F367EB17924CA9FCEF
E89FCB940710E470A5E7C9CFEBBB8B8EBB2CA8CABD973EC4D8F32DF8A39E6ED4C520BF932FD6
7BA02EADA63CF55F33EC75216F75E29E2D6937379D61EFA2C7F83A187FF93E4F17A66CA3ECEB
26B9199E1915922667CD1793FD0842E6648FF80150D7A0A447F5FFA2B8C36507F7DECDE7EB99
2FEE6E9C8E32D9BD971771ED9D0B3E95190550058FF0E6F80576ECCE287AD895AD56DC8F78D1
9FD04ED854529719471333B1C313A002D8166BB91B2983E99A09812E9BEB52F5EDA7391DA5A2
FECE694761350B089DE41343F04DC45E1B4231F265844CBCD770EF5BE05B2F97434CAF711D61
6613108312D08A9B4D3A55B2DEDAF47CD5BBC2718DA7D18A7079FAC6A7D4F7CB4F09D4B027E0
5629C14EE77663D8B29EC009924B41F873E4024E092DF7343A1864C80B6EB8E4FABFAA90F5D3
9154FC4D14438A502E60B5AF432A90C7A48C523B4267534F171FDC02E57B9EF3867758A97BBF
9CDB99DC41758BAD49A7D780FA0BF66851B52D46BFA8B96E60BE89E4A5E78BAAB8736ABBE338
C1283CC1D2BC3A07F982122A3289E35CB097BE9C27274BDF3ED19EE8628BDB48FD587159E7E4
84F6F5005F22E636719F9327173693810F978816F739574DB0382222B9B717E394DA21A4F80D
5A95C552264DFA0727FED213EEF886C149D392E900DC4DDD0CCEC84C5DE5DFA3DD5F903B93FC
649FD661BF20618BCDAAEFBF9C71CFC11B8C68143068B78FCB3354FF5555A9774FAAE88328BE
D4C4996679E9285A00C12B32757C74E8FEF1ED1EEACCEA315D56DF2E814F2C8D75E80D3836DB
71C5D1CF0055A01C1EF725AB4858D73CD089B3A66968C2604F97C861A7484BE84BF95DBBA43E
A6EA2C455574B715825DBCA643BB023B77D3CEC870FD30899E7788986813915FCD3F909E3D59
6281B4D858A29465DBFA76EBA156B0761180BEBE2A6C218A51A67D400DCE29A3F19538DC28F2
9971A8B01B4C27A42FD9AD8A89B7FA5F188D3135B5567C8E0B87912EEF813FB15C63BC9260EC
3D7A6909D2295C0C31DC77B0A468CA4B7F801BB06A0486470201437ED678AFEC280DBF80C771
823FB23A5AF549CFF74620AB2EE1EFC50EE09F4A0BB4AB05579670940D20F01C61C7461F08DD
8560F5C1E0C73E0DBFC8532155A5F92162F05D19E6634446EEFFB764B9BF4B5E695E9B4D8037
8EC8406C588C3EB7C919BF154BDA4A878B45479F6111798DD6FAE11A29EA1E44934C82E6A68B
0025491A69037808D3FCBDCC7C80ED848EBEC3F7CA954CEC873F4E404A699A7A980BD66E9E81
2BF39C85C55A010D95B9AA147E5826D0DC8EFFAC979ED602F7414DD64CBF2518A5B71AF4B6FF
0F59657D2412B47391921252D0A723DCF2EEE67AB89F8C12D3EC1089DA75F364E4E6E1041007
2144CB14352C56F9D8D180E45861FDD26B68A02B5A86560F3EADF5367D8B06876ED8F79BC79C
3602569AECED48BE6423888D86C3DCD811CC26C29239210EAF574CE8730016A3AABF2BAA31F4
8CE3BCC43DDC31DF81883CA92F2CD4A7B1E136AF70037AD22207F8F5E5EC06ECA4C9EE9B199E
15590E9F59D11688D22CF11060E87423F3E01EF613FC230FDDF599D1277CB7FE6AAE4312282C
4BA8A28D794628136FA0C5EEE83CC6ACFD043AE7FD985D226AE4D91D00218964C161C4A0B147
E58A4D143917A592A8FBBA3215D1E3AF1CB952BF418C9B07A5ECA3457B591A0E9C49234DB043
99EFCF129AEA7A96694BED7073AE4502979F2F0286085B799669DC8EC22ADCA51E92EB0E2633
651E822F4910B716DE01CF09B631187A6B9935D43DCD1C68111B850B7F21EE142A7A48836D8D
E7F4E63D72B515728D9AFA7B11118DAE383ADF97CDB92C17075F437FA0BDF5250C251013B612
C593D93E8F9ADDEB8C03E1D38F56E6EC42C7FDE744866D4B873B725074754CDC10CB0262403B
9740596A661A2DBF057144991F0A1A4FE3E316095978A88CF38BB1B5DD0FF4E8BCCF1C7D5636
9CAD0C2EC29D56A6CD2535EF610026AD120B4BBD5151EDDC7F385B229E79B22121416E74463C
4D5246501C7B6632ADD04F8C460C7D5A505F29BB3F45343ED5D576302FF9D8EC1F400B190922
BBE646CD809A6BF2E0EB9E7AC66422EACFFA93876695B8E88ECA149CE738586A0CAF105CA587
8572E58ACF6D523F2BF3D410A8E79507A0E480AF8C618FBB459AC768CFD240F32B0B69265332
20552D8325D058C2D30B5A437AAC867CB5BB6C007717FF089C65FFA92C5C8D159E0833C54C53
040D448B93FB48B5FF2395E4774BA3764B6EDFA7EEECDB2B9736E5D7E427CE883C67AAB05B08
26CD91AF342E32F2179CB109F2228138978ABB9C8EB9B555C1269FBD12975929E91AEECF0915
D6B2068C7B2DF726FEC9DA54ACBD64AA808FCE20A34EE78463C4A831E33F94A268C5454A1CD2
E05A662786E7392B24EF94B7EDCF28428B52FD85DD03F7B38000F38C4C80BDBDA46F62B9A964
FD0B5B33F3B8FABE28538632F1B229418E1AFD6FE9263CC220BAD30170816AAE06D54541F854
B68CF72E08DFD272021DCE628962A7BD962564C054C0E6AB2742846899F9D0DC9424D820FB28
9EC582BF3B56C48D32DB2768406491C837B125B62AEF198E85D6D579899EE59B53271EC329B2
83DD4C498294A27DF14A783C517288E3B6B4CDEFD2489398B71A712AB154E55499E016D7862A
14BFBCEE308D95509CCFFCED78FF3C55510CF91DA90F10D3203706F0592400847639F47C8A70
D98F48339A3D7017A8C8462D6316BAC13DF9E12A49805E695A1C632C63E223A2799C84DAD656
DA6ED692520DB379C727B8375DF9D548F693BFD9509B3028B1EA529AA6EB737380A4FDE879A6
CC623AE8F5F992523E167791F3D33BFDDE0A516C6901A202A5C154A0E69CC5FECC0B75E61B9E
D91834B659805E8B7BF32FBDC4DAF5520A27D508689F692F1D69D4E0B00DD7AA134C1357DE1B
F8804FD534600ADA4790738325759F35D9DC3B077FE48817AA57CAF862713E617BF7BF09344A
74BD13F118D26D30C1511B20327C460D270E5475371AA26BEFFEF03B66564E0E669724E38959
73D98C7150F035FB52D8D328EEDB5C85E7EA7BE5373E514BCF881C4147DA0C1656523A95B63F
86B3017B93AF76536DC19979B9F617CC855DC3B8FAF171780D352F93AA78C3F25A0AF51FAE91
878FDA9DA3B094876526BF6D68A650008DC13D0F17F8445236FDCE4F725A82AA5403B568F65A
087169993A3E81684234620F58568D2801F344F5667140F9DAF63DED0AE4AE391F717AAE8B56
6347257987D49186C82B911A98F94DF8292DF7ECD76FF09EAC1400B6C34658B9025AC42B7DBC
EFA9173258680D929ECBFAD99CE071C35DD8D34126A036DAB27B3F2A0F4B79A509433784D317
7324A8DBD271401AC904E072ED118331DACC31CF4EE21D1A9D805971DBE8D17AD377FAB5450D
1C0448C6C65FE4E8EC9B4BC1FFA74D7D0CDC6D0CBF0C1F905DB3F02B944281CCC10165CDD730
2F4DDF57865D32D47C8C26FBD0D410E4DEC820B5D6EA0DD6B1769AC0550F15AE88C0EFEDBEE8
4B75949453669DCF1B447821480ACFE750D13F8A3E574F7687949B525B278DB75C3102FD4706
6AFC56C4588A258813C3C53DF147FA5F225E901A297E5E322920F131093304BB9B2895E46DBB
1D020EE684B08C64E1A159A6829DE9510E5E985F53454EC367507D4B84B80E28133254B7B60A
C194C776F734D6E8837CE23EDC94531AD2E46DC6BDC1E921CAB4FF785DCAE7B556706FDED6AB
4763153EC5F4B2E10491E5E427DC327C21B26DB2AC272588FC41FC5490A102ED1C2AD82B0811
C34CC8DB42CE97B4B24E194CAF230E58A04943934351805A9A0C5975E98C0F11CB0AE28C5ED9
8E52CF035F823FD449436B20CC0A913B7606A6FB2CCF4C7A12714C99B60940CCFE9CE26B22D5
DC1FFFA01C8E4A04AF28C9CA3F2A7CB2B33A725C456EFF23BB62B69878F8FB185F653F41C596
C9BB7C7A17CD9B5A07FC405AE7E182567621FA75FFBCFEF42E7373B2B15CAE76D7C07BE16A23
086500A789CCE988CAB9B321CF969A79132544B7D9503C7D30A4C86D8601743449D619A5CA87
879AFCEDA5D16FE6B31E17529D17A95C027D481B6C11FE9477412DED852C15A026E36735239B
F5063B7FDA776C1282B9F50F602526F355AC3516E5DF327C227EDD44E453B27D7074E0F9D9C1
9FAA49D3DE5138498B0569B4FCFF2041977F69484CCB916856DF1F07E40B450C250BE68FFCF4
D159FB8F1208EA8904567BD552116A28A95425CDA95D4FDC06E59449065B65DD2B7047BDACDC
29A66C8FAC9BF2EFD6886FD859BB0F256B21EF2AA03E6EFA6A614B222B84B7E6BBF2824713CF
D214DA92F04543AE0011D51A50FD08C4FE4BDFDB9E184EB32C399D3A2FA71059CFB9F6AE1CCC
DB4CAADBAE20AE4F65BC58334164F127DE5C476EA5BBA3644F2F24F0DBADD3D1E80DA16A6483
64C1BF86D0A76523317C7D4F46C419FA31BF86D5B700CFA640273BBB9D6C8AF13E7CAF3A2510
01F06DC2D4C8F57AAE5A8B4E4379163D732756D3A7B97C778DC8637D06EC36A951DAC426C14A
58DF97D2777E7B45EF2C3F9D35202015E420C5E35301AF195403F3ACE5FD4040ECAE467282C5
1E7A6AFC69936F6D81216FB0B2E3B3DD942DB10D9BBCE24E186AD3D46B49414CE148AFAB9C95
8E7339664510E2CC5624DB80A708A040C0EB2E48E8CC67EAEE7856DD36BA948C8A8AEB120BC3
28BCA0A629FEAEC6419D70CB8469D82931C1B08B8EF46865819F4D6E3D2A9BA5EA2ED7E7221A
ADB2660B474E576DA104AE298ABAD60F6607D9D03C9AF768707D5F2F299927D14BE80E258469
066AD3C2BD0ECE20975A061977CD4A1246E6B545E7E9788BD51E04DFD285F9636C663D7C6AF3
64ADDFD0336C6CD6A46A43EB252D2B72DF3B52050D4C2B20DA4F6CCCB1C1CA85EE1C9A5501FB
22EB7FDFBFD0838F0359E295D3176EC8F0A2A7A262155DD2F20CD2632FFC30E4F274AF926570
85147A75942D1611D5B0407504708CF782398C366A02AD6A8B103DF8E615126B33DA380BC2AA
1160FA63665B883A5A4A7CE7514DDDAF8E65508B2B6FC341A00DE2E976C07A499BC758ADDA72
B65780DD06133027E1D7FAFBD4CF7085091ED9DD98D91E4EB4BC0BD4DFBEBC947544A96F47C6
4E1CA2BEA3E739A65BECDE6B2CF0713743B881F403AA40AEE5A726A8B54659852EA518675CAE
5089758C77C82EFBA56DF329AB46166154F0780319347A050002319438096D4EF7F851876CE4
07D436299F7D3A0FB6E8816C37A028D62426BC615FD635060F1C69E3E7FF6D9262E06679E415
088687B4E65813C86D481C41B5D74E0C208882B13EF4EEAE0C60850DC1BF54075F41763705E3
CFF0B9FFACB9E2922B40AA7209970FA5F3563D7E6E4D3D2249E7E946E97B5FA40291742EF9BF
A2DC7D4E5EE1A25F6D0D930A50262F17F38744D7A07FA9B6DB3C4D7CC96DDA023AE2F3DDC571
FF48135434E354979EAFDF625460CBEA8B65B63BC612E44D05CC3C3FB186403F994FD1919A62
44E728857A54DF535AE149D405CE6C83C96A6DC117BF178E088556E12D3FD88017FD2C031059
1A89077E0D6455E76A3C8AE37B8DF495083B9EDAFAC2E3322C07209A21B5C33AC6AF3DBB527D
C1AE916CBA52E68C2A851EB073D09CDECF8C3AEC94F5728F202BEF1083215895FB76B791CA26
6B925512AD89EBDB53AC81DCA3EF1796D1E91AE23E5C60DF72549D625AD1BA68D4B7B5C338B2
1496653F61F735A9D60C437A6397899304B3EA36BA2AE138A700681EABB177D32CD0DCC8B226
982EC3BB7EC84A831569BB9A3BF30FB4A56D947464B1F7B49DDA4621907F605A238D6C5A1F21
439FB67080A3AA1864CDACED6A37D1FDA3E95EB8E70CB3B78D2CA77BAB36D6FBFF8CE6AB6EA9
78C1C8FCA06C3112FA831E693BE7562B859AAE3AAFDBBD0B119392037F1658D9FF7473B2D4EC
D67B80F2EC39CB32391E41E2F8466B9BDBE8E134186312F0C97F2ACD4EB52F835D00880928EE
1DCA94DC6A6E25ECC61B5E549D1B8A2C130D61EA7A42465F0EF3E3AB242799D2639AE4B2CD23
6F195D3EE06665DC3674C8CD681E0B49C7E5B95E4DDFBA0FC01DFEC2E17A77F16116AD14296C
0825E9859CE22241EFC60ECDC3F4C56D22EE448F8263394CA1848F95AE78D46DA9FE03328476
8058CC5A4CE269EBD36B01D04B772864E136FB076154A52C165A9A0ED6A9415474890E85738F
C1E112B733B2CB78D73A294367C4A6B33D15CCAF851135BEABDA0AE764091A3EA5B65D0BFB32
36760AB084F8C9C16F1E93A7531EAF2130CDB62A8DB7B42040D0A92F2B20DA2FA00A73738BF8
AA9DB2581B00857BD6D781A2C78D83792012C83D4908012347ED651A2FDF54C70D53910D6DC6
D2D278872C6E7D58019E8D04407A1A720FEFDDD6EBD79B98B77A4FAEE6EEE00F2985F8B674C6
A27D04C992B7E8B53A1E621F9D3C66DEE950E1F705D02DDB78A081CFB94006AAC8105F5D3E46
5796D2C10018F65869FF73D7A9ADB035FB37EDFFEB469D7670A13A43DF3CE14D277AEABA3833
83D36460880D924138C8A8374AF1031AFA2654D5A118A82149072BCC38F87096D240B55679D8
221041F2F7934C27D3F1B543B6761CD2D2D42BC27D7C16317D651C2E041ABFC027D3472514ED
04642E58C1E729945761DE2758A438569DDB55505284045153837A29D3BFA889C6AABB26C108
F27571D832CD930D39CFE96814370B2EA5A39376975E378B752E6E14FF1322942114E4119A30
7CEF2711AF296AE3F88D550163EAD08B2B515364854990F25AABB23D975FC84DA81CF63A416B
32AF608508DDFF86CC694A6B668B3F382E3E3AF223623A65AAB3EB16D000D86D663EC6031D2C
DE50D54A55EDF6C7E47B4903C9922BAA00D2C00798CD367613F7549D9873AC4EDD3C2E8A044B
AE53643AAE392DAC91F6D335112C2DD4B188C5F1EF1E5E42457E4C2F2D2A282EA3D2E9BCBCCC
6DDA43161DF8F8985745E86461108E080F647C09B183ED67257381C512947CE954FD786F0B86
A62E40327AAF77C3F5265A47BFEE2F3919A7073E84C49DB01295C730AD18F45364E2F19BEE93
8B7C92235D9E32754139E8C2F64C738A5716EE5BF2C68D09DA48166FB2490EC874C723D6E72F
AB7C597CCD0ED2398BB9D99159E2D4A3FE605ACF6F7A5D4A00BB9156FABAD02D727437448B75
E6F08F1C5F17B251412C2E698CA1FD7D8D7A80AC6C7343CC7CEA23245812247F35F0F4480E10
A1D8F9D8446EE41E435166DBA0CA3B29155146C96C05FF1FD2661DBFD9AD2A7341362BF8C2A6
C10B91541D2E4CB6F8AA01F1C90E118E0DB81FC03048F54677CF96075EDA05B928E200E1620D
EFCACFC777BC76E3C911229C64699560D630BADFFB00206E4DE61E3D06959B2C4486FF5DC7BB
B22C634D8B136077E5062096D3C99B142E2D1AA6C26E58AFECDC55A8B90441C0459140363FFE
8928C20BF64C8BCE4DD15EC806A2AC7CB1DD58E67B69A34B28C4164BB0262FF9267544A6A905
AC3290DDA8F97CCAFC12083485AF20B6875B355D98CB5E45DFBAFD80FD63DD590A2EBE0B0429
2A1D37C906FF3042E608B3D983DE1D829FAA8B658584600E5EEEE90FB0CB13EC9633B148B696
30B8A4617527B0049E107F4F7E14BF421DF26B08BF193EF2650E7930F567BF3A05CF55F3BE9E
651C2273F5DB3C4D08D9100CBF5F5672C702696D823A43082A79B159DFD315278DEDA56458D0
B8208C7FE90808E0D0566CC2A176131AFCA80DC312C9F7E4C25A0E949AA384CE254B885CFD9F
E74E88B40862238868C3F7D1B435DAA876B5875563C3C5BB3B962BAE3F9909BBB96997A76533
95C7CBB41D74347B78547085368A5B2D18CFC3AC56DCD1D9D5A53EA63F4241F1B35C15913F4F
773A48F42B4D04B594F33FF14C0B16989C4354C2DB18EFB3132AC64D02C86EA8198461F700B9
8BE371A968C0865BEE44E8DF5A7AE98B738C034CCF07E1CAE4FBFB8A50C9C31362845BFB67E0
0732FC33378066D3B8F1D69224E627103CB706AA5B6F3E4DEC74445625CB052F5AC48681CD3B
204574A1041CEDB74A51D4D21B37D465593A7E8F7AC1184C5EC7AB9875852D88E15AA1C5203B
BD9DA15C25BF2E908C97678DE40D9A8226BE09A735156D1AA028955ABFF46DA51C07E8E1234C
9FD06F9B54C0E8ABB2AC28721F5CE5473077BC6A4AFD0EC98F4FC29BCFB29BDFE99D931BA28E
200F5D58136F63C5D18B4917F79F9650343873C44F8F9F699A0F5495237E2E748B3E5C3DCCC5
9DDAF98E1C4F5252F0C52D2BC4399510496E4844A6392F984204282ED84398E7C8862D9462FB
AD609A8C85945B758B88E37A2A412380B6DC884BCE142DDEA569227FE306C6B4274C07CDCAB4
B48EC1806E45A27109D0B142FB3C84019F4C1C275E8309696F966705B06292C8F8622FE8DE52
6C591659D7780D424E8ED1D83F59A0289DC59556A84B5EE4BB34DAD12A92974CEF6901517285
42E222B0C32B05B2C3D819A40C4BFAD0E080E60AA633D91ADEB117434C58A7BBB334503FB9D6
85166DA7425F35097878325385C28C2F1B10CE6AF452AE0FE66C89A9426D1B25196D06CB9271
C6E973F2FD6722B1EC18162175A9C00CD155FF3EE679FFECE6889B2EF40D682FA2972EA03622
24A1C43282A08753A5205D3BAEC16DF17AB6F6162F9A61292F32F2D9DA34A45F3DFF377848B6
E5CAADF938BBC92D8553556817316F4F8F8D54983D8D72C2145D4D83682CA5D528867E8CE66C
050FE52B0269FDC98E5B48A185B979B45CCA3D99C870B1049461007CA15F4DBCE8A306D460D8
F6B44A2506FD7217F11B69A0077D3B7C2F016ED954BA5E58C9B51750E4FBE8E88E4B0AD59B1B
9969BB9494CC19C030DDF9F586D80CDD03FDA4D655D90AFCD4CFC93ED8B70C13FEB1B3F052DE
FF4EAC734E8C1FA2B4AE1423E78E529443074F58E3F5D84DC1E8AF60866E49AC96210FB526F1
B4DD10AA19C53B92973CA6E13B60D319FAD574A46301A80D69737B9F60B4466B94F4AC8DF508
0C92A7359ECF6883D87D1BD45037F84CDFC93F9CF0B7D8D8795EA37B8A0CFDDB837D8F9A2327
42995FF55E0C38E2CC9E57E10C5C5D6E9EC93650DC90A82F545E54C66133F9381262E21CBC52
CD865192A781BEDB71AF318DC25239D64CF458839FC2C809EAF85AF1AD027E0BA8BC70AEB164
8F345E7B6043BF59FE71C0B20F8BD21CC93C9A426E80D62AD487A60654EBF0E364D99B90574F
072C52775B239A0DF62F256F44870302D077D114DBF83715E4A07069104876317FBAA1F7ADF9
F99DDFEACEDADB48B397B7EB2A37E190729F6D31474F4F6E2644C697E0FD8836DE337E05A8B1
B8CBB7A5A6BE292FDA3FEE754C5F9FCCD6E4528349392FAC86F7E6BFC953ED5378B7C5EA0D8B
2AFA34DF6360198E5FC5ADFEB120D9FC498D8DAC8644E9643AF39DA434BDC546FD2BCAC23511
AB1687B7943F299285D071115B4CBD650F356E75F478C5505A7FF036BEBE3682C3A00D047626
1791CF08EAAEFA6F9333C66CCF5C9E59C14829B853A660F3FE3CCA0F1F869E3A31D089E373DD
A04D765D25FB0B6BF205A9FD881F00E99113C5DBFD2FBD7ED608C32E9D51FDF6454557DC52D7
2EECDEF0AC2D8E89706809648515BD4037379C6057BB89AC4B6768DBBBFB672329D3C21036A4
804682C6CFAADDAC7723C715842B25B03FA1F12A2291125F34EF7DEDF897EF4A7506F804E337
0814F4B62612B35ACD43A33A3ADC76815D29178EF7B6D2C170FCC1AF75A9157239DDC78A5FAD
4B7B759755F63031B1A7A6F6C9FAD4CA3B4F36E065E3BC3ECE67C990411940787058AA52A00C
51E29250B624EAF70C9E236898B1E2491256E9C4399ED8ED5B19F5941E76F51B8F16EB0A96A2
9FB928E35ECFDCA1BED3B12D5B5CA1D55BB2E4AD69FA1BCEC3876142B7A194388538F5BFB028
402E52505302F482BFA1D6C2492FFF4C7C882B6260215B52279E25E8D797222A2E4473CB30A4
489A6F2C566A79E9FD940BA0E15C52C8044B4C725358C667522E784194F87C543D9F77342757
2CEF02F46AACBB4EDEECC15C3E813C67E68EC8485112A1E19054AE9B877B857D9466E69E81F6
C24BA540A3D716F2E92659D252692C1D5DEF79BBA8C6A7BBE9EAA7CFB7721810FEC93F176E8B
9DBA3BEEEAEFDB577C14D52D2676566F0D04DE6931DC8ADCCB09022D30B84E9703CE37845966
5946CA535D26B3094D1B493A5695DA6DCF79527B841194790AF65EA24FAB98EC08F519743248
FC600029F2469C8FCCB2B27182928BE3F1AA4405E14C7AB842A370E45D48AB1EEEC9168825E9
88147928854FCF974821B19B65D9FFD57333D3EC10B21588F04F652A218D8E5CEC3ED25BB6CD
5EB1789E3CFAAACD95B72455C5BE8FFAEE0636C0788A587C992E6D1FA1E2D5EC8EEA82B6F75F
413707DA0EC878352E92FBB1608506CC3A4D1F676D364524C8B72C3AD5867E03B7642F335B4E
0DD6B59957CAA5C0131C8A58E0F95EC0DC6D75837291A7C1DADBE3F92642D2CD4C0EAB79CC23
7BCB33E4631BB90B0CE4D63A936348B7CC37AA207BCA6410F010890F23F6B3F6DA3C7A0643A4
44D2E3D226C754C1598D72AD25C25BF5FDC1895E6D23B9632646EF4F314BDFFA94971BF6FCCF
20EC37B31520221BE10025C386A8A1B3280BB47FCE113BB4A5F29AB70059611EEAB412C0A969
3E30993FC944B38B11211594B5AD84B0D622255A372F56A150BDA57451FCF52F3DBA2DF25BC4
16759E32B7B19309C1FA25AE1C33D668145F2E645107CCAC86E741342CA4301685936E12234C
8D612F9314090D5C9209F5D154E678BFA3985B03CE6635AB80B8ED2630B41D7D223E6ED1625B
FCC417BBC3C9E5BCA6256260A06923EC1B9D2DA78C8B55B05CADB5785C838CFF582FE167CFFF
88167D7FB3B90B276F5D6F78E919FEBE8F9B58915129CD7AE5CCA6CA9885D22CF7084994D101
B81A675D0314C93041B5DA1899B36DA5DB30676B5F1FC0F3A98A33916B47E0496E3DDB771098
9AAB7642A1F77E5CF5EA22F75432DCB7DD2AEA6FC7BF8C9FA07C7F28F7D37CC13D3586D4EB49
CF579A95DD3ADE1DE06869687639267085352DAA0A19E8F95E4A7E31FF0D17CC87373690D263
4852D465CE0FEC652FB6D710163C738CFB030BD4935EFF80F7DE7D7F06F0FDB1F4C10B07938A
C60C74E442E1F3A6BCC8BBDC7814B6E710C41AE1E157538871AFE3518CA8834A4B4DBC59CCCB
6DA74715ECFA03E98289479C36D00DD0D125B12F63B45E112C7AA1C5E60B986E74E56CF95C80
198381207AF0CF5F17A6635E2AA89293E67D2C549D110A2A57C02C581166747BA758DE5D5F10
686029D7F0A82E7E4889BA7160762431E00091524EA5B12C9D4493F0CDCE0B4DD38EC792B4A9
2B0DC4539A51FF1D613E75D981BBB9C20B3D53400AEAC4970FF843EFCE5EB250C1283AEB8315
73AE15427928CC2A9C0C3B04B7CEF0DBAE549AE82AD2FAB68F5D7463420EAC2CBDF421BDC88F
2A6B10521913C6BFC6258598EE979570E9E555F475B1B26721F94A5462135E9705FA27259BB9
564253D058772483B35A487ACD624B8D9FA02EE6BABD73D308EC29A30CC32BF271CF95B3B070
160E31B8649192444A80DBEB812D1D4F4BE00FFEE6BF7E4CEA75A1142ACDC28EE252228DAD93
7A69B3580830CA904CD6F5CD01977F6FBA3A13E89667DDFC777F48DB2736D78856BAEEFC2E41
C82C82466D361AA2D02FE20568F584088F4038B72E10695253D8E095DE4288A48605FF431809
8801CD4FCA473F8C3316E8FF9CEB463D3AC98EFD0E30EB743E250B974E758E86DF712E13453A
E6882333F16696A670D28AA612FB9A03D46C4A866155D21AE216E7017F06C6459708EFAA13DC
465BF43EC202C8F556945FDA8F0E06A527A368C577BD0E5857F35C0AE8D0401EC43D1FF17760
A7D9893DBBCFFC86BE0747E7E6E07736EF0146BFF75DE5715E45F8EE823070433000BF015DD9
44265CEE7BA9BDD434A1D78E419608A4B19C0F74CBBA354BBCCBC13D0BBE4BF95072C69762D2
318D2E637A918ACA900ED1D59011198197E8DCD7D1CCC1F43890453AF9F70F821234C94E6F35
5E494C38E279E28C60BCC6C4132405B8CD1523A1BD77A4CBFA12C6009F5669AE3363A405EEA2
8E7A28044EC8B461B342654B2C24D50F43CBF0887C60C225409A289EA660B77F2286ACAFF8C4
656D4A369D39875D0F10436857033D2C5AD5E2619557B4F2C88A753249C2DA0552BAF19916F4
6F7F3A1F1356AD2F047B55F002D0509E266C184A77C6FD56071A28089B1082C0E80985242C8E
3169E754E5CAE6AB2EC06B5D8F1189E325485950ADA8A30F12BE6872D8393BA32C1ECD6A80DB
0FDF54919E9A7D9DA15C1BB823881033ACA8C21F3B806722F5277AACAB4A4E80222B3536E50A
2E5BEE34484310CEA6573B48F992D2B361B13F3BBD14A1E65C58B6D71CE393C3F340FF9806B5
4D82C04076AA5A4343E53785B3BED4C8A78593988BF3432A217AB637583E2898257BE5EAA11B
84231F6C9761F74DC75FFCD351F3C4101A69C98877EE17AD11541D7F57F6F5293CB956A7633F
541EAF253262699FC79E4A396C5D3289C3CAD0C31AC6CD59E794C80617E102B306EAD89EA036
85508781C79645ABF8BE697710D4D5821D1512467B66DB602A2DA5E46F646D685E09E0528C47
9C6E9D6A5503B99104E0A5535E0A62683E520063BF2698701896B39D26FE9D2FF2BA0BAACA77
A75FF905B3CAF7C7C8A5243C54469EBA42D0ECB15AFF53770C93A32B18205D2FD601F88A36F5
3B93CDB0A247C4E5750000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark



%%EndProcSet
%%BeginProcSet: cmr7.pfb
%!PS-AdobeFont-1.1: CMR7 1.0
%%CreationDate: 1991 Aug 20 16:39:21

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 161 /Gamma put
dup 162 /Delta put
dup 163 /Theta put
dup 164 /Lambda put
dup 165 /Xi put
dup 166 /Pi put
dup 167 /Sigma put
dup 168 /Upsilon put
dup 169 /Phi put
dup 170 /Psi put
dup 173 /Omega put
dup 174 /ff put
dup 175 /fi put
dup 176 /fl put
dup 177 /ffi put
dup 178 /ffl put
dup 179 /dotlessi put
dup 180 /dotlessj put
dup 181 /grave put
dup 182 /acute put
dup 183 /caron put
dup 184 /breve put
dup 185 /macron put
dup 186 /ring put
dup 187 /cedilla put
dup 188 /germandbls put
dup 189 /ae put
dup 190 /oe put
dup 191 /oslash put
dup 192 /AE put
dup 193 /OE put
dup 194 /Oslash put
dup 195 /suppress put
dup 196 /dieresis put
dup 0 /Gamma put
dup 1 /Delta put
dup 2 /Theta put
dup 3 /Lambda put
dup 4 /Xi put
dup 5 /Pi put
dup 6 /Sigma put
dup 7 /Upsilon put
dup 8 /Phi put
dup 9 /Psi put
dup 10 /Omega put
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 14 /ffi put
dup 15 /ffl put
dup 16 /dotlessi put
dup 17 /dotlessj put
dup 18 /grave put
dup 19 /acute put
dup 20 /caron put
dup 21 /breve put
dup 22 /macron put
dup 23 /ring put
dup 24 /cedilla put
dup 25 /germandbls put
dup 26 /ae put
dup 27 /oe put
dup 28 /oslash put
dup 29 /AE put
dup 30 /OE put
dup 31 /Oslash put
dup 32 /suppress put
dup 33 /exclam put
dup 34 /quotedblright put
dup 35 /numbersign put
dup 36 /dollar put
dup 37 /percent put
dup 38 /ampersand put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 60 /exclamdown put
dup 61 /equal put
dup 62 /questiondown put
dup 63 /question put
dup 64 /at put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /quotedblleft put
dup 93 /bracketright put
dup 94 /circumflex put
dup 95 /dotaccent put
dup 96 /quoteleft put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
dup 124 /emdash put
dup 125 /hungarumlaut put
dup 126 /tilde put
dup 127 /dieresis put
dup 128 /suppress put
dup 160 /space put
readonly def
/FontBBox{-27 -250 1122 750}readonly def
/UniqueID 5000790 def
currentdict end
currentfile eexec

9B9C1569015F2C1D2BF560F4C0D52257BACDD6500ABDA5ED9835F6A016CFC8F00B6C052ED76A
87856B50F4D80DFAEB508C97F8281F3F88B17E4D3B90C0F65EC379791AACDC162A66CBBC5BE2
F53AAD8DE72DD113B55A022FBFEE658CB95F5BB32BA0357B5E050FDDF264A07470BEF1C52119
B6FBD5C77EBED964AC5A2BBEC9D8B3E48AE5BB003A63D545774B922B9D5FF6B0066ECE43645A
131879B032137D6D823385FE55F3402D557FD3B448685940729E6E22F4BE0E08C6505CBA868F
795093F556B64B808DD710EB936D3AC83E5783B5F7E56D363A59A026A5619A357D21C4E77BEA
121EB24B09027D1AAD93158EDF912940E91CD2F17922B358858946447773730BB19AF9E70453
E1B78D5EDC123B273A979891D6D5E624F4A388F3897E13B045E34B4EE2F5E4FC5E996D354964
0010C671DE14D18B0B3CD300E57DAC0322E59BFBF7B29422230870F5897FCFAAD4B50C7C1C58
EDCD119218163D6F6E5625CCB882DB7B6D09A1586508E8CB642A11C29A46915E4A96E282079C
B21922C1C2E360B487A45302FD22EC8C5FAB63E54B5E844D4B17CA2FFF37C69C366DD72AD029
22C14C0932F65ED03E4219C117962EDBAD2DCDEAA9C10CE8AF38A4AE52E2B377245B0BE19A77
D6C936E7530CC4D0B78D0CC4A92698FA2870FA54F2D8503E2D17B3D52FB2FEBB09F2B2AF0C2A
1892039EBE19A690098799A858E3D39631BD6925A154D161DF3918074ADA6BD52BADDD0ADC3F
07E2D9F15E27CBF7FE8B98C407205C811121FA91E059F2F99322FED63F359AC9DA97AEC383F0
67F23E5DE33151E80F0A88AB50FE8FDAE4A5DE93C1AE2FDCA06150B37246140C0E87CB2325A6
0D2349162AE3AC93144EEE1E665A1289105318FDFE86B6E76251CB25ADC967D3D0B97FE5E279
E1161736AB22B4CA510B964342383A840DEFD38F96A7280E6AC134E48D740607FF2E7804164A
16D47735864DB8456CBE4233242EB3B447F7AD444DC16CFB69AB1E515B3C3579F0E847488107
99D7F2833DB6E76F6AD8C924532F8F5AFBCFD939544BB7DA501D8511E37090F3A56D06FBC17A
49C373426BC6D94E829A8CBFFF9A2502C915E2823AEAE70E39F00BA99F8E6094A024E3C48503
2A061769D653CDB17A06D8EC2F407C4B9217671851529647D0B9F261E39564C79FA0D79AA7CA
F3D08556C66F08EDABC27870CAFC00F0F1828E93929116DEA5F038FBF92837E804DC9CAA7EC9
D967715C97C6D5770B5913C4513DD239F55EDB3D6E270E8D826F6B4D0E7192BF8A1200475AC8
E1A30A8F6B7428C8D321F93421F8A2F707548CB12C6963A2CA8C47FD7FCC6C4FE8CBB31985A8
9A0D0617119A892A61272ED8E264418418F2DFE0F5CE71FDF732F0DBE1DDCBCE2A7B6C2068D1
EB733FFEDB0EF64F9BAD513D3267870E0E90147C6B4BB9F60F99074CE5675F7C4FE9A4735BE7
E6D1081203DEE5A7DF96D68B2AAC736DF07BDD5BF994EC28EBE13D2ED5FF9EA89FC822339AA4
5DFE008523F617DAA3DB055EC593372FC2752BE8FF2FD825B13BF7A2FE7A0FBA28212C389C62
B64E9D156842356743272461B4B56B9FD5BB19AF45607E6E3424455A2ABBF21ECE6E2EAC5849
9533299F5A70391C4B7E9E95AC00A7593334FF183B9515F642EA934DAE6FB630EDED6B80389F
70ED5B3B96EC7C116B1124D4B6C90FE571E0A1339C714126128DBA4CAF5FC2C035579774D403
AB3BFDC134145AD2FC303F8C1FD5ECBBE201B8C93DC26497335822455921DD3B07853CE5B859
36F54745B3CF0AD0523D83B16C132E600FD7DC81B585E769207A4949ED024372D59254EB97AD
F5990992CE479506FBE4A8BAF5B46C8FC13C7C0CC5270D37ED08FCADAE4AF27B0E64080FACF0
558C85048A599D567054DFB290683577296CF1613299E7354B90C2EB4512E05B3350F681BF64
12C688BB05C110110932935913B5F888C20546BD51E414DC04255FB51EC37CD47E975F97267F
F78598952239F401E8704A903D9C8D7B3E72426FF13CDA6D912A4BAEBF04E9C2186290BD83D1
040CF238D04CCE1A1D177529EB8A27731C81393BB96D0858277AD5D0AE1935F89638D528B1B9
493532D7C81EA6020D0AAEDC98CC93F644EA5B5D134B8CD94A5E46B883E1F54A7A098F230C43
7B71049C0B2CA37B72915638F7088666438DB22AAAAFB84590BD7EBE4AA544506E19E547F3CA
E50348674B3CA185B542FBFB2594A687814F0C330BED938D482F6D55DB7746AF7D052BEAA978
2E812369AB4AE39F0A9890DD75B6159731898692B986063985AFAFD8CA08714BD415180ED6AF
DDE8D5719734C74A055FE635DB9B8908488EF1481D72A90C9E99614F973B243AE426DC24C4E8
A9A12D6D5E73FBA4EAE1BA66CC5B5B54357095A72C84C4E5ACC4D90038BEEEEB23E058079B32
05C0C4E0AFC015C650C4F4EB4578BF6DADC04E9228F5C304B2433F8D92FCCAFEDE671F2F1921
8D070E622F0F5A6F3BD95BCE78DDF81FAC393757517FE2E9C02B025B151541060B87C1844B3B
C754BBD0C9F9255A9FEB28B14AFD3B71BD0A916CA17957E3B78539480868375EA6ED93BDA275
D793344BDE7E59DDA118414AD315BC177937E056EE85E41C94C370C5F5B8CC34D334A6085544
A3A2C0AC9245A3AD03C278B39ABE17F945E0AFABEA8F9551460C19B7E667DBF2BBDE697AE880
2196EA5205142720E966449D85FB59B9F711ECAEAEC9103D383F58EBD19E77837C42BC90E44F
0397E073656282F8359362FFD450FA089C6911577705EFCF9537DCB916B7EFB30B4055A6DDB5
03E2983D1BD53482600907D9160FAD04128F4DC6343242E0F33C22286E6C91819F2E760A1788
6917A12E6346794AB66BFCF02043371E13D3F355A20C583E484C94BD407DC2266529CC993243
D7708C22C4EE4EB9DC2AE1228961E6605299201CE90B1B0547B103C4854E186492F99623B8B2
5264C6FEB01C3D9E86B2BF8DF607A5CB944FCFB174C233D843793E87801AAFD289B7FBA2E2D7
0E3E08B121A872333FD4064A3BEFA3FC9DB8382F0286852E322CE17D6FB4B31858AAEAD12CBA
FF2BE948CF19C1BB140114AE65D26101457B1CD95D1C9347528B09CEF9229913D349B5FF5F51
869A7E7D929B82F9736797F4C49DF52B2BB98BD87BC5483ADF1C1F620F70BBAEA51D554A1664
376C9FEAC4470E145C1138F27D16CF6C325A0A44C53A0ADEACB28CAFEF2A5A09FDB2968BB229
16F47193AB3504E23F103A993D67D48F2EFF36C306FACE6870C0216091A42531FB07605C0DFB
554E46660EB27A8503442812EA6AAE3D326A4F9EC58B6C732CCE096DD512A8BB8A8FA7CE09DE
D476B24EDECD9E39F24E0A30BE0C7F0DE109CD0E66196F3D55BA8298C569C9FC1D36FED89E1D
ACDCDD6A5E3E92D5201584982451C378F34EFA407B65F27235CDC570BB7965375902CC5E02C2
354145FF97AC9278BFC4191A286BC58CF9351220C57FC9C4CB450AE57D46C2169999973EC040
53F53FCBAB1681B17D6049F0F0786AEBB41B00C8CC615EB6A5FF5929283A93D22E28050D0D02
BCD0BD18818ED6836CDDA8DCA69093E03658D26EF757319CB1E738D7AC4BE9EB6D1356D9B34B
777E4FF4F2459288500E8564EA13633EAD85E614DD9CCA149CADE40F8D1DE3EAC49B16F9D954
953C19C66334B456260CB46C84CDD7D098D39E90920DAEC6D7A4523E54F6229231F5B5935B4B
BE67A3AB87C2C8C2E539376665FDA5E14AE5F6EC57D1340527026C7B73B99F13E7DD22FAA6CE
A155B79CBE80733A40E24B62A1FB88FDB4154283B8C5C377ED6FF43C975A01366BE13B9A1ECE
A1954C62EBF209D4A0761C6D7FF6F1BCD1196E4080030EB2A8C4DAF3C941F3CD5FDB6EE95FC9
0824F9048296C56B3F787218F3D546BC2AFB2B2483E1ADDD112B7C892FD4BA8B158B579098EB
B44BEFB1B312E0F42F08BF77B43B438A231C1110A56F89BB1E36CE90F5A5A69138B7A8D840EF
ABBD0C63E459021227F62539C056E90C377C9563D1BAA4168EA5AABCDA5DED1BD8E58DAEC21E
20E651E0B783BF605DDF8F786928F7DDB085AF660EC41C26EB4BB70B6071F5F63D7427E3D54A
05F28178EA6A1C00EF8868D1FA78093A91D3E4BDCB4A40C814501456216D7D164C7A82B4BB5A
16220F7BBF07B9D11AFBDE09CAAB3FDBB6203C667EF450B644B7E536B1C80BAFB4B5E5295B74
7A08C4E843DFFE087DC105C9BDD9052BC2D86BEC218F9D49E2CB9618D9D4A3422F6849CCD5B2
41C0D0115DA98661ACFE49E8A8CEBE1ABD00E6662A2D8A9C0FF1A6808BB04D5E46467904C168
C65B7DBDD1A0B5456AEEA445CB22C77BF3F7350B13B4E2423CD11A84AB6834C1613B09BD7984
23F2249B32EC8290D679D14D3E0935AB5CB188D4F845ACFF621EE3E0206E6CCF2AE120114496
636F297929EA214D6416E639B5FF5B188F38C62FF67C969E3FC492237BC7D5D6BF16604C0C94
F2469C67A225F6CFE49EB45DB9423874BE7AC48A009D68D028245BF895C1D00C40592B68FFB7
642386887F137353293F9D506DBE742B322A5AF5677197B8DA6DBA4829F20A02E0F8A8CD140C
76F9BD9C730097E0E140EE2EA2F3C71C714C669DCEB650E87C98EDEBBCEA6A5966D8965AC0F8
DBBB858B77BFAC279AE094995CE9E7D78E387036652B0FB576EF90A777C664C80FD7C2C7B9FF
EB52FFAD59629217F293F54552ECBCBD6F05B326AFEDB82B079D68104CA2660B9B43EEACFBA6
20EFE2B1CFFC84AD5F98AE71D4CE28197A7AB40EDE026A9986F73DD0213C1523112F64FF23C4
0A474FBC44E3266EE0AECAE9A823BF787861F3F9AE1BC0726A47D8F74B70D7899A5A2E40A2D0
B5F8E229023ECC4E5B30F914F3EFFD4481FCBAB37D8ABF4AD3759D2357BF5B7416CF9AE72A9D
0D9A10892A70FC0FA2F2C20CB2FD8D80CA9C7530CC1465D9115306EA5DD4F7D7FF60979628FD
78B6F0D429B642E44CE21929AE076BA999B78DFBAEBD38B0C261BC566C5161119CAFE5C3D0CD
02F149F5D24B241A9CEC58E9E2E9F72A2862E2103D86CE4D93E612CDB82AB33215C2AEBB8D30
E34EDA53222FE67843FD747F9CB1D7C2B4E87D71498A1D5BA282EA5BFB3FA18719124FD46A98
ACCE4BF97E480A13D5AB27689CEED619A8595E613201056C5E137F618E4F4B41B3B5F247D0A9
E786904DCB1E2AF7AE330C11E4CE29B6C75CA748584E83B5621F2321B730221A0A6AE75FF564
4FDF0FBDD7AF0627D4CA801D0EF9AD04C55C238013994B493B6E0CAA0C9EFB6A8FE46E8F120D
1CF4F60453A6858D2F49FBEB90D21CC6A67D2616A506795AD9BEDC96532336BF65679ADEE667
2E8FF95DA69F013D64D7121307B932BF2CA4FF2623DCFA5D8ADE618868D6FDF74FA9EB4B1D81
2C0F8596C9C14B807345EFF6534001FB3BFA4B5CF929767ADE5C5B1628A1EA2D0805E85042F1
E31099EFECF5A542BEADD11B41F1428FB471DEAD028B55BEE01F9429DFAC0A6BD3722C7EDF43
D73A222B883D305847A200043DCAB3CCE0ED7A22A16210700D98EC416164F8C5A8B13150308F
253797903F8515F065034EE7B5C42FA83CFFC6FFBA08BAB2969617C3D94213762C611E8DCD1A
A82F90FFB2E2C0E570295EC8F36352583CC4C9DE7D1DF3E8774EA47EC79FB35FB6EB954E5733
32F582F2679B13E218526451AE5B5C7F0154B8769119E88A6E93BDE1655287CFA8663EAFDF09
C332666E2A14F562C146C9F5CB18BD22B70F98D3D0917AADC376463742BF897D7B1868EFB802
73CD69F079790DC6EA395987786A1EE6D649D725026D34F8A15FB57EABE12757E49F30D2B7DA
FA80AAE0723F905CB1D4FA4C21AA68025986A45A6FCB4812B7B2698910E5FB950F2280E3A60A
0A7930270A93EF4F7929F2ADD145CA87872B8B713FAA428B10A1F419E985E740D2649A29A3A5
E0D691EC7EED9A5251A0D76D6A6D1F455D308BB7324B29A92CD01006ECEB1128DCDF5730DBA6
00B5881B7C3722C09074A51C45AA8C26A3D960944FB062A7BEE0B7FB1D06B5C3F0CE9F283625
2201E0B3121DC1813D955A3D11A3B41B1B1E74A2EE1E84364D05FA9A68405CBABDE0009B221A
BEA1146608A26B66FA93D382DA5ADF94BA248F14035AB0C03EC49458C7AF3D9867682D1B0DD0
66136543EAD160500D49912C5EAC3B24CB12AB6504C837199186AAD6459B320D69265F230AF2
39890F5BCD0720FE71D3CC95295982EDE49A9D4FEF248F7FC3566796769A2A4B205E93DBC034
54162CD50442B11954667199F1C43FBBCA8C354F43DB19C1D096F9186A1B200DA03F81E08DDE
8DCB88B2FB1886D246933B5497EF4782DD56F5A54BA4D8A5227E4E5DE31B2231A26C44103F7D
556054A2D4CCB8F57D7F56DF346467CFAB794EE825F86F3C5E42339CA4415E8100715745C770
705F3156F7C4ADC9AA98D5B72909815EB12B55DEC84724575BD716F0607DE90DADCF41ABED55
CCA9CE2C075A851C9155523B109B6BA66A5DBBFE5159FDAA892BEB9BE909FA491B29A7395BC3
AD8BE8605AA7B57D10BC5F96A02080F39B111CB1D23300D3B6269C3A696363156D3D0E99BDAC
071BC920DA194859865F6AAFF48AE35E558B99E0E88D62F21B7C7A3640DF076EABB7B67025FB
F9926E8C469BC5494D501DE9AA1565B428349511B5A2D3D9DDD67CC6E6F06D83B28857F46244
5F32AF11D71946359A66C9D7E6F1EDCCC0A295688E239D18E6FBEC696C21F5B2FBF01AFDA3EC
39F0A76E4B530528E302A73A75509A1035B4D55035475C984B66D0AEB7F423E4EDAF3F78BD97
35FE8FF17CCAEA7D245C0257650246C90BB99E1433A867237BC222BA0B96D4E332BCF48B8565
D9F00EAFD940C10F1EC44F4BABC9E4B74919039703BEEB805991F1CC3D9D7CC4CDAD755444A8
CFA2AA908D66B88B63551B7196413AD3614CDF428EF48CEA5396B5777C39CD7CD285E9A75ECC
5E028DD5C291E063326BE2421977DE683ECD670361645B6F4495ED0ADA49E2C3A341D1973B7E
C21AB13BB4F8BBDAD0B31EC43B0F6A3268B1E667298D95B3BDA5DAD45D2241D851543FD03F1B
26B6172B88ED6B3A1641D4125AF70CC3A4D425D7226CB034B2BC7476EF5E08A1A33626EC8B67
6A9ED37CB0543443705BA5748BFD99EBAFE17085D1C20A85371481B1FE5F239986B5ED471B21
5F821BEBBFB2FEBD4AF60B53A1ABA5FBBA118C0F121A1183E8D1297DA1882DFA5140469B2522
5CDE835D18462BA08DAC0673A4FCC6172BEDE2FA38373DEBB9BBAB9CE158FBA3D831499928C4
059C086B4CB70DC0F2E48EE03FB4887CBB0B45F8FA04D7EF316C864055D55FFA990419D9A83B
C08AF43EFC14870BB40840D12CEC93306A2355188F9367C512B4D0FC1E039AF8A85E29BD8BF1
BFA9476A3FA2876C58933F713F0B58CCDFC6914D7134E347F2816EEF956C6171B313BA58C7DE
279178B9BFFB30972D6B8D963202E4DFC92E9DE0BAF43878FBFA9A13F30EBE1C9EFA118ACF87
EDCA5E6DE8AD4F41C09F03465E20BE82CE8226395EAD99A8BB871D49E989E486626D73CF15BF
A569F3CE25391F477047C402493A23B55F70462870EBA3A681A8F8D99CF7C2C81C70D705C392
ABB88587EB849662B365F85C241DD765B3C295F0B7E7EF57C7CAD259577D8BA18DF21E664888
EEF38DD5D9F984F9DF4B51E28563B787C8BA7A96BCC3EA9E3A26E9B0A9946E642CB59170A89D
526FD1096B7C09108806EEBCF387FB03959D54B418E76A6A638407ACB5AE8FA4A7A5185F905D
C9A61FF94929D3C2BF0D92717D81B575FFE8D17E5ED3E5197CEE88521AD4F87CD5F57E87BC33
F077C90CD13297E91C49F226AC5A085B73254D5DD3871C97F873360FA05F8F7216C867C8411A
DEB944B47BB5305C6E7B51A9E41916AACEE057976CF4BA417A67E68C4245E92953C609AF2B8F
658DCDE16D328DEFE4CF9EB05DE0ABA6F076122CAE1110EA641D1D886775B5C5908D4C32DEB6
F8537A35F6DC6A4F0E0216E93BBF3AC1EBB21EF00BD2D7CD787C17915788D0CB4062A0766593
1A30C43B483FA325F9F92F45CE6CB060300B818637507FC323EB5C1958FF94C7372726A7B68C
9F83B07036EF06FD57C4D174480FEEB0A6441FE2DE8243F4621B553FDAED2254E9EF5B848F63
2CEA1A6B9F3D2E1EF7F770F5404AE0F4F3C912EE3281F9596B42E01325E8923923703CF60F76
03B7FD89888FAD0ACAAAF1B1A6463A3E73525840E5616D5C8E7F66683F2135F3E4D0EE18FA84
32AEFD05C3569A4CF8EFA471F0A1490B4A55093A64659B9D112EC90F42FA874F3F8188100EA2
F157BB4F9F52A1B60C8ECEA96E222EE4AD0C6B70B2B43F367D4C933F425D49EEE4C7030EE050
DFA7CC6D044CB9E20ACCA84A80B9F1571927E2A312E5A9991244FDB6EBAE1BFCA4820C193703
951BACCF931B654D6BC3851324D3394A3BE41DE2523309D5FAE513F18CB65C9D135C5F8EFB7B
2622B991D8ACEB91880B22944D26909B3544578C19C1DE4A16CB7CE5FD26EDABE394AC53B2F4
66E27ED9FD7528B6F7CBE0C4EEDB4024C76EFA6EEE427598A18CAAABD3DAF43F462C138504AA
D4517FE9A93E25D49314266CBE18585671EC97D8016DC14774CC105C2807E8D79E76613585EA
738B346C49534442BD3E36ABED00E8A6FF0C7BDC021B721E2DDC00B6C3E6F42A2F3C98DCF7DA
A873FADE66D8EE0A21A958C725026F4A439BE96A9405C808649E54177BF01D6026A6B759BAE9
689995DE878DA4EC878A69BAF3C387CEDBD62092DEBE87A063E21D01F632C247EF3F07574282
EC0E245DFEACFDC38AA46171D82616E121BA73B684F869908E65AF1C63A2EB7E812EEFE3C3F4
954E10463359CC957EAEF32A49E1D341702F2DCBBF1522EDDF1DF96F8C679F752C130546594A
5759E7944CA62474D30F5373801F323747F58A04A8FA115AC67309FAFAC362D6AF9548199389
20277628E3771A03D50A13CF80031E63CD4834D0D47C5AC75B7B22182EB95D8DBF64E531E595
A1DC9B5D7D093698CEF3614BEE91F73E5625F425CCC3C4A364BAB995CAFE438D8961A14E67D0
C03D8CBDDC4CC8C34D7F9C2A815CCEAB4B398D21CD45423650D0A19A0AC8654175C7E9A43FD6
599D2875518A431517726948BD9FA0C7FBD59D0A62E979FD9254AF03D216FD75734BDA875F66
A31AAA8F131B49188AD3AEBF2DFCBADEC488DEE91589B08297A960E21B4C472B21BCF55E1430
E313E1BB32EA42921A240917EA08C90AF9CD982444B563C1B823104D34F64DF37742F42D75C6
D6B9214325CB6BEB0280F79723E9A975A499784C59F44FE5C8FBFC9FF7F5643A5BF9E6E0566D
5C3134CE761811A725D9BE99CF34DC682243774E6A13B21459C2242ED68DEA64E24E8DA19F08
99072C0CDB2A807283D5378CB7D087D1B01F92E47D1D96DB42B57FAB36CDBB73E1EBAA81D22C
521A573C18067FC8EA38713C959046C985593AED0DF31989DEB783AAA57ECF01606C675E5ADF
81D845A542D50AFD29C98CE67A38B210EE23C9A14D23043F91FBE77ED190B43EFBEEA41382FF
8DDCA4ABEE4665B67816531F07EB8043DECB836794615F3C334B8734A579FA0BFBEDDFE32A95
389C6110D09DE30091EF2F29A29206047E8378A870D9831DE115685B34066B9B507E8DCFD6F5
A23B5CFE5E74527B30705D010CDC71BD90DB9A9A53053F6B24E65DC4AA0F7DA29D4D66D9DE8C
11354821B14EE965F16597EDBC5BEE7D4683E20C06337CE21FD1A2A5D78FF1E945ED13ACB556
C70F89A08202663F2622CBCF480336B8CE580275514B24430C139284EEBF9FE81CBDE98C00B2
AB9F85BA64E2CFF0888DF49C600EBACADEEC43FC0A6E92C499416902CDF94B318AFF4F6F4923
044EB2EF3A88D0D94CD274F40488309E2A08C10EBAEFEB2759D9DC7DBE2C0E647F36C21220F1
1D88299117AC699EC7241EBB828A03D18A58F8C7AC0839E929F6F58CCB8613D8DDEF8FD6525E
069613D644653F6702B0B097A177A31FCED5F7131F8A3E5A420D6C7684F2BBEF5AA88FD91243
8F7F6D22263373CC04446A640953812419A21793A204146A1296565E9103C1DAA633DBC79BA9
E5504EE0743946C1FFFAA5357ECCD3A269B6A63CBA0C0A9C76BABDFB28B0CEBB607CFFBAA692
360697C69E1EDDA67E12874F3F1260753249307C4572F363033B902FA48FE237A4F65736BC9D
A310CE406AB83059F02F94C8C9384F6811BF649506CAD6554912561ACEA6C1F4F1F2193643E7
5457E7207C55D0160BF194743BA207D4431FC2159A4D593EDE6B1AA19F96ED07CA67505EA417
C85A3AD0F87EABA0716C41BBBAF003881EE12CB4892184828BD1CDDC94AAE05C19999A6F1D2E
1DCE2A94C4C2902522E44B22131192CED3D42A3584C98C2D9301DB14EAE7474014C04AA8D2DE
A1755E5F9037D3E3821042366455AE23CAC2BE67E0A595A033E98462E1008294A00E463212A2
6B4B941255523A3C9F39197151E388EDF193D510A23F3310E18FCD55019DE861208F9985BEDD
65AE125204A6DF7E8233A25AF7AA151C3F8BAE7F6864386FD22EC8A3F5A179D7C70FF9E71237
EBB2217D09DDCC061D57445E8B9665E22DDDFBA4CC18B5A9DFE15224697ECBF4E797E3042AE2
754EF1BB9D4652DA69A07F57EC6162EA26D4650FEAA52F9B39AEE8767C125BD7782D3605E19D
FD2266E7A37B58146615D5BAE6B16633D5280D2CF0234B0114A91DD87AB6987FF0BF4D8014A5
24AE04E18813F88D00BECE288012E8A285214C8ACEB7A5EF665682D463462F04E4BA0852CDC9
8D6982DE873D1EC644F44B7FCE18778B9D8F130584CC3F3A8D7A51035F10167B8E572BE50997
EB738381421A763E96D785AE567981C1430CC18A79B8F57557588D3842795F2312C4D3E3DC3D
55D54A358A9C0B031E91185DFA97E0F5474CC93CC71BA796B4A842C8340360BC584A1477608B
D95481DEA6DB57D819A8F36BC70C09889E2614A2BFF7C74D0D1D09E1454C58F7CA672ADF64D0
ACBD1F9D3AC9203D7D011658E361B499818B4BDAB372524A385E65D4882A442BF53DEF1FB2C7
460DB0F59ECA306C74AED3E29A94796F525E2D5DF9BE7A97CE6F0013C0F39476A7BCF610F4BB
5E83D2CF1A1D515F899C81BBB60646125408922B45689BDBD82F14A2B9BBE1F27254A5D1BAF1
3B2128846E4DD8468CDAB44B9F847D31DEE079DFE5FE51870FFE9F18CAA25A2FCB978A46D747
544F2FE51496D04EA5478B209FBE843025BC64B1CBB0DBD43DB01744C471327ACB3C77E4CB6F
ADD41B9D4D1C0BD8CEB11AA2A239942C97D1F1594F6E4D9CC34285E4DC6F61E80CE1FEBAAD7F
9BFF9C00E0F06091EE76794F0B859B46447CD627DB60142A462A7A3E4403E839DC6D4F08BC6B
50E8300A76DE811EDD85431CCB895AF3045425F4099B1AECDEB7312E84DFDBB373309C9B1FF5
72ADC905A41421A77699C8885879F4939E7EE8888E7CF88EA12401C1154525807F96C6F192DC
5981ABBF512EC4B4092B515A14262519A630F20DC7CEB32AF0A2A10443EF54AC376851A23F6A
AAC95DFC30D0E4CB5E14B5CC323CE4D95D3612D6B19A877973B42F32CC03EC67497E3D9AAB54
573B36B1DD5D096618A4ADD3A1FD077C1B00C7E6BAE8A90C606C979A2523D5AFB67730416FDB
1F28EB72E6F7079B84A903C68942C9A17B1D71C30CCD288ED9781E50212CD06E5EAC59D45034
36E3DF8ACF1F63A8B9A44C8D159C1981168E5C4BF7CD5C5069EFA0FEE41BAC93B1C0E0BD9F12
ABDBF5C8404B53C102DCD215889A49F23C435A962CAB0C48F763245F0BA1E3B61C6A6E305D8E
D49FC181BB4E6DF8483102F70DA144937C8B5205D240D6616F1281E92C4CF018B5E26E74CA72
9A09D355F97BD76563A4D62A3D643D5C7BA4931B5A3E3A8079286D4365DA4E4F63236E4C5E61
F6743472B1AF5A5FC97BAD3D576865E55B3E4F214796C674C902691CF7FFFB9ADF45B6BFDE90
964E83FAACF3C1FA70C53F3D6EF18A8E13FF85EB35843E983393C292D1C4890F83A33DCE96D8
3C4D38B4AEB6B75B50E7EFFFFCCBEBA8EA3BDA064BDE07DC7726113C716FFA47A00D33F49115
4228B6A20737895E365B3EAD997F7D2F9999EE6F4713DD02AF593E6C105A27B9001E1FC7C57A
C408DB6309A6AB2C3C6FC6BBE62588AABC4EC9420A72C6DE5C0554547069E15962A141C4E2DC
4B38BEAD55F8E08F14B9A455B81A5CA9191B588A5E587A1471E9F1B30A7A866B19BBADAF5AFD
8674423D799F515D2B59E289843B98E57F6D5105CF14929DE24DCD833BBD7FC14CD0AF34A8F0
7284049AED310B36D0C8559504248BA11B4C6697D5B74353375163290F23F63B2C611031295B
2A5183036A4DFAF1DABFB1669E534A8BB28ADB16EA52EB238A242757B8BAAF53E90C258AF04F
9DD1B00B100CC6A32390E6FE91F13F675A3B78F5E23646F1448F7D6421C38A58DAB20EF56170
BE71AA9CFC5EECBE809138A9FE8B46B8B30538174C23E6B5DC725F3A0507F944963D9FB47C82
58C4EF8F5D4AEA6A5860A95E0B96943452529441C4C6E8E299DB6CEA80CDF2DB74AC3A89911B
55E225B3F20D3D605979045C72B672DF80FF1F78CF4992816E27D225A66CCDE49F357E2447AB
C6A570003AABF2F770E2DA3F0FA89E9A01AF0BA430C925E8F764C77B59FF767851A7D6570106
FB852F3047CB0AA041110529072160AD8EC569C8C1C5EAC5BA56EA030D104DA9C6D530C089DF
3E37148F4B8B0A005616F946C83A391DD7E7E776FB9DD3D52F06BDBB5CAF1227C4BA74861BC3
AA9A85055EFDBD275508DB8F68BC3CDF69DB4D1F825EED993B84FD63B237A38A4CBD9071D0CC
DAD295F3947BCD1AB385BECC35725F4F287450A49F652347C9B836A8C46A58E044853760AB10
FA647FA9862705641B5C411A2EB69086B3488F4319068C959E5D369FF0FEC606665B6C19A567
9A96138A966AFC86F64F803F55829C8CFC184D20D97F1B625ADF7E260EE89F20987FF29DA9E0
5A4C12AD48B56404D0B2BFC398D5991C8CE5F81E67D71F31CC8A4A6D1EAE0DD4834EAF3F7DDD
6493DE2D1D31606241185A05EA75A6036AF2A4C60079A9E21A5F28502560FEBA1820361A4B0C
2D313742A2E6CAD252169103FBDF7590B38A60C227446E944ED13D91D5B3DCC6BC8A4737D4EB
AC8BCFBC78E243296A76639D2726D968463E03E3BBAEF4CACE746BA11DE8DE942E1AA4AA29E3
993212FD27D3A23E55C731617AD58A98615DF3113A6537CCD5E4CA5EE7715F446C009F423622
CAF9293D9C25EA96CDEA869C00821CCF8E0E146A6977AF4FD1D6CB46D3A96CE4559D7EF177E1
9797615C95C51B2AC6DA1A3E700D4AAA84603E9E9B4B0F2C084CE4A17BB119B6C998045032C0
4AA21B8B4D5A0262387F884D5B21AACC93F1FB74EBBAAC13E092A860F9875B83A4F2BD56ECE6
B63CA3575EF0601F3D0FC09C5FE9D7B2523A88C37C3360FF2E8A3A0D6C6C9E448CA93728991E
F2BE037DE5FB059A72ADB03B1FC85C49A84B2077D6ED25DDED1D0F9DF4F137E4556A9D066927
217488D7ED62E22313109634EC5B291842369E376F2D2302A3D9DB199F0AC48B228C8218ABE6
BE8503502672F984C8A7A97B8B6AF3EE1C15230C5DF8FBBD04D78B28C3CA61F568E0EEC6212C
3DD622884AF4740BAE327F89485685C94503D1D86AAA538110D7C9E520FA19C129BB994E3765
8B6F0D301C8899CB735BED20E929BA4E7B6F3592D5B945203639979C6A459BACD0B84B399828
3F3F8CEE039A3E78C76DBB58EC4311BACB39E1AB2B8C1E65AD657CBA210CEE930CBCCE737216
414A7CD90ABB953F27FDB0991D76A23B8122FE3A2CB26843A4DA6681ECF996E4AD7A1102F4B2
44AC4F6E431BA1E9F0EDDDE9DB9399AA8484917776F256803BA5983A2575D9371A08F2330CC3
44B89CBDFFC5004E00097A757C390984FDFDFFDC459EECB46A2A1C8AA6A1618C2B1B49224E76
0AB2EAF6893219EDB7E107208D95D4D3F49E221994647667DBB63634E327C4DB6585ABB58D3E
B338F272AE572E9217D63CFA8F10C87CAB078B68F124E0537050B7DC1A0D1094B9AC9FC21F5B
B17756D65C05801D59E58AA02C509CCA118CEFD2C91D6735C1DFD01DBF1B36F267C4DB0C3651
CC9F1B325915E23AA43EA1DA505179DC098A3DCB76DF83BE080B733DC252E0A00BD702BF57F1
923A978FAC404F82BF4DDAD59B16883CE7C6A0F84E4A4E58A38FF675335E5CA5D59EA3DF82C9
3BF0CDB775B533BFCE6237659D0B97476D2C14120A35BC6970EA9554FADAD6AA7EA674529B87
603342FAEA220B9A0FFDC1236FEA243892289258940C2DE850FA7F4A14B6039EB93ABE2D6B60
E78D92B66E53C40066138E63A10A3F5D8600A3974652D7EB79C12E16D5D83761AAEE32FBA99B
762B564374B60F3074040D30343159EFBCBC67FD1B621181DDDA4EAE32E38003E45B1A21A04E
C69A3C05EC4A7A91E5CBA3FDB856D8127D9ED6C8E23EC8887D79ABD2FC139B5CB04D181E14A7
43AA5D5CE886607534117A5832DF964084FCE620A465CE886D1A23FF1CB0FB812117EDA34436
5AB72AC5128FA0FBDC426672391C4B61D3E60AF0815DA6D908BC6201F800C705A18A2343FF3D
485473FCA8DEB44D821066FE148D3CA23956C99D0BA4998A3E126A685B19585D7380354E8091
EDFC4E684AD032CB0DEFC5CB076A5AD1E9581E68B3826D09A96156E144733907A23FE62AE723
9871B1D7B790D74D7820F9A096399D9120D5A78E2EAD9D6BACC3DF32888E072021AF81166F6F
EFF32EBAF11A8DECF4CEE3C07E9A30F175AA22C7C615ADA194480EEFF72FFF2E97BB0DCF5DC4
85428B08F173549A0132B396E7FF53B578AE0939DC0CEF80A537B1D713B4D6BFFC987B34943E
ED13E4B723C85252F9561031F3E2144C7B8C8B5F3794435E1293E4106E8C0114A14AF6B37C7B
28F7EBE6D321C4BAB2DD04D08FF1D2EB4967092D52E8E5F1D04875FC7E00FFF8C3E9C7336CCC
8D709EA09DEEF006E5E809CFD7F377FC4BB8992DA3DF88159F1241F927E4701DAAEE33394645
B361BE7A137454A2150394309F69F41B8EAA3274D6E4AC2E9A94770BA1463A5B774AAD448F2B
FCA1D220449D1D3D09BDE0F582E4C09E954ED577F7F9ECDC5023DDE9313D7E0AC83C496472BC
35FF3367B62F1FBA6EBBE44892F0CA9F48FB4DF1C2E6D95F030305694C91E5D2A49CECFA8A89
61877441513E02FE7700CC536BC6FD9622093892353F0A83AE630D5EFFAF0338924E2AC575AF
4E644413C29EAD6C123FEA2ECB5B4B49CFA4042C31F3D6FF535D3F881AA9935E2B5AE265207F
94254C9DAA2E7F8BC6FDB6662722CB19E35E4E10810C43B0A46450E0FF05236C08298E02667A
7E2F4F1777DDEACB198D3E65FE34C78A3C71A542A0223828BD7B57A49337852A7E38BE96C8D6
8B27947476892A6325597AF1607104A3AF0BD539A433B1CC09D23790DCE90812DF84BDBDD0F4
56BE6404F2E59EB8882779554667D48C007C2B6E31FD3691E97F76C06C659FB96A417D2088FA
984981311EC3217A9BF784E579CA42B4478F6530B3E9F0FA1D701D4D8F040B4173C8E1E0CE76
006A644DAA1611446FFAB2B218867985ED06DDF3053684F60B912AB11CE7B3425FF389107859
0A78768D85E21BBC09E3B315CF56F6F3532F3A6B1CA10034B80CAEF1E62C2D91FA0799ADBEE3
240BAC2A24F35015700D938DC7036245230BC3DACAB9520AA950D153AA79A0570BAAC57452F2
C958554992B0A965CCD7BD9C0971B6EE8357E3DD18CF5E6BEF5C74DA84CEE08E597A5DF7A21C
17BED630CB74F2F21EEC8B3C2C6DF46E0FF5D571BEFA8398D3EE38E905222C8E94ACE8612170
1195D40FCAAA271874A8E6AF62AC4D60558A485505F4301959417D3F996526A494A201C4CAF8
4BCA877DA39E1338BFE9EE163E28993545B5B989D5E8A0BA1E1439EF7C6AC1747E272716A30C
CCE34112B67CA53ED3D2379C99E4264C37BC4BCB70118298D281B8056D809B82FEA6994952CB
5356BF3E41D19A2645A0139F44C7179B87174F4B5979B9B6E0ED55C00F4CF2299C6FB6C98010
E01608176D6BFF74674124669EC3D9EC262BE00B9F265C1BEDAEB13895CB58CE214F2D7FE619
762F2F1713A0829D3EB4E7FE6449A73C7C2EF52856226952B9EA375D9FE3E0FB79741ADACD2C
056BE97B93F09BE46C97E2B15B2A3C067172B90F41A8FF1952787EB93ADFB5D139B6E68ECE12
291B23AAF9EA86585AC48C85BF29259F01C2E158750E4FB1ED1F611669EBEFEDAFA8F1E8C285
A1068D065953207897F63C142234B79230FD7DAEC8CF3C178FF691F2D22BC2E17FD20D527954
B08837F88BAAA2878580E49A7D3D4B3BC91A228EA3B176020A049791F50F96266FAA79AA8551
A4DB3913346113ECBB742944417DDF2529568492D96F06360D20D644BBBB0F7136A38B813E20
8DE581E70648686C5C5C6E92FA752D8606B56143E6784E400411E2EAD4933F168C633812B2E8
208B964791DE0951EB3FF55BF687EC958399B4B34F70A80971D269AB955D8413B68E69821086
C71F87C1E60D5E78E721AFDE35380B930C41B72F4E8717393A013723C81497836A6D204368E0
2C8BBE44521C82CA5F8E3120E7ED232779C0544183865CC259A047ECC3EE5E139880FC96F6CF
ECCAC3EDE4858F312BDA343B23E19703A3C624D99361C6900DC9BD1134001F17295B0C2EB754
4939E8572D50F04C0EB75EB20A88C91CFB5CD971A05876179FE794D4072D929423EA9CD398A8
D31B3CB32262800CB5EE1266111E0504C14C1FC08E60441E89E4DF7C91CC5FFB4EACF83D065A
F32AB2366B0C0A844D28C803E33F1679EBDA804AFC0EF4BF320E21919959BE7B060E914F49CF
8A2CA28547DFB771DD7F78535FF95934CC749B5C7897EA9CB067F6D861064CAA233C3538F3E4
D5EAB1E756EFAE9F305B03E70E6AC14E0355AA871DF0001FC80620160DF7D218B64AA8C12802
CDC0CFD2E16E45FEB91D2A74E12031082E21A6CE76593E3C17A251E9B2EEE18A0E922DCEB758
DC42DE114893C36AFD4A6E3F1370E3D66B0CF40DF7B05473DA0B2C446385870327C847A5A052
81BAA0080C36EC65A10056619005B39D3BB17315EBE5187D1D69DBAEF5F89F280FB9F41F53C2
EE00A400CA8EED8E74337FD737ACD8EFD0D361E4C516B11DBAE751B408CC54D49FEAEAA64523
6FEA20CD8C326231E9131D003E74F1F8711C883E6AC50798C98758A226CA85949CE153D4F1F5
002E5EDB1C5AFDB33A3D5E6A4FFE73FDC25AED83C1C83533A5464B5EC8C0DBF39C3785BCF147
A4BC11648AAE5F2ABD1942B0412F5ED98A4B3A5BE1B679F66E0D0C43806A89A349F259DE095B
8538C45A1A14B320ED0C662129C881C6C70487D7EE3EADBDE833C415B992F25AB94E1F6FBB8A
FDE188FBDAE860368558C1049BCE0E400368BD094C1EA808230998645B88163F77C1DDFB63B2
092FD1B772C7AC73B095AB8749E65C3DD040AE17206CA88B7507AB3321231CCF8B2144EA51EF
CBDA013A011E1D18ECD5780A80C262BE5D6920178D2C129F87632A39289B032FA01FD6699ED2
E79EB18B0990B86F00C440B4A6CCCD109288A177E366D21CB16A569DEA5D20A732B10576182F
0EB68BF666B1004DC444960E579AA3FB762E529B6FE6D98E582B90EC73140BC67696DC49ED47
64615760C58E9329C02FCA556E23B11CAB4F516E609F6044FBE97289D4269AE5F78399432A57
5198596B1E19B201078C93D27BD18C8929F145415FE188C35DF3FD3A59A34AFA3C22CDC2757F
29AEA7B1D0D983F4D029E4071896437C8AD90459DAF4FD1FD173925A007A845844C6666CCD14
A9B4DAB72975E36B8C0CE9A63FA38AC0D0697F46180A06EFE2618B27FAE17F16A148792346AD
9C2C55E9836845B2A33E0F03CAEF4850C440BA483230CB078A72DA8482FC959B4EDB01FE8488
B7C5D7502F922ABF8A2195F17C2D3E974D2E5AD09E1E61FE5B723D5A4BD6336A259EA088E3E4
4FCA4DA49E017ACBA3C0D58F16A3A00E21D44F1F26693449D5D382A12C70C7959965479CCB12
5565DA2442641EA18B8DDD83D43F8177FD32298C0B3DA44D436C5AD9B85E47DF64BCA6898C1A
0EE73195F323D8B4B2442F15C7A73DA62009A31A45339DE6C491A04B5E4C383EF66A3749F6FE
7F53059F0A08C8DE4981D6A686B3503D0563A710D91B3D4587C3D12062ABC1210CADABC6F0BD
9C6F46C87C5B4F0445E7253145EE26BA9D839BF45E9DBF635644F412DD4B1738030CDCCC82CD
370587F4CBA6796A2727D3D4871BF0D8CCD867F2A0F32A3109F049AC032601BB5CCA0E6BA807
50F88F1BBF77557CCAFE6FA24B5B5D8FC4941C4113C4042FAC0D2FDD50B304BF290C26ACCF79
3E990B1A10520413679408F42399684D4ADA9CBD5C6660768DB2CE468DDF698D5BA1A73D3BBA
49E96320D04B006B5F6B0387DB59F2E20250E5DFEA9160BCBF855801BF6998D481612D82F7D8
D6AF0B2034C9AFD9BF26E8202D9E8DB1633167D0F073A013EEBF466A4FAA74B6A5055A74932E
64AA1B75A8708C9C6825141E85714C48FAE391D02A0CC9E537A7E11D1E1E3CD08DC693355957
7DF07821F6D6AA36154BD16E3D158DE669351A48CA71603C4CA0F364286D4A4EB1CB90CF20A9
DD2BCD0BE17C8C04098D9720F7F7ACB02EE63EA496E690AF57B02643AE9301F23D42AB02D414
5AFEA48D26118066FF99EF12C0EEFB4BABDCCDA95EB52AD64583C7EA5E54417C2805179F18F5
7A0CDC2C3CB502D4A01E5149C072C732BDCE5CCFE8EC465BD66691E1841956D79BD027535412
031A9603B1C24D3D16B0A3AA3F5E00FC84A30E28C617138828CFC30BC40AA24B94159AC5336E
F47064572B18678738240635FD1DF47722DEA61933008B1022F9A258F47FA2AE762646EBD5C8
6B0C7F1983E306E0F42508DFD5B463E91147B198E31D30BC4A84D45C0631886D42204C196C98
01CD982ABC5387E9288CF00F0E5810C712DB51962982E3A91CAB88110C57FEF58D16621B3D6B
34C7E3FD7FDE1177869BE84FABB95D8F054A96375CB59C4711E5830D5FD13A7F4C14E4F2912A
2A4E8E3072776ABE39D3DEF4A62BB11A3A6006242437BF307DE502BF95EB193CE32BA6BB13A1
F219CA0F7EE76257B74C4DA5F0D7985BBA1A8750808D741C6080C024E78FC0F3BCD2E0DC8396
D434EC98BCC467F739AAC2E9BB78129CA55B53E08B20E35FC13B9AE4762BC784D49FDE8725AA
EF34FEB464E3833F232F5D7B02BEB2D95B17949FB3624836CB344E64890D3BDCF5F459B1A1D9
7E41798A7F5EFD69F9C5ABEADA042F4F42D3C5ED8D50123F7B92CCA9D2C5806A4486032E827A
12F6F8D21A54CBBFF57088495FD86A7956D6C56C3D5B546F69ABAC67F386357E1C524679E62B
AA462AE42B19754F8548C8F7BF74FA0192F53D408DC9C41AEDE772E28BC2D1FC39F5208257CC
05DABEC5F019D5EB9B22AA825D57D1BA2480EF6F1DE82C18106C6047A4E2342A460EE99856DD
DC84D76A3D081B2C31A7820CDF58BA8C1CA26FC6D607FA9EB0EE5D328362971EB10AED06B8FA
23F49C996A1FF7D2A2224B4BB0F7E1E7297C4B330EFADC80A590C3F0C090F532678738380920
7DF928C685C48AF18AD3A9CE962F6F0A0723C6A84D318CBBABC8F763B47CB66E1B349E7864A7
A0BE27796467C403F9568070BF1D1A57EC7E97F22FF181FCA31C8FBBDFE1E4EA643FB5066D17
4381BE4131107072B59A83AF99BEF336B8F72B8658738A84F71C4D7EAD13D28B4E49FF90A96D
43B21A68979132CEADB2459B1107781A64073404D0F81A65EAC799E8E723E3C49CCA370F2A74
572C4B755E1C4F92CB37143954BA6C748FCFD2BC5F780C745B1F0F965E63CF53400B78F84BE1
0ACD20809DDD376D1A9B3C515D8F1781793CE9F8A4E769BB5AE25B36914932B1B0922212E4C2
41DFE0E7C24233AF5BFDC3ECA9C81FFE34931643515273378D2190DE75A4AE5C1B8CBC4A5C76
30008840DDA0E02E050CDFDB2BC5ED535A8E7698B4AB489313F7926AC1DEF01ED849ACEF2859
870C7EE12DB2B0508F4E58268306E709842EAB264EDAF84C93C15FBE45CC0350571C6368DE76
EDC307261C153B88D7605EA8F64EE7B1CAAFB5E6AA8606291D3198C1D3EC1725D7A8E97656AB
5113198CF6FC2B2515BCAD112592FB7A4BE9A281326F045A70BF02188837BD474DA9BC46D195
19267990A6DB0673901158567CE1D87C4FE76823076DE5B2A5C0225B7DB7BA7ED41F0AAEB535
5D6F0AB463CA0C2E8FD24ADC4DB9C32C5A0E3698FED1AF65AFB0183CC582897ECC050D288C9E
15EC7DA6C3EB200CDC2537DA19918D251D52F76E45075B02513A2DDA4548CD65AB129811EB12
C2E0861123CAE229993E9E43346907A4C60DD7E4B73F8B0A5EDDB30CB3D9D5D63C153CA32451
9843F9E9F22953C0916DB5E8D81DE8BC056030740772DF56F0E314D223C3B2836D34D61F77A1
05C32B57F7F1791B119B1D98D5710D4C44977C7877DA90D37D82DD9669F81E913B8AEF9AE22E
FADC30D27FB913B94F8540022EC0554D6DA7D0C510398E1185C2441AD678ACC49485A48E6923
1139CE1D2626A2824FC04FCD35B8E52D9D3D9305C680B9BA341646FB2FCBCCA2B7787FA5DDC5
CC8713D431621DEACC951ED554572AB8020D7CD4A9C946BDCD2F58FE9AB0305C670E92C7E80A
079388C3FB1E85261BF22208A17E3E396D99324D215E85E282A47AEC771841BD13178FB8946B
D6CE634A00D8BE0567C8735556194EBCD2D6B6AC3D5416597840A9FE2E231C8D92E044194C6A
B8B4CA0301788FD2EE4747F48811341463DCD86F4B52F0AB5543FE931CED6D336D6DE4A2E1F9
1878ED8D2C238296752A29201B9CB8C063454D959C8D5AEC04AD76570E9CF59650E2B44B7E48
2B06C150C379EE272B7AF205F30CA1C2B6E30CB0D2E438DA4363A312BB1318C90EDEE938DB9F
0359B90FD6284681FD3CE99BC434616EDB354A62CE2BD42D784B742911003F05BA8BE03D1F52
FA8F0AC9F5879BC63B7829CCC64BE921E5CF2F6240FD6AD7A69D94B6340B818EE64A68FF894D
0AF596DA0DEBE47F306F764548A450A418A1C88875B8964FA725B65C77CCB6BC5939FE0E7625
74166CEF1839CDF76866B449AE2CFBD393E210EDD05D0526E454348059BF88B5AEED05841A10
C894A0C49026E064E385BAF440D7B975AEA6BF1267D360308829BD81DE6DB3D5BD47B66742D5
565607787CDB514F2C4B69FA22F053B22527B91FE4A3EBEDDA1352DBC0B4144DB5DC15AEB3C7
8CCF0CE264C76682FC1B7D3AA2566C8DD47787092AD80185D867DB7891E0CE12A52C954EFD3B
0CE23DC59C9B073685D14FC24A666DF88FCF20D0A93B4B28F8724F46D5368F2C195DC0EAB00A
03ED7A0531408D90884792E82A8B0FFC7CC6D1C2E1AB00E466744407FB81F6B9B20B0EAF2B50
A35EF6F78A9E9EC9D322515DDC6BF058B58CC6C036222F7434A1F27811CC551D36ED5169CF6F
0AA6D58563C8792D5B74F08BFF06189566F1D0C9E497CD116393EEEA1B853B5852F9221967EC
1DCFE14394C5A5C026093982FB19F166DC9F52053F1BC7F449E0285C1B9684D8853F587D408F
1C97BD1D082ABF41AB80F47D189DA6CAAD9F0A416CF040553DCE2A9C853A71151EC50CCC71A7
F6E0A0A9EFF458CCDCFB0D760AC0CB9B0BCE3D0979E898E42D43A78E17FAE3C33BAC5B4056FA
D86567DBCEF75EEC322572144FC26D7F81DC9EA718D91B0892E5621BBAE940619EE3693E87FB
A6BDBCD601FCAD972556DF2E1B0587A7BC8CBEDE01B02E19268F2D31C34712E4F4F29636E3A5
06013A7FDA0EB8C78FE7C2A561CD4F09D162C17BB69A13AA242B8E5B189010058A3005C16BE5
DE8975DC24D778EB03C2A59948C9BF3BB333AE0650E5DF0613C77A15F510ACB08C5C74519B79
C527B36BCE33BF023C9CAA159995F2992CC9731B6AB100604195DC5A79AC4A02D803A18683D3
9D25EBA9E584B3F3F64DF241E43B038C0D3111347CF2B421FB78FFCC03D3ED2A0C94D228AF07
C5FECCBC460541802660C19C05A52CD6C1CFF8CC805D43AF3D23FC9EC8408E73A49C1DFF48B8
6CD9B3104CA1515E98E41AB6496F4CF4218996692106BF443C933DB8A8CC275F5F1602881B68
B787738070A1B547D6EA0520CF599B4E674FE930596C8DDC4D1454B1DF79F092608FFAD0AC38
25A8A3EDB0C97C265B35EAA4A6D80C538BA24D209884A0BAB03847600E2623508DA7D8DA777A
168150698A63F5EA4ECD54309B4989ED2C7DFF8A3940384E5FE0295840C33A078C2860B65BE8
AA2B278185AA977110EB7B9A95BB0B52F1E124975D620E897FEBE57540103C873FDA64B37AA8
F82C56B1AA233ADC9B8864B820A76092E2B17EBDA1876D27B49FB5A1619881935FA499EF75EA
AB18E4496BF7493420750B13D06BFBE1326406C72112F6A497459952C412535CA38D41900180
F41A47FF6859B2B8CC20C4243511BF0386261D45BDED1F8C15E01CEBB891A07128473972DE3C
0EAF60856001E6C966FC1822C5613A8D2D3704AF91C363898BE178366FB56673B9600E2F7F2A
7CAA391181D36880A86B5ED389C7FD49D231E3E82999932075696C52BA761EA299359837E712
BDB5761E8D5FC3E8C5051E8BC673BC050CC0172B9676943426C646EC18C222514D9F21BB37D4
2CF66168B74E6A4EE3CDDFA12A183697A121938BA5D51AD4C57A4BD603092DC42F6E8E15E986
D1A0153977BC89AAC6AA7C5576B3905131D1889C33E313BC29D642F84D5B5DB5D301813407D8
ECE2DE61207F07EE2F018E7CBF6C5C3B504C37400436B711756EA09327237F743D8111C9D78C
A1186BF54B5487BED5F445857EF956C663F032EB59DFF3C4315F960E0F787F6553E11B34BAF3
B0FB6215866C80F47F52F9B67E878024F4C3ADC4C9018428BD04C6824BB1457CD59BB16FEFE2
AE1388FABE7B9C1C8ADA3491E64B6FABA0EB8EA80ACDA137CDEB8BCB39B5D1D038E7E664051B
76E86E4EC718D8B8EED85E5AB8CF85B6872D4E94A76D78C4358E5744023B705FE01D0B1848C9
2235AD874B45C4646E5C393157CBBBB6F08BCE4C6EA80A9A1276D9BD58E30015E20120CE473C
AE89AD929A9AD4E6AA02F3090377853FF1190152E4D285B66B4CD78F29B18F856F460748A2F6
D2B1454D4BB1EE72C4D90FBE896AC81690D77BDC2A0FB9655683131B97C44AD1BAF39A3D8E30
16D847411668B1A56B8F34B40F48DE144330F7711EF447457D7FDC409D56E100D55A28CF188B
D2DD182D29D5CE0050D6CD9EF549C9FEB628E20859C7E7C8D1D0A62D90E1AC0442B0B1AE7093
DA6797BB069D6FA94270F60D63E0CC361E9D95168DBD7F8314D5A6EB083AB1B6B4972A2E32B6
512AA3F8F4FBF5EBBC8EE7ECD5667F0DE7307C3642955FC083119BCC959BA8FF46D7608679F6
CCA0616825AD959761F6E1B8B77C134C33D20B98DDCC20E5A98E49CCB4EB395E6F299A411814
606AE676871914BEA847228F323852181EC68C2BE40A19F07B0617DB7E29DFBEF4DE984CC937
5581ACB67CB727A2FD95AD7954C77282EF61E432353555BA81F4B9E55E4E2A6E1DA1D3265856
769DE6AB519DCF2BB108D5D7A88C6ACA9B613134EA47198BCC2746A35E35281395A8D7E45036
51EF887F28C9FA6981BDE859B5AD042E6FCD25CAF05622B269B9DDC55832267E3276D8A605AB
8D0E690534CB1F5DDC8B22F05C2CD60D1020333CCE9F03E778E0C7F47A94DB9D692E80D19407
E4F287A1FE21C5A507497C2589080836B31E9D0C92E29FFFC0CB3B936B9EC41F3789F900D591
A8A7057284A64F16F5E280AF642A5257728F9667E9D977C7A9D2A4B5F0AA3DA9B8BF44D1F8CC
5FAA51234EA419D31144B7DAA62D51899A57B5F625657809065D9985664404356F107CDC6E6A
C2AAADAD1EAA1491B5196059D0826C85FC2F0CD9320ABF52960AEF7509CDBBAF288D348B84D6
27AD28E4697D8888D5A8DDD5C3B6AE1DE6F24AF231265767089985766ACA72F5BDB495CFA767
3A183BF5EE172AB5E6CB623074E036A315DB038F7F4FD1021C6DD6BA078AD3A374B898F90914
E1E082C38EF669C2BEDA91F4262B350721D6AA0F6AD384ACC92A588FCB79941461FE8C336D85
5E77CE41575CF1E7E233EB10F86A9B1666D5D2379222C5873AB2112A78F7FA5D5788017C94F5
44152E703815C091213CB2DFB73B6D3107E708398B0B7E99E393DA14A2C5D7FBDC76B6DBB6F9
355D1EBC6E8C27C58E0A5A0EBEDCE34B80F0276833B836C142FC8BF803331A9B442F346A3E60
0A2BF964C6CC7ACEA399B2817DD63A886B62C7134D6725CB8D657B1F7628B013BF2BBEB523B4
D8CD01A6D4DCACC87AD88D0FBF8565031728D473C1F56B920334F9BE3297D5D9D13BABEF159D
95D044A594B0F9A5808319C56CE0D271F3655DCBEA72AAFB6275BB036864E9F5EB129ACDE00D
BFCE57356F9C7348E6461043901A12664A19176214E442546CA0E2AD92B4A76F1D4FA8EE2E78
2806429EFD99F730D0A0FC0B3D94146E3B8100A202D20B43EF01D2A7352B6C0D72F57FA0F9F2
C80A84933C3233FB134E545F08F5203AD4E9A86AB08B80A78AC2E622507B6B2B7B3ED0432D6A
515757B02D6E1F3C1508F00AADC3D2EE15B5CDDAE5A3E1E45D7DC3935CF05596147BFF56A180
7F8F6A9C4A1A4780B9EBE18711BD28FE3AFCC7107368AE8F59ECC160AB493D58CA2A2BA7F17E
8665BC548E998BF7666AC6F41D9308A60169FFCB69D4A35BEC6F95DD8322F5772B97A1450947
44BCFBDFF1AA8C9900DB342E575ABC306CB00CF58AD5FC1640948A9659C9806DDD807331015C
F9F35B8F662969B4043C3B2803C8FBF663DC427CC5EC8A3B5D19DC6248576274745B1315179A
BB1A22BD3CD63BAA4C721F3D9E0B0851C71CD890A00B758FDCE1BA07BA757AF53A8AFC5DE21D
0BB65F1FCAA506CE41AD64933FC3DC0105BA561469A752B393354EBE44B6285B262626F0CFD3
89EF8BF3FBC27DDFCFE529F9A158D3DE78A900A9C075B1FBA4A9463279A06E45A9B54D9217C3
6EFF1260E6E4BA1B7FD4CE0B06E60254D5B9112D17408245988E9814B4DA07C828BBE90F846D
6926AE4133BBB22FA7A709B24A760182A3F135186AD6EEA89FC4E8E4CDD22328818C33F7B51D
3872BC59958E2D8E9FB8812597031B800416981EA2BC3D906EDACAC2C3F7DB135DEA0C089E1D
F29D3058649EF749F0615371EC5C33B236EDBCBFDC2703FBABF8AB149307CA265EA2F31020C7
AB90FDE03717D7F9141806EB0F51D8044608ABB461363EDA2C51E2A03E4438164A1ED38BDA6A
0963D5C58B5B8160E70EF06F5BBDFA56362902D8825B7D9909267F00CBCA118D06FCFA297F96
BD2A217741A12C15A38E2C22A6C4075DD242807EC7C8833F0FE3D2CC1D192DD6DEF423BD89D9
4D220BE67EBDC5E051E015E89BB4975B559EC47AB22734BBA890504D2A182C565258DCD6D9AF
F99726742D7D4DCD54C8451288744684D3DEB5C16CAE4A3D5E712E64EF5462B09C2FAF1EE71E
9A9E7D59A36FFBB2F3810CB5F57AF19B803DC7DD74C232A8C16E6CC952298CB0EC833519D900
50A2EF37221DD3C2EF17BA91D449F5585CD67A61BA5E50924B7284EB313FA38E722E40FF8C22
B85614D35EACFE3802E09FDEAE6BD67A8C9F258944C0274E7132188CAB333DA084FC83B01FEA
6960C8523EEEACA46F8A81D5CD76018F26B29959D4586DF9F1D37B10D33C54D8993B64943300
D58C20810D420A2FB777F989E9AF40F73F1A2FE89269BA0F8CF7028363548E20A0F09163AAC3
110EC78996C2988BC20912BD04FE1BB3CD8516E4D1BBCDD2C258B03980C399914D9AB61E67FA
273CAA1003D22A00B732DFFB659F634E236667085830535B9FA3A6FB09DA331E8EC879E5365A
180911204568524F45E0D6777D38BED818968E664FCB5D9298BB69009EDF7D417AFF14DDBEE0
07F23201A728B3E350825F7D30D82601908B47973995152E920E0FC4EB9C6C7F23FCC243D849
3BBA1CC6C48C34F2BBA180D46AAC7CA557D8A470503891A08332F22CE1878AA462D32D0D5F86
9FA4CEC032E385A311475FE853BDFA237D80A3765EDEEA4955C8AB844DBB144684EB1938B7B9
37B6BBDB35C6A240399596AB1DA8B1F8B76E1A65A59AA53E7FE5D99EB4F53EB86B828007AE49
1CBAAE32239ED78EC190CD7CDC81A0EC4B09E9C04DF92733DECF8984A0860D04EFFA220CD882
D27B6E3999690179C4B102458F78F61AB29A339A79D8063F547A588C8FEE8D391A660EC06631
FFF44042C125E6F2F2047022D78CDD3C2722B1CF366971B03CC722698D3342A6F92D39423D7B
73C60ACB78B3846B419EEF24EF6F14F6DE77DB07460D74C31B6673682884BF269FCBE690016B
C966E9A7A16DA643565E7ED417B0DFAFC844282EE2FC8EED142923B4AB007D7FB72A8CDEA682
CF96051AA111B16579E0C9444486525F9CF12359A6BAE88E2CE869A75EBFAA6C35F5DFECC810
B8508B7C4709EE0E8CDE730E984C199A673BA85F51ACBA7508920D5FAE52FCE5089C5439BCEE
F79EB48D8D6701333ACD8FDD10E156FB7C2FFBE0A104F7128F868B16149C7A280C2F53CBE2BF
22E3C342F11F49D2BBE5F7512BEF84FD218E97B1C0B7859F412155279BC80F1F6F1A54581496
B77C2C713FBD5B20785C57A0F4641FC0DF448D5E79F7125EBB17918C60385B79EF4345CDD44A
4AF266AC009BE62A9A6CD0752E266A9454FC1AC6F004704BC53D6414161F40CCB4F4CC2F2DA5
0D860E9EE2274026B0E84E110BE5D7198DB7A3330F02B913E11CA291B73CD0F9BA34B8272143
C96D13138F99C05A24D0F6A75C71D94A10ADBB1A47813307A5EDF32102AD9D25B89A64AB3A1E
6C4B87EC7416573B5AB977D672D9F6DDB48F710D4A4C9CEC91997C655276F25A00A570728709
2A79B33C5B79A43E44E5B175F576791ABCE72E9FCFDFD126649F8E59EC3248B15F262A00DB6E
A3327FEA2F1F9F12DD23EBD73953F8593D303518F8E37E427C122E43A87803EB749C7C9899D3
99E98C44EB1BAB1C0D0A334EC3F5659014F2693119CA3D0FF7E78D1F263E8737175EF80596F8
7ABA98EBBA1BA57615D71C738DF9C2059916CAB7F2916ADE2CEF7F5962D1A2973E83DC17B803
3666CB270942CAA780D57A8ED1255C13F2EBC68F41A850A20F69FA7598E3D978C700DAAEC71B
45542712F6BCE8E043E94680BAE51345C254978AA287707499C7784EEF7212C2B6455F2C30EC
1B0637D6AF1EB17E185D2B0C756CDF6C3FDF6EB8F734012971B13A0CD95F38DFC84C965AF61E
C31CB1830445F84A252423547ECFDA493A2A9C0F75FF5B7844764864A2FA724AE3DDB141A946
14D8B83C64F08DD9327357D58C3FB4B5AD4671866DAEAA3664514A1322D62AB645D4192112B3
738ED3A84281447597A84E0E0D377F881E5E02445EA5652713B4326A29B99F3FD64756F4C25B
CE52A6015538BB7FC519725BE94885A5FB18359EF03D764A04F1B67ABC3567DA01FDAF7C7ECE
65A10B249BA50EA113D5B32C9B0044B01D74CCFB2638BA533E9BB53E257949FE1F29D7112A14
0E0B766A2F3968F35CD0A6F497B2A4585E1A49D6EF91464B8A01412F4DC4D1703CCF5A9B03E1
0B528FEE23FBAE3D419D11956B65D8E9D73298817C207981940C029C67246BD743AB4FC15EA9
6BD451E6C1E599C554AB55BA921EA5FF370EEF85C70B5E877873B376B2734B8E5A855BF00D19
F9B37D882840394CEB15AD2C7D8EE6F50E1DF3682BF863B7CDA4B491464E46E73BEC1BD2410C
CFCED868896E83E230D69ED8E27673E5CF7628597BE47D05139DB3CEC1083AC21347C57D27CB
8B4085CCD54D50E4E7B6F0CB07A26DBCDB7522B5197ADC31E908079961D9B2D5D3CC0EE8055A
D31DF8546E4E417F1488B6477833A5A86AB95F495665B34AE46CF8CC4C33367F462F426662D4
99BE68D634F025D8F712FBA6A4145E8FB090FF5B61CD70E5550209C92530AFE1BAB70B715893
BC3532B9EDD957279FD92142798BA005E3D6C0BC95EB6E451B078FC6B1ABAE3FE77855BD7354
F02EAAC338DBA19689823399BBFF119850CB442E5B7323B356341A4AD204E8E05489CDD464E7
FEF19C5BBF5B495D91F70525675E5591FDB276576D6DF322A1085391F89941AE1216724D6C42
704B2C920AAB2FD78BFB5481098939A0B2C7D1D5CB8AA7AA31507A117E2E9AAE05CE84BAF157
91DF6D594D62C3857DBE27335AA79C909E4C2C571E0C3E1E6DF11B4996B8BC9EAF76575BEBEE
A7C51B2EB327CA1BC7684FFD06919FACD345D01BC3E1FDBF8DB5CDFECF107F7F5D5BE5E7A108
E189A0AC6DDA11749FF6EB3773DF65287E68C6F1FA8FFDBA58B9488186234E9D2B0F8A2EA96E
3C521AC756405853000FCDFCEEA528AEDD5E15FC8598F416456F52EF917DA951A0EBE9E6E863
F6CB778E0A5BE95D26A5D47C1EF7F07C10F2376D1869E05BE6DB2553126ACBCF4870385A1B1E
2FC1625B311752431EDBEAC958BEEFC8576C0FF32A26EA29D228E4E8D3D2B926150D736F13C9
1FABA41A9C3818775A536C2FE073D5830617559F2EAF8EAAEB3929AD970089443F934E1C937F
FAF9CC5EF69DA9E747BAF74D1279C82D37CEE291ACA600DEA23514A55A54E5ACF8805D52DC78
C7E4D0DDC1A3D02772D731BEE16F452D9398043275A551A097670645A2A4CF093EC252192FD5
59A780F79EF21472A10ECAD1542577C352B54256E11B93F267D11515056267DCCDA2C5AC2134
C32798F5706223409005EEC21998752034A3CBC845885933BFDEE7D1CB32FA84797FED209590
2E36BB359E0E79E78E9162E8F8DFBC9796423BB4B98F9A9FBBCEA1DD5DB31D431706D80C5C29
64532ED8AF6510441BE3757F5D9B53B8D9FF2DC6CB4E1F8D1B47F553C8D6D1962E9DF2A97FBA
979FBFB52F4D4CBA08A5A268CDC5A9A6CC40738577EC1836BD04B3ACF76E899655CA496A1B9F
5C9472A90F59DDED0D4C368306F5E3824CF013A7391EFC56986E179C79343B763DA88DE7F1B5
1E2756031154F752F7BC2A858EAA35C549CC24C932DDF0459F4CA70925ACF39065440C6B2FE4
8018D07A0F5F1975CC52CE85F8C7511AE1043B4CB421F5095AA0E1E588412DFA0D86CA55BFFD
F223EFC18D56DC7197AA1E8E08D4BACD388719AFDA2915579868B6B756A929B928EFDA008691
458FCA9FC5086D0FDFA6EDF122606C9ECA9C6D0163DE9F05F97E904BC6B1E0F538BDD9E1E5A3
63969EB55B4CAF47B2A55F27E9DEB5007942D2CB6A61AF76F7E3128B918D8C561C9A0510D5DC
8A8676DEEA7B0E5605F72BBBA35A6A24D6EA143CC8900D9A6F7755501969F25C3CC0F7928AA6
0E70FBB364CFD14531BD0B6B327A3AEAE1FB48C708CEFB4E369195ACB18A9F21177F868965E2
CA10074FEFFB10269E43C95B3BC7EEDE5DFA60998E7FEC6C568433F06EB48AE53D26C262E7C5
B349C64B493FFE2EE11D3D8CA4FF6B9CE4D37F4AD6765D37B3559106E3E80F2946E207523349
5048F3425505466F32FD35255978EA5467FC8FE4F6C147084E7A46C493876F647BD882CEE359
0D5B3EADEB5A72689DD0DB1C3A8B89771CFDF77D9637CB915DF7E0F8B1356477B35EEE547362
E97B58190EF9B3D4F442FAE6E7305DE0356CF604516912F4787EC315071578AC3DA58AD383D0
4840891CB3FA113EC89A2FA43E7CE250176A5DBCB516147CD09F5C11B2FA2C2B2D00D69FBF26
6D9B2E258ABA75883D48D100E04650F17DEFF97BF4C406DFEAE8A6202F56C18310BBA393553F
9BBFB054F5939FCDB910ACC0FB10ED21D7CF7A7430CCF97BE7FC77714DC4A287544DF41DB14D
B5FBF780CF8754FA7422C3F57E62CCEEAD9AA3470000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark



%%EndProcSet
%%BeginProcSet: aae443f0.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmmi10 cmmi12 cmmi5 cmmi6 cmmi7 cmmi8 cmmi9 cmmib10
%
/TeXaae443f0Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/alpha /beta /gamma /delta /epsilon1 /zeta /eta /theta /iota /kappa
/lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon /phi /chi /psi
/omega /epsilon /theta1 /pi1 /rho1 /sigma1 /phi1 /arrowlefttophalf
/arrowleftbothalf /arrowrighttophalf /arrowrightbothalf /arrowhookleft
/arrowhookright /triangleright /triangleleft /zerooldstyle /oneoldstyle
/twooldstyle /threeoldstyle /fouroldstyle /fiveoldstyle /sixoldstyle
/sevenoldstyle /eightoldstyle /nineoldstyle /period /comma /less /slash
/greater /star /partialdiff /A /B /C /D /E /F /G /H /I /J /K /L /M /N
/O /P /Q /R /S /T /U /V /W /X /Y /Z /flat /natural /sharp /slurbelow
/slurabove /lscript /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p
/q /r /s /t /u /v /w /x /y /z /dotlessi /dotlessj /weierstrass /vector
/tie /psi /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi
/.notdef /.notdef /Omega /alpha /beta /gamma /delta /epsilon1 /zeta /eta
/theta /iota /kappa /lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon
/phi /chi /psi /tie /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: f7b6d320.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmb10 cmbx10 cmbx12 cmbx5 cmbx6 cmbx7 cmbx8 cmbx9 cmbxsl10
%     cmdunh10 cmr10 cmr12 cmr17cmr6 cmr7 cmr8 cmr9 cmsl10 cmsl12 cmsl8
%     cmsl9 cmss10cmss12 cmss17 cmss8 cmss9 cmssbx10 cmssdc10 cmssi10
%     cmssi12 cmssi17 cmssi8cmssi9 cmssq8 cmssqi8 cmvtt10
%
/TeXf7b6d320Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute /caron /breve
/macron /ring /cedilla /germandbls /ae /oe /oslash /AE /OE /Oslash
/suppress /exclam /quotedblright /numbersign /dollar /percent /ampersand
/quoteright /parenleft /parenright /asterisk /plus /comma /hyphen
/period /slash /zero /one /two /three /four /five /six /seven /eight
/nine /colon /semicolon /exclamdown /equal /questiondown /question /at
/A /B /C /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X
/Y /Z /bracketleft /quotedblleft /bracketright /circumflex /dotaccent
/quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u
/v /w /x /y /z /endash /emdash /hungarumlaut /tilde /dieresis /suppress
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /space
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /.notdef
/.notdef /Omega /ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute
/caron /breve /macron /ring /cedilla /germandbls /ae /oe /oslash /AE
/OE /Oslash /suppress /dieresis /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: cmr9.pfb
%!PS-AdobeFont-1.1: CMR9 1.0
%%CreationDate: 1991 Aug 20 16:39:59

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR9 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 161 /Gamma put
dup 162 /Delta put
dup 163 /Theta put
dup 164 /Lambda put
dup 165 /Xi put
dup 166 /Pi put
dup 167 /Sigma put
dup 168 /Upsilon put
dup 169 /Phi put
dup 170 /Psi put
dup 173 /Omega put
dup 174 /ff put
dup 175 /fi put
dup 176 /fl put
dup 177 /ffi put
dup 178 /ffl put
dup 179 /dotlessi put
dup 180 /dotlessj put
dup 181 /grave put
dup 182 /acute put
dup 183 /caron put
dup 184 /breve put
dup 185 /macron put
dup 186 /ring put
dup 187 /cedilla put
dup 188 /germandbls put
dup 189 /ae put
dup 190 /oe put
dup 191 /oslash put
dup 192 /AE put
dup 193 /OE put
dup 194 /Oslash put
dup 195 /suppress put
dup 196 /dieresis put
dup 0 /Gamma put
dup 1 /Delta put
dup 2 /Theta put
dup 3 /Lambda put
dup 4 /Xi put
dup 5 /Pi put
dup 6 /Sigma put
dup 7 /Upsilon put
dup 8 /Phi put
dup 9 /Psi put
dup 10 /Omega put
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 14 /ffi put
dup 15 /ffl put
dup 16 /dotlessi put
dup 17 /dotlessj put
dup 18 /grave put
dup 19 /acute put
dup 20 /caron put
dup 21 /breve put
dup 22 /macron put
dup 23 /ring put
dup 24 /cedilla put
dup 25 /germandbls put
dup 26 /ae put
dup 27 /oe put
dup 28 /oslash put
dup 29 /AE put
dup 30 /OE put
dup 31 /Oslash put
dup 32 /suppress put
dup 33 /exclam put
dup 34 /quotedblright put
dup 35 /numbersign put
dup 36 /dollar put
dup 37 /percent put
dup 38 /ampersand put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 60 /exclamdown put
dup 61 /equal put
dup 62 /questiondown put
dup 63 /question put
dup 64 /at put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /quotedblleft put
dup 93 /bracketright put
dup 94 /circumflex put
dup 95 /dotaccent put
dup 96 /quoteleft put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
dup 124 /emdash put
dup 125 /hungarumlaut put
dup 126 /tilde put
dup 127 /dieresis put
dup 128 /suppress put
dup 160 /space put
readonly def
/FontBBox{-39 -250 1036 750}readonly def
/UniqueID 5000792 def
currentdict end
currentfile eexec

9B9C1569015F2C1D2BF560F4C0D52257BACDD6500ABDA5ED9835F6A016CFC8F00B6C052ED76A
87856B50F4D80DFAEB508C97F8281F3F88B17E4D3B90C0F65EC379791AACDC162A66CBBC5BE2
F53AAD8DE72DD113B55A022FBFEE658CB95F5BB32BA0357B5E050FDDF264A07470BEF1C52119
B6FBD5C77EBED964AC5A2BBEC9D8B3E48AE5BB003A63D545774B922B9D5FF6B0066ECE43645A
131879B032137D6D823385FE55F3402D557FD3B448685BDD20EB05D5E7C2126132E33A59A717
0609DCF4871A5D023C9EF57D3362D9F2D7A440BB69BF653364105F16F4D0F03582F9ACED3D05
CC76489B16E3FA8A446094D30038B06ECCEDA269F2EAB9D19A99C7F939F9548F206C5A457A19
270B2B82C43B091DFC5573468EAA3E7A4A32F8042891D85E4B180FCBCB3091D2800E54C87D84
CE9CAD6869B5AABBBE47F40C68799893D22B765295E1E69E33AA048B7ED98BA480CECA91F3EB
F8EF85FE9A3976909626B95AC5940D53F9B02215D84A44837BA25ED15CCE0D504F1D33506559
4F3BC8245405407591CCCB11CFD4645DA60D960C0B93F187B0CF7B105543C0B70F89AF5D264B
6C026E3AE646ACF145950202EC73282111E3E601CF2BCDE22CE3EDF6DB23516481420F26552F
F4472D749811F27768150450D0D0EBE3C79F999E99B5C0F22EAEBB12D97782B1BD91B2A1F62A
76412548AD53C0DD411D4A08C0F071C2C21863D9ADB75A4621803ECB84C2BB235B620B658984
B2D8E0C4637E2811BC8F0D046C8935AFC70141E1B2D9C23BDB251D304B3378FAF8928BD09686
AA0340FB0CB1DC48C996EF91530FF078666FAD227A3589F50B605267212D3A65EBC1019A8EEC
9A0739A00279471A01E1505C17658C10030FAE32F274FDC8C8774B0D5406C384A1D17068DCB0
C2575C562FDC5A2176609BAD9A2C255E426A4325A4FC3053C7B32F35F7BBC9AA50135F302233
60FA2FBF019294B1D29C5E2AA489FE860FE1A8795EA9F2098A92C845BC50220471AB711BA6E1
8C4AE211F10A172C60310C10FE9DF9EA1CFECAA5FEE0FC12063F8F48F26955F5809F8EF09DBF
7515C7EE361CE74828581752D0169CBD3A850793875694C551826A537F8F736C280C09106A42
A594173592AC22D8837B551670E96F78B71486427834F531C345F233ABE4153ACF5307CDC6BD
FBF55788BCF0826812EA3D220AE12D403B7185C3DCC1D211F1FEE7BC12A6B005E4EB8DFF9EA4
F388E39D6AC968CA08B6FDBD3221C01021D4559A396D424C14BA169501BE44275B5C72470C71
8DBB92EE844F7DB9A5938CB340443B5FD69C7F0318056D55AD66025179B49D484507E6E1D38C
9E3F20CA96B31EA1892C0E8B844938D9EA985DD202056BB54E7EB393147E7AB32B335EF1002E
4099909E199154CBA70736830E49AAA18482203E1DF6C36FC9E661B0D4B4E9935A30127A1771
ED815451983AFD8E6B9FDB0E7526D9566C2C9BCC5A4F8D8B69ABC257D12D97D2771FEB780A15
BE513B3740F4252534F0BCAA9C755E94AE61AA697BF689107C4FC5841E9DAB101F3B4C00DFEB
A79D50E74204835B872160AD3BD77E9CEAAE233C72DFC902BD16E457C7A53E665D60D6C87429
D3CFDD52E7850E490A5F133082D17220A3146C19F0FB45F99AB9A94180FA8E8B19DADF23DBD3
E2A099D533DC3DC0229415DEE606683EC67929805DF2288CFC116ECEE35BE81DFBED1A77044C
BBDB7FF8924D50763F9DF29B0D67A7105C455F8A853F80E58D25AD263D860F2E31ED1789C198
F2C9F71F8207C331E9A81CAD1759D93D65E6EC9F607F819C136C2642B192547CEB6AFA4B24CC
B316A9B16426BF862316154579CDCEA5AA8AB67E9C68717920124953D48C429E368FE62695A6
C755FE17963F4AD10EA11D1B043C73D03FECED825290C562041E819B81682CE89E3A8D712FE1
A882B312A5786DC2AA373B8C733A1D29C641DA4666D939DD2C1ADA11B9358C292205AC7AB478
7D14B38BB01AC9BA36540E3A2B9A1BE959BC5617EA85C2E67EE039578C98C94EA95FC8055EF0
DC155B19ECB1E540FF78D579E629350A957DD0E41EA444B2CF13A2FE054E8952E97D9E2B1EF4
9E63BF6AB23D3B1B208A2C030588B3B635BB798EBB1AF921F801B2711B301175CBA843307E7A
3140C30BA881D13A533415D46E4DAC4BC37BEC8055A79C6578EE31DC696301C41EEC06A93A4B
6F35B90D3B2D2B0CB23C7EC2BE8D09CE2C14425C1426458BB270284EC1C9389909CBCCEBEBEE
A168B102B92D40FAAB8D73B1D610C234705CB6349ACB167578E62B9FD886776A51B59138A33A
7B5A668427A8E86EF022BB8076C6BDAE83349F8C3B2FBC85DFD0E981926E25AC33983FE117DF
14B94B1B6A3A3D9C8AA229D5BD71DE6DC3C01DD803CCD3EC679B64A9FF6E2B4B78CD3D7FA85E
E7EB9E159F49CD814DF9C976F43A5974F66D7FC9BE938CA166FACD1F28F6564D3F7EAD59E5A6
3E6AB443366F74E543BCD4A23073AA56CF26B12BE2498BF0AABF534290F45FCDB10AECAF7E0B
8F124ACC5DCEBC60A1DD6F877C4F00F03DA11E2716DE7BDE52EC348EAEBDD3E2547051B80652
69BDA67E6A946D735863FD50919FE961DED54F53EB1D5DB088B3F7B2D5EDAD30A731A85E19C7
9B658F9D1E914E0189FAE214687B438B2858A0A660E2436ADD68ADFA8639B15694BBDBB74983
8ADEEAD0A53447B6C9C46623EE15FC6A66B014E70E29999AC5C51699039C6504F026DB30AF28
04DE56A155712CDE2F15B638F50C7BF4D3EDCF224C5825111A48CC34A8822C8315A17C1B5874
B2C115C2FA893AD13043DE08D2DFD2F9521AD7C36BE22C61DA5D422E1E9A29B3C555307020E1
29236C13257EA49F7494C5446A2BD8B9755566F68BE651E1E4BDCFD8136587B62DE3B79977D0
9BA18CB403E84DD8194586EFBAFCE53697EE87AA0615C3CA76DD1023E36343C390A145A1306A
D53D8932003D87263E5CF260AEA09EAC244FB41342ECB2F0C8F3D0E06DB67415034FAA24CD46
883A5A8DF7128DD4A21C4CF6E76DA7696AB66BAB62D31CE6B563899CB066E2135F5DA74050A7
7FD3808B550E477821B5B173F6585E3FB6CAD840F33606D65E2460E54FF603257735A6728F25
31F69440280766BE322DE460EEBC2583CF0A8801D13FA4F636A1EC35FE36B02AE7E7C23E32BC
0FC721A5F372B81EFBC8B58C3343CE67E34C1EFF8FBF229CE4F06321F1D580FC186505535989
25D7AD09C9B9DD3447A2DC614E1A7A330E0DE134CC469B2EDB8E31F9663D2BE685815F962AE9
B1CF51C8584062BEA53BDBDF52C5AFA07C0CAAC0C9F92F60CA7288DD7EBC53F61C0F670AD5CF
C5E35488BA9A8305A0253628B4357993933ACA122D43D5FE9B76E881E86C7AC2B4DD1C96B527
4BE5FD69289D9C37C95ABD38FAC01D7933458ACD06170BB1C87EF09BF45F75AFB40936611DC6
7F3A809F5E9D82286A7B157AB8CC8109733AD1DCFBB95E6CCBCD8CDA7B8FC2478419C8AD0A5E
51A274B11934F69C5FE4C9BA16A2CE0BCE57FB888368EC93AF6A1DEB09AD493BCFF8529A4D70
422E3ACCF3E2F8B0EB8293333BEFAF1C0733E29F4BF1D4080B2F32778997B07941B59DF460F9
B957D82EDD5596F9B110894123421FE8BBABA45C0D69A03A3432C02CA9768CF942AEEF860F40
0A3E837FF346F0066C4C92C35BCC3E207227AC924E7F9E282DED77CF4CF703F89282571D3FA2
A7218E75624E153AB91AC251D4B221A93BBD47DF57D70D8F95855CAC83EB021DE7BAFD06F550
803A21063A06AA03D5458F697CABCA2E5AE12692C7D118C15B8BC9B299E8207A555CFC2B419F
094198BD3F2F4F4EE78347415AC1559A224D8957F3B610A1E9FEC3DB3D4BEEAE4016C6950858
8C9CC5C7976966A4D9AD20AF67EABD911A85F2DFFE448AAA8F6A0B2568E393BFC7CFE93FFED7
861D8C455138DF1661CE4F8ED9EDB500CBE6DD745E43E209E81935CCC9F8CB75E49A3B2B1BF4
3A59B993B361FE0F8C3D80561F071F93F04A1865A3145981F1937053EBED55DFEB7E5B4A1532
C1004924D9214007D04B35C162A40CD23794F157FEE32C667DB378B42FA66C1365E95D770BAF
BA64FD7659806E42BB3E1A33E0FD213B6B3CACDF3CA24881B4DDF8E615B616A32C27F00E9A5A
4EF256BE36108F59CFDE91E473A9E403B675EE70AD5D165D2901EF28EF82D4FCFCD23FD51506
41044BBB61B5B74B4EA4D0ABEB2546100AD4620B589586E5FA6B8C3C825FF0DC811045F6AC1B
AC57EEAF487319917433495A956F4B0B4F2E113615CFC62DCC7D46ED424238187DFD734D090E
96C308A573E62E96FDE5BA3C8F0D2DFEA845B48C34558241299111CBF1114492F790D2808CAF
445FAC91499FF2F077B137C28FCE443ADCCCC1D5BEFBDEB8B64C452ACE58B96405C7244CAAE0
58897DE7AC76549BDBF2D541DF175355DABDC292B4DF85B9E7127F794E1D328161690B0D11CF
91DDE93C174288419871E8B7F0932BDAD96954FD1D955767D8CF3337C78FFBF8F7565E5FB755
E252D86FA101A3A7FB119ECB3A893E5372FFA1DDF431781162B15ADC845D6A81021EFEE6B91A
8E2267FDE73984FEBBA71AFE464F4A5FE5F908D06838D317F2230BFD733DAEA76A404ED4C55C
59F3D37D10F8D086E5590352D92EFAF0D94A15D6FF0E9B9942FCFAD9EBCEEE42BD47D627BE8B
DDD5A725E7893A62475DD24B4D9DB0738B5058A2A26A00D13006560C7F6D5C302CB6E6F9CBE3
CF58FB6C6405CD6137B938E7F16B07D0B1A6524A3D34735AE75528E8994D2C944D90BE3270EE
01D4C180989A1C6E0EF34691F0B168B33957DD1FE0E8F0B5D213CDE640D9490C8B68D8C7F88B
D1B1369CA8A8911C1A8E3EB64A640FDC7BCAF45B3CF69360B1265E16302CE6EE2DE6F872CB21
E4F6A2F232384B704F2F198F8603FBDA728B15A15C96F473E471F86663F25ED04CFEE32F3E1A
B4E2EB241D0E347A245F164198B1355F15E237E4D00FD36279DAA3B8F826ADF11F2E241C4FF0
8B7FF1F56E4E42312EB34C8F1DF5EA0F9C75BC377F8F3E842F09B1F0CE78FB0621DFBE87DBD6
B052B7BC67D66D9242CE2714D54DC5DA474D7EA79DED5A510304A77A96C790D0FBEEF2243E4A
3CFD2B393910C4039432ECF531099FDA34113DDF106E81DA407D901CA7CD99712B6AD589B1E0
E36E949D0ED0ECCC5CA3E435B33FE26315E88B04A29D1BC179EDCAE2DFAA32980A32D70CD55C
22AF4A15FAAC46AA19D0DE0A69A9D31F36388BDC7AC2572011DC394BBE8A602E0A0A870F6693
DD80FA1FDDF9142533B8C5E75CDED67879560FDC4098C34C856C3D35FDA7A161BAF08CC4CE54
C06C512B1DDF9955483CFB324E9B04BDDBAC1501A1C67491EF95D2548095D99959257582905E
824E26071733C83F3E84F44F7FB1F4549D3245D750C5F34953B152ADB57EB3BAD5FE23821781
FE2F256EA4EC2972243089AD1F7A001E1D9C2D680C1A2BEFDC23907EFDD645EF39C55A67A847
73F0E9F5F0D64109D12BB9DFF604333BD7555D5E3EFA5A14192E19E38496E1D42A55009ED6FE
53AD6979A1E56B5FF2C369686067097E6506B912CEF34F019FA6FA39AC99EB312B1B3AD02DE2
35C40C65E0D505D062C7133D39C03EBE4B75CA6FAB5D02B5CFFBAF537EB5C4A00AE18FC50E89
CBA3F7FA31FC6008C189665740A6048900BF94560F32AB5A34063822331D40B98524FDB23A25
650882399223C8F327370073BDA351D165847D2F0B1EB6545AFDC31FDD29324563F9335DEB05
7F4E1BC026F34FA9FDF0C94217250A08F5F8937C8C8C113FB126DA522B92FC8D70C5F04C6B17
24E1B2978A5054AC9B43307F1C173BC6B545DC68BDFBD5BB5FDFB340870B2D147120817DFE3A
8D382DAF3BAB1A53E85FE476B1306DBF540AF07C439A765CAC5DCA4AA6F4EB43B2F93C4985FB
269E0BAA5794D3C02217BA8AD52D8121ECBF0C3E806F91206E0EF43FF82F561400DC2AAD277F
C7665543C01C7E64AB886586A5BDA15C1AB6DD4E482475CC2E00DF1D355A49A1AC2E57CDF5BF
A64235E1B23A480D0CE94E656AC92B1A48F2D2DE0462CA1C7A5B5B4FC97E73A262E9F17B3732
38BC7C777DBC7B927ED471CEA8FC86E8547DEBF728216C750D460DA9FA857F92DE48A04C7C68
05FFB805DE8F03293D803941BDD89C1EFFACCDD6A9EE0AC1EDFEDE144FE786F50861D49FDB2D
089D24F98868FAC405264E4CAAB7B05696FD4D265764F8EA28B74E405AD12A4FAB428AF41756
5238C72F25390CDDA953D478B6E564DE04A596B6210362D0B3F37404CD7DE65081CBDD5F4989
436C4DFCDE6B238A4C20B3067F85DF8858A00CB8A4240F3CEDE461E82A44B6DA2AD6D494BE30
10B46E7F0B6DE9702B55BCFEED0DD89A1FA02F772F52F8B833BBB43EE2671F7E78057D2CEDCF
816C24EC3BE2DABD2E2E8A9BDDEE62478E432EE1BD71C7F79DFD10C1C184AD1499283D557ED2
84CA2A2AA7876D90F0C9655100966BEBF404A28E19130F38657F107F48F705BD9688EC2F68FA
DD38490FD9FFBE2113112EBE30598B9573BA39F1DDC2812A567352DCC3CDB54A677573407F69
91E22153318B0507B35736307C1D1377621543A0987F93E99198CC9B022A99BC5F5CA8FC0435
E723B2D84505E279BE7760FA38107631E82792DCCC71C3632904E220A16514BDB0080B84EB9C
74405BDB19EAC2574C0A7986A36C72961A55579950929C73489F0A07CB0E2A69367F86B2E5DF
88753AB8728DCB19FC80BB077805470C95A881EF657B842F00EF72D9FE3C754DA84AAA5E3799
041AC567D789FA6DB50C1B88C7CF4B5E39CDDF19CFBAE9225B46B0AA3B83F9B4E8D215AADD47
F2BE0794BBE4683FC3F5AE9301E7D16E3798E55B193A2AA1E0C2F61003CFD6E10BC7725693E2
705B323DE8434A2509293B278D71922F4BD432C2481BFEC17873B74205C5DE79B2C57F518F5F
D0F971A4EBEDE17E4A034C5EB5A33E2E0E03BD6F61BC7DE8EC3882A0FC885F020044D1AD7D7D
7E0DB4C425BAE04FCA6953B2BACBD9FB2AB7C015B72EDC5B05BDCDE08455769EC2A76E4A557E
CDE85DB30BAC84497B35BA2BC581CBB60112CE4DBB17D53A18EFEF227B049F3444CECCD0E788
0E36AEF24920A2F8EBA2BFC07E91F07F186A80E390BB49E786DA672CFAD2DF5CB7617614D6E8
65FA2BDFAB653CBBF6A617B1A3BDB61BB8750097E0CC6CC94EBD23438E0F8EFF3F12D4529523
BC5FBFDCCB4D4F29271182B3A848A7B55A46262A9BA3BA0FBFC983D136B8EC45F4D29476779B
93302C1DF35C73C87C1B340C661BC4984668326F7142227EAC1010273593C86198832C8D5594
AD30E3C90672B49EC8C3E25C98C065EF239C4F0AB97413E8726E7C0766906F4E70034FA98314
B9F3CEFC13E40F14A7883C4DC850EF4CC8D637613033D74CBBDB9837505E2894B9FB9B33E624
659BBBC22826E155D580EA8B9EF3EB27C070F619ED7EE7EC0AED05F45E5D9C4C6B6D6418E019
C81E49F18FA808C36E501CF9FCBE138E683F914B25AFAEF8E017A3E894271F01CC636FA29537
79A4B783773DA5DC3C70EA5D0178AE18BC3DA6A4267507029D47A552C7091F18E4A7900ADA98
73ED4D472FC0A9CBFC3B08A2AF391DB35093EB03A66A99499DD68A7D9D266EEA7CBF6268E81B
2ABA51B49A9869891E0435ACC6F9CE402AA1DE2A496EE5C1200FA4E2CA0AE893409347A21866
D32808C3B918F85CD4B412A3EE8668605860D74BF0F13CA4AA1D6DA673AF97CA5FE989E348A6
756E003CBE748AD34E0341006939E03D47182EFC7C45171D4E127FA471A934FD2C788C9202F3
0C7E2AF2C2D71F3A072A2A00A1A81AA55D8A546235ED9177492EEAA89647E6C3966FD7BFD46E
BFAE9EFCB7DF8BF03B1A4597E686967055BEA5F3B05F48D3CF37C33CE1C17B911353560CFBBF
0595C41CAAF024FEC83E4168239C22252F5992569B275B628C8CCA3229EA4AF64221CA6D62A8
84D636E0854A1B5E0B0307B6FCB3C6E6B0F887E516E132F88E1830C0801E0197B9CB76CD9A83
13BD3A7940D7C160DA3D9E67B5E89C9732C13F24CFEDCB7ECEEDF1BD323FB7BC5B3BFA8CCC5E
081FE114A5414472DAA4F889BF94B387979A8DBE36998C4D61FF3CF84FD9D492E91CB09D668E
DAC03C71CBF507E69A37C9C5884BE278EDBB604E7FA0A2B276CDA974571FDC0B645590723B6A
571263FFB8A211E84B27502AC775A91856D368D3E776F0050AFD4F39FA9C321E405356D060CA
26EA89021F48FBB183C9FFBA571D5E4326405C8B6EF0C0D7E8BEFB66B06E3329A4DE2DCB7957
E41BF1345AE0A40538A9EC7C063360A81B3DBB7ECD87D28666E59B105A5EDF2822B64C34CC48
DCCE38E4DC8D49E20025B3E3BAA8D798EC7ED6B1DAB67B87BB1CCC3C91390CE463CFC0FDF02A
DBF77DDA6E3E3F812BAF56D822FD081B68BF59DB3DCEC4FC052E92A653C5E399F749DAEBFD18
C9F20C0699E18E1BBE3E4275F2079E59587B4462B0D437B15CCABBD924AD25694782E0395D74
6991DE195D5CFAFFAA3BAC74AC86CF67B66EAE6B9604E796306096CD3DAF489AB2711270F5DE
B93097F45AC29DA4C7FB493DCF76A56278BCF2627F49ED20EB74852C00BECCF2FB1D69AD40DA
5ACC2FFC20551178F4860776CA2EAE54779374AF1CA3485F314969403B33F4C61C78FD76275E
D73A513B7E4FA4F2A9355C013E4A981D21FD319A54F139648244D6B05EFFF45D94394B0B5957
E33BDFA11CFB0EABCA6D8C69079452DBF6ED2C934F01C4FF3290A773EC24907B81CF658FDD4A
626F37AB3FD4B37F0CF439BFE461870029F5785B7E7CBAC4594DB8C51F8CF2EDEAA2E0190791
A0AD7E35CD2CC66D5F5152EACFF983E4A12D321C6B20AE605DBD8A323A53F92B6F5B0FF37D40
2D46A9BDEADCFB3530ABF0E0760C96658C914C4861016EDE63722F522AF61A888108DD9BBA4A
AB5B5C6C8FE89FF9A4ABD054AECA521F88D96A86FF7EFFB5179EF3FA6549F473A71F84F11E1D
C3AEC1719505D1E6B7DEAEB3CAC29972ACAB9B8770B53F5A6AC993C74921847D6A566BC96567
4B3BF7DAC1718854A47CDA8F89574D566EC01917C43BBDA54D50419918A84A3118093F990312
C37CB5D67A406142DCB578C810F27EE33034666D7DFBDAE9EC153B2889D38DE3D923778BD5B0
D6A00FE38E7C3794D29231BB0118F54253B7F10D9F245E2C884AA5EE365D5689BBAFD0B2C2F4
046C5703B5C01A2859D7E7716ED1DDFDFCFCCF00768061B060F48FE16496FEBDEF964227F0DC
7311892CA3F2605B59F2BA1242A882BA4E6A986B61CC4146D3AD1B4CEB6533319C47E7745834
FE9F46B9ECC7CDA3E283C7C5F744E55377DBE88763E48108A4A1E2DCCB57902E77EAA7C95E02
C654950E0644E329D2B7875722CD3E573C5ACCD5CE0CD66BAA840D0315D693A8BB275FB821A1
FAA9EC0EEF490578473B3705B327E41BE324B088F424E6BAEA36DC7CCBAD5D23B8C5E4A19A74
2685477C8363BC6A84B2065A1E02AF63D6C33555D5E6A8BFDFE07F2E86ACF69609B7898790FD
F53D8D5B9EBE7A33A5252EB71FFA81D8ADD80BC11004F725124BF3782DC99E76B702AC01E0A3
2E1BA317DEC909ED48094801C6B52B58BFE0B9498CDC28B83472DB91D3CAB55714E934E08BDC
5027D907EC675C94BE19185B62A8666A8777F139C58445FC70B18AB35D2E22C3B9824A38219E
CBADE61729037510BC840DB0E3D62C8A8F33CB124F12F71DE5CA918E3F593586251FA72E8D36
A992AE354423303EE1C2BF3D3D37E64EEC500B31ABE2188049EA48C93A1B99D9A82B2C813224
68560F23EACED62565F3301835E8F96335592C227169FE2ADAA1F7D8D6474118F9E00FF26D63
0F86DC9509E021A59DA152198979190F2BD180AF8E82ECDB204D9A2FA51B182A84E958929F18
3DBD8BE6575D4C13943F00ACA12C2EA603B107D15DD7401CBD5FE46413BF16F99DC7618DC526
EB041DFA841D964A6B5B438C1470EADB68FE4E97D4896395C893EF7177C2909DD9BD8AE8F25C
1A71A6FB7F9EE515715F4361E0B01E6130EB3506E926475F4F1A8B7E162EDEE25286E7565448
9CCE65A80C54B46C6EEC990A8F5006697FEC8CAC1DC79B6420501A66146EC648E49F5A1A9739
25E1F4FE865EBDF350D841DA96C3FF7D9955A9F4C3B2991409A50185E20FE5FE331E569CA978
6925306020833F9F304C9780E8A142617A0B4758AF5BF73F9DBEC6B0F3DCA36648CEE09C08B8
E23147681BE470A753DB32E84089D2AF3BE64B9C242182B4AE759EDC6CBF43E5825DD2E86EDA
6686D6C45D769BCE34EA05E61188E4491FD136CEA5AED10E228E44CFCC461B507D2DA03A10F8
80341D2F0DBC12F8CEBF0A89F1587E249E6D2089C8DE18CFD1BD691EFA55C66C71076094679B
46875C78397C0081075EB45DB6DDB519D685E98C44A1CED29E29EFDEFF2B76137F55E1B585EB
84B8AF5AFAA54DA43001FFD88A84747777A7FCDE41025E6BE63F0CC91B97256903DE43D3BC5E
9CC0572D9DE3D185579310E93D6775FB33EFD1838B2214EB2332C1AACB0EF116106867A359A4
A69297B6735176FC07FCDF7DFAD6C9009F87C21B3181796941C2CDF8A2AC2EAD7A70143D8B69
29E1E36AE6C45035762DC43EB810A2CC0DF7A826376E9C08D7BB38360E0FC2B60B6ADCF4D560
99D954C5436B4F9C2D15F8429BA4792810FB13E7DC39BAFC1912E1BAAD45F6AB0327A5D93FDB
9D947185FD936229E4C99280878D91E2018979B583FAFAA33D5D4730D57FA680922D28B12D7A
F720A080207D4EB4A10DFBF3F77CA336D3A12326A5C3F710AEE63F2767C2074199C9E2CA8851
7E46D019A8B4F880BB6D5745C168AA0492B7569DB707675D485067F313A2E1F56F7A2C93CF03
3FBFEE635AD06C6CCABECB5CC777CF274E2A3A7EB96D0B28C928C59E77FB3BE301647EB377C8
D2E0B57B647F2B7E7B01F44519A3C561F7CE84121093BDE4F9E799B0923608EA9CED23E03F5A
4DD1425D2E6219AD8E1388C46027483931FBE864FCCE49934BE30DE22AAB04C6BB453D52C95B
5683CA29C73281333A4E2424B3BAB34AD8AB8270327CEFDFCDC4E63B3BC7068692BD663ADCB0
2C7BA09EACDEC25FD07D2E236E299EE0F9290E5B8B7F8862FDBD81710468818674C2BF94050D
C77B479F6FBD83EB939BE411711746229018421BABBEC891DAB8C00BD15602A2236927BAE40C
057B88F3834E2582F77DF3EE0F387F6DBB23282F887956D01F183D73DC0B074A81432EC813F4
ECF07EC8C51620EB7B796C22481284FBDCF26505CC200BC1D73821A5A8E3975D9E76FE594528
F2391911403CFD4993A2CDBF6011E304A858165C6BC439CAEC6723792A78F565BABC47D48B98
FFF4CD726C9F35FE3FCE4B2955EDB611F0EDF6893D904B2855E468EFBA52BE7BFAC6867ED7CE
7C226CBFDF2A4B8A545209294FD58C883FF1398D24800CD1823500B0FD98B99E6D24F11282AD
35FE21D97826B3CBAE293C191D5107185A620CE3F30F04C540C9F39C1BF0F9F59FCCA1D06558
B0A01B33308DD3B9EB11E881B9A8E317682DC53BD91D7A984A751AFBC2548DCD4CF62B12414A
CEAE7FE31A084CF7C809AB5EDA0D7A65A4E1552DD3F620AF1BDFA235B908FD2A56A9D316C262
3812C7967FB7E21330D3E3F4788D58F08DC1266107842337EDA9D915307DF3605168D3456D40
048E36016250CF994AB7ED3343053B638E58C462B99EB88F1543FEB8E8DEEDCFD096D82A8DCF
6F978ADBC77DC4DC1C5EBD1783A1BDE71D6F1658E1BDFF1E8FCCDEB0B9CEF930421519D60C98
96906A79C2E5207D6629DBF4A14863F7A9B8CF3CD8447B92004F29092F1ACF42045240EFEE4A
70D69F5858647C686CBD317881C53E59795B32757FC33BF15AEF5A830BBA62DB8C42D1153FA8
DDF7ED7B9849A2080933EE4CEAA4327C2320CFFB858328E2A936A58D8A94D334B463A9BDC35A
364A0DD0CAD4BEA0AD9B7366DD984AA3AE74C823BC32EB265A7B5D122834BB53DE3A37B414B0
3320129D8F7B78E59D3459758F40D049FDAE7588828EA1218D828DE318648BA0E0A414DAF43E
227CEC67E9E0DD502D9A7925D5A2281701DC636BF79362B724FD93FC64BE8BA63CAA4D750113
25B3C0C20F8DECD8C325688493F3347A71309482A2613B5048E06FA6AD50C6D0C615390DD3F6
F0F549C333D1654BDD3E372D3970FB9880D15A2D922E86002A98807F68491D29B1341E562B56
5C220B70F0239538551C3CB40BD1B45061205A60E3345BBA21500E8B869533EB266C31BE4FF8
4F42F0CC5D8B178B67BBE7CF357199A32F94C1E8EF8CD65515262B29464BCEE3A93491DC134F
97BE64FB222F15356C11586C7DAC7B2529B6B6246A028AAE3BC08800567F633080963BE6CA8E
CC8D7385670D9DA59CC3E33253630AB01D3D5FA4DFE77523D2CEC4A5DC8DC62D1515BD78E719
2C5C1C2199DE7876E36BD6FCC3C27AE577A72247C807EFDC6635FD80081B8CC78498002EB78D
FB2B4A13B3D1DB8E6315891915F445E046ADF168358F713B4358FDE076907DC9FD86A86E3E27
1656E9C6D24BAC96C6D400F4A931750F9A4E753F1572E069B4D6F435D63EC1E8B223DE713CF9
6A40F3745543B8A9789DADD2493FB1738F06F3F35E4C295AC740A44557DA6E74F26A23750FF9
D51E053EDBCF2CC30D9B6DDBAF684AF9D0EF7A14C4EB101DD6F84C3D7047C32293407103A660
DEDEFE02EC9869C2FF2C0ED1CFC46A73F879AA6BB207007C76FA776098139F84B4A0D28C3AD6
D500517AB58BDF672C24AC6979967698B28193C40B10E6EA1A3705B6FD1C1C2FB3813B3287F0
D46B922673275C63C1A7126A84605D0AB5701C88FEDC467328998A8564FCD953C31C7EA2B668
AFFF9872F86DE95F3BB1D9DD6FA033AB0B8E903AF01DF2E6B060E3D5116379676EFF7CC5899A
ECBFC89A0D7FF73E46174F1E452A79E36353595A22493FB7D98AFC04549860F0AEA927653A7D
B1AC86542502FBC7357314CA668F66E7E44A33F60820FA1F53E4BDBC448FCEB4D685FDB06978
8D870B203BB18C18C8970A3513232662E92B1E5B126390AEAF1177BBF1EDEB55A1DCA43B4572
3C9E8789EF056EDCE4FBBF73BB37C90FADF5105312E67F467F0C0BD42FFD8E5643895A5BDDAC
12557707FB82AFF8DC9813D0B931B3E7513829E0BE3FBE342A6A3786F2656FE68299968ABE35
5CF4FA53DA08F6745130336F5AB56DC6549EEEF1F579F0060298737DEC827AB7ED5D627BF7B9
D8EF165A429BEA10A1C2ACE4C668730912EDA9F75D17E215827042E1FEF5D72E643C1BCE5E61
F8ACA43381FE6FF1E736654D11FBA39EC251D69CC3C5B7D9145ADDF5CCFA6DEAC18D4B9F43E5
2F3B660A34610761E9937051AF51707581ED226DF239F8F7C735B4FE3D9B251EDA1C9BE2FE14
D603BC91B22CABD7384D9DD8477F66983042D99C911B14DC0372C8350B3BB1BA4199BE157A08
DDFACB5BD368BFAD813A05890B8BDBFEC778301DA6CDC7FC67B9300448505B7BCEA5C1F4A06D
0D39C12DFB649412827813FEC978530C5CE020507B08F90FFFCAC19B3E7B7474ACC6F4BA357D
974D0B5D5F4C5FDFA899F1895595A51FD2590F0DCF52CB5B5A01DCB94589900AACF23887A182
4C95295BC28EB912FC8512CF1465B7D1469AB94C104C1C1A57F22300CB9A151B7E7431080FC9
38868B5A7177569212C1EA0D185CDA5503D592DD781386F619661A4C1DF9D9082F44115BF318
5419473A1A786138E344C49842AD159E143D671BE1F224E06E71B5E14385F7DB7EB083F8D3F4
CB8B3FBAC22CA88025F8CA84BDF31FEB9D0A5A379B8637E4E60A5875860945AE85A04D731C6B
C9F4EA2DFC84A4AED87C6A3FE4DA0578A82895D643D64A99FBE989CCC2ED431464F919B89916
730868A3DFE6DB998131E15171E39AE509521D4029384D68D6629424FF243B8F3573B1656A89
38F21E0FF51702A24DCA86CDB87FFABFD07E23245E6A0522B15B8B7F02B32AC81559471C6032
CB63B5C2AD350F1E60713B798178FCC159EB02B5C033EE36F3D760C469AF012503AFD3E4BE8C
85403DEEEA0F9862A1DA3BA9BB4BCC3CF4DDEE1D7EDAD994C790284ED6AD9DE0C6E6A73812AE
1A9295782ED743777A549B6A99C55DE9CFD50D98B8ED95A54D9E9516A5976D8BC3AEE24FCA52
52FE4D75EC8F2D9AA34BF988384A3A9F86B1C55B6B38519CCCFF89B7CD0165DDF9B5141C173A
8539C8DADABDD4786452A37B2245C925A0CE6277C5A66B8EA55533009535DD1A456057D5EA3B
64384D89BCA81F7467518138B5A24670CDDBCDFD5F392208917853858A8EE9A5B4F2AC060ECC
9A0CE34EF5CA812E15E10328D5234D087E80AB369529DDADA470AEB75555C584C7F68C300CBA
69CC30169760947DCBD0382E4F2C68BE14CE1C521440AC192F1016EAA233A23FF59BBE98DB9A
6FD16AC25576AAFB7CD417033A9A43F42DA250D9AB53E96AC10849C36348ED4B59B9E758FF89
7630E8AF3746394C15FC94E1FC0FEB30EFA61C962E2380EA0479C6F3521634B91718CA44027E
69D235ACB2DC0F45349AF9A4F7BE58056F6B574AFE364128C0AFE227231D0AA97D45E01914EB
2EDA018807B73BEEEC8BE2CD1414E898A47267F4C649B326D097152A984B0492C9F42059BFFE
6189AE83031808223BE65067437D7A89445245F7C6F5F61D87B86D5F3B40F9261EC3E142F495
F1B199F30A13BA2AC6770B7C73D3A333090E267D3B127103A680DA1A00B0C148F9D000CB3011
0292FBDB1FAD386C862D5A3594A31DDD421C680A83FF41FA03E2B32CF3D0FE3086EF12DF80E7
B5EACB2ED8CF1857A00DF3EEA3510F49D6F7540EC0BD08625250DF8A3B2F3A160C0A0035DFB3
4B7E960550C5C040F0AD461A407AAA9AA7877A23CF99551FDAFF32B82FC87BDBD86A6CC9C63D
F6EB8BFCFF2C1E8A3B57BE35C0AC602F7B4F3A8CB8CE62253AEC186B1BDC8320D5099180527E
1CFC40F7398454B9CBFC5BA0B421F55DEDAB33CFCA11217608763D23685E1530D0FA1AABD091
AC9A6867DDE46A733712CEF63B46E29FF70E9210224E0964FBC56A9AE0F600F720F81C7060E0
16ACBC1BF97C16F26255BC4D82538BE080D37774642CD4D4C95B3BECC85E32D182BE7A1F450E
F077500EC91B21C383E71F9B6690C0616457CD8768916022279A6BEF4589A85732149014F067
746C3FB95DDCBA28C7F0DE2C81926DAE7967A387A06DC62A82F813230BF1F2854E214984001D
0BD4A7F8E778CBBDD88D702863FC3C8593255627F352DD3327EE291A31F3DF409F108DEBA842
3116CAD62EE04D8CA8CECC16B8802F698FC2939E3898771FD932799B54705A481C652314C8B6
4BBCC883296CE238804F68346FCA2F20EEDEB4B9986B470B84CFC07984D5A1E896790B854B5F
21BEF81262E1E32B949AA9EEE6BF20B9141C890A41081868E83E5780B54A456D1D5F21198126
93DA3BCC8C88D6DE832717BCBCEF1ABF462E949A415839B98D91DEF040B43D7B1F174EC74506
262F04F1E599CD6B01D8B5902C029C97487A1E05F84DF9D42FB47DE21F59F91B78BD16DD9FF2
087D1A73C0C58D4C9C53F64A8E2A076D763B581AAC565E34B05368A456F52D64528EF327ACDB
4AB6263C1561EDABAA3032EAD94A6FB956F24C2E18B6A8A47BADA39A20BA4BC035CB8408844A
1CFB7E4107DA5FF66C307CCC01B93DF8D99FAA99DA5F3719FB26C2F214F18494BD92F9B6DB1A
F2DD492330615C3BE70D6F3E2E77DC8348D16339CAFDBB96A90436D2ADC86A1864B5C2F4809D
01717A052BD791C092D600B1E2F6A24A21E13138621461A3BBDB4EE06D880B477DEE907B0928
A154AFC2716865D8F751C398BA65E70F325089882018E0CC5CF735ED15428F074C17AFA559FB
3E94D43340136BEBAA8E47C773DE6C28D54B3ED9FDE6622924159135D49490EA90A7D91BB08C
4345C0AE3FA4A1461422EAFF8E9C49329AADF6342B7D55FC513821DEB5E2DFBB36413E954E39
F5A24B3C974839BEB97250F1566F7A7F2F9F603D2A5E43CEF4AE5B0BAED2B6304461E8C16A7E
F458E6542E7F8933E6C253341874867965489527C80260E254411265EF559A5CD9E25F6CA0CF
EF2DDD2DDDF07653B9A0FC6066903189D076F485EF03D52D14D676406AE2CBF46E818D964607
759091C5B0EC784AAAB7BE495FD20876E11547DBD9CB02508BAFFE62D3DE7F5AB79A2C94318F
E16574406E7933D4FB8FBEA0DCCFD1553BFF56B1E04BBDA2B43B71A77DEB8B445E74C574D7C5
B530BB312EA0EE227242D4FCA0CD13FD056E30433DFABDCCF6274BC85B3968AEDD85E3ACA8CC
017B8077C0991C4C83490F5C59F3F383C6C7BF0A7DB9C4F8D76CD146E3F80D4DB44ED37674B9
0091E05114257103902A9966F75DDD14A0B7EF5711A429BE60E378A89C7E1B8AEFBA049AB1DE
59D36A037AA41592DC56E731E911BD486FC06B17D66074FD7332452EE69FB9909D8D1B245E8B
7C3A4061F3D2DDB055CB9C8BD2BD1BF13C2239E90D9581A323E8CE5865162AAE002F29A05989
938C8F78C781EB5EE467854052B9B520E9B518FEEA9DE7B9D1D4D13FA85892105E383924EAF5
C7634E06F9590E1661C0D12F3F867AFCA1A8E34D8F2D7FAFDF87D345D914E3065430E84FD70A
DF71630C6C836BCDBAD5AA6A1E7C73F3DCCEB4E351C1B3CF348EDC47E8E1E27EA2CFC2B3E7C0
BB3F7AFB557D158D820FB815B8FE1DBEBDABC179B0914064845C90D2710D506D17729D57F2CE
A990A49176E3A3A128137DFA6AB814A9B4F544E290BCD8A13E92D4EEA56889B0D2B58C50A02A
D9508365881471FA7FF4C028704100F45BA347F8F62B3B8C827C2B19002F712D68AF8BD7A167
E6B9D53BE6F44496E5B00C8458C2A15B90BFEC6E5FA5ED5743F4E607B93EAB75FCAE34A6B163
D919B80C7E62B1E119BFA65520E2D7B78DAE89E34E0A3D7069EFD1B7D69B7396E741C1E81015
710F743D2707A8324FEBCF46DA37F1D4A26A62DDFBD03D93F13144296D728EEE912243F8E8F3
83042C51E48CA1A5FB757E6673CD599BE052BE15E9809F4B1C1373F0781963B39763DC4B3473
0936DEADE5501C429D265002A4A280A1B7FBECDD6FAD9518BC26D0886314E2C3DDFC5405FDAD
8FA9B0FBD53863AD59BAF1B0BC6ED0ECB34B7EDE368A1825A896AC132D4A3B598989677BA608
A26F6B35E46ACF78CC959F94787027C7509F8E8248B32A68F75A5E14E2118DDA7A3861C3944C
88C198012E811C71D94A3FDF8DE7E842A1662088B4C014CA1C29BBE58A46A8CD7E82E277E8B9
EA73F75E0BEBEFFFE0A2737F200CF05A697210847EDCB1CE17CAAE782554D57C2C5F206893B1
49ED59028707595032EA8BCE284A9B409C69C2EE9ADF0CF13035A1AE3084B58557EFA596B273
DD7582EAA8153DE775B991C27124F684617F45CE264F3749BF05DA720BEC48277BDE7320CE97
B39317D2D88CDF1967D50496CCAAA99D341E448160DA81DB763F8D721324608E9E13E7B92318
22C669F6F7472350FD411BB2874935232E47CF8BE653C8DEB6CF00AD9367CD80B674DC67709C
8317CAF2D618170F99155E2BEE988A972FD99F28AE1990B5C8234721ED0B5B05BB714E2F84D7
056CF0D2B0C46E1823163BDFD90642CE898A92016C9D05FFF063E7B4B489C6C452CC7467E64A
59978C6F82DCB872D322ECEA7BF2DA6187D78F27E4A1A9FAF3626554BC5CE69DA195CA0837E3
A44AFCE6F55C2F540D6B9551CEE083F75155E978CD5BD4782C24EF20DFDEA82E66527304EA74
CDC79B59B7DBBD262A2B37841AB3726D24F9E2E12325A22EFB884127CD3028C8CF819B23CC90
8878190F8436AC1934F3478EA966708280EEAE8E35A31D5AEA2AE696258DCF952E53307138A4
5F54E38566784A07B07B77E170B04BE12772D72D31C58107360F403BC991689A984F5A2C9B93
7EFE72A267F1547B7CC477FE414D754EF566495D9C13C90FE4C87963011B0C0BDFF6A7179FCF
5DACA0E475A9BAD39E7325C238E0FD9185DF54465F976DD68B43B057399526DC8C7383FEF16B
AE73E89CA2A5F55B6EFA49DB81D19712DE1E5BF9C7B4536AA3F01B1EFD1AB3E356C2C27C915B
9B795780DA39875DE71F836EC0EA0DB3493C17817F07D34FFF52C4879DEBD510088A0A95D1BF
B06ECEF3524488FAB2F01A5DCEDA2F1C17BD611DF5455CD09AD5712144CFF92037EA80CF0058
6543E8B40FFDD9A9E34CDF450D4573A9B279DB0A3AA8F17CA50E0881F8C31F681D55D6641807
A08844309A7E40DA8FB21B1B409B2093275865E0375D7D5F9A9641C2BFD25DA3B7247A8B4724
4B1BEB930202A9622A7636296B10846CD78FB8CB04C7BE4BD3E74DFC7627165FAA80DB2AFFA8
914804A91824243A59B76CED9648D12B47CE8950BF760D865136ADD4F83C7CEC9CD730416E71
01404019522B641F0A4DD1CBF7F9166180FD9232D94248D2ECF149A1F6FAF7F7CAF0FF409079
10DD32C559476F6B0DF68DCC97716F82BA617DD0CD2C9D147A621200CC26A7A768796283BD30
65AB4F569933788C17BC564568019D169E5E43D0E46C6CCDB11B36D5FF56B54786EA1FF68A98
E8DD16F41B2B224D906F09A4347C58278F0F151AE45D1144D05E2519DF446795ABD09BA61531
F93553D6305F228E82C1F28A76DB47A8BECC7755717952FB5506E4F26AE8882F6AE8F17AE34F
B80CF2B0D0D99DBA2AEB9221F82155E9F666C5F1709D17049A2E2AFC05CFA9779D10F7AAD03F
E76F78A57B1C4D844262F5A889802360BB50C3949FF9AF199DEBF95BD5D0A4B13B8663442C92
DF829C65654C4A85DA8E9CA7224DED598801EB8019E78994A5C70980B1BD09F3B255979194E6
1DBA6513B5B6288048A9E93DAB48AF7070FBE494A1DDAA087B2278045AA9C5E747A5D49AFA72
D0BF8BCE89F182905973FBA60C5F65C079E143B0D3DAC6E774F5B298A18CB11AF493BBE2D783
51B4688BCEDCC6A897797CF30DB8B600A5D5DEB6294E0EEBCB34523E28BBCFECA8C3B467747D
F85BEB5127DAF911375335C5D8B3F065B1B5D6D6FEE564D88B56897A635822C09C999BCF91AD
E7143F09F61ACC8C1553B5BC2C9A2CE6F86AA616A89808846FD1A2986D6D82013F1A2B962EA8
1A418EB77062B721C0A87927E26358378EFC5E75256842F692121D4C5DB323DD87DE40C507CA
C183F305418C1C4967C2114A28B5B3DA494C01F66AD78438FBE9CB77059574FEF5409FBB77B9
428355422F16E9DAD5AA5FD0181668A4C896D3A5AFF24C7DBBBB88DAF95FCAA95B270E519F2A
8729D013A5775CAB79E656BC515BFCF9054154D0C12C2D056DD947D24F553F40DD7052F4287E
3F0FB30E89190444CC52286959AC984345B11859DAFF089FBFA03D6111DF78DD4393324A5379
71925FFD6697C14A5A1971613124B13EA20FF1086986DCF54BD6460AE956BA5C3565E43F8DF3
5AF79C637FCD39C1361CE296612CFA01750180E7857BBDE7DB8F6EC757D71912328E41A69650
271C5380931EA0B6B5227D9094679D69F04C2EB2B406338ED59ADE317E80198D3CD722B0458F
0A9274087325380B7E0047196CDDC363D161A49E7EE0F262C3CD9CCF88D279953A6FB0C3CB67
390EE89BCBEEE246D321E076AB59B8D3C25CC90DDAAE731D19B43FBAD97A7A97BC21DF4FE65F
673753FE06D633D156E57D1E87433ED1660EE8C34FBD3B2A83EC5E88F98A6F45415EDB555880
AFEFABF11EBCDDF9DC0F6045BC18B24534BED2DED3A5FD0769F16C521A7F1EDDB0D51776B482
DE96C8FD119A03D63FD475D7CEF48C854D079AE0D10A96F51171437C565FEF88AE1831C7D56C
5FB2B184A882200DDDCF0552EE7E809DE45FBAC8777BEAD89958DAAC04BF6142C21191EDE23C
C7710950472EA107C0EADAF87CB88F7FF9D1ED061A7CE67DE329DE30613DE5A30EC6E46778BD
BA41C95CB9285908705E47E9B52F3F570F17B0190D33AD6F8F3255A2C499E81AB148ED7A3745
B0B8FD74133ED7270CD24B33FDBF49E6BEB88E1203537A40FC6D1D3C545C75C7E42663CE5C71
8BECA455EFAEA50D18E57FFE96F76452B2FE6FD147AD36A88D6DBDE307AA7A0DA0DD21986A79
2396784F604A84C06EFC40765FAAED39756917635C582A8736D875D7F33ED344E7893BBCAC47
176555E4A11AD404D1318A778D924FA726A50F4E114C29E44E9AC842060310285BCB78ED2087
876CC115C0F837A4EBA53F07ED6594A932EAFF40ED42D7B313B99BBC8B10283E8FF683BC93D2
BE4D2F370F0D2B14E6EF4832FD47CE536FD40E8CCEA442C6956D2C4780423BCEB9680280F132
FB93670919B643F49F05F205F90EA3091620E48699D55EF35EA51397422E16BBE79776C222FF
DD5A2E5401435CE0A3690EBA317A8B3469CC19EE0CEEE20DDCA91CC41AEC64E4B483122B1BB0
1B67333B7E1F39D808F44179CA3042A87DE4649EB1CFD5A5E8231D08221E2C79CCDAA4267789
3C6417F47C0DB97D8ADAAF7266DCF9011AF7D71CCD8092FC994BD639D80A019714073F3C7EE7
769056DD117FC021A40DD98DFB115A596CDC0EC9AA9C8F14EFD96B98EF64F1A9430D8DEC60A8
B4F20E696B812DD9C0EAF3259B69097C81EE43F9546FEE7A556A26F0E1ED927455A1BA0CA65D
1148A2974516E79B04EE02DAE02A211DCC88C5F8965BFAE5BE65A25494BBF7C23CEC8115B1CE
2FAA0CBA14D99605A24F14BE129F80C806CD9C5273AFD406AE758B0FA5F81C0F2D7CBBC2B0CF
D30F525E35D937D4423B2E0FB8C83930A38D1620F12068CF098E459E8E970EBB0C44B74305A4
01DC449EB227B665445CA242D42B8F73667B2BA0C7BC356BD5C80FCADC2256CB2D0BCE609ADB
60A22CFED22A5DA1F53A3B7E9535712031C472D34CF2F771520CDBCF9A3A5E878A47B909B794
91A2D0F2A370957E4B1B3A516A3A4BF0F431BA695339E0EAC940FFC9D93729D07318D6C8EB49
0CD8C923415A811C9F78B6E5C66601C552500012144B793BD0128E0CDF6360EA70FC83633CEA
5E962E14AED5633D2ABDD5A1283EF893CFD1BCF6278095C3075A4E03F6738772437BC1F45994
9F5A14BB014BC909E3551EF70B61430E7EB9C0DA2FB9274F399560B6BC1C754D8A770598062F
409FB7D1165DDD2356D506E7D1D868847BC0D4F8482C99CD1D4D460B51F30BA5EB7CED25F56A
001C0AFA884C8A65E241EB72DCEA5DADBEDC6D761B24B5789EE8404529CBADA729159B5B1158
91AFC097F3A3061606AC8BC1E54649579F65F8B5081CA530F51CB230EE59C1E065EEE4F23B83
D6CC89F0FD0420F8A76E224491100E9C420008C8E5CDB9F76FC5218AFBD4E8000D47EB6D42DB
69C07A4609410B28BDE1CE27CA80AD1FDF6D18ABC7E15D8EAA112DB8444495DF49C309FB63A4
6647F73A5FCDB9DBDDD2F6E5CB19826D7309C1DC3F2ADADF2E9526C6FA3B1520BBD7D1B27E4D
BF70D32F827FA36FAA710F342373C3A1954F5EADE197609809555808C004C8791AD8B0307C33
44C93D35B9709B2016E8859FEF495859161F17D49C56DBA5E32300C080B7DB9D40B597D9626B
2A042BFDD249343DFFAA6D96B585D127D4A6304AED5A8CB39720380DC175C17066FD39CD20C8
35DD3E87EB3AF936CE1A6F953351A49A8160B22B2BA09000ABBE2FF305FF77326D080EA35CE7
D924BEEC365A1B0E37F194F3E796810A4039657BD35F21EDA3FF80089C2E3B2A4FF40A7C0685
8E45FBB7426A1FFE0DBF2855DE7941F616850FC0F3A9273DC2D40DD60ED28C6A6F7C4E684A8F
B224FA1A52F4F733529A7F3CD3B672A37C9D1F6C00DEAD801078EF12EDCB63CAE750B82ACF26
DF9650CD502727EBED366E00A1E6EA351119CCC68DBD3E1AE37636E897E964A5EEE0F4E892AF
88CE18FCAED77CBFECF9216AF5FFBFA35B0181025760CD6920A3732BAFF7ACCB611710F2F389
CAB8C1A5AF75F82CE7C8DFAF55FB6FEA658D706BBFD8C2A979BF79DE4DBC69DF204769719440
2274A8D6B61503BE576AC61D64995B9A4E5B2CE5B41C70219E0CD4A42715009B8AB11CC681CF
501744A54F64C35248A0A5063CF725CED14BA757525E5BA7F959D0CC1918A21AE242293EA7C6
57D0B1BF860BF3A994EF414D457EAB682AD8A4E0C859B6B0C7FB74E1AE202AC7011F35B1E104
44734F4C04BFFFC35A36A2F856CA4BAA9B0A885DEB9068F2E635B68411BC397509EF8211128F
CE9FB991CE287347F06080083E34E61D6266D9FA96DBD1DDB48040FC1B99BEFA11CEDDD479F4
DBB987236B4C5C41C536F464CFA43B3C2751D2114DCA8C6B75987C326FF5F5859A20CF68FE61
264D3D19C3EF7A88C66EE455F1B85F570BE50903F0171A46FEFA4DBC8F62EE9383B585DC0D53
F6E249F469C631099098E3391E8B432E739BA60EDB0B28205F4F6F306A70D16C149BFCA8565D
1141BC191D12B029D4A97DFD41A10B2A3BF0E7E3E56ACD867CEA04B85C5F7462262DBAF7BB8A
413DA70DC3D5CAE2C3F3568FA52081447B8F3F7F2C608F9D89156C427136A060323A8779A18D
CBFA6D21DC08116BB1AC5966900095176900CF3C35323F45CA4DF4BEC4CE8B9E5183847070F3
FE8EC37EC98365AA6F3353E68E1B371CFCA937C5F3628D85EA35615239402340C3DA703F7A18
1961AC2AE63CBE7B7A99322B1F73AF2334B569F9597A2426AA02A36CCE40415392F382B26449
592723D2C7DEF0CDC39773062E13741536AAAD929A35F698A226342E624449AD2534973BC1E9
B2F8E875B881AC7B061A8FD8893DD399F1AF00E30153B6285C0B591135FD1FEC0425CE1B2C86
AC0378FA29D7FD7668A4C766CD922FAE0CCA3EF7481DF2AF98C4E204940B03C24CDC6732C548
6B0FA2C312C041D0A97F51E47AA0DD96CC60F96FFE1F37EE54C835BF34C20EE115378CB582E3
6ED4FB2DEDC45F06D0AFBA2098C71A914E8A2BCC30701765B9E1F4825715C6328677776A6EEC
B1674BEBC1EBBE955CC6E0DF92BF67B4A62AFB52A90318ED69347CDA22339AA374C8C7D6DD69
FE9A3460D7368295FAAE607CF34E7FF41FEFB7650B5CFB4F7B5DED38A73C005B6D21124F9CA9
012286398270B0A1C18E7CEA3C5116E89EE7751CF42D4E4CBDDEF49D1DA91F0132CE636E4F96
FA40EB20392338F5D2F1F3B15C44D23B62CDC36F804005A06DB79B70964B48D8B1D859664000
611D5FADC7CE699BCF030EA53D1ADA7A87D2A6B64ED5A107165F80EC60051D1DC85666E50BAD
862D961589E379A48D51B7B69336B5CC155C732B14BEF3A01003732D7BF05109D01A2202748E
C305FD6B7DF421912EB377B99C49FF565C88EBF56C7782BC0D3DB5C634EC0508D9194B09B98C
E0E43BB9A6EA2DC02BEF2CF3179AC90F7F45FF6AEEA1C6C7C8CCFAEA5A4E8487EB470D9DE00D
055AA2AA0ABB5B22CE3D96B2D422352747E1BF64C39FF9E1F51D404CE4339BBF79D2EF1B2486
01B02F863456EEFD02BA5A1C7F97F860D4294D8C85560DD2D29C2167BC2208F9F50259EDEFE5
8CFDAB9722039D2493AFC7D71E714B886B2DB7E2A6820CD5642FF72FB47D20A8F45E4458880F
FB30FCCB6ACA8048E5914F6256A439188E004A6DAD74DA2C6499B63A7852684DD3BFF34084F1
DDE62B6EEE0A0F33C89B90E42E55A285CABDCFE6280929DFB9EAEB9B04AEF296C7A9381054BC
2E6DA960D32E848C9C40E28670E255121A0C5B17CC9FEDEB5EE0126360C134440F9632903200
7BCBD32AEFA3E271CE3A8947784CA6B20CB07ABF83CD0B29DF54D69E2C072F939DFB7A7E5B8C
6C8354758CA5D33AB9D61C77EA562642ED8388F2F84E3733F13787AE7D1089AD08984DB6958E
65DC5D02572816E696AB3FB9D95A9F64D7AA7A62B3D54D152394D6598431B8BE651435152BDB
D687DF6330ABB0B451BB3D5198C3740A44435B048B19A9238BFC5805C162B61981D08C4FFCE4
CAF37D11CBDF6769000093147A26E8F69DB0E18A96150A569097CD1DD8C9848355434B377D5F
94A01A532002E480AA5E1027B696469F85577FF07B793F4B8F684C044C62CF42D4DFF1AC9E52
8C05F6F36FDB87F2266D232B6717897E6C57DFF9D31CF3CF5F12A48296FFF2FE7D6F975A2463
F4FB485171143755AF082FE102DB4D3A267B43953C4F09BB634D54047076056762C099061CAA
D7B4F5B0BAAA7B1A40396AF29268C784A91F3674DB9EA724C3C1B88B110839825B82CB50B58D
A5B282D589E0015497E1D887730DB88F6061AD0A0D92645892F0DC6FDB83027C0715EFCE2B97
B117F11B7A1AFF37CBCADAE82D38B39984AB201CCF1B1AF4D98FCC527CDB75D57454B5103FD1
1C9305091EFB79DE2B9B7521F3FEC034887D7060CF40C2D522096AAB5D3ADF56920FD7EBF767
6924AA2F89F97639B42286151E76B04EBFAF1492BEE4BE5C9A75A42079503B7B67E7C81BF5CB
DBD93E34EB1453EEBD4532BBD47513981577E5C3E051BF62E1753A5A457C78E78AE563A39A60
069C7294D0C04D46F92CFC9B9620CCCD1E4294CBDADC7B97537333964DFA8CF1E17E01B0533E
01F41EC9867A111C17556105071E0FA5F247DE49159055AC50CF4B5144E2AD6FF2104784C4D2
73E948D2A264E4BEB7B47A87D5E3D415D3926734E8C3C05281BB872D1FDE1906E8A397000792
6CFF3231254CD5DCE65DDEE11ECE87791727042B933C5AC119C848554A4045ADF6ECF563CF33
A8F910412313BE5B4FC987A67D145686C0F5E11869FC8963B1590FCE32AB66031BD2757E226F
378EA27FFBFABA11F916538D20E6F692F9EB9CEE02AC13188E9905EE62000B32D6516F32D90F
F71DBC3C288F3FC76CDCA24AA0AA1D0A7D0668E6986AC61690388413BDCA81CC060BAAF071E6
7301DE9DB664BC988CF0C4375FD51150F9E254AE93C50A1EEF2310BE1673FC22BFFD2DE463B3
69B19E23EA76586C54FDA5C50DAC226E3F95D95558A8E832DF2BC4F3AAFE1F3C0C4AFEDF9FD4
0F0BF05D747C82EAF7EB4A76F01587BE18086C4597BB93A8E3A3AB7DF298F8C16DFDB101881D
1EEAD4B0EC16688B43ED77D78BF022366C3C3456462265E6A962414EFEBC26D17B67647EF49E
74308D44304EE64556909765F068DA69E0D3DA44C0F7EBE4019E304039CA80AB806B47B1F49D
512901895A3822BB0424AFC3157392E402DBE450056C3C6760CF29E257911DF9610DDD9520E4
A7CF15276A81FF9A79786B22DCB2137B20E1F976E83E98CEC6EAAB2D9427BF8E006FD30757E6
ACA232D64AB02399FE79A2884F145FC6351B5C186F97AE8BB3AA3DCDD34805EB1E240E393A36
D1F85C8B396624CD69802DD267D5A9909987669DC66805C8D273B1D69197DA8FE60D005B1132
3DFD5EBC1B400B9127D71DFBBAC8899E688C92AADD87B2C895813CC20E35B1F7D383E450E384
9589387488C7ADA1FF323A3CEABEE249298D2A2DC34EE477169EDA7DDEA1FBD7C2D5CDD76667
06EE7EFA6F42FA80F622F42257E9B88EDEB7BD64BD607FEC542ACE2F119AFE682D97EFD6817B
545D2D424D6435C101EE6BD670276BA133DD7D16FED98A9DFF0EDB81A6127DF7F070751B4014
17EEAB5FAB5D4A1A18611655228BD070C0F0DB908BD32F03E1614C95162034560A053DD106FB
4C0690D0DF259947574C6D82721966397EA456B1E8889518A7525C23BB294E47F5838C1B5E98
8400A58DB86DC86B35C6A3414BE3E2326892105B2CE25DC7F15B76571D0EC9D646974D53B8EF
96EAAB63928C4A175A34881BEB0A801C14567EA395C5418E89C5F7BDFD62682CC5598E74608F
47F3B9A43765FC435C66595772B04048EBEB1C39C18ADF1235426E341DC9FF747FC5554FAF22
AD4962A609F0CE274C572F98ACE54BEA41930931DC944986485276FD38144A08CDF0DE4FAE02
9213B596977405C220E2FDD21B7CBBBEA22B2CBF7E7964D58035B242E2C2DFDE43F21B020976
D1AC86E2C365FAC822A38DE51E6ECFFFF686DD4A8589BE09AC9DC1B70D65DAF7EBF146ED7769
B3B00AE122F4D322CF1B83FA9AE501FB15221E1B3449ABACC7B62D9CDF77AAB06FA4CF610311
DA089012AEDDF34D37204DD1E7EE89FF8E50A9AEAF99DCE64DF6EA0CBCFFE8E16BDF5CB5F482
3C50F6EABA621C6034EE2F2EB0F099950E4425B818F4052EEB014E2929D34D5333055012F3C7
518BA32BE04B1E8676A14D95EB1AF4F045E78E6CC5F6B5B6AA976527325C29B7234770EE1F9C
4609DE2CEAD3F39EC7DF027606771406C622377EC9E7C4AFD2B7BC78AE0BDB6F08D3C459D1FD
8E97C020F39205BF16C907FC5234257189212521E6E57F2AF9AE9EFB11EB36F2A428F3BD3A76
628FF7E86589BD3CFDA9E774E1655FCE1BA225DBD2506C7AF7078CEF60C209658B0435DD5AAC
00BDA0D6B11680963D9C64BF1A01E1B884A65BA9CEB5D87B2492D44664879A5E9B046B8DC05A
96E50AE5A71055D23F79E5AF82FEF4D124D7238DB91E1C8D2EF789811D45411B75785B4F3609
91C7DC590D15EACCC950634BEC77ADA1B96ACA5E4A09849883104B6B584B2F345BF3A6573044
4B7E755BB603A170424412A6F39B882BD2A6554CBB33DE4AE5AEBA7AE9B0E61DB5A7ABEB1553
A4A1B92BB9E6AB4021C266E932E6F871C362E07883D4CA4767FE1081DD626348979533C1DB13
B42B6DD7ABDA7CB7D84EC347279683E22600ACAB25DF533F564C97BB3EF6E39D935C59A0BD2B
9CB53C0ACCD759BC4AD7C60BE4536A21D59F47130FB01D174B4BBE901E19FB56AFA5BBF8099E
50ECE0075C340148F18BD6661EF75F5BBEDDCAB5621144DDA8F5696F8867A4CCD8336DADADEA
B5C6CBCB6A114F0E44E43945F46C9143C3BB688E4CA8229E8621B2986CBF45646753B0CED554
E09F8D961CC9BD0EE359A859B0B7313932F6E5013875FEA4B51268BB3D608CA579D999D1CBFD
6AE8303BF21DC188109092A62B1F5E18ACAE78DF01F41E106EEE0113D253297C7798E58AB6DB
A4AF1E93ED7968C0A73F5151FA53A5BCB039FCAF488B2E94F20E3D5794256F202FC5EAD8E526
763C772245B590FC2F98B3C091B9844C332E781283632EF903CDF3D10006969E8BA9F189A1D4
A3A676C0A459EC476894C3E28891A8D451B055DE02EC8943E3BB0AC46CA0114717C24C6B3917
5689B22EBD8BA91F97EC1C6452711C57A4B8C883D2FD15D1B416C3D131A902887E567285E018
D52E3F5CBD6FE3D7127F05FD400419858073E58ED1F47F24A8CFDAE157230C6C801AF3807890
C9238E6682CE035436E6EB162D8B30E52D6E84E981D8A977CD59B0093E477283FEFF42448642
ACC058CEC4050282EA8508441E064EBDA93A40EBFBC68EDA94DAFD3675172DFF79A52E352044
D94D457E84702C33F1C53855D048E0D37BF96E9EE400D584EB9787180E3765A37533BDF3F814
78BA837FC6D007AE96F23F4712F0D8C610EC1F8027A0D0A993BA0F55D91A92A6A2CAE17E2F58
638CB84099348B02EE5347FA6F02851EB046095B77B5011E1A629834098593AC3BF9BAC56380
98C30EA3F0C5526391A8736AFCCD1C3E5864B2CB555E7D979ECBD909DA06F5AB8419C134AB29
2C296F4EADEA3118D7015DD6A3B9D7350229D8833E34A583AE3B8D084FD9CF948FCA765BA0CD
47FB37FE46BFF0BB49E7D2A0580968D09D35B8A28FE54848CF0BAAD6AF6C25AB15A1882EB165
1FC1DBCCF0CAB68A5DD18974C2C5A4AB08C52AAF2C89E2577A621054D8D25A340AD7B0D3167F
31FC5046819C9728A338AC204C3B0F196CE64AC34435B4491E0E357F26EA356C9049499F2036
28F5D3BD277A7B337AC5D89ECB7F26E41CC80DEDF47FBFF8DC2E716284F68E6750C0AA4A1933
B38E114C7A3761030FC8A5B9E1E7FB753E287576AB81A3D6F54691B9945C11B556604BA9853E
BD89536E56CE770BF86DD1B26D10D797DBB001FD0BE132E5B6DB3D6B9267587F30BC7EBB1B55
66BC7C5609F9D1125B4AA2ACC850A6C39FB0ABA181AC370E8CD49C56D0338832AA92AED01A18
B9D228FC350D0B2CE6E1543ECA4150C0ACE22B5AC3938A8A04101C3BD78777DFB6F7A570A205
1C11EFC3CD6CEC68F70EE9F950AAB03DB2891F942ED550434DA413CD2EFFA9D2043976AA20AF
8FDE9D2E2FD6F515BB36741CDA5FEAE7BA1E8AC777F68E6CE7DCC16EDFE02F57852E87FD8A19
1D44D87E69F7B9878CBC734C227C6AF895F083263F4B5029A0013E5909AF9DA77EAC81F17A23
284CE3BB3C74B26D9D08C5B7379CA8C1E8BE0C84EC0C69D07A645E613249369268FEE614BC90
AFFBEA486BA07B993119329573575DB8788DA21E5831DA7ED91E18EE3157EC6C72DB051CAF89
210460766DB6743D9C285FFFA2C2602759F88570367D5A2E3B97DD9B2BB977B3900CF9FE1B49
0EEDAC8E3640E43331D6AE45355460BE7EE1F38B11925A9DFA3F943074A7347CF0E03F852714
357115FA41A17531CA9FB49C3AF799EC0FEBD61B81631775290B1F38E205A78B317EF58364BE
494DD1CAADA4D5F84980D1FAE9ACFF35E2E7D6EEA26F97DE826765DD5E1268A53F5D8AAA8FEB
528E8A13E0E001BB04C033BC88B1B83E0AC2BA20109014C9FA9353E7F10DD7C1DF8B3FE48A3F
9AC01006A895B0019E7F62F450960BAD05A70BC457C88F28759CD1DC5904237C1B865AB4F938
6A2BEA70D5ECBAC9EFFFBA1680413C9B49B2E16485D0BAC750AE473B1B3F6A176DED4EB6A052
9478F120294E591D34B90CD62579DC53D94ED0A98A5CBA48225E113C0F8BF5FA1113F695B757
7229F5DEA917A5CB49B85D107CE29CBE83107465A98C6832FB5F08C6B82540123B675E69D442
7905C93B701C3667DD78A500F405078A7A0B929BF5DD21AFE771ED05E73FBE5699D4D2C9337E
ADA08B3FC5916EDE6AF94E7FF54A01BA67F72A3A130B61CA2E792D539FE4FB417CBC6E4911DE
84388B3E58BCA8520EB12A0ADEAB59119CC9795B64FDBC6C759D314BF93E91B8F0ED753F2A7D
1F50255EA5429A7C2C719E13734DC9F0AE706A14598F05609EFB370FF110B87D418BE62D6B1F
3278C5072F7C2C609E92DE9CB15654CED6EB336650A9CA2EA1786865508AB6CD71AB57503C18
7C0A68F532E3F05557C191D1029C4F6095ED7869A4258C893394D8636BD0DECD8F3851B42EF0
EE6D6D7B23CD07698EFBF2A6159AD01F2FC5C69FA5ADB8F0CECF8CF1EC99AA919A57E6EB4E8A
840A5761783C7DF31FEFF92651AA3975AF5A2003C307C6703089EC1CD63D8798CD4FB69CBCAE
A810E5D70EE6F2DC9ED3CAE29039A86173132A0EC628814994191095E1F578582B79274C6050
191EFA3BAFAF6F331B3109A04B5450EF7D1E8CBBD634374F200980BEDB6A34B19A2057523C86
706023EED5563570F6F88FD9B8310981D7C73BADC9216AC45A4BFAC6E4800CD101CCF035D2FD
D71A8D082BFEA07F3F9CF95F2E70FBCEDC89F27BA661EDC0DB4F2468EBA2E4290EF9B5670936
EDC728E55963D74C444E03AA2344D80C24405EB031F5933CF414705C3329FCF23D93C1F1C6F0
2AD7B4FC6E5CF38BA92ECE4EA1656327236FA26CAE52031F4F1FA98903DA4C361FC7DBD3B5CF
37508E1F22C582DE7E3E9F5278D7424A9F824FBA19021AC81EF7F0D3C6D67D53A26E4930BED9
CB72815F0884BF52D1DDC54E4AF35D9558345D498D63E7A7D6BC327FBF8F47C4997E2DC4C6EA
4E1B3FB9587FE48978B67EF5C8E8D8CAB7627A982DE551DA90275AB90DEAC04879021D593430
A30240CF389E10D256FA72A8656E8A8865750283CB245CE063C4EB16059F25AF21AA7F9412B1
51A3404D965C2CF02CE88FBDD3A708FC7CFA73DBA0C664272F49F86915FDF58477AB8678D42C
AAB245B637168C4FB33647C6A2CD7F96D54697C375D0422E27D121899462D8998B3624E203EE
5D0AB08E0AF286D5F1352F0E4D5B58774F0324B5479621488FAF503415333C9B232119542A24
54A72918BCBAE3628177414CE76975F786C68AB4FBE47B150539D9BD711C510A7BB87523437F
CB820000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark



%%EndProcSet
%%BeginProcSet: cmmi9.pfb
%!PS-AdobeFont-1.1: CMMI9 1.100
%%CreationDate: 1996 Jul 23 07:53:55

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI9 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 161 /Gamma put
dup 162 /Delta put
dup 163 /Theta put
dup 164 /Lambda put
dup 165 /Xi put
dup 166 /Pi put
dup 167 /Sigma put
dup 168 /Upsilon put
dup 169 /Phi put
dup 170 /Psi put
dup 173 /Omega put
dup 174 /alpha put
dup 175 /beta put
dup 176 /gamma put
dup 177 /delta put
dup 178 /epsilon1 put
dup 179 /zeta put
dup 180 /eta put
dup 181 /theta put
dup 182 /iota put
dup 183 /kappa put
dup 184 /lambda put
dup 185 /mu put
dup 186 /nu put
dup 187 /xi put
dup 188 /pi put
dup 189 /rho put
dup 190 /sigma put
dup 191 /tau put
dup 192 /upsilon put
dup 193 /phi put
dup 194 /chi put
dup 195 /psi put
dup 196 /tie put
dup 0 /Gamma put
dup 1 /Delta put
dup 2 /Theta put
dup 3 /Lambda put
dup 4 /Xi put
dup 5 /Pi put
dup 6 /Sigma put
dup 7 /Upsilon put
dup 8 /Phi put
dup 9 /Psi put
dup 10 /Omega put
dup 11 /alpha put
dup 12 /beta put
dup 13 /gamma put
dup 14 /delta put
dup 15 /epsilon1 put
dup 16 /zeta put
dup 17 /eta put
dup 18 /theta put
dup 19 /iota put
dup 20 /kappa put
dup 21 /lambda put
dup 22 /mu put
dup 23 /nu put
dup 24 /xi put
dup 25 /pi put
dup 26 /rho put
dup 27 /sigma put
dup 28 /tau put
dup 29 /upsilon put
dup 30 /phi put
dup 31 /chi put
dup 32 /psi put
dup 33 /omega put
dup 34 /epsilon put
dup 35 /theta1 put
dup 36 /pi1 put
dup 37 /rho1 put
dup 38 /sigma1 put
dup 39 /phi1 put
dup 40 /arrowlefttophalf put
dup 41 /arrowleftbothalf put
dup 42 /arrowrighttophalf put
dup 43 /arrowrightbothalf put
dup 44 /arrowhookleft put
dup 45 /arrowhookright put
dup 46 /triangleright put
dup 47 /triangleleft put
dup 48 /zerooldstyle put
dup 49 /oneoldstyle put
dup 50 /twooldstyle put
dup 51 /threeoldstyle put
dup 52 /fouroldstyle put
dup 53 /fiveoldstyle put
dup 54 /sixoldstyle put
dup 55 /sevenoldstyle put
dup 56 /eightoldstyle put
dup 57 /nineoldstyle put
dup 58 /period put
dup 59 /comma put
dup 60 /less put
dup 61 /slash put
dup 62 /greater put
dup 63 /star put
dup 64 /partialdiff put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /flat put
dup 92 /natural put
dup 93 /sharp put
dup 94 /slurbelow put
dup 95 /slurabove put
dup 96 /lscript put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /dotlessi put
dup 124 /dotlessj put
dup 125 /weierstrass put
dup 126 /vector put
dup 127 /tie put
dup 128 /psi put
dup 160 /space put
readonly def
/FontBBox{-29 -250 1075 750}readonly def
/UniqueID 5087384 def
currentdict end
currentfile eexec

80347982AB3942D930E069A70D0D48311D725E830D1C76FBA12E12486E989C9874C2B527F092
5722787027F44470D484262C360CDFDDDF3657533A57BB16F73048BFBBFCB73A650484015441
FDC837ADD94AC8FBD2022E3EC8F115D4B4BB7B7F15388F22CC6198EFE768BD9FCEB3446EE4A8
DC27D6CD152485384EF5F59381FFDA43F2D20C8FB08AA27AB2015B774DB10DACFDCD33E60F17
8C461553146AB427BDD7DA12534BA078AD3D780414930DA4F8D58ABEFD45DB119B10EB409DD8
97923C6E705479464A4B33AE3D31BFE98EFE259F07F7950237BBAEE4F7B64FFEA83A757FA717
D50C3298392891BFD60E34A056B0D6021DA3FD9B8B01BF78B0B23DC4EA3B0605150D20B27FF9
EA5F2524661019D982A2E47CD7C21EE5CA9ED9227821F8D07119397DE26838C11D7B35BCEDC4
3E011626E300F8249ED846D7B5CCBD8902550CDA17DDF113DF658FB13F816268101376686378
4EFAC128E01EF997E1A430312AFAC8F3D948EDECD7D5090AB5C864B91D7F6E80256F0E1FC99F
1102B74C61CC456E2E1BEDF0E627D5F70F738F963A13666405C51EBF23CA077E97570A2F1118
536B92E585CF1DBD5FBF36A0A5D197538C05304E93A15F3C931168D91D42483EF428B1A3F1B7
E548FD1D23B80F5523C8B8BF450B02804FB689F915C86693F7DFB1C43F681627C7F027021AA3
A8179148F1819CD94B8890A9AC63DC1E8A68F254B64F6F173C3D02E3EBC037DA05074017C8B1
13E94F4E2D26B467EF9DA07EAFD7EA7C86E025AF52C5CEEB835951E67E02A38DAF1E9E698BD2
1996C1071E84FF7FBE77F6DDF9D06FA92B16ECEBCBE0370B5CD9D450D0F2906A105CADF93ED0
0ABC7FCF2C996E7C15E452006E35390D99B9CFC59925F1444C20D9C3E1FC291032CF9FA9D580
EAC1BC956334DA391B870A757C3BEE6AA3E005B20988D85AD41A64402A9726E3051FE2207B75
21A437931A774CD81BD14357BC48C26AAE9DC596E2AE932D2CDF44BE37B4C1E1295B617F8EF6
3CABC67C8A938B2A220EEEA74FEDFB346776D18855ECB95CDC8B9DB6ABB77CFF943A70AA730E
2C658B257FABC2FEE2EE3E493EF0414CB723B3506C47754012F5F7237A02093880174A792EE5
FA8B752CE148C3C8CBC461A2A99CAE1170DBFA4CD9A0705A56226841D063066645E020FB6881
FE939F56D3FB1D699C40E84959124895B9F3B0325520BF6085607A732E748E4E15F24CEE1C62
6AAEBBC0928C3A1FAED760492751CE835DD1BD691BB340583EB9B1E1B748D5BC20A81679FB33
9DF3E67C71643E9A48787193064D35FDAC1EF3B622053B386EDE969C1DEF9F543F006A0FA0B9
A0E6401472559206F7CBB7F18BA80643CE2C061220797AF1A7B71A343BB98606FBA19CDE56BA
E4ABD7B13ABBBA07B51D859CB2476F848C9C4A80CF7495B2E639A2CA107D0FF8E49681BF789E
F580A791BB977848EB65906B7D3CB9B357B3169E05885B0A106D3594019E86121AADF10DA23E
6BED3501D54C1EE2A1EC6D9F1352810E0B8DD8B1F315C8BCC399303A4FB8C52ACBD003E3823B
FA9D77EBBC4C89A4AB5D17BF8CB0F3468AA2907C363204499CBE4A5FBF026A71874D1DB8B074
2C50220907AE017F9305DE741EDBC2070D1F55B160262A864D9F423957B031BB1CF33D797E85
11660D988C9E9F13BAD0B3A75DF70F06F2830CDC404EF0D31A9D271AA8720BC5CDF7BAC10555
5C2BCFDB7112A924D46198A72B2186936F8F46FBB51086F8E217EDF73CED642B220645BC2143
305DD1FD72201E440A93F1FBFFF84202C4CF49F6C474355686F5EE03233E82D45A57C824EB46
3F949E52E9B5AA6FD08BE515E63F2698FE64DDFA4D4E6F7365AC8F9BF1190F1CF08E39D64A32
D056EC24584267F3B3F3791F0635C09BF772C0491D571043337A458FBE782269F35E45D593BF
34EC6912440885EE5E3B3A90B4244967A4AEC638E79A6A1B4FB49FB38889E119E28955D0F8C4
303CB14F25FFCD1E1B7D07764C8A87140C32DF72B9DABE354A12835899BAAEC995A6F62A9414
A86AC906DB64C9E75BBAB7C69FC870DE60A4CC338174C894D98F1A8FD3E538F60136C503D787
DE13C6498807FF70DFF893B5ABCFE38C7ADD38FFD9AFBEC5A88FEC05DFFC34EE8066B60DC102
05020224D15908554D18D34460FECD5AF4C7B090219D75EE74BAC0F29A40F3D5354C069C391E
6D7074026B36B52229860D6F2758884DA1BED0D70473742963748C2D0DF5C6C8B5DCB30F88E6
B1783211837E29E6E6B108C96ED5C6712E91333E7DF957CFD111CA9AD2753DC5BFC68BFB6D37
2AD1CDD9B9948677DF53EB2C3AB9A3B4B6DDDA6E2A90FE4A6E22450A9DF9B08A4DD20DE27D37
032C90A0772F7B602D7F5934E3B23B7FB827FEDF38E2BEA2F04B51091B30580DC1C6B2ECEC5A
63661AB969DA19FBF6123A399053F680D687CE94582AB38189FE50338157DE2F1C37CE0D821B
05B521CDD37F7442CC7BE8AF1D011948C78EBCF7511A70312B1FDBD153EADDDD2BB9FC57B07B
80680B92C69B32C3BFB99994E40E9F67BBD5F0431FC31746AB7C838BB58CEDD6D09E1D68D872
CC01149095EC1028B3FB2B0A06A0591F822AB95583118E2F4BC32C870609E190D28B1F4B467A
680CBA25759B4BECB61C5BFBAD82D27AB53265F2049D3BA8CE82508D0CD2F2137BA26A51D651
61AF43E1F468070A821D9FCA52BA8B5C97266FAD6A7263EF54AAE62B565F0BB6644B47EB5C5E
58639AE1D907DFEA567A630A06CD80365E6F4FBB78AE3030454433DA19093EA926E8C26429E3
89CE695B01B7CA27DDB57E2C7CBC8F6E81703CFA475ED555C923F111F8F7DB9E96F3D7A17F00
D4E5CB0355120286C8AC5FDD0B235BFFF37AED227E1BADC58471147E480409AE6201D66B5153
588C0300789886B3DB52E03B3BB51DABEA1B67CBF2448D7051C3581ABBE1CB6D4233099B1FA4
4F03328667838B6249A68F16D765CF8D6FA83A86D24B896D6672B51B299550DD306D6762C4B0
768352358C7653D8641F10DE410A518DEADF7D788B65D4663E2215B9A814B55D3512EA223833
6C9026ED0ADFB6F9B07E0F79E5933967073DABA142D9C988694761E120370DFF71E0CBC126CB
51B4BB97189C7A415E67979DF20323F97E3270E098CE7501F83B05F40FC5F5AFE5A78CF05E99
172479F98BC4CD3B184F73E01F971A7EA5CB61F3206E4E38DD971E320A691F586C7EA399373D
0E92CD5090E798B08E5FC71747B9BB6FC10DC5234C720320AFD1C83FC0BCC99C07ED99D5DA32
AEB68D13977810424255DFE60A29ED55D3C034A6D33C84504ED2510C7B3C4BAE0C22E7C3F489
0918AE7CA0DF3876FE93853C82AE8CF04A455D9F54EFFD965CA948523CD541BDB5BA14F824C3
6743B47BBB0CB596940312CBDBE9734BCA8BF186BCF85E785138550CE03E5554C246D6C916BB
D62A3A13FED45536DA1F33FCFC5C0BBD233F652C8D95CB76A929ACFB744FAD60A1AFDEE91C71
8B513A5D882DE757CCC554EA5C2987F574B734ED086EF8C4326A2224D9036C40DFDE09C01E28
B51CB8F7BF1FF6EE74D415DBAF2C8DFF2D4FD01728B4938B83419FE1D3AD34A6283C2CFB901D
E96A7AF6504BBBACF74B9C4E88338DCCA8DD7C3CCAF92086CC3D57AD0C5BFFFB8E3493B08DD3
2312F94D56FE894C7FD3D2FB5C17B741F80E02FEA98BAE3717BF31928747ED162B74EEB7D0DC
4A4393644DF9144F878A46D8DB9C84F415669BADBE80F7081C34CEA23F35B2C9F7B6283F9275
84017338962680388CB6AFD258DDA685C5B30F53CED93785831F35D432E27212C8B058746D0D
2C7D22026C7817ED1FFF510A0F33A1306BF7E45B4A7B46A9FFF672ABD69A42476081E912F338
3358E275652C56A33ECBA633F775748655B5742AFF8AD12BE746E7EFF80382DCF96CD5734F7B
15C5177A9279D6C3CD1440D6219071F41E2BE7D0B18565C83B6B37ECC9EB9677DBDE0F0E49C8
8D245E39CB3B09B659549F2E8BFD1AFF39F8825F98308CD7BCC3EF382AFF37F849D0EE58D952
E06F6AE55526A100CFEC9C59C90D78E885F650164FDA8E8F630D2F4C15EDCE829DB22BC9E23D
8E41E8F97C3154CBD5C3649C67AA889B9E016B6198A7DF68F60A2C08799A36AB2CCAFD8EC406
38E71FB509CBE17A67C4C82ECA9902E4C72537B50961A6B10246442AF4F7E73C4C47189F25B8
0DA2B00760274C1A8ED651ADF77D7ED3CC7DA0E9EFA9A70692E4F8BF1B1BA7A92E840D46CDEB
1A2F0030BF2F2E29100725338C61BD9FAD588B81BC735949D613EB5CA1101DDE4D7991BDE01B
40B7F512C8ECC5C153794633C5346156B16F334E158F68C9D86BC97E1C968856AEAA7083E47F
4B4C890BCBD776522DEEEAFFC35949452217F8183E5670EF43A858F0EB30E4018CDD6A314667
BD871F907694A1A8370B5F9A859FD165E9C4477FC9C5474339F6F2C93901E8DD82028FEB1A53
3ECE23354EA9E3969C32780B98ACA5F09DD9463A2B7B1B328439E308625BE4431A53AE74F763
BBEE179D218770C77F8CCC87ECA55608CAAC0110993D8DEC82F28851FE0426A43936E8C516BA
9322022ECAE9A29430DCA01CE2D0019D8D5BCF56A5D3606C417DC559D030BD7C83D5BB473D15
5938F79416574D4E265FB247AC145CF90A2B22871A86A0D573BB595596D9D0EF34EEDB8E0383
C49D75219D0C5D898A28BF72D2E7224B303086FF7739264F52FA56575D7FC888574AC083365F
75821786C91A15C515D03351B78910FC66390E4A6F466206BAF6817F1D95745DC26E5F7C9C69
BE7A029B9CF8039F9844881872289F9893AE57158B88525B40872368E036C52B0B2F2F41A54A
72B5BB5B10607783AB9EC8768B659771E73CCDB86E7AD6180426D3BEBD7AF292D72524ED16EB
993F210A57BE699D3A83524BF16C07C83825EF720951D7835D7601A98B3587FF97DF4C0560D4
185225195EF4C13D0D678E1B8DB98D0D4F91434C4F2A9DBEFB742BE4A47440909B31092D1ACE
ACA3B0FC2EA4537C73509243C7DF0C18C704781EC2501AA1D574E36BBA0C4F64F1CC9227BF4E
9719DD0D519DC5FCDEFDDAA6E344C5602078FDF6A37A5DFFF1C8654BF5A149522136D19F24AE
D50B73BC442F2D70F1BC67F416353E19CD2BA4DE87B070BFAFEC50DAE947C84166CFD8894B6D
ACDFDEDF5B550485E9E0530B903F9430BBF77D585ECD580B91FA6B2BB9FCAD50D73DA0628723
0993AA5DCF929C7910C910AACF0C27847C0396CB0F4F214E1D39BBBCD9ED9DFF06D52E8A5287
1412228D387888899FBC871E8F10E888C22E073CA6AFD7EC67C15433F77458AB54B4380D0C0F
1B79AA392E2E00D88FA427D10C82D8C02A08C7B6110A8B74277BCC1909A3CD682137909BC769
70B993624E93D9FE671F4EE439E08897881F0F53250B020FC3D90D04CEBAF7B132C1175CE407
9B338435DA92751A0575B5CF5C1F7E24C882B4E9C6E802C6714203EABB1A5F9263A3721D39DC
CBB683E2CA2A177CC60B42A857AA7726DEE42C21343814C1AB20E5FB512612CA727623B2F527
5610384E6DAFCD4BCD62CD904D0DBD9C0921AF0911C0F1F8FA378876025DB9ED5E637FB1B15C
187364652E54CD9034B3D13A8D249EB32752DC5EB9E642807E8FB53377C5BD1D703CFBD0D839
41161DA750CE4F127CB127D0BAB979AF8675CC78BB03377B89EEFA48A542DCBE9FA5FDE6D34B
7DC0D0404EFAD99E657734DC314A44EED83E56A308E90F4ABA9534A2129CE3ECDB0759CE9D11
A652AA16F4D3A93094DEBB334A74FF1EA8E6599A5BF2AAD29B449CE39C3383AE8BD766C90890
B11953113C58F4E2CDCB23A508E8083FBD5B71DA34F6CBE724944481F3D0137E48D2C6251C9D
2217DE57FC804A60C61F74CF9069DE57BE29B8908DCD7548DB124E2CAA02B66A7FA3ADE37456
5ABD151BB52FF77949F024DA1B57E3EE7ED5E769D142FCA015BD2E35C619068E7DD217F29795
A470F3402216025833167CF382F4F6B0380DB59E7C6AB570E4EBA7498722C73AF3868D150D04
20B3384FDE55ACD42C2DD317071ED8F034E577C7B3AB3945BCFAD2223FF8C8B699EC49004D6D
5184CAAEE662262B27CFB509A7851F675A1FE0C0B216693D004576B36295031A1BABADCF4C9F
1764096672F390C2579ECF451048E700436937673FD4924976FD7235B553B4D9CD40875E27D8
6DDA7487DC8A4FEAAEA08895243EE981A203A971F5166AFDD8B0ED4F9DB19F22A4DC98CF0847
B47B0279091670E91A12E3B54AD7FC4B755DD963E784E915741C0CAFF91BCD2E49A1156B688B
D959F5FD2074F12DBFD15A38F3E39E5FA97C8F7382589FE5A6C7760867320BFE877681AED666
A247C7296EB6187266F7770A8C0A838B006E7EB66D293D7C79985533381918175EAA47E3C3FB
3DC0DE23CD6B4BEB3982122953F97E7864DB09B0B9ECFCD4E568D49978E34B5CECE02C588776
BA04367357A2BDE614F50E9A993D6B9447A48AD2FF369AC56096E904C8B6C9259C2307DC5A2F
FFDC6B91E0D03CFC8A772F9ACEF6FF7E3421F21D118C3715104624C666C37D9434FA246E55A5
E02EC9E6D755080AB5262674016F10F3E46CAADEE10DD6F86FA71E9F430F0B55E08F55BDB6A1
787A9E7F82281E88DB5C63797B16E671269D95E9668E3A03609129ED4785816A0667F2743AA6
0064273615BDC0C23C93F9E693714B0DA0A703DDD7D597CC15343B60F1B9259089A23BB9F0EB
BE1BAD970F534A2011DE3CDF778C9BFF72F89838730957339063245A05D97E4CBAD5012478C2
0CD520882C7EFDF205C275C4289130A8C86339521BD589801A59768B246093A9292E944C47FD
B35B99957BEE3B70CD9E451867455B1A1B4652D145F7FFBB76B3CD6B130C234E89FB31B46EA7
D9F2094AFDCE1BAAA45F38F7D4F7874AAC3BD920456E680025EE3F2490BB2B20897307771493
7FD3FB33619E0A5389095486331ED2AE83FCABA315763B1A76FBB76D5857174B2CE341EAB048
82DB3A3AB3DB63E017AF5DC6DABDBA6B2857C5AA32BDDECB27BCEDD53FE6FB9F74F941FD5035
BEA495E8317D3FD8F501088724AD202CBC4F39B6F5B2F920C333CB4F52DEDF07D539361CA96B
CD33BFCEA9704B65205B8B9CE9496AD8D2C235D49673E51806081C8BE70883B1F14F07FA40BF
F62C2D7F4C9D502B3A936D0970DC6D61147B576654EF5126D7B6A7668D9670CF58D8B6253D16
25E09F588178EAFF26F4CB123CCEA0FCDAAEB121EFA30AB4FB0CDEFD30D96465D9B6FA76C3ED
28D140C855164EFF974C912D52B032301193F2C4312EC52B6DD21B206A1EDDE78692F885D714
279461BDB7DEA004F365098A70A1DBF047A320542BA0871562F193D85DDEA51862FBD3A53328
2F14CA6AEFB0FE438FB8979DF85EEB7873E6BCFCEA1D593EAB8D427B955D22117F6DF875FFEF
1A7611EE091A56C9C2158F6C4BD9B72FF00392396B81F039F635929175B8A113119961E534B7
AE7694BA76583FB11B773C4E87626AAE45A528F625EAFB92A1F8901CFC8871CD091962F75087
1D20074B72E906A6DE6798CD250F2E61ABEDEC3932225D26A04D6376526F7A9FCD5878317628
CE98F399BF8E9BD8EF5F10C836C9176CD4378386EEC58C5399A26294807904EA947C389941D4
78D3B5A5712B9CF3983FBC1F5553785EAE01DF59C8BD022B35DD57D4B5017AE12B16A059A890
FBC927D637665581B1772C778DB391D9F36B69F93AB3834210C10649151484182B24493D4A0E
58D96FBE9A2EAB3CCF5750B61CC336BDCD8A0F509F11EA38581143D7154FCE222F4DC1895DF4
2E95570FF23151367B17D2118794EEE865E7905A81991496C604ED4AA40126B53868BCD36E44
60AEFB8CAE3A10B6751C97ABD657665D39B2A26DF751EE6024C3AB68443E3EF38724DB7E3179
1B71C74D7502D9D88864075BF84C22DBCA774BC7D41CAAB6484EBC6E72F2AA90D096E90F8E36
F8F1CC5F3BC8F3DAA2B203F54671159C4C734B0FD630B4A57FCF84C902D70A193CFE4A973B78
4EA774CABCC4D93EA0BEE60AC8FC8F5D19487479284D9E095CE37FAED476519C45DD5E345169
728EFE63196FC6814E038CFF4CAFC1F55179C3F39E0377A53F3797A5F4FC8AA28C469BB2CBD3
065DC5DC0FAECF09A5EAC62C1E5A5376E7503E05454F02C1CF5D25732D19105B3DA2ABC4ECCE
3484A82E69DA565F0EE5770E17539EE77EB54DEC5342B9EC8C695E66C4F0826B5D9F1751B058
FD89A099652E15278C813D784397A56CB892D0D89282B8C32CB8B40711D0F966C00312FD00A6
51BE42DD9490168AE709A07ED038964ADFDDF971775F67F3F4A65B6C1BF569049E3880D5978B
56CA987D2FF853DCFD8DC33AD0C5D58579D09F431AECDBF339A636DDE2BFA9EBFE1C7D36F802
FC33F32E1A8A78E26FA38822567686F976176312AB34674213DE4CB86BCC0004F945136C677D
0C01B9D3D0D8C6AF036A38F52FFF1AFB2CAED092844BA23F1F617FA5B9EE4B4849D2BF46A495
1FB913350BD62C54B9E9199EB378E5963F845A2A884278B91942CA1284AE683071218A1D0F52
C4578BDF9986686F907B248CB12C3D635B8F9E084E2196C2BDC750867E76E518BA10B4F75AC7
67D1EA322F4FAC137A99F0314A2ADCA931F5FABC6ADD4AF8BD5D94F1FDB30E4BAF1F9B103CD9
C4A82789426E7AF4F17E8786952F31BFB5FB70C33E5F37DA714EA075BF30CF0A17E6313CF4CF
9A17EE43264B7947354096827E61587A23EA1683B7DF5D1FC499EC6F4B9F0F217B46D488E98E
29576A4808AE615AD8C0F1D8CCCBEBFCAD15D07BCFD1CFD1ACB8F66D6386329FF41414D4F1AF
268664C0B81308DE6441B8C19A8939065E233FE6DD54A08D61564EAB4A3834A96D8251B25D06
BCD666EB2675B57E9CA474D4254DF75ED8F5EFE0228301F69B43E5DFFCA737FC80E7E1BBE117
00A92C094FD099C7B7D958C2C714912CFC6D49A77A0484F50A178417F35BEC164ABF80859B7F
F8E0C66AF7E4D73DDCC5F71627AB717F62981FF8D5E72F81AD686781E2B800CDB5424AB210EF
933F247E87117F867EE035DC0BB514B3D689BAAEB2CB6713FF2F91EB164FACF4A81DE864796A
D289EE2CA3F08C298B791E36FCA10DD4D5E039A5A4F812CBC3B57E13DC85286A92066BB33A4D
3C5B86708E291CC72C53EDFD2490E91866234F273118F811C2B09AA3BBDAD1EC5C56F090B1D9
32E6D1355B28B57B44E6657FC637902B9B672E0393D35B72043E31613939CBE2C70A18A409F5
B42CF96820F235E667A46A9DBDE68360D5258D6DC7A862A493A4CB6A5F8985ED5A255AD61A55
D09909FECE7AEC60418A61F4187CD06CAE398D1D8B2201AFD33C732AF91FEA9355ACDB87DEEF
6718E7F8DE8AC941BA112D85AB8C56146CC8FA28CC9E9BA455C30B3E04AB115523CCAAF1B69A
AF889D46AE0E3762CF3C9F9800B45CD435F1B6D4E5263447008FA5E0871AE94E29F3D6DF7BBB
CD8AF3253B8A185B4BB275D7EF5F73CC047CA8891660AAE38412E64D5F561FEB14D6084E4F70
FEA9F8300F16C29059F73CCA235A62A5A371046A7D31DC1AFDC68C52FC8CD5414E8E1CC1A950
8F0746B81A7B0133380AAFA22897E36D8236C0C72B5039D60FE1085F3C258F5B9EA49AF4E8A5
C2641871315A01F79F874449376AFDE2A5C5556214C6B3621F076A126FF346BEC23D4954A3BF
975155D45B8AD5BB9FE5192F5209F26F1BE23DF5F81B53EF6B6B46ECD059E652365DF778A9EF
8EEC53618B2FC491BECAC1DD0A48148E67678F13EE0C2DE9D6AD34E840D94AD189444D84E365
ED09485F9CF0F90126ECD1858437B89C2CD64E2DC38008547C763530129E3EF3BB3C530DDD3B
1AC7EA497C7EE28BBEED64F82DC94CCEF1678A87D80F2A26EBA06E94FB891A70F1D7B7389262
EC472546B270B812586BCD2ED22B4454A779E0170D2C1B04B1C7727AA9DE8CDFF4B7F94847FE
96F0A139CDB6F48D5CB67A5D704DDD7390C5775605047970A028A7E16D393FDA41C160F56D67
AEAE51B7FA3C1A819AE167EE2834F45D0664EC790BB3E8B17035118735A3EA6722C87A847322
09811C7A60AB5EADC11D2509BDBDD8E9321EE73578A7CC7A82FD0F23C594571D0382E7BA5BCB
8764200C18C7046932AEB95377EA45C7FF01D484644AF472F1C08DB9EC14F9E1E779DA337307
4A0428833954FE9D2D45C6D9220F57576B96DAA4E973538E1E0D77317521C8D69D46B12AD6FC
13A7DAC082FAB9C19EE241FF06D5B0EFD2005169653B51F73FAD0694F0148D677BB09E194613
F0F71DFF61B81F8C412A1271B156D2C1FF4E5757CFD70EC8A5D755A9CD85F42B3084B7987893
E7EF085C8A81EA9A00376020BCA88038F7670C5CB7451801B1209CF7F544A68A6DB363E9B3CB
6A035F9685BB6FF7243B12D3294C217D8E4AE70C7F7D37D3A6288AA71D7D942789FA8EC2EFBC
A8025DAF891B01C8033BC11FD4404292536B45AFAA134EFF23EEDC0DD016AE49B482AACAC0F5
0E9AAE05E78D3C06229916E03FF1D43E6E9377AA2FEF7FE8C864DC7A9E07128126C4FFC47027
CBB9AF9831783640A1673C0B4EB40EE97231C1896A596A0A524C3BE6786F7A438935BD8800B5
90991953F2F1CEAF54F78E59EC88810E233FC3EBBA633610FE2309A710572358820042AC63EB
278227F5848AD9AB3D40B20D0FF9A9B04EC03D8D28900D48396F1ABB786A76E0E809F7EBCBDC
3105A33F59D7FF296038A524BB6B2260A222DA5F48B0A3E535BB9A7A8B37551C521BD7944395
F21ED3402C79E3CCC6FAB5F51E3823EC72402D5D837CC6C20AEC5E222820EF6B459FA6071234
9859B6E1122B52310F1A80EEEA6CABC47B8F35C56CF461F526E502290201C73E4BE66823159E
25CE6E8A70BC2AA68198907D94A635BDF9EE0B537005E35048B8304EA274FEE5B88BFC6C9622
B311875965274F83C89E2CC9C8BE4D2DA3FD358CCEAFEA013FD5A150160CB351864593C5024C
B12B08F3EE1F7F1F8828371697859845AB33AB6BD3E6F6F298D1B444582A3D1392A95A2C24C1
F8E743962CEC54D09DF8D3324173FE192771B6B5B54FF7C2887A719BCAE772664511BEF610FD
15AEC48D5BB0E959B414A5C2BA4EFD335694037EDE03F19ABE4E67171D2051883DDD19756D7B
9519004C5814E055C4B94F02BDF8D564770ABF2F569A5893B374C8175447E319851677733D64
BE4C48BD3B3A2CC4EF9468A7065E3F84E8EDD061C5DF676EA8455567EAB84416564421BFAAD6
A3A8048C4464CE3AFCB31296E9500B638B34BE54F63EDE677C32F9BD7DEF58C29E50D4600768
E6F86DF06548388B728169520D50C5570183E008DDBE2B758977FA6C5B4B10DBC6D1A58C8426
B901792BE1F2ABA6A2F64DA7954BEF6CB04562E6553FCB46FA6BEA9086D0D2D7CB89CC47FADA
70BB7130C89CEDBF4754E971D12B65743DFE7CE7301400FE331B87B9A231D0B3ACA0F63221B7
9C59FFB89E2F486B3CBD8CD93115233F4ACE35644BB9BCA9349B5FE29F6ED76FD9256C66B090
E147AA3D32225C155690A4FD9AC84FCC31C638ADD9A472115D49E89C5386F36B95A37AABC593
716A4318849476DA94F4737C2CC32FE94E06B5C827A8F6EDF872B2510EC5FD2E2FA5AC99E5EA
12776BBEF13C86D418E8DD2C9E6073AB2427DFFA2E7821674FAD1F061A0ECEE8F96EAE9FE8C6
67E2E87E394026CF743D1F7F3F2F871F6BA01EF256DA9D56ADE58118A1357418E861C4CE1606
DA7A0BCFBAD58C966C82BA2E67E804626B08412FCF52F38F14ED1A8686A4A1AC7480EC72987F
EC346048C965E59B2A45A1422CF8F576D93DA877AA733D93EECBC16C89DBDB34FA6CD05F735F
9DF62B022581738640E2343C857D64200A2DD293A2DC646270A4854F25618D85978FF7E1D172
BE6B35B57D40F76A8E62CAEF2C712C12A87845371879AD55CB8F1B71615E4C7B05F7FD0D81B7
D05442192BC08374BAFD865B29BE14B967DC391701A6F895ACAEB2AE806AF97184377D9ACDB6
B00A912C4EBC2830275F009B7E615C966DFA0C5AA2063D713B4B147231048CEA61C516779014
AE32994A7B42A2CC5A86C1FDB77B4B7402121FD8752341FF4ED6D068D290B7BB6C4F5B11CB94
5525DFF9C613B124B440ACFD97AB66F13DFF4E31E8A9B21C2602E5708EC97E9A5ABC9DF3F38E
F493BDAB5C242D2F6C3E07F492929CF84E605B6E5E03ACC113629B4181F5FAC4A4E547A70CD2
C486CEF19E3722709E183538C6B191ACD844C5B8DAF13F95814286875D07915DE27438E16663
6901E19997D5ED64F7E5B1944A8428E74FF3840E08A1643D3C2810AE7E00B1BE32D165730E73
118F0E29A2134EE856E472736483D5037CDA618D3A4CAE8C9B81177FDFA9E841F0CB381A0A31
9558F8B15AE49892CC0A0C5DAF3E31A1A24663D3E1BE4859DA044ABE199632D41B4A7E61ECB8
10CFB2214A9420AFAADB4C4334A90FBD09B877796205DA842E5FA0BE4DC5BD0D98D2140F90D0
C0906745697C36D973D09318A9050008EC1624D7A6B8741A39F0FDA24EC4A92C918DC8039B52
BE9D68757E150FB58DAEF9E0928557DA9064BF5D1C9E513BA4520876D34D286F97EB58457D59
B877F4BE68E3C6F56AE6D702B4031D89A0AE598A04FEF232A2B1578869E731275BA04024E5EF
F764E8E393904A72C7C982AB8E2EACD1C2FA4D8563E3F981EF49CF4598C5C481ECC1EF953F7B
DBD2C11D989AB7E38E46614DD428A9A99E97D15C283E3EBA9CF389EDB63DA593232572250138
13DC5FA6BA6C05D4D3130CFD56C25842CEBF75746DA31A1ACDE3A7C0ABC157D0762952813831
E7EDF4B5A1DD415D0DFFBF5BBB05D5B39C412E82F0B9A6033C13BBE8902321BE12803343B852
BEF2C3E9DB8DB30CCA0238F8C9FB012D5E56FCFBE78109AF1977B9431426829F6D058AA52C3E
985DFEFF87FB2AB0E34A9D1C39FB35162557199404584798B837E2DC32BC99AEAEFF6C2B0D56
A0AD82591C309FD5697F157369DB9EC3D4BC935DADC3AAC5D1B042F39D7E2A819D5ED8BAF717
FA859780BD343B6C53B1DD12CF49EC709AE2215559760FA710651EA9FE72B30391126C01E756
16BC45A7C14F6BAE90C69095E45D547E8D2F898472F80D010C4D42047A7C53FD1A5DDF5F0859
5D6FBAC3101A5693956AFE71AFD53FEBFD9394C1C7FC21434979347BA67464F103ABD4072940
03B5470400E05B14A42D662D8C0654898DB59D8811B3F4F8602CA3506AB451D530BD76FA4800
9D3370643FBD45641068618AA82DDC95575A533768F24DA4E3D322504A5A1DD8B42A3B289BEB
52E6FBF6A8AF118F56DD5A3D9B4F32AC0581BFA108FF1CB445905DC4595E14FA22540CC2949C
A19281AA0AB8696F3EA07D6FA69FC3806BF581F421DC626C80FA6829EAD87105F2E7F0917A20
E5010634647618F975A5BBB6160637FB6851690182946EF173581990A27A3043115EE6585BF8
396D10DD92E5DB79C414567156A3579B8DD847F3006A7843D9F900B827891AFB282F75B2B2A8
0AF39343D2C75C999B7ED84445FFF5667B038ED5613904F1942029B57862DD3969105A3CCF22
452982EAE1071F35B5660008520C9DB31D6291431772075B358C32458AD6C9A7AE2007BC24E5
E870B6C97F284433E79D7317353CCC058AB78431CEE525176D990A496B306E66760ED881E76E
204632CA184A467F7DB8111F69D2EFBDE3C298E6DAE3E80D0439E72983B9819B5B89A63382C2
26581BC11D6283E6AFF1CE57C827D43D310409572F98725D9325F31C2D212EA1F504615F5F22
173A12BE11160970A4D6A875D8F296203091D578E66D0703F7002AA1468C41F6B06192724915
98CAF9A94C450308298746903103BE00532C243D6C5A65CDACF81AFE72F6EA3A3455188BECD2
CFC1009E17730077D86134D5876491F8A934807F5A7C2E00E29C74DB7EE5957F36E409478E61
9793289751AB85F054B4757B01C461B45905ACFA3DECF21DB6A5174849AC58ED65843D8E6592
9591AF287C2F436ECB2A684488A586375584CB71A7E804E8541A609AA2D839D4FC029F7A127C
40D0253502B2B2B7B2187FD84AB2E97AC1C4CF79A1315537DF2677B332CCD3DDCB8F3254262D
985D2466CD92C6A6B60DFAA01B34BA5B4453150D6D77AAB01F228D313DB535B454B6243A949D
B45263510B10D320E1FA0E6F9E16965B3E00FB14D8D4C0F26FC58D4C79521DAF016008D2404F
BADA783C9743D9955460998A3D523731739ADB13F5383141D4EE06EA06CE58F59D35D6BF383E
BCB489ADF46C0554F254FD47031CBCF7DA2764E5D9DB749DCBCBF3EDDDE2C2B5EE25F7519778
24ADEB1B2F0E13DC38E04ACD498BA2A90B6F6534EBB643DB47CBE536FB5D8C2523F9993BB5C5
CEBA248485AB36243A4B7808832CD9A872EEAE77388F5558246F562DC986964E9348FD045E98
38A17C9B18D2804BB73FEE8754752AC06C5A735396A8558E4F817FEAA83785E002798DA4638B
ADFCFCD6593FDE22E128A048805238D5F20A0CDDD571ACF1AD7C6C923A6227F0A4E8664C1810
E043622833BFFA0326717EC4CC04AEBFD7175E00F0AB417464AF967F9100310600A7ABE7D3C2
083C118A4A633FA1BC3248C4076337CA2ACB4E08A66EF0D71ACB26D7575B53D688934460DDF4
A1FBC5FAF8636B9655D820C901DF786CA72FB8D241E4EB1804E7367E621E00158B0C4E505C8D
F0B56BC7DE5A002A19A070776DEF9F85A4E9BBD7D41135DEED3F880C86E3937927272768B821
59D78D165BBD9C00F9D4FB7870633F83A58D060FF42D727BD29AA7DA6979607A8DF61F95F462
BE8AF94805C4515D8D8A837B1722DF4C551306AD8E7374834A5771C6478E3340EB7A6B08DD61
42359B5FB3D88902F0CA1079FCFFDDFE07FE95B533E27703DDCDEFCCC017E52EAFAA39840D0A
A1D9915721F9CEB67BF787D433D88C9523DC46C262A525E901F1D230F8BAC74ECFA6CA4032F4
19D08B542AD2BEC53DFB2666663C939A67BF946C588C357272F224F01C90E0FA7E2E0665C30C
A404199335F8BADAD46CC9692C382482B157CD21E93272CF161246BF3D4AE21FB1CAE43F92DC
7C9C4E648354B02BF0A93CA94042113FD758EEB2C7F57BE7BB67070E05DC4265E22C072163E5
606E1D2EB54CE8E269E2FF07ECBC0B4CE6F0F19A4083976B3CC613F2B17CFE112FB35B17599D
6C3965E34D9CA01A414AADFDD36D83F09612CB708D535189B6CAD0F56A2A6E7F811CDA7332C0
17818D3851855929C4F35278560CBA999BA88E527E0020FED2E52AA1455BF3E4063DC6F7AF67
0285D052B2DBE5CF4320C17469582982F74309F0BD9217BC750265151B5863F580FF97A3FC67
9E8A1828DAA7DAFA4868016DDD3907600C59F3E8F68A2D82509104318BB548F22529D29A5C49
2EDA6DBE8BD515C09E66F3DD5BF56E86132F1FC2849AD057325E5FF17FCFC2EA2DBFC8509817
E3CD20EAB73691CF7A98A43AC2DDDA679DAD814BBDA21A015F3511ABBED23D767DF054D586CE
8502EDBA8634AAA8F93BDCF4E629361BD7CB3285519A04E32515284149042454FA630C68E9EE
4F0C0288EFACBAA180AEEC1798EB617A94DD515196EB6A8E9BB0AF66D53B25A000F8D6AB6818
6B71445EF0CE9DEB8D71A2756A85F3D64F916DD65EDE488B03E646EFF6265F3E354B66886D03
DEB3F2BD51F9DC3E9ADC418F6FE1B7CEB6F73B4F3D6B7175485855AFA03D60BFAB6A9C7E0DB5
7D9E16DBC9E909C7896B178B1696729FD4287178BE74566CF15B3324148032B62EC53C206408
7F61F28BAD07F026EC3748C6E1E3F9BE6FED8D450FB2157C257DEE8A0245F02B56119EF20530
10C95788BD7C54160C4F8F881EAD72F8EAAC6ED5CF55CEF444C1B8DA4174A4F5ABF45CBF4ADA
417DB717AC0B8FFCF7D98499CAE43BC97FE73DD324D61CB2C2B5655F9530EAA766D40C6C4A05
E5B5FB04F34E94C9E4674FA64AAB727F6B886FA60A734D43201AB6F83D14ABA4B54B9C0D3AD9
3C5EEAE88899D908865836DA3D212C32EC69377E2CA10DEA84B9B3EEB710A111A07149538EC4
9BA53D3819C79BC22C985BBF2E2503691F8A82E3E8258AFA8B6327E2EFEF4764BF75BDB6A48D
A91C1960EDF589384E0E270CE9471EFFD29464A231044C9EB77A266B4BFB186CE117424DADF0
674B377382CAAF8FB20B639CA0B338A971446A5EE6564A34F74B3B7549CC35AAA36E9C3E831E
5ED3AD8317AC28DFDE3C60F6193504E2005D7B94BF8A032CA8B6D9B07151094C3508EFC8A3D5
5A219847A6DDACD9828A80636F6BD1019A20DA784C28D9E72D5E1052D80BB4E9209D839EBAD5
9AE3BA0735411E48BE1E342B11883D5F53B58373E33BAD3243D1D0D298AC8E5219F7334CDAAE
49326A6365C7304ACE7E02A75236B7416D2A659B755D221C42BCA81C37140368FE72BB33F362
8F7BF8AEE504FDB92C57B868D5F847FD206D40E40FC5D19C67E8025C28F20514488DF16524A4
3F24E297BEC579B2E15C35AA1C181641D637EC350093E5B7A50CB97FD0DAE7E28F734332E716
1999541E32906E34402399ABC8B93C0E25D2696B50946D9900A82B2DAC3151F674DB06BA0250
23D143A8BB6FEFDF383C0D20F6DCC329F60FC08C0DF78F8BCA6FB1945D17911EF078CE0D7256
2BEFC44601F37561E4CE3C074B55F6A33BFFCFEB6C6477E5E9F190D212246707BE911DB4EF8F
D022A130B4DCF061D883C3093B3B2B99F864ED02854324C496F177BA5AC2560A92E195FDE3F3
80AF15A74E0A67FE676C3E28B3A59C7832DF21FE0F45E27BEA787B8202E95F403017AEC41A20
3960F560479FB3B0DA14691EE02CC5E13BC10EE27BFB551693C32265B714C3100053F8A3D169
79B692F2541F1EB692B0B6ACCA51FC368296F37EBBC05019E19DF37CD5746D357EA2FF4FC61B
D5857BE56E1054BC368D1850C72E24278354C0BDCD87FA832CA4E0C20CF8BF8FADBEEEA12468
07A3E11599E1135D8E0D884325F6B24FAD298BFDDCDA45F5A0DBA71426C4DE5546DE6D637346
C9555D65BE5EAE5B05BE5912077A92F4AC037B35868EF0C5CD7BE586396F1E44DD5BE2EEA249
9903E612DC73765AA9C796C8AEF0BF7E2D9956D3252029C1025FAC46A186A843B6A272EA095B
D962D0FB33353CECED7A652A5B6A8E402EC749B3F1E6255E9500FB20D750DFC41DEA740676F8
C42BCD153C3D97A890604522E3C47CB17B529DD120A930C45238E6F38B8BC9CE6E348F988FDA
4277EA45C7FF01C4FE228A00526DDB6F206D0ADF7C8051F8912AF533487CCC97C3317E589BC4
73D4D02BEECAA220115F8931CE45270A8E244792BFC0B4AC4D71DBE7F08BCC42A8D73CAD9DA5
D530A3EAEC454D4CCA9FE54A2E7F2E570B09FA76CCACF67E021063E4331FD83440018AC9DC35
F274D2486A73003C09F502BC471D451766E68C386285910CFA0347A316B4C05945CFE2949D0E
626BD7B4B29EEE6E7A0B028551667B4E180EAAC72F11B6E6BB400DC8720795699ADEA2053DD7
E15842498E3B512D9869079388542C8DC0B6E578FBF85829429F7A84EE05FE594FB41070109F
B9CE01E8E2DDEFB57003C1E336063C561EB8642A2F8B5AFE4A43EBD47D394ABCB44D1FD1C835
2D29FB3176DFE8C0B608EA45270893808283B62EE2D0E835C3FC56AF504274CCFA1566C2FB7D
2A20FE8FFA74F2276B0690F6A7DD21567F09D8D4175C9F3E541E3641F6995253F9D2AD53ADA8
87DE8CEC433B0EC5052CB87D130E01456299337F4D0090C124DCE321CFE408508794B67E3A87
223550A70C0707B41A8DB412CFD7B693B871EBC7A399B0153AAEF34028EE5F12F7E1EFBECF18
A6910C42C1260BEAD0A2675D87983F1236AFCD27DD5AF073A5E74EDF5F797D4347DE1663A3DB
160D0BDA26F0FBFD973BF5C03E2C49D81EE0604E52132F5EB78F34F18416D1A677FEFEA61F18
DB6142A035EA4864905695B270A0B80B78BF90836E5E2FC4984E069FA7D6B8EA85818240CD0B
2A402D149F8E856E7EB89D3EA4E4FAB850FBE8943D83C29BE612B35138C742F1FF69E46161A0
660EABB6591914552A5DC9D1314993686E3DE928396BF372BB817D599898C63CD9E33DF40860
D7973405A61A49C9F647603B0291C03F7241B6E74A1FED6884955BEB16F579DA1B599E44E6DF
C6C170CF7F25785FDD7B53ADE2EA6F2E48A6216CEAF3D6D6964B884DF8EBA3673758E1320DB8
7DA1D41DEF1C22E66FAC1841A7B5DEF30D4D0E5C14E2CC1621EE454D123110D0578142485CDE
5A98DD7F6E0625ED5E242D3FB151A1ADB20319DF8423BA8EC238BFFC39955EE44D73B5758E15
0439EF5FBE890CB6FBA600EE0927BB4A5C2285E856ACE4FBE09BA916D0AA55E9C0DBE44E5CE5
4B2424511958E3F135246E72891DA5CBB049D6B5854C2B0301178C71F2DC2B0B498C7E92606C
F6D64F96B434B962597F521B36DF6362C1B7270FCDE66DB58A7B3F951589ED0FAD667C02C1CE
CC562E40FD62E35C4367D29F6902EBA961D497EEBA1D1E7305BCCBC1D905ED04739D9868D390
C7385F7C7541A3162737BCDA9A94B28F4E96A907201705EE427C4D8E8B0EA6FABAEDB556BE77
E6FB2864E4CECB67C53817637413648EC2018C569CF1D642374A3D62253F937AB67BB72A7F52
E4E4245A22D8AD38580D0A4AE0A37F745E385A1C3E292D7493FC367D64B400B00AF7CCA868AB
A9FC7D3AAFE671E77D52EC0CE1ABEB5D987A0A57A186BE8EBE77E418F56D1887979C7074B893
7DBEE2FCD620B7E6C67CFFF43669D1F901266C0B4E5B98B7E9F76443DCADF482A3CB44BDAFD3
B43102AD2FAAED8D6EBD5BC7AE575062FA164DFFF38B3DBE1FF4B00C03E9484CA7F84E247C56
4DC8547A9ACB746B1A8BCC60D37B47CED4E0D7ADECC7321EC7BC54D2882D30D66AB800E17E0A
E60602FF103B22BFA1E3D898B71C19FA70D3E10491D4F773C28FAEC12320EFF572CA73888B7A
9B333563FEA596A6BCDF3D16E45F8C92FAFC3681CE147B723B838535C4F0F7F285C9EE21F735
9EC64250CE6065B831D25FE0F4AA0C36780476E440731B80DBE049798283DB9254FFDE764701
7F40B1D6AAA28590EE61EEBB59E6C2E509A35B2767FDFAA6F7A6C19C1830CAA58758F85CEAEA
6A862FB793A09E6619BBC7E24962D1EDB9BD9332D44063B6A4EC4C24363E907A69BD6177573C
B792DC69BBFFF0456C1CCBBE1D7FEA2CD747D1347994A4B686DBC47FA0EB089B5B2A0BB10FD4
F5CE4BF2A519E5B82149866A9D718CC78F29C39CD1D762DFE80BBBD0C30B96A969AA38CCD02C
DECE00484DAF75200194E122C83E69AC216D53FEF27527A5C9204ADA1D14B43DC18E44C6B587
FC97AEB6AFC837D5A9F5B6793480113D77A7D1E7829337ED1797E727A22540495F1CBC6AF639
0558A30CD5042E790025BE8B1C102014283F724A18DD5CBE18DAB70962E7D05263EAF043FF95
0C5E6500B12960F872A4E62BB67F05F0F3C38F09923055998A5F86E4884EEB278166375722AA
F59C8307C2ACFB3F31A157F91C6CAA0ABB325414D5F2DABC2658245B1DC4A1971E4AF4F32299
C42F17A35CB8F4B5546067E34BE4F89C9B33C88194E0F247C5E2A1D8F581B1304866CD39325A
F0A8F303454B0D5B97A335DA2AE9C20237B82FBD9CAFBCF33D496F593B96996FA68820B8FD12
1504A1243AB81119047DDE851AFD79878271B61F03CAF4E714469B62946A47BB4198AD2C623B
59739677397282C4AFE943961F11BDD76B9728BD3E5F83710A9D01DAA204D0F1BBEB53D052FA
11B60AE4AAFD906F1E43810B052121F9423AB8C27502D2DFA0FCCB0F09D5CEB27D81F193A7B9
7243C810CD2FF4D1D198B307CBBE01AC6BA21EE5D2DB2EFB6EFDE6DEF5395A5C8D244EA8F14B
44AFA24A927467550BAC61E102E86F9A3B8DEC638927B148AD54690F90CDC77D98158556B639
7658A7532AF9CE0CC56CCA247002E0C3444E57A70498C630758DBD987A93CAF1C00B07F47323
0375F55001E4D863F9501A9D595105F2A661E192B1AF34F95764EFFEAC32CF03882D0F25AEA2
167AB48B4719CCDF60EE61794589CA62A149D9957EC56F26A248AD5F569BE83779BE51C3EA73
BFCA8B08965DFDD7336B75274A2B0329BE494FAF127D600B1E03B846EFA35579ED5F5245EA4E
4CC08492713DA928B987795CCEE7B4CBECC88C96809050843D52C129F905C1826570684364FD
4E3681BD1420911661B2580D904FE9D7DD830AABB6B548F88C53F187FA9376D316ACEE3B2D93
D8785085DBD1239013CA45A33C871E4D5314830D0A7CD54260DA840A2F896591B990C3F4CA70
BD024643666341397F1C8751625219A337D4E8B26B31D4947B831712AE517B7C77225870FD4C
E3E4E4F3DCD76BC0778913D903593F9C8C874DB46CB6BF7616D8337205B8D2C175D1A009E0A5
4CD6B8ECAF18C385EF7E277BB62A52DF61F0C6326E670F8B6299D015AD040DE69D4976B6916B
5380D474BABC6D6D41D783E3216860EC1961253FE6DCC060E16F889D403FCF56549179B41D5D
7C38595B660BA89873CC73167CD67850C1F8F222CBC2E3838A0980913D38E2B2DA10B796DA68
3EF7EB24EC9AE2524578E2DF2C53A31CC5E5B3003535D912FF5BA7AE196E3DDAED71BB4E32B2
A64A965EC800ED6111E9BB2E282E2D20420C4897A2428D336AD198AB54739C8D3059346FEBBB
29A78C42EF99A5F8AB91CA63289AE9DEEA0327F8F595E8B32260B1DE01412123AA6DFF518124
783D6CAB940EA9F4282CB1481B23102C9A01D48A1ED7597CFDA96EE32958FE89FFCA3911550C
70B558ECD8341FF5B5925CD9D7D99AAAC6E7816ADB1D84F45B3D3C2BE59DAB71C5F48BADED99
C6AC02DC291B16E89B96C4B3C57D8A4484FA2E31C8E224420433100ABA98098AFC5C82F679B2
266E9515FE2DEFD14A97CF98DA94FE13A321A5AC6C0EFEE5B4196B2A4B053BE872C29909A0E2
F54FAC01E90C3AC25289CAC8AB899FC7967E5825247E7AFACDC3E8784BF7A16654AF86CC60B2
CF7632B8DFF2479B63A79A0491E1497A6BD52E6DE49EED4A6BF7E98C5C85358CFBF613197C73
2EEBD9679F82825B636516AA140FE474836FFE9AE3375B27586FE4FB95DAF8C2C89F5EBF104F
1487895ECBA0FED871109C93EEF10970F2F1A2F8217F8AAB013F36C6FE04A88F104C1733D4FA
BBCEB0F1A0895BACE2F48A3DF177F1CCB85AFD46CDCF14E1770564D176CFBE7FD0D13BC95D05
5C61C7EACA2123325CD5FFD6C70C89DEBD2ED490FF3D84B5F17046B858F8A575F7D75C21551B
52FEE3D4A4053353E8603B6E05ED71114A37177BE6C677AD4ECD45EF0F3C4F97C82486B71467
18BD0DBAE4BD5A003BE0370352268AC6E8EDB0A411F87BE664DC2767CF68895356BECE4FEDC2
AD987D1513DB869EE3E740A60B8D05DBD6C5CEA86CB82F6BF54316DF8FB8D08F660D3E004B68
3CC4886DAF3C4BAF2D67A75FCC71EFDFA8EC1D37E58BD157756DFB7FD9114590A0288AF3B0A0
4DDA6DB4E2B96F22D1D0A1EF70EFC781CE901175B2DD32F13AF07C92EF8DB5F3B2DEC7545680
68494F1D398BA5BFE55F3000784FD266EC7633323C8818E9EF32B102369939ACBF01C18F8B34
E93EA50B8BF343C70FD0933C54623A7C53F30292BCC852BB16C9880EAEA5C3F1DEEABE76A24B
D1F3F2B885B942C34E2445F02A3B7159A9B913F339A729C6C241DE2FDF022BE7B667023B2730
0D4F19E984CEC0ED02DD2488D7D942FAA57379A00EE641AEA94DC8119EEDEACECB198E24CFAA
DD5731206F63497351C8685D70CB2E8F9B767C7DA0818E015C0096EEBA49FC55CBEFB60B481C
DB3A14746E49DED240BCAF1C7C6AA4968C9F5DBB2278F16D6C3DAD37017BC25FDF201E5F5800
C96E97AC0FB187DCFC1759BFED3FD1547C851D81CED1CC44D453444A4F4B0E2F64E526CE7F32
774CE5D8F8FB00C50452B51782205987D9C4B8005F7478F7E175E0119991441C9AC9A42DD416
72DAFB5C1998F7F031FEC4189229FFB15BC60A12D006D59D19AF8939456CF18220E319D3967D
B26127D14DAD8042ABE32B54F1AB2ABAFE5BFD8F72E2A6750B516E3B8498B0C4A494C0D1E265
467088FC7502FF4CD521FE40F884C1F72EB2054329F5820459D023C94DFFAB04DB5B90A9F16E
194A7A274957768F4B151CC13D7C59B734E3DB5A59A42BB4E3786FE7DC965523DBBF18CF616C
8D10437B93333282C9A702A2948C17193025C398593AA6942A3D6E71DAEBC1CE10A0FBAA6A0F
6D4F8CA5326699B448EB747D39648941589D44D323D65D9BFA34A7B8F7235C010AB6B878ABAE
D9231EAEEFB19A5345F6A52F4FFC475D09AE4F24D8D3E9158464FE20C2788DC18E8559F36AA6
8FA3FD92F46CEB008A95843600E080949BCCAA96DD3C4A53D0FE4DADEFB2FF906DDC108E6524
93A8685D6BE5ADF7FEA3246993DC57AAB9B576EB5CB8367E097828015687CA2D66F790E678F8
B57AD6D3596FEADE392B4A0A8E904F8AE822F143D6C3D2907F1DDC8F5F5E61C588DF28C4850C
5FCE8C4431CE9CA56F8ECC0712D8A7DDA36B484853E05D99C441DCAA9BB9D3D25DEF3F2EF19E
49DBF515505B701C893DD1F42C8E59525E64C8976B2DE8F8FD07F041FD1F57691EA15589BE20
CEB3EA5D0389470CFB963E115C93E2DD0304B5D847DB7D2AE5E0D1EC453DA44B8449D5A5325C
E08926498AC2D11120F42EB117B2279642403A87BFE312C4BD6EBFA86CF74FB4F31A475854B9
CE2E08A23F97FA6CD574870AB771D804E4A6FEA77B280CD92513CBAD6B05005118DDB1B8C36E
83EB4E681DEC0A2E2FE3A11720A820B032F264E48056BA61999ACB83D3E8984726937BDEAF10
CEA7DEB61201105FCAA84A149098731382B21BE1A95526860F70C721A5B355671915D69370D1
5CB1AEE1B5BAF19D0EF62018F6C04257E6B2C4C1A9FD4D5E7054B475B209C3584F196A1EEEB3
87C37CBDEEACBE2D1E80BBCC7124B86AED17BDAE18C6DFF7F7CC6A91AD7793F9E4CEF592C57D
0CEA1B7A43EE0054B3F7F295F6FEDD32B6DB2D9E7B4B9A49BBE7CC8E3C1DDD2C716BDACB07A5
86B71A4A4AB369AD5A19E98DF6E1B798C2EC2C516DA76BBA20367AD75914CE12B1C7AECFD804
3689E5356BD4C3F50F06C2FD180414837C7BD2575EFEA4CC955081EEC436C91F298FE78EEB42
E52079C43C0687890604BFF5D06635D5028AAE5091C35138F7BEC5DECD70CD2B59DF3F3DBCE0
C200CE3D40B80DC6246208A31C02F60465B595097EBB1E53E59425F9FAA9AFD00C95689333D2
7328B795E57191D254F38B714F1CAADFF8B239E8018A8826AF03C5EDFC16EA8101CE439C8D90
4CF0FA14CF7D5CEE3E57E6DA63ED52121E21ACFEF1EFEC861B1B6303B71DB630081856D7CAB8
24448FBAFD677305205FB1255537C66176303461C986DCEDE252B5F6A56E8A5589CAC03E85A8
DFA5B35C048301B85A732E21D0C7C4B212421ECAF7D252A5072BFC65B42ED71A3420B6D9F5E6
DC4DF85FAA4F5339714F7087595BAFF8346BB1843EC8523B073028E2CF8AA56502DE7C898973
71B945F0AEEFFD62D0EC9BEBD8B9334924EE13C38D23B75148475AD497852ED141B506853C04
3E221B8AB56F2FE0EBBD28554AD2B489421D1B977990FE47330DF198EC894E3C5CF213C7A8AA
D7039FD2F01C26DB63CD0B2299BFDB05B0CE8588604E11A718775F130E9591ABB1954B1B451E
ABB37A56BB1E213DAEFC35F699E41E998F8BBA2147B15914D5CB0621E70FF87906361F8D97E3
ABC32DF379459DCB777C59E36BD6F634FFEE165411867369E5FE5420A86670904C191F1B7248
3FEEDA79D33331FC7710350DD20E9549C0EFCF1D85E1D71A553274F582AE6B724E5E4381C347
0109189D4CF08F2B9719E9BA016C0556146E5624CC70161AC90BF7D0360718FFF93863EE42B1
54947D6AA63A9D205EE925B30F48A8BDC389DC392FE66349B8DCEE2E4E17916CD4662EA076F8
FC7CEC96B602CE92F54893B8FD90710183F1D61CD11389D50754B0CD200B0CDD619E6807CC90
2408BEBC63795A5848B6FE436C949F5AC0CBF614396B89A5396161BD5BE367F8EE647400DF68
EA5A4655E03FC9C5541E10FCA31C3DF0E32FEBA99A36FBC1317D781AAD97E57CD9B0FEDC471E
D62D602412463D309320E7BC150AE97924BD8E258838D74362DF3EA0F6209ACA57720577246E
575696CC74A18F653BE1ABDB940CFC63A30AB40355ECCC219E8542FC324B012EB8DCF2167BC7
463038BA839EB3E473FFE36D91A84D00BC8BE76F04A8BB0A14E3110CD873B66BAB9E6B0C1BEA
1199A86E6D481CA1C363D4AF9A97E8A4626F5859B72E411F2F3E1124D3D0A823D52140239692
979D0AC75EA91BE6B063187FE75385C3EE5097543FE19287D2A1DB002A4DA51552CD2BA0EBE0
DE3B9E19E02842F366256074B4D1A29395F53BB26B19C3F026D8D90B4FE861CBC00789EC9DA5
6A6DE665BB408ED13C514A4D826B44732163DED1F6FF667552F804FB1E40313F7E42CBFBF788
F7B36D61A50FBA8F693D8A5B8CCA497BAA922CA5E29641FCF276C86E1C663777182A7AE7D0EB
AFAA5EE3A129FAA057CEE40063B3983EE3BC87BC6FEA42975ECCCFCBE031F95E8CFB0FF02E72
A98BCAD0DEE16671AAAC4462D6D2CCA9C439634CE81893BDD4DC8AD145F6180B7206578ED5CD
ED2E660242667062C2E45E92385562B0B15ABA872B166E8DB8BFDCAA7454309754BBD9DD4DB6
97EB33000C5EB23614754CF7272DF4D864D79D4F452AF252AC295F3AB4617E68BCFFD94A685F
32F3256DF146F2EF16932863399F3380D30BEBB3D9DA2B9B993510A0C2A17D29D78DE8A02E4A
93066CC5A6232A8A4733DC05E6F89D1471B4EFAADB0ACB035F5BEBB90A9A6A98959896AD6266
82BCA5423339E246BEF8E7FCCFCC57AB8F9752C34D33E9F3D6D3A86E95576C5F1EADAA5D7579
0080DE24FE890621D0771834C6288C7C71567ECE1FB89AA70FC3545E7DEB8CADF4FE57C4BA62
F6E724D492873657424D12C910D09A3ED9AC344AACD232FE2DA7A79F6FBB6861F4AB94772D9F
D4D945DBCD70EFF8E50B19506CB75780994DBB082B165D97F7F280DBFC3BE56259D82A495F78
E515867A39BFD44662151C279B7BE9F36E6263A7461BE0078F81D27AE4001D7675D8DC2581DF
B319FF772EAAB2BAA831D525A2E7C8A3B907AE61FA5D77B1D8A0CAC8F0D7455357C879B609B1
DF50CF81BBAC75D3ED523A297660881BCC924DDF827E62A372489714303748592FC12E0CD88A
81FE23A8FEE97FC50DF784F117B0E39BA7493C67F145BC606882FF183CA65BAF1AFD4CE4EDD9
F6DAB92C6C892F4D6FFC675FEE470DDB83DA0754C5E1369390983D8E88904A95E02454DB5C3F
CD08D15E8252C048D34CACED05A1BA12C00502F69A4B4F06A57FF8ABD06C574AF56AF8167D1A
D94288D641A9DFC473446BF7B0F38E9236C83871CCC17E3FCD2CA34D9EB2F46998A768DEE5AB
9B806B230050BB70DC57DE3E958DD0F256E21D54F3EBB0504778E31CF0FCF4CEFB3164B9A575
7EB8EC5995EB07FD46380BFC66A3F172F7D0D2DF36AFBCC024A6D67BCDA7FD72FC6AC6953F40
358EA5EA285766EC613253E47AA163E04E8EDD5B6618242049C5224ED0CEB84014C9B89FDE31
5F852511C5EBD33B7F01394072AAF515DEC74E28747B509145175555414DB9CA11F6A66A9CDD
C45B04BC4A43F57CBA3394FB62FB96DFE6B811A415BE3EA5AD7B30C1409E9BB5FAB41D367D66
7ED10B11746A111AAB1CE2E6E938E6434DA7F962403496D390B8201340FF5BEFF94E1FA3F932
881B82F1268E11CD5B5CE6E98E309042BDCC54B994CF78372F0E3320EE745F885DEE220B5358
E4861AD42A67BB4BBE78A65515E8909B2CAA011CC01B6071C0A1AD0FF9520788CC836F9119E7
5000314383CDCAAF2F62729B37891CF44771A9C2A64D797129F971EA87E815CC4AFD1BD433B5
4A706EE696884AD7573F4A5AEDCC66840697C459D30DC1E979DEF88DE4290BDD507E2DD282F8
4FBC0877E6206D70E652A3C45D5A65D195B206D2922394CFC1CDB8221F63EF9E2515CD0B6578
2E34637E31F19AA89F235200B437C815E3D2A9F719B5624A15D67AE87D662DEFDB8CF3FD0314
26372335FDDF18FA9D62B446C46B2076D8276588651E08D886F2C0ADB1F5AABE481DCCBEE18B
C56FDBB92563E67F93A4721C2515AE140050787ECB4AE3D8BFEA40DA6B160484E3D23801D211
3E29A22662AA3650C58FF55DD480283A93A77C2EED89733F9F210668209E3014F33EDBE43822
D28E9EEDAE84DE4D382F582F980D2EC9014D3EB69BC9E03BC58E694E2DA67960D699F6C1FCA7
333ABA6A305BAD54A610C68534DEE6AB31BEFAE497840AD236B2DA5ADE640F79940AF98ADA85
913071EB097A2231D545C30DED8290047F8EBAEB6E0B8CC47787505ACA6ABA1515EB674C8D11
976158586F9E9AA2F7AD9F50919889406347DDB06961151DE231A3E0FD703952521A5E1DE9C7
33775DBD19CB772D36C1D3BCF222D8A9C278AB7DB4BD13BC36CC2D9AA2C88DAC4752CF879F87
3BFF4B5E0272DAEE2DA0B3849753020CABF3AE732A389F5F1E7AB6511CFBE515834938EB3649
4592D2BEC58169CCBC6BFA8FB7BDFE8DFDD8ACF14267F24C9C72571C628EF2E60C1395488252
F2945FB88AD8FBD3075683AECF40136AD2FB5EFA9561AAB86E2A352872C02DB2A70A5451E378
D3B243093E21999D37FE1FBC881FA2ADEFC8BF98472DB06C71731A78E67B7AA874D85F1C5B65
EC6EF5AF8947240741AC14B4F7F4A166A385AF0207DA87203C898C8F63F9BCBAC8CA335FC956
FF530FD4D2EC87D46A099C554DA08F8ADFDE352F12B8154A59F8823653796822E2ABAC6B3FBD
DCEFAE2E84265C21526A3EE066A67068AF675513C3DB717738A28C2BCD608E111EE07E89A932
92AB85B6AEC8418B653542CE64DA2336AFA8B3A0A4979B2287DEFEBBCC52C17C709A643B8C87
182E49D90D2E4265F02737E473DA03E600C7DD90C3F2B0B9FA7E334534C42080A740D1F6DB83
83753EC0A03DD1EB7ACAD779ACCC0EFD2FBA6D03F70DBB208B2C38D67D002A85B33856791C8C
46D42D886F626151F012B7BCFA593D935DADE59958199FD7237FBFE5BF82A51952F43F3836BD
C6B66D58FDA265837F94028E1024A2F9804C284568D00B4DA80F50C3611D111B57576ABAA54C
0F91CD05265CC4B0EC84F49CE7413803A7255F17AEB87EF85B7C9A34E756A779EC4229D8D9EF
5BF15760F2A9F954982843759AC554BACB8776F9BE0823AD9554B1798BC3D9D9B36FDA068EC6
7D5B5CB950E0E7B777CB711CFC11E6C2EDC6E2B6060360C023EF3B0FFAD5A40948B8459A9A4E
AE8A75BFF733E370999919766A88CAA1A27316E846E7EBCB71735C99BCAE66AA056E18F59852
542DC8EDF5742633EC7554783FAC1A8C64197D65187D0DC55CA95D051DF0A8EF293AE2F9FE44
9AEBF55E2194C3B4B058EB6C71CD4B7F4FB795806DCE597F721E847263E675DDB86505932EB3
CDC4E7976284627C9D74171DB94D5FA907F555E6D9F65CA12A5DA4F5381514DD9EE2C68183C1
74CB97809359E7C48BA17F5A5B2F9429C01296DB7861977C7B9B311E4D7C73669CCEB270F0EC
492E2E790EF4BC96FBB052864C72F1D2F990BB4DF7B802BC160FCA174C5A485B328F4B44F1F4
3C83F9329C23C14EB3BE842BA49BCF715C04B66F365CCF97F2AF508EC6C61BD87C70F902C1CF
646206D462C6B251093C662B89BCB77917AD865E7EDC4E86B7C735FDC64C3A00254C5178DB84
91F3D07D77EAB33FBBE793F8597BB549E44A7483FE0D7DB8B842C66E6F3DB99C886119EBD403
1EBCA107541D4532E01998BE7BEE0C2D2063F4FCE02FF4A4EC1B8433C2D823EDE99DEABF7DEC
F590EB8C35F6F485EFD380061191A0D7AD91E5186046FF7935AAB05DCD937D2C702152494BC4
C832D3A987D81061F7A17B344AA48C29E4CA6BF366E21A69E4422654400E56CC012543D12829
D03140265F4C9FDE078B8A444BFDE0D3197656569AD8B57ECDB7D2667B204A1BA3111F500CD0
F70860CDF5363F63B1626B67F5DF72C43B4C3DC7D42507600C8C09657E2B521628ABE4622636
8D784513217AEAF52B74F214282062574D5EE1B65253C0B6945B3719A776320874E81021C9EB
61D405441360B20A8DF84236912BC3C870320F1C896E31205518BBD50E6F36B77856590A7E93
23ACA65A0C1F6AB3970C306DCCA42EAB9D01E7899F738568379E2331277B3F9A7F36D14435C9
E50133B28522995788C1E9FB2FA2C4EEFD0DB10E2D77D8FAA6798911DDC6C99C06EE346BEB67
7028FC72DA4A16245ADB46A396E9AA90652800C0ED97886D58F4F1CD8AAF7442FCAE1221ED12
0DCC312E10C914A3344F6C240A3C5355637D66B683B5CC8951CA11A3EF53FD1BB7AF3B13F7BE
E55515D9DD2E1408CFB2DEDA74ED49A48853E066B17CAA34A84D4EAB5630D86298D979F50E1B
648C45BF834FFBE926C2042F9ED5F751EF7477B065B38093CD3C542C9EB4D5E757200A16E219
5D37771FB944113422651B6E1FB24373BAA1478324E250D085E1D0E555564D5B6A1CAA209D48
33671CEB4EBD896BD07E8A697B7D1E1209AC76FFB0D41BF12FB107FA19E95D90B39475368A8A
5AE436F41CDCFCE07D4071C698A22CEB1D9E57B0C0D1022615EE9AE6CC1FD3DDC3656E1D5BE2
2A4A7B6152D53642A5675D187319E8D7AF9548E5B9599F7641F9B4ACAEC158E992CB88D9BB22
072C2F3A3CA95B9A96228F6BCB5FFCD647978ACC0E67ECDBC58D079C7550866AEBA0260C5F8A
AB45902B4726BCF58493A23010288114CA35C0F52A89B1B4743CB649A86502A838953DEC2982
683D9DE00A51C9575CEC2B92691C23A2D12E973A20CFFB787CC759D1394A475C5FE5DA04E624
2820888E6AFD8B4D1C9F4B105C8DCFC88B032182E7CFD6629707B19A55CD5B7F9AA0991EA99D
E9F2984CEAFA45A0D45EBB192E384AF80987C002CA8EA3E2719A5D5201584889A3C6CDC897E4
C1D6D5F482329FAC3DCA58037BB27AEA8A3750907FE3821FAB79CE83D33DF3D4C07B690ADCCD
7364F0C12323494EA74B931FE6CD814D84881F8ED78ADF11F1085EE3F6CB379D8D865F1CDA31
0308A3274FE10EFB3EFFD711D6002F9D546BCB35A186B0A149C32D239DCF7608489E512131EE
833B7E8BB0E96DCE41C67456698BD0DB6335DCE9B83E74E2B4AABDCC14DA977A3602A4B2061A
DCE4FA1613459E82774E48B318980962944351389D41D74BEE89CE3856B5FA5DE0D6E870F4F8
ADD50CC9E128AFFAAC1096A42700CE530061A9C473862F35B2ECCA9E2B680707075B415FEA99
3AFD56FF3E68A944C55E193BAF876FE5DDB98DD81C64BBFE578F9EB540F5F6E7E8B1376C4694
FFC3C08442C59C3AEFAF8E464EB94E1A45E689D7F71BDE01D4B371A25C98E64BC72BA2028434
A2A9417B255183751C143FB909F194D2F5B2C20B81662F026A22FE737F2C32C3515C037BC084
B6EFADF2FF68943302A4EF610F511BEE0CFDA3F962940A7263C175611A6688A005797A3C5446
F9B41E3F021EF1967CE5E3F1BE0BA746C4CEFEA68753791BCABAE5177664525038917BAC6A98
CA417ACBDF4B5AB8C98802C0176238794A694A2940CA374C493A7F33B20F53D1C5F397B2DBB3
60CA0C5F32EE4B6851392F40AD1AD6EC0AFC2451A62FC6DBFDCB8C2AA60F2BDE83164DF3D052
71AADDB35B2CD53FB4E255B90188C57B51CA4D77C2F5307FF8D2FC8AD359ED8D8C4F74A338F7
FE9919FC8F106C7C4E92D42075B458E29EF6944E2A4C9F8C6225CB32758F8E465AB2C903798C
24D3C869585D3CB7A23D2B133FD832752F864B60205FEBDA77131D1395DC6C4FC65720BC654F
9BC0FA978D5D93886F489A7C1323E569CF42A5B9D52FCA94186E3650F71CBC66DB02DCFB86C9
84DB629470D90A5AABD6CA8F1228EB650C0CFB81912D145EDB3479CAC0624867AC8857A6264C
1B93AAA554D85A35F7EB0210AA7C167202DB3929E22E36455869510EF9CF4DF1D09D2B539E6B
04C700490C79F28FF2A2586481ACEADD14A5889EAF6BF235070FE9AD2FAC9012A6091C25FFED
579D6AFF38318C92AF4D275373A00081C309BA26258F2A3F83C7617558D9693D1D029F6FC843
683046F3A7F5B1ADEA1EE32AB7D2F22817AE06089E583EBD7DED487D45B71EA6B17D7E401F7F
CEE17FC13DA623691D2B4A1830DFB1803CED74A0993FCDF596B0699644F7A18229AC3CE82031
3E92C71C2EA836BA426A1C73417EFB118B976C0F477C164AEC368716E2E37AC213C7DC99097B
A2FDA04C76DB4C871B07C41824B3B337449A2D7D35883A3964B888C720BFE87000710FBF6BE6
09C89CEC3569685E6C55C7DC455D1F044902F305F2FE0F92F993086010DC1D3BA1CE5F0AC416
FE71468D18745A189D2FA50D4327FC97018E0FD91848D21B1615309B54DA59199818A9556E97
944784AC4DAEF5483A8FEBF6430AF3A48CF40DB1406DA989D5E297DF6E96A6F106F9EA7F5D1F
42F776B80E4044615A12B4B8900BBC80D4DE37A373045356E5AC6BA1AAA1EAE1D34BABAA2043
AACAEAF9B63AB2094F1D6C72A8EB7BCAFA0639D1BFBF007AE7725E63BAC4F5A6E3FD833F574F
435E3EDC48E805FED1E077B8B581B6656125FB1C2205CF756F97EB5476B77A2417090716189E
8CEC268029A2E3207233392F15D0269A3270666CD4753CD8FD6A74C7FA4EBF5ABBBE85C6EEBD
FE90D2A8F4D31EBE5815EE687E077ECD6D7CD00EA57B4A8505C0E6A301A27591F342493D0A98
F86A97D346D4F524F89EE1ED02775DDED2AFA93C9685C77D2864DB042F6CAFFAF2F449A83035
2F524E30F9A8FFB7898AE3AF142962835B3D070E99A8D86538E9748A8CFCC51673FCC6047326
5D2321DFE3AB3131C3940078918BD43E427D32BA0FE20E36949C12A53E73E6A4A6C4C885766B
32295CE425ECBBA9109916BA2344C388A2C7F82F91477838C8BFC82BD677A3B84EE0E9D3D336
61D9B4388FB7EE6FB0317DBCFEF4D13770B683B6946A81B255190AC4704996880E92D6C015E2
5B0E74553A7C6B542AD709C4CFF3A7CD17517DF938095BC00626D452093114997F2709DA184B
3692D7BDBA7CAB8F26EB9B14AF957B068E94C2C5C3733D7B80089E04824094A20BC715D40367
1F4D8939B3128D05550084551661E019431508516D892ACBF7F0354E8677107CA9214E429FBA
5ABEC4FDCF73E3B1003D043617C8FD26704652E75DAA971E24CBCE7EF65015BE3522A4D30C9E
8AB8A7C8DEE91212DC92BF2CA9264C1F847C7E6D914D19096F032740FCF2082D432924650169
C3D37AC682A18A751DC8145026CA9DA8C7701666A8B0E653F00357F30FBA189FC19CE74F87C8
DCBE37990E6A6844E8CB1374BF2EFDBA3A1FE8D251825C7BC2C44B45E5CB1A154448AE5F66B7
900DDEB3914897754128AA474A3C9B9BDE43FC4F3DC7196F471E734FC0912380DFDA9E09104C
7C575CA24099FC0D8950F75ABE97EB80F10B6EE80245B45E54FD54187C96BA00CBC2F05C77BD
8D3E61C1A60381AEE6757E83256793A9EDF9CE22ED8B35C96DF6B6461D3CC4C1381CDD8256B0
ED1E7FD346483CC7078CA76393FF5DB218C8127BD7281A03E87407C65D46D97ABC93135F5664
2BD99C11FA05127EDC6025DCCAEEFBBD8210318B18F4B6646430849ACB10F6F442F9EB9448AD
66EF9C959D3A917C4B25269C66007076D5B4E9013FFC355D3D78329E4700590A5F4AFA85B6B4
928ED4412CF0B9CF6C7C7B3061D5F95271B731C25001C173004C738F6AD6DBD8B4319A2DA207
A8C346906A675FA53636A2BB48D8F137D86654EA08F6790E9A45EA435EEFCDA0E434CF1FA7F0
3E0669D46A9B29188D57DC02868D7ABF014D1E3C24613323305E62C85C46D89BCEC1FC5C93AB
7AD485C46AFBF9171BDF531A219BFC0F51EF38864805BF9B258F2D002F93607B3C8CF297AEB7
05A048C7A1A89CC780ACEE5756C119CD1E85049245D9533BC0B802BFE20369A21438E8723BC2
D630B0F4CD44E34CC160EEDA7286AF17516BFB5B2CE47A5B2C648D7543FC9D8AFEF72ECF0CC1
9F8C5C53BE73A5C1E07C1F5E392B39469B212FF02ED9A505A0CB9EFA8DCCC9DD5AC6742F0BAC
F7DF4F719ABAE0CAA568494BD269B0F4AEDF86F9276BE9C13CB3B884DFDF0C7DC6FA19ACB468
8E4F819E26544377F052E72B71479513AB7DCE2B8E9FC3902D49F7DFFBC471237C57E06D2205
6FD09D9307191E2F2AEE34FBCB8E7D1365A1074355F0F8E8BE57100F5A9A712AA8745D296118
77EAB4C049BB34FC5AA0712409F3FE052F4859A1B809A4B325AC0BFD669C0731F8BC48355AD0
B4747762B4933DF59B71237393ABB6D8A54C4C724CF966F0140FBB2E208C13CA909AEB4A13A9
93081B8CA58A9A48F679B86F1AE6539639BD9E71FC4D8FC7B51B5ACEA07DB2B47B7594CA795A
FC18D5295E1F3FD74EB1D572656F0231EEC3E59D2BC6977826A378B9B5DE482E3F1EECDF1E5D
84AD00F05A4DA3BD3708ACF218654FE04831171097CB9514C6CACAF04D1C460272688962541A
5A30A244DEFA1C33112BED9D46D4CED8A1AA8A132A99537EE95CD24DA03572230B0DDB4D74C2
E15B1F47D8EAF889CCEF971DDAF8FCF94DD8F7E49DD9D769C03CA305F9B8E0E7CE1AA057F40A
8A8DEEE1FA62F4B6002674F39790CC4817E69587C3DF93C08D3E1BDD2789E6AA3B9EBD51FE18
31C20AD29D47186C1D6459F681D9DA97F6B413914ABF7BFF36ED5CD5D5D8FB1ABBE422C23DED
EA7E0998F3464AD0C418F8DE42E012B2B4BFF55BAA443335D58C127B626FED1214D2D988AC21
0A6BE95913889A99742EB9C6AB9B28D6B361DB263BEE5E2C240E4F9EA20D9D18DE516E7AB64C
812C3F05EAC8BAEC75A44AA829AF8746DBAA8983DEEB4AEE9D11663E90DD8DCB6EE5DA790A55
ED27DCA6B9D1B759CC084998AEF4F740096FAE46D21F8090D0EFF5D17ECAD07EB382388AC174
D140ACD94DDDF5BAC69B0C37ABA82D840418DD9A2947D4836EEC1C12AE2A47716D018AF88F4A
426B4A5F1804ADC160528C9E830F5468389D73FCC29012162C24F0370073FD2415A62A6C51CA
D6A6F439285AB190A66528A27BEAEF8724D256FE7A92D983174D8A45A9925F3B439AE8AF6C39
7CA52CF8699D0C95E867997B330AEFF4BB1A023BEE6AA3C32E5063F0ABF9A7693BDDDFCB66C6
7EC3D064F672161B8D324DFD507F5437FE84A0308A58195B4EB4D91DC9D48C11BD4001F3169D
BBBAE233151369A81F2598ECF13280516330D8D336CA86E4D9F124F743C7A2863592B2F4408A
A3C178E465A9C95FB5F83E4979DE63C638681D33195AC791150C1CBE665107655653441D4311
FDAF3D9235E3955434531B85CE83D58B72CBD2D07A9807D2BECACAC208728DFD039B38AF2760
9B339AAD2C6533722F8EC35D9670A9C0EA93964A14F276F304D0C6124F94BD0E4AAB1726D034
81B50336391A567D0491514580C0AA86F9207295AE0F670AF26267C708CE554F235525ACF6C3
5AE3236305340E7074B138B223DCAA191AF31BFC506FD189C18233A31612C3E3069D9ACC7235
60104FE2C2703454AD989DC74F3B9A16D329F69C2C2CDC90E668AC68B3171B9535F06B9BD8F3
230673E4B00166652AC8EAB91602B04F1CC6D42BB2FEB69B4C53025886E767A45D0DD659893E
3FE48C46AB822C05000ED150B1C5092ED8905DE9E4253A5E689EE206C92DB84ED8593A48172A
BDE598728ED0160474731D3A1282A0C3AD58FEF57BACEEB2807F09AB5668A3A7942D715AA7B5
BA1B53A793116769F555C4CF5FA0A88AD8637C49E9A7E304AE4B991DBA10E0F0897D6304B14A
9BC880184F2467381FA57847EB96EAE0E65FA455E6FBCD3CA359009C7E8497061FC10555F814
54346A30A956782EEDCFDD1CC88F2442281234B76084EC3666E3DDC215157A95533780841A0A
F0D880FC3FD5AB0E13F85E1A88D55A61757F5C9F5F8AE5B1C67B532A2CAEE939703407D2AEF8
D0A8C131C538089C4F470DF596533702DEC500D4BC64933B15C006CB68C0235E49BEBF7D75D7
FFFF6E467E24EEA086CD6AD34AF5289072933ED565D15ABB4E7C23877B875E1797D1CC7334FC
E5DADF069B55F5BBF26DD3DFB845E3764A431322DB42E08F5A8E1A43FE270658E615FC9E5336
3D0C2E178FE3E982F56F301AC83DF7E0BB16B1B4EA9AFB7F4BEC59D84974CB19D6E6C26D6069
651E4B17F6292AE66E5551DCDE4631297F81E3AB9A311C7327A6901BD556B8EC6EB282D39BD5
FED9C922A88BD52A4A3AB8BBA64656CD65C694B1B5EFAEEB8AD5C3895AA59FF26223B3265097
C49EF63D7C77FE55A96C4A4CE511A969FF80791396710BC0AAF55948A6E917336397FC5B83A1
69FA84783C0F7B5BB7CA050A32A54D8FEE274D20B5AC5EE7879ED4C974380E3DADB6FA505974
E6631ACEDDD4D020DF902C4FFD8152A60C37E81F285D4049DB78A032886291870E17E29D4E76
034436B6D5C79F0EE9D292B839A2FC0051129EDEE78EBFB35654B4C80D7DF9A2CC674DF333C5
34E284C37DE21D387C9F3FECFE4F435178DB778C412C9E010531A91075BA8566C7B2B4EAE73C
3317013C71157349892996B025B24CA1AA1C55E4758F6834224BEF066FF7B997F7EADF4FEA91
6BC5F1F761BA3267D9D03843B3019275CA1842D5BAEBF99FCF5237C8F69771F7BAE960B46ABA
7C156269DAF7580970DC950FBFA799DDB0BF95509CCA47B2421996F0A5AF654DBA059B2786A3
10200D050D09D81FB09BB460CD4D078E3648A74C654BD4CD79AC6303F89D9AA07C42B0BCE338
CE1A849F9755E4C50EAE7FF00D0C0DA4DC4F7D7752B022B5208A93A5C0AADD8B35F1F2A263F3
58845D80883F716881BED236B1280EED7B72BFC9439DC0A62FC243B704A89400F100EBEE7C96
F4769313126F27C0F914D4263803F09C5142A13F44F8590B3382B922D6CF4FAAFD48613F5F3C
8119066D1177E604FB3591CB2396E68CF400C6B3800210853EC49E8D0A789BD6D29FB1D22A0F
A707EA9BCC604E602C1518FDA79C116A2186938E49D2BF63FD9FC10D66B7463EABCD2AFCF91F
609EFB5AD6693132B33442B0EE0206AE2CCA6C913C7E1ED5CFE40269560B7397EFE0390D0E8A
7CCD386C498929A4A6880396B434BEFBB6F149055ED45087EEAA787FBD73EB17E8A43F0BF705
EDBEA87B56ED960A56F0E08BB09246E58C08367F5DDA25A6689E4F565D54C84362B612432FBC
612993F7F74A829F8FF835B3648EEE823339B67A54FA7602CE4641E948F89E1BB5AB9CB75682
D3D2C823F2608EBDCFD39E8DC1BC28E6AF5D57881A47D7D60F956DCD28A96E52C4A545C4CD87
DAA393AF0673809716A5D1D84F0FCCD4805A040CB8E879026FC66649EF36D6FB7CD7156D0D38
FB1F15DBE16A258915B2865AE1EA75C8BB90FD22EC98111FDF80A13E20A7970E9B2A74EA83B1
CEBF50D7A8ED34AA1153FA7459AFAF2C0B8A7F85433F573E6979AA33693544151B62E4BB64FF
1A4883B8AAD77123BA7B160E71D1A544F71FAAECD439092BB70926C506DFD6C0100B5FD8B75B
47A93C7A068D45098E254157EA8515314F6473F4AEC2FDD165A91D614C5A2679631C53FFD428
5B89149326DA683E5E693C5B2B3DCF300A891BF779A4FB293009DBC236A91A1E17BD530973F1
D6E2A3CE9CB27DC3A906FC32243750E2DDE538941E545E9165338DBC0BFD892B4A727803B704
411E755C1ED22A65990C931230A010956276F345A0694420771C34CB97FD07C6E3ED51C9E808
ED87D74BCE8439077B5E08AA5AFBE733C402543C760AB4E5501DEE7F723CFFA43B8764684312
8E169ADCA16526DAF66228290F2C5BCCCB4C9CCA1BBFA4E00696D7CCE5AAA91A80A7212FAC7C
EBEDE91DEBD44EC9781102BAAC812EB646E78F654F2C7901B6414ED830372882CAEFDC267879
AD9E08C63F5DA4194A7A8D8521228D11F4BD0A48AACA3280FD9E24CECE77FF8450FA712D8514
4DBC636028BA8F73A592633B6BF5D5D29692CC37CDFB882FDDF4CA1071F87C6EC4C7BB3E7324
70A2A64A4F7CE9F5CF95A6D87BC6C3B4EA37EEB6A03BC832D958DCA227380934538221F1B089
7477C893D7148DE91DF96AC3656E0969266B3BCA01C310785A8AED34412AEFD755CA9D2C100B
141B6ACFA53A40576393C364EF62AAE88E9A95A5EB731AD2C79E7EA145D7A799DB87D4458471
D24A6F9978859D6B97254110EFA503E685E3B617C0141CCC29B3264F8EDDD5B0AACEA009DE0D
943B47455E5DB8732483B28C98655FD16B9EE33181687C9E896E5995FDCC3CC2D5D5CD9D2FCD
84657C635A512188EA14137DEC72C955FA40742168B38652D8F41ADB9E40C2257B0762C432C4
13A18DF9046C871DE6D0A6D072A50F609E779D4AC5FE253EDF5C271E35F68F3BF9B86DCC92BB
B93600D21331F68984B31060CE1B719255E56D887661A02C133522393D71D2F3B75B950C759B
75120DF27DB30AC889514C445D044E80CA8732BC55A3CC4A176B6B49882BA164F63A9ADD3E10
E868DD17CEDD681CB43E2D525492A6AAD9EFB32A9B63A9452DF1CFBB9E28F30C2845A6E79FF2
93F54C7A5FEDDC823AA5828C62210E9E3D629C84DF4514233A74F5C8F86EBAC2CE74C00B4433
BF3FA9D45648967E06C8C2F1CB46A04C7C0F7876EB13B644B701212F0AB6FFDBEF2B6A075018
AD8C95A208265E76DF250945DF43AF2D8023BEB65B7F95EB7F2592256A5B00ABD8CED8F05790
912B10FAE4586003493D3AE7EA4F2B428C5A697273AF966D94242C59B8A055D672438AB4B9A1
D4BF75C462DE90CC77988E1448B083EB9ED01CE1B0CEC9B021296A23A089A930C8D7AF61AC6E
13C8D5FA38C2714A0011C16F46B7FD6BEB9D0C53F9F9434C0776000976BCEB5B1F2490B9CA7E
67BDB0596F19B963772A4EC041B961D643CDF851A6227F7C010D747018D51C26ABDD5F762DE8
38FB9913D776015FFE3231BD7587EB8FE09CC0EBC867665C41B0B54DC2E0B13EB54FB2C825CA
AECE7F142FFE5328596254276B21CC58F210931C1741A60CDCADE3F8D59E438CA63FB27A0D3F
27581876093B8B4D42505E2E5B6A106AEA7F5C8B7F1D55EDBE621F1102D864F5E01343E88BF8
91E844EB99161D905709A5C21E1168E80224C40CC27A82B4671FBB6ABF8A9B119617268794E1
BA2E1296381E331561198C2902C9C90074D1BBE9A6DF64D1A854BE8ACE75CEAC77D8C88A5A2A
BA4C87A12063466A28C9AD20D41C29A17625B23E77D6FC8B879780F8369359AA523C922CA1C4
6FA00E8A8A5CCFF0A674DD833CD562B8D4009DACC966FD13ADDCA02DB8552D3E8F56FDF3BCB8
29A5A194BFCC5B88B426CB54797E07A41002E67663C357FFC22D7CCB464F69FB899EB92C4923
037C365167DD817EFCEF17D4E2FDD023DB97291FF620A76AAF779EF6C995747E5C270B33957B
E50FC81343E41A9DE0B2B0DBE0C101B767CF11CE11CD79B3404069683F7115ACF9C19859FDB8
9AC8E280EDCE1CD0BB32AB28BC03478E8BD945A1578D5F957ADF1785F5616C67A3FE87443E13
FA40178FB97D4E6BA9FED4909FEA54B421149A0634FF5AFC1ECB5A1A30CFABDBA5584748AAEA
FA1009B86EBE86A76C0CE9A2853A8B74D47844A624560B20908E0C8B22AB8312929439DD32FC
B30E15C4E160327181EB849858195BDFBC8CFE34B240E875A113E6AC2EF5DF8D584DBD8734CE
BCB7B91EC7F394E6909B973D99DD3AF009774D94F6E09C74197DFEA9F2A33477DFBC4FE41410
935C28E543D686C3660088B578618A6BC0398427FB5A1CF463108178160E1C56E72495DB542A
7B7C8B1AC88996BF3A1FEAC0CF92F74CF883C87429DF939B8AA578EC815C229DB15A33120000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark



%%EndProcSet
%%BeginProcSet: cmsy9.pfb
%!PS-AdobeFont-1.1: CMSY9 1.0
%%CreationDate: 1991 Aug 15 07:22:27

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY9 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 161 /minus put
dup 162 /periodcentered put
dup 163 /multiply put
dup 164 /asteriskmath put
dup 165 /divide put
dup 166 /diamondmath put
dup 167 /plusminus put
dup 168 /minusplus put
dup 169 /circleplus put
dup 170 /circleminus put
dup 173 /circlemultiply put
dup 174 /circledivide put
dup 175 /circledot put
dup 176 /circlecopyrt put
dup 177 /openbullet put
dup 178 /bullet put
dup 179 /equivasymptotic put
dup 180 /equivalence put
dup 181 /reflexsubset put
dup 182 /reflexsuperset put
dup 183 /lessequal put
dup 184 /greaterequal put
dup 185 /precedesequal put
dup 186 /followsequal put
dup 187 /similar put
dup 188 /approxequal put
dup 189 /propersubset put
dup 190 /propersuperset put
dup 191 /lessmuch put
dup 192 /greatermuch put
dup 193 /precedes put
dup 194 /follows put
dup 195 /arrowleft put
dup 196 /spade put
dup 0 /minus put
dup 1 /periodcentered put
dup 2 /multiply put
dup 3 /asteriskmath put
dup 4 /divide put
dup 5 /diamondmath put
dup 6 /plusminus put
dup 7 /minusplus put
dup 8 /circleplus put
dup 9 /circleminus put
dup 10 /circlemultiply put
dup 11 /circledivide put
dup 12 /circledot put
dup 13 /circlecopyrt put
dup 14 /openbullet put
dup 15 /bullet put
dup 16 /equivasymptotic put
dup 17 /equivalence put
dup 18 /reflexsubset put
dup 19 /reflexsuperset put
dup 20 /lessequal put
dup 21 /greaterequal put
dup 22 /precedesequal put
dup 23 /followsequal put
dup 24 /similar put
dup 25 /approxequal put
dup 26 /propersubset put
dup 27 /propersuperset put
dup 28 /lessmuch put
dup 29 /greatermuch put
dup 30 /precedes put
dup 31 /follows put
dup 32 /arrowleft put
dup 33 /arrowright put
dup 34 /arrowup put
dup 35 /arrowdown put
dup 36 /arrowboth put
dup 37 /arrownortheast put
dup 38 /arrowsoutheast put
dup 39 /similarequal put
dup 40 /arrowdblleft put
dup 41 /arrowdblright put
dup 42 /arrowdblup put
dup 43 /arrowdbldown put
dup 44 /arrowdblboth put
dup 45 /arrownorthwest put
dup 46 /arrowsouthwest put
dup 47 /proportional put
dup 48 /prime put
dup 49 /infinity put
dup 50 /element put
dup 51 /owner put
dup 52 /triangle put
dup 53 /triangleinv put
dup 54 /negationslash put
dup 55 /mapsto put
dup 56 /universal put
dup 57 /existential put
dup 58 /logicalnot put
dup 59 /emptyset put
dup 60 /Rfractur put
dup 61 /Ifractur put
dup 62 /latticetop put
dup 63 /perpendicular put
dup 64 /aleph put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /union put
dup 92 /intersection put
dup 93 /unionmulti put
dup 94 /logicaland put
dup 95 /logicalor put
dup 96 /turnstileleft put
dup 97 /turnstileright put
dup 98 /floorleft put
dup 99 /floorright put
dup 100 /ceilingleft put
dup 101 /ceilingright put
dup 102 /braceleft put
dup 103 /braceright put
dup 104 /angbracketleft put
dup 105 /angbracketright put
dup 106 /bar put
dup 107 /bardbl put
dup 108 /arrowbothv put
dup 109 /arrowdblbothv put
dup 110 /backslash put
dup 111 /wreathproduct put
dup 112 /radical put
dup 113 /coproduct put
dup 114 /nabla put
dup 115 /integral put
dup 116 /unionsq put
dup 117 /intersectionsq put
dup 118 /subsetsqequal put
dup 119 /supersetsqequal put
dup 120 /section put
dup 121 /dagger put
dup 122 /daggerdbl put
dup 123 /paragraph put
dup 124 /club put
dup 125 /diamond put
dup 126 /heart put
dup 127 /spade put
dup 128 /arrowleft put
readonly def
/FontBBox{-30 -958 1146 777}readonly def
/UniqueID 5000819 def
currentdict end
currentfile eexec

9B9C1569015F2C1D2BF560F4C0D52257BAC8CED9B09A275AB231194ECF82935205826F4E975D
CECEC72B2CF3A18899CCDE1FD935D09D813B096CC6B83CDF4F23B9A60DB41F9976AC333263C9
08DCEFCDBD4C8402ED00A36E7487634D089FD45AF4A38A56A4412C3B0BAFFAEB717BF0DE9FFB
7A8460BF475A6718B0C73C571145D026957276530530A2FBEFC6C8F67052788E6703BB5EE495
33870BCA1F113AD83750D597B842D8D96C423BA1273DDC63EB43F34FA90EA73A234AF35FD9B2
4EB74F19626E9124DF7ACB92629CC87B2CF81C4A89B27447806DB34393DDF0402958E2DAEE0B
4BF315F9AA0A2650D2E11EE289FFAEC940D0AF160FE7F29411C1C45869D1AC3BCFE2AE4DA724
22549095F1FC9FEC606289316F106E719A4AE2FD45EE868FDDF07A80E9A626BB43CDFDAA9DCD
208B88FD99AF20B27F9D6B5CDA6A3FA88D5ACFCE8B5EEBB38854378CECC3BFDAC526514F1BE9
FB28AE628918BA942A3E05B78C3AFF808CF416A5ED01BE280231B75A7AEE0C66B0549713BEF6
B3CBC188E625BA827C23C9F98E9ADB21719C2782EC86CF2F3A3B9DC4983DFE6FA8FACBFC6688
7FB1FEBC30181988F5CA22DEA95EC6AB2AFA527C7FCD14B7952A2A0BBC8047DD79824D485FC0
696AA1DC16819993EA7CEE925990CF208B1663ECCF6405381FC2D0BB26CE5FAEDF0ABEF0633B
1216B4F3A138742AE422B81B1589EAFD2F0BFEE3444689461F0A6336BB7377830169D5F4277F
3F231C8A779CB242DC73606C74AB947F0A39CC1EA1FFA441515210CD7E40D8541A96E5C22526
194D88CA57A5CEFBE36576F31FC584EBBFA8EAE365B545796EDB64080D4CAF6D77A2435389B5
F41D3658CDB2A77ED6A52E4C678B4FB66F9D9FA73F7EFB5DE11582821504D6E019E85ABD2685
6D0B038528DBC0B361453D4CDDBEBACB41DD6C99EDB10E367D10D0A6A945EF3DE4668B5D5473
B499ADCC4E19A65EB00BC4D901FB58D32F597ED5FAC20FF128BAAB7CEACF55A1EC4B134B727F
51CDF9F4872302A930F1F1F10BA883FACB0B4961728F77A80D02D1F41BC197FFC7075541ABCA
84E46FD5BE0F344D9BB27F9363347DAB71E5F7662551D0402470EE97D77AD369E6255C3567CA
3ABA026DF7114B20A2F1808E053FA31E7F5B59716293FB106FFECA39FCFBB39419B33EE8BFB6
D8C42CF02B13A51EB0BE99B23680DDBA5B0561FDFBA96502D5D66AE0E40247A1996D6B498871
D21DE813CE776490E30870BC563E94214EF315A119224E0507BBC245FE0B59535D6A77F009C5
20D1E3BE8D88C38BD1BCF5066233B48C108DCBE9E9684AE8A799C0B5EEFD6E4F0737F553CBB4
0EC5091C4666218137E22DDC2093D4AA874907C89915E9825063FC68AAAB12946721025E4AAC
2EC295E27E3D35844A4B452B2D9BE5C24BC171744E3BD2333DC1959B39F6A422C1909067755E
148E0225781320B0EF70058D9038D4F5A12DF8E1A563271F2C55CE87A5BE074F9B29F861C651
D6021BF253B2206DDE18AB986521EF272A4702DD3CC285F0EC3476D2ABB40942CC8FF0789180
B6F4027A7F6413651A729B305099225B6F909C020E4506776437796E3D58F041FE75EF5C2110
D9A51C5921F6456095124A293E244A013B70A870A38F52EA8D56E5196E3E55A6B4EF08F84F09
923A77C14B3AFDD86AF386BF3761B371A1FDA2359C0DB444920C01DA74423E0DABE58895E7A2
B65F443540713EC3EDC7A807D56F36D4B7B6F1FE12747C032F0887FE814421C09E368EC8C740
540459873E403A213B0E9CB411A6E8EC67428F1D2EF568F10DBC94BDA1BDBC39F81F58F7FF4B
30786894856C8F8D754B5CCE9540D3C15B730D0218F0E692DF1E92D445428F1B685FA4A5B36F
6173EBBA9E90B932F66DEA4B38E59374054EC2323B9332BCFB84C008B1442AFF6D1BB28991AC
4689BD163B9E79BB1FE0AF42D6289F8C968994CFB4F4655903B88770A00327CFA335745E3640
F6F78A66C3C5011FD2C86136808C61D62EBC76DD420111E45509EE5EB3E1CB4B3F9A7FC4BB0D
2734BE499512D059E191A77EF684B578114A53D06DE66A9B1521716A552982E0190DFCF61502
4BD859A882327E214F26B1B1243E68E8B93F1C143EA913CD70470606C639232D2C6E9234DCD9
2F0D303A45599BC82D824B28228F4FD4F16229AD8B2E27DE30C5608EF7F6C40DA0A7705606D3
A06E0020A7C5D6C5562403CA468E4D66314456290FE657C202544E53B63950D413F3BB4E1D20
6ED0B244F323B047459477B7140575A28AF141B192100B9E765CC2BB27D886BAC426546CDBED
EDF0B7E06AEB18AE6D4499E25629366DA9275A2CDD531211CCE2DC40451E3ABCBBC3B859982E
10A6832872DA625F10596C05E8FAEB24BDA12180F22C3C7C52CFE9D6F53144778FD300B8B1E2
B886A977B9EED87C49CF70AE2EBC85F2236094DD73ED14144D85FE4E02E24ADED098F44F1EB4
B5A9E0E67D15FB58408F85258EFF2F06A4E239ED4EDD6E8D91DEC719C8145DA7E533A8B7CC0D
55AB16A9B517787470E1166AC2F5C899CC7594AB1651D4BC0EB399750997D8711773E609CB89
CF1C27FC4A9154697EFB6CE1616AA105D0DF2DFFD30AA7E89A9FB633756BF609DE90506C3DBB
518F42A6066048E12D2972E708101AEAD629EE8E6CDD5D164F9E1ECE4C763580EB6D9A83D6EC
6F5994D658E3CF83E81248932577B91531288667C219916A258F27AC81DE34F1B5CB6AF41E07
CB833A0E8BF6A99249CC434C34746D0F6072E8779E4B9583297B1C16E19CA066FCE82BBB2C34
D821598B2208EE678770E95B48A4F569664FAFE7FBD368D1E5D09B69D1DF73099205B93F2174
D95C435A9DACF24071DFDB86F6D1E19FF71DC06C48561538E068528E30CB949801378860E2FF
6428543D7BFDDB1C8C8A392745AA37DB6E341931D4B99CF9B8E22E31BE25F6CAC27F2CA4C4BA
E74FF7586D8819D6F81A986A5FB512150AC9E4A6BF6FCE5992EEE58191E7283FDD1BCF67D069
3607CEFB968A361498C783D28153E1DE5424BEC4032349F61036547E37BA99E59E96F8962EFF
06784AB6E0340BBF0AACFE04E12BFA5EB89490587DA665B466A0A2F3EAEE78F1D4C0EE8DEA69
7CC4DA7EAB852159A707AEB4AD5D46B8EB3C7A52E77FBB683A8DF45662AEEC32E9254696C259
1A27AA65A48F9B609B7FF686B0C516A82F2F3A856F9CBA2FCD485259B9C4C71F9A2DC8FE5459
4E58941176A7B4714DAFE21361697FDFC349430EC5AA31EE3AEC18C40A1D3CF225BD5989650D
05D6FFBCC63824ECBA52FABF1AD9C8466CF1254423D999B1A6B290F4D68D4058BC1484F04D45
1AF4475ED15109CB3B3AAD319D60181B1D03602BFF1D6C1C132AFBF54E1B91007778F7044260
078C8FBFC7E6FB22B9B7974B3B535D27F434CE90F29E29E3A120149635595CCC832F5AB85385
A16037C188C2E7C3AB229DECC132AA637FAC1D6DEBB8E49AF3B30E416793FE1A544B36DD5263
28D44FA684B2D3E092FD2858C77E9273B157A0296D72A564CBB6B09F9BAAF13F79EA7C6F0230
E53975CFE29A317A0E346ADDC61B2BE668836DDE0AB038B10D099FF2734065473139FC737FAD
1DCA597923D2A541F672A37BBDC20AFE015777957DA771CDEE85D788FC320753B0D753EC6FB4
2ADA7D6C912F8385BAF497E861D1C3E27B422F69894D7BAB83B17F9CB3AF83B4CD813DCD6B29
B61BCA6D780695BF3FD41AD0C86C081A2BE931B1BB038F0B720C1B7B944BB5A2343C65CF0547
46F17BDEA90301968D294BCFDDA9B996AAAFAB2A56FE05B9FC6020D35C465C49F2DEB486DB89
9AC323295A7EBF6A6BA54A455AC9C40778E20C0EEFB2442A7BD9D7C423CDD0EAD44845EDF403
EC3BC3D6D2CD717734C95240D3EB7C7EDAD099F11920D053E81D887B151BF10C59B3EEF406EF
0BCBC9764D603B80A7373511003A1FFA9B411AF8A7552FB0E830D4BC9FB7019CA7F477489FD4
76B4E5CC71DC01341F93160C8951E622E79CD953DC8AEB016123BA71D5104525CC03FFA37310
57FA0FDCEBBB97C0CD8415080EF05459BD0AD8DC0D03878DBE98A07F0C55D2EDA9BD2B8C36FA
757F94B538ACE2E5D10FD0CBE23D83FA8179CA8333540121300000283E9C2D3CCB5C6467EED4
95F927EA7F77552E22FFFC27CE2B4BABDD9255469BD13BB81CA5E998D7DF014FA8EBB880AA21
FC586DB5BC9E8B722AC26D730F74CFBDFF0358AA7FA75A1EDF7D14E9EB3AEF23C78E52983E36
F98FF47FA2F897AB454A569E1EB4DE93964384F119CB8914568FEE7D064B35C42C01B66DCB05
6EE6C39CE49E81FEBD6793290886E836F8D23E89D87A220B9BBB45AFBDDEFE4D1C8766E86386
21E6BD4F785032C15E1E74F8F5FD2612AA6917DB64E8BC7678B9EA2B3B5EFB49EF34C829D497
95F9B6101F394B142B54C5D7C128B58A9126E1848225DC27185F7BA9C3DB09333A4D5824EA9A
F8527CB48A315FED48DAEECDAAB29BE2D286FEE06E4605171D5AD9DEA414ECFE793D6E303864
72499CDD88A1758BFF59FAA4577F3DD75D2C625337A33C7A839B50C4356714424AF153A4E5D9
43A9DB4849EA5A768F8EAE150CEC5065BB3AD73F33E86DBEF065E0D268E98C964D8D5493C710
90195274C3D5C13E58D9A3DA34C16E0F7254D5BEE3A59B99C36E261084B4C5A7DFE7EDB357A2
B9A3E6144DF5FF533774F22E97055C23FDC200C5EBF55A4E1C9D4B31376BB703C802F1A6E72C
A288D241C383F09238C6B5092A7C4A4881AADD5CCE18FED9DF4AA25D7EC8C9BF79F86AA2A5A7
6FA09BAAFFCB1A538491BA9B74865F5C3BD715B6F8E61E1CEB54CAD601E3CE91EB09D3E9CBBA
3D8080C0A70C43D04758021834D18B3B1509B6204ED52B3408D2ABF63173C48B137862A62098
AC93CC52029855A98C676B80E3ABA918BBDC47C9A7C75CF4A9EB8C160A417DC0179CFD3F9643
80828E1CABC9258CA22888B50A5E92084EB60F21862CD49898794F5510F04AF4EF7BD021E54F
AC2E8E51245ECAC62E4673AD8709635FBB89FD2A1B67CFDFA65F64074580415D98130B430A05
57C44B565DEF83534AA0B389FD8919E7EA31DB5905187671DEFA960BC43E193D402865FF8324
6EC96137B4C8D54BC69E97DD3175E260339390BC5DBB8669AEB50FBB52C4A6B8D56FB982F80F
DFD7B1802E179741A021043F179D5C867321FDE1820C9B8F56C0FDBF12A9B5B0AD988887EC72
943D8E8AA508521CB72381846697C09E46A082CA77CBE2DB556D4D24D3250BF5F4BA10BBBC08
5DE7BA6FC161E18380E671FC15813B1ABB7B88A7DAF87C705329469E2659A56131001C4CD3B8
8B62C43359FC38788C30296F08751BD034109E4931E395E5A6E38126ADEDC01E12B99D65070C
591AE1D306A5CB814C6B6B98DA11CDC736FCB95C2A3C393ACF1025CE94DDFCB9F48091815385
7F0A5A5741DFE09000D0F6DA9D95CF1CB72E1D04362CA54F0E982EBB8D0BB7304C5DA7AA6374
CCDA7628038D1C3FBC7B49B04DA3274F47E0B630B57AE019D0FD4AA917CD46562A6278CC43B7
5C695EE04F3A1F318DDEDA671A1872E6DF5E55B45611394AADCC45269BE9CA76BF2C44CA39CB
0F8432E5FBD6037FF267BE21B2BF6558877EAA1B3E54B668021FCCC07644FCCFB0B43255A94A
48D626EA2BB20098C6EA743AB752332531B5E8B1BC8F6B061DB8CD7209A7D6CE79EC1961706E
5FDCBAABC5B55402C018ABD452C2CB976B71CCCFFB4B57401A0160066BB3ECF412C779FEE337
F4B477E1EFCD4A0F7338E55FF93A9472051F4CC2F53CC8A2A694A861A033DA19DCF7DBD11802
50A442E9A27B8A2EDE87FDF9A8F349DB9CD22B66EE990EEF9EB1AC364900C634B5FBB9C5C6DF
057E254F2E95CC8261BE32A771D197DFC18F9088A65158B77F8AD81F60C6F74688B7107E6CB3
C426446EC9101C338119E5C9A0B7E9B17B85C4C25F0E2DE47A55E4813BCA52BA6F53A2CC0B3A
E230939AFAF657FD85313A26FEA45B3D930CA24E3DF13E43CFE1393EB0CCD3888A4C1EDAB4A9
16BCAE548281579A44078BDFE4A81499615BA7146EB71E67687F01245853175AC0FD2C740AE2
3FDBE55C339ECE05B2EAE5594F993F0D127D745420C5028F20365EC46A1F0F6D136FECE236CA
5D511F8EB576FABF0E9279E812A42B6D57D8DF698EC35EA53562CAAD449B048BEAE2FE1EFA98
A9BD531671E6AF97CDB8AC81A472CC87FD4AE92ED2019E2D8AD7729AFE01A4647791D8C95846
6ED4DBA14A86E26AA83351F1C5EFC20174E4C2371F1D0C5A9768BBE26E218E343BB94C35D4A8
F5AA51A18A75005B583DE5172B842097AD8EFF20B866B0FC14CA9C040851DAD663DCE4EC7297
9543EE0CAD8F8BECAA466AF04432CAE16D348080573E4E43B244AEAE5ED1A4F411FB6631E73D
FB837579CAF434210BE9F6F4AA5AF350AE14933A6D315EC86C75DE6EE4BA25E8EE8382BABBE3
00F8FF48B5092C83AD9EE9A02318C377209551CAC9CB575683C30A3F1B0B8E153F860DD5BF09
7A3630A2B5E16BB4EA0B3489F6DFF3003F7941C7B6D65E93BD22C4328DD2C318C9FE2DBAB677
2EF861FB7FB7DC1AC4958E942203418734BFECEB0A95F6E798F7D5292EF1BE205FA592B52FD9
BD8BDE4955907ABF1B26DE31A09CA50DBE3B2F0C9B1942AE87AED1AA7518B271B9EB352F9C46
957B328D9BBE2F0DC9F7C6B4329316275FA35BDE6F904B5624D364D23DCEE49EED637E43049A
18BF2D8C6A119FAF128E71EAD2832C3BEF95710D82EEA2D3D2D9FC2A77C79EDB311D0388B651
89492BFEBE4146AD39B0529E78BDCBA33F779CB5E3416A80E455BF0B9F9E5428D98C011A52F0
3DA1442C0B9F6DE21827D004852442D51ABD2D4A7B17862FA6F375FF5DC3B94E2E88B47EFAF0
EA84C00CC032622BD4EAABA30B0A9CD9511CDBF0C4751CF421CF74BEFB8B1DD81D42152FE5B8
CF6D987AAD0FD44C3FB8E25732F512A10A23522D2F6D35270BD5925AAC0D4AC930A7E2ACD799
3185A2DD084F6AE3C41332C40EDE1F22DFFD008819FA5AFAAFADE015FC821FA36625772405BC
7E995CE0551E1B0A0BEFE8EC3F4E3E1528DBC4B7DA5842561848570167FA2B20CF99176D9175
2A5D897216ADA21CAF1D0B954FE6A631CDB45684888FE366C3C4ADD8B6A2B3EF76543AA28B66
19BA29253A8DA942081A63FF830F2500942C65A6F7248ADEAD0F19AE0FA1268A4FD68E33BE0A
C1D8BE4223086043A96746C7E1F2ED18B6B46FB5775B3BC2022C56935040E6581424EB4B2294
912F8D7C5ADFDB8438A5C57D7DD4A78105DAF771C0F6F445B96DF66A33B550EC3D1F90851DED
DE5681A8826EF6969192F99D4B3715409700CB201F977344D84484A688659C954581423EE028
855B18FF246BD585FE868FAD52666F26556CEB3E506B844D88D42A16DDE434AA4E31B9128443
8A9F78F8CB488FAFFBE492E66EBDB881B67AD79AD11B5035461A60246C45210A983A097161F2
24EA8D0D588B0C82A3FD1E9D76934FA221E88C61D22D17193B22D0286EB7D1CC280603C089F7
EC1E34866EB172F86470A9368F6D12AA403A5F7DD429C877E91195EE19651ECE85C2B27F7822
B6B36A34D0A33FA7F7E5B5BB9401058F04AE30AB700C2DC95BE029611A0933C2FD41E1FC0017
B3A9AC906A5229E4E55FC97FE0822F2291F21CD51730DCDC55272E786255BD2636EB76C86B82
6E65897064C776C21472F4C2846647925713998FDD8EB8025D6879FE259EFB46DD34AE5A5863
D5EF76CE873D9127CEA0260453DFDE8BE0ECE48F75EEE1B3B79245FA5EA93E2FBAFB78F794A8
E21C7A89BC5E9A3ABA93D52F7AE3EC1872F91062DB372C7AF1EFAE6E3B5ADC4CFB0169710D3B
CC46631B9BBD58CD1C99C01E2CC95B74E3418631245903A6CAE538C8609F3F9773868A95CF08
C5EDB36695AB8E8FD74204EF34F03EF530B79360C34B4A359B8E17401BB2115482EA6CA6929D
16D3B06883B907C800D6ACBE41FA4BA2223A3EDB7E2C90D0179E9E20B4A18C13739553436019
7E83E759DC15CDE695F073E9E96CD131CA87E44FC8E45E049B9AAFC8835482570DD872D19DD1
58DD646C431F60D5C5BFEF48012B7D89618A94A33E6F49FF72C058C042C1871DC552D430AC51
079C496A60CE005B187DE662F1E78E2AAFFF90DB6BF6948FEF33BBFC38D56F8B104A28C9A1FD
239F52EBD02E4AEAFA944A0DD7C5ED895CBF11D23C860AF0BC482E2CEF8CCE58857E28B6263C
CEBA1A6C0533CC8E20AD3D07ACF6DC69698C8CED7C2915173714F6B7A6CAAE546FBD14FFAFF7
0CD63471B9B9CD660C89AD66ABFF923C088F20AFB06DAB331CFD642D02003AEFBC3C5433CBBE
FED40AE1F11D6D6379DBBD5E10EC42A60BDE3BE5C4D904446EB0E17E1C57AF3D4FB9F0666FB4
5678D598965A2F3232118FE53BCB6FE4CC10EDE002A6C3D1F5248ECFFD853364034C12C5BE69
8C942800BFD5DDE2E9D80B521C4AAE502FAD878A03907348875DF256A86C38CF5C40127A9274
F959DDF0A604FAB03933FF7C5DD967EA143B14C0414F2646D3D96026C31BE5B5FA24AD4239CB
65667B84167C4927AA6793913F138EB1EB68AF857563042CD300EB157273FB4FC64976FF9647
5C900AA939C59898698E393462AE4196D32CCD2E688FAEFD515F8869C0CAB9708E12C4AF9B90
FD3979A568E77282C015B3A2427F7B841239812AB33113F68A77138AB3A43DDF7152091BC622
38EBD112CC5258290FCE54D1772794A7830369DCE1D742AE56F926B2807EBBF14F4035BD6F47
DCFC1823833F9E9A2C6F6434F0CD3C3BD875286350ED70A236ECF6D4ADDD4E9C95024E75FAF8
D16DD22402CD95B59C99F6B933116FBA8C7F8E1C110032913658330E3C283E97AE5D621F3F15
E48EFB86441C33693225252B6E084D0A3711156955EDC564FFDC2E8D4AFA588FBF44742A9EBA
7ACF477ACC90272864535ECD9A38229713CDB6D7A34A1B6997936F85F533915199A8AA1821F9
6284102BA39C719E9A34C2DFFBBBDB05D2E23810C209066317A2F470CD759FDEFFED0F0E9A9A
FC557B76A094DD659BE6E35C61DE2CE9D56E4024E97169E3988F42F1DB4504796DD56E10F211
49E65EC6BFE7182EC39A312E1D5870B91AAE0F1D11635D80657ADAC08B885E2E185E4657AFBC
C069C337D1B03FDBC3078A9D39FD48BC5B12D08DC5A1B4D2E3665CE5A15CB780FC7C58F0AFD9
08C6C37375C726EFC5C4C6EAC60AA862329EDC01428E97D7512F61BE628027020CCAABAD392A
3F4409EBE2DF498459E7B60656216AADF9D591860C56D7C743AB71FF85EE652D9B6B2AE96119
C627752534C42C5C781A76BBE0C8CB87E4D7A3BEA6FD1E56A845590AA930CD2D02B895687A1F
5182ED826A88CCF9EFFDA2A7C91AC34ED7E62B895E694FF123D80ACE7DF2ACEEEC3253DCE5C2
4262BD73BC1E12253CE4611DED198A5E075C540099E351A335E0EDC37B07202ABF457EBD4D59
5610C99DB34C8959A462B132DB3588698CCEC771DDBA29D0E708190A4BF31C5E88D8BE9D25DC
0D035B752E5B254B32DDBDD23C23DF47CDB65B6A3058828EAC63E54D0633898905898C0C696A
3DDD1F8AAC9E251C5020EF4216C93B65A712BB19CA6AA941840ED9D18377DBCC82E3A72FB085
6C88F41DC6D3062737D7002DC612E901B6C46C63B04ABA1EE805CE76AF11B73DA47460467D90
1448125C8CA5A72D3A6808FFD1F2EF62A17C3FEDFBC57E2C850A6944E249A47B1B8958025848
CC8ED2D53227D37459F5C5238753D86E96AFA1DF0A67EEB79E83689C4BC5D935968A9CC68B03
F1C19F8169619330FE1C2B16EC36A860C3E1D0B22D3C6384885ECC63268D0EDA32FC07A2C1AC
7DD406925174B46CE8326134EA3B934DC19E9B5A7DB355DA603C369EA27F14387BE3AFA9B7A9
55A1DE7BA12780BDA66B2631B5260C4BF644FCABB000359241AB8DB95E89ED8D90EBFE561B1E
9BD56A1F1776F510D20DCF760F72FB2F75B771D1D5E1175F8B53A96EF584888B30086B249447
50C06A1D374639912492A8DFB9EA7D8E79BC02B864F0F5F2B18D9BF7A94AC2F72B279B634FDC
DD9A98274F1C0C75A4B8EC98000530CFCEE58AB4EEA884CC9507AC73F6F21C627BD8554F3DCD
725807ED8F88A2CD55C596906C3DA61D489F4CE9E6CEFDF06F3ADF4296B52922099F51A21325
A524A2CD0EFAED0BD84694A09568FADB9A64C4959D8EE03D3CF37C202E21468888E8ABD0D773
04BC831DFCCF2EE88F8D97F6477732DD6D16DC66D161CEF06472E85C2B850D1D7C3B63ADC14F
C7C90ECBEF2A862BAC75CC29250E0722D7831E6AE0705D90F5F893A7244C9FB6F0E3BFE2506C
B45FED22B9685A00CC20E217707B82108B47AF78D8ED4EBF4A08DA80903ADC1A70CE142698FF
37EC752E586FC976D14A97BA9FB28437F75F09AE4737E72CD67CB7F2213C1D22CE2F8CA3405A
D78FE376C07A7C26DE7196C19CA6FB74C76C80EFC21A41A33A8E76C7FCD254BB5C2D57131B41
64C11547B68569C38C00A4454EA0C205D5CE20AA3B706D2879C9C90470E796B232C04C93F163
99D49DE351FEAF6D62207871459DA540EE220744B58584FBCAF4FC6E5BD9FFFBBBCAF2BC2AA4
76CDCBC2C29C319603B3C09970456F4693FE516E788740BA2C3FB8C415B5F4A110765A1CD435
EEBE56CA018276A74A43EF7647477C7DA77E2B9ED6FC18E7A41351FD36D2609D791778D29D94
9D519468A6A890CCA284B668FEFA3799433AB8B863864811435286C4F1BB5A951E7FB08DBA1C
0B1927D21FBEF7A6979CA66F3310C709DB2FCF5F73BB6FA08DCFC1F0B2971FB1C3089548FC26
24C292FF756D29BCEC8372E1BCDFD5A01156465B9054BA7BDC7019201FECB2F6BDCB7887AA96
CD30F2D24C6355A33CC469D625C249487D5A2C99BACAF0932ABDD72167A20285D1A4B76CF7A8
71C3D959682A3408041936AE6B906F0BEDC4F9EA4F076C198DD4A81536B37DC78C63C6A0A798
72551796371ECE49B3AAA60D3ADB54E2E3C914231A572ADA0772AFD522056B0BE34822E4860C
367A146D66EF2514729F754D507108FA60D995A5FD67F4F23E600CBD9324786E0D22367E6F03
EBB356E3AC5ECE078FC7F05E10CA32D45D5FE4669D6E1A3F71A76648F72012129FE0E453D04B
9F0526C194356E0C6591933FE3FB5C79761A5F7CB06E73D48C0EB224947C2BB005E09FCD76C1
5EBB2409520FBAE004DE49EC443C8999FA55037E250845684CAC71B4D044337D72504771CECE
C8CCEE0034F22D31E6C84EC1F8BFC221F117D141CD183E5F70E8BAF43DA3E8641015AB0D147F
9A828CC1204515974F351584F70C5EE742FF30D6CC59784FA8B59C3F32115487A36A6C85FA26
E154F4B5753A4E6D8EED81003B426A7B39902D092FAF36E8729E419E2A40C25C659CA6838366
F974E1EB30D4CA2E52C1D282D2C7E133B5D1C4AC0E4358B710084A4D141F8F020BA1AB31C2BB
D13D9381FC1B961BA11809173DD4775D60F2793ED94ED57D9D72002F8E77185478511CD9876A
BB61C0457A428FFB7178E13A4019C8B20425154D2E2F42ACB079D0F385E7DBE259C5BB3A2984
3AE99197B3D8841E80A9456E7C8C8C2E8BB5B49D6AED06C69E51954C8AFDAFB52A785F5EF962
B8FBBAC4E7EA21480C344B9B8669E0E9FB60F7AD6E20D902FAB38665679E43A03123B34E5F92
629A739E569E72AF9707C8B06000E060A45B540A5DE6D1E4AE9C2558186B28077744769407F4
F42EEE8AFB718F31BA0EE9DA255A4428FE5225451BEEE7C743677D86590BB4CBAF0A728F34C6
6D0CEC029923076B65179F37FFEDC1DEAD6A678F4D4A6DA47B66BF101CCE6A90F7A7A8749B0F
93968F2A5DBE91CBB374732C969631DF81A4F1E51326D31810614268EDAED254E4721D59EDBB
38E1CD3138931F95ED8A2607FBED22652AFD0E181C40B627F3ACD2D1CEEE74CA61A601BAE64C
567E6814D204EA628C109023A7149772ACDC7FF9FBEA97BE232D016A1F1EB6F702BB7EEFC069
853B8014D9C33EB84BFA60B6A1FD4A419CA54B288E30034B228F5E3E846274073F5EA3DC684F
555DF2E038CFFDAA6E4041EF7F5A7068507BB98AEF63F8BED04D4E2F2B88C07FC7E80F3BA0B4
FF9F583F8BD6FE45311ACA1076AEB46B391DE8F45C1F74991AF796666A0B50A0CEAC343D598C
7601667CCE477811C450ADFA5CAEF0D659781553EC53B50D736F214363C9B0EBC163F95C5C49
CA52B9314F031707CB9B0CBFFB63995AB995CFB3E65FF76F42A94BC3B397E449213B77858E2B
BE42044857D1C7058F23456A5EBFA36DAC299D0C64DE21D97356017D4E53EEEFB9DFC4A5A18B
E8CD7B5870F9756CA3688875C8295042FA9C38F2A7999F41AB701128C675AA400C183D67CC63
6F98F885C9536CAC182DD12F9077279A20D589AE641E4763F59FE68D1E3D496031076F789A31
B92797810F9ACDC0E0A7B33A3A88F3900530B5A02CF37D87D13E01616F3381360DF4BAF00175
1B1E8782FA197BA66AD408AB8A3BD38D924FC0F721AC6596F0C14D3CEC9D875BE797004B439E
84BAB84F43B1A12AFF062E3BEA2BC5618118BB0653AA27324FE8A3DA281C0DC71DC7AA17A4E8
7299E97BC95AECCA52B97EC6D57AC590DFB9E52E7CC5E0BBEA58ACDD75EF01B932991D5BF410
1ADE7EFAA4EC44EA551C974F9E7119151FC071D167944B23023CF7051C909101AE3114A718E7
1D325392DA31F75C88B11DCA76ECFF14F1BDBFC695CDC4D089294DFFC13A57E34A72E454A9BB
E8D482436E8A788854287C69FB71D3BC0B5CE125A9E7FC7898AD9FAEFE19BDD664E291FA5706
E9EAD8C77CF5CED09C9274B2322ED7B6E2E8F9C3D1FA9FCD2154E0019B535E69A69251C866A6
9351F8F24F3860D3D2B819FDEB7B02800E59E0F5197B3AC612F9BDD5DF719A1911C48435514F
8D6690B920C2350BF14F0089A9BD92C2BEAD5C2FF30934B340EDB90D0C36889EC4202507BF53
2C91E1E001FB9FDBA89D5A9FBF9C83228B19154297E3B3F87AC2D19A0FA9CC718F60A81444AA
7818D14DCAE8DB9F35BEDE20330B1F2FE973B21717DA229455C782F533B5A21758F4DD11BEF6
5D41380F0557FC000E43C76292C3243D2251C4ECADB82867553CCAC7CD7906E72F10C785BF2D
884E80397A34C4268A80B909E9CD10328D2ED4A336F4C048DBAA4A3C67E9EEBE083BA7C8AF7D
BE50354F22C9DFA81E24F08B2496A67FAF73D78B34BD3D9CEAF8BD47A1111976927650E72109
5B1C19924FBDB76BF91D710319FC897EB76674F8CFE5BC8AD95DD86F1801FB56E1A94B0D1C19
31528FDDE30D05291617B4E095F2ADDF2A4E9FD339FBC3F2A710402C32A503DFE0670777B1ED
3B1DECCCCBD2A36927EA497F4401A4173615A644D639D6786B7A194EBCEF642BD4A69C7F11FA
541D1D5E96C2328EE5EF5D3182EDE03E9F33CA1A0FAB75DC03FEC53E277007232971A350BA9B
304B3A7B4716E10163BD7CBF72450798470880EF7B29445450D13AE9A791422CD0CEDFB39CD4
6C1BABE0968E1971AEB7FA7928C1892726DBEE269DC53A555EBD451CC52E591E962474CB684E
9937F44449A1EE9E3D8B93F24D9CC4FBE226E9FAC41461A08207F9FE9A75C015928F144DB071
A268D413CAB561DA23DAA6050164AFFD9DA89F1E7449D3A18C2858095F9866A7C3C45680CA72
D25D2DD7A0DF340CF9579D2E1A4B40E581AF74FCF18AA070BB02656BDBA1F8A8E81996E43906
2AA6B6AF83AB056B7484B005C10AD72351054CA1DD21FF9241D02DAD97CBB9708B8605B185E7
52BC036A662A8C62E26D6CDC540E282BD379891C4C0EBC66E4AA5A38F44DE31F1BAE1CACA711
007E698D4150BBA0FF2119CFDB59FEDE5DFC8D7C6A9CDEC1259A2CABF17784FBB694F778371F
6FBC34C855197B7F7802F1767CA4D20B1FC5BB7DA8E0F880834D3963CF321DD157441D38BC62
E696C7A150590311D19380D77F39B05DCFAB089B8F3B613EDCBEA90CD8FEB7B367D92028055B
BEC1D34D9E76C23AEE16A2E58AE7FB62672F971006E21863BEB87098CA1C58A7C8993299B605
EE23EF6A3A75A9A54CE8136133AD569321F471A3B7E3B7277DA2120339CF1D07948BA3760E95
F1CD8CF15283E8008AD78E5C391A953A2C9EC219010C6642FC23A1A20DC1A8E73F697AF075F0
6CAF1E15E3A4DB743E1C37D2DE5569FC5BA700F657DC9957F684EC0B13F841C50EA9AE04718A
93510166B1216A1BBE7C5842A7239C078E6F8AD0EC731216D9629F77A983F3E498ED41077E4A
2833A961676744A8252D9293D7E8695A069529E44B657B61F0537A2813A0A94287D7983FFC02
BD6A957C7B74D7C4D7019C9D1C474CAF66AAC0405DEC2DC968E85F1E9C1B59CA213C0F631DB2
B2F203EA816511443285F7E83AA2AED0592675316B0AB1C295C6A1FE553CD2E9F16F7CC821F6
272A8AD0091A775594BAAFDF10F704569CBBB3533196607F6594E5B1E4C77202EB599F3F330A
B3DD8C26555AAA4612C75BEE3D2039570D307593394F5C1DC5307DAE998D1EC73A6FCEECA19B
FC35F6C3FEFB45B9B462971F96B0E770A6A6BEBF12D3A3420477DD83E4575A2C4B9330336C6F
AE6B474346495B68F927715F999D58E35C49DB5A5CADBC98591462C4A05A7DB4C202A89DDC0A
409AB18B70DEF14AF44CDC704B7C9D5F169BF0DE52F685DAACB39C0DAE0FE6739CF5DEE51EFB
2A51DA04A7E83D510CA9BD40649A0CEB8413DD8855B8DD39C7766084DDA3A0F357CF5CECE316
D0BFDFB79B402E1F777667ED5D9D42A9BBA869E36CEB097FE7CD48CAC7562DC7408F13577497
B16A6D5128EF89E5CDEC7C0E93EADBB1B699A489CE07CB51BA5C2F21B03D358BE882EB274DA5
992C53237559EA7B59C87557F631EA641ED993CC06E3DB0AA291E57F380F509663F0795AF2A0
95D988FC8D2FD4780B8F8D16E7946541761DC33108EE20A0DA2DFF7E83A7948597B2310CFD3A
C1B1AF72B4666B2CE84559281A5DE56C7426F8E4D6FA694DD730FEF69D89FA29FD52204D5265
DBD079680761B72BEABC9E016213E9E02CEEDE9CAF1647877D6B7A4DF31D94F1D77CFACFF1B2
B252690152E89568FE5B72E99D0520840809DD69781A5584444C4475C65AAFAD4176F913D947
413CB2CA27B778177A3768F0254E836645DEDCC11AE6AE3C5EA1A075DFFD32DF9C14C9E320E6
302BA7D1D59D258E5C6B623107C7BE8AE47E168D141CCD44D5147A1CB42D319EAA1EF302D4F3
5DBD9F3A418E39E2EED9451E8004881A79889D412A47CE60CE86BDDCDE638BE152BEDBBD56AE
1D1D0A3DD3BEE23007696366DA89B8AB63B76B25089A3C3708E44D5E7937B815453EBEDE80DF
F400FD94200734E0C4D2423A154177B85873557E1A4B6C224B06CCCA11D306AEBAE0BFB27AEC
14FA047D4DDED23B7838166DC778075D90094ED5E92CD06F48468B18C30CD8B6B250FE605EC2
AE857BAE553A4CB32388DA08084FA957AC23BD35208CFAF7964757B34218AEF5193B4D019569
A19297A1D813A912C7D6BB5456235DE0451BD679807CF8A2333D94D086D7A91EE6FEBDC7BD14
4122012EFDB631B1E97034400DC601F633F74955FAE6D6B49351DDFDAA070CACCAAE0181A73B
501E0CBCFB249C41D2A28B16C455467099EEBCC1B9FA6C04EB0930913155EC1323B7A2AA8AE8
F0F73C42898A164669EAEFC2015113E14F9793678D0F50CBD040B76883908534906B16B6E29C
5F4776CB55A9955AA41B7E0342D258F28FF9BEBA84F5685F1BEAE5405E63EA3DC93C7F7D7683
7C4861257AD2B899272D0D67D882FC9D4F9A5BB3A9B8B97959B45B081609DE1392DC54AA8953
50142D444FA38EB15DB0964F0E7E000630B3502ACCE64FB6BBE18FD94EA04FA6DAEBFA91AA3E
A470831BBDBD80C4E9049DBE100AE2121E2D12A5923875D07F37F2EE97604A1E15721B675E29
0058C119F292E8BA6FBF47CD4195C3D249335AC7EEF34C419AD0896C76471D11259B5D5FBB23
BA063FF1743C8A62A96293ACCC9EE498DC81FBE7B3DB8C713AF442F2845680B72670A907CD56
51F5DF4C7E71755DF356D5C8C2FE28C7A980B84E4C4A0FCAA4D1BBFF42CB821EE05917AB5C2A
C5D6A51D3E1EC9326F61F31E1EC511019196A108A47EE460CE0DF6A71F83E12A71A58A78330F
87D47E5B8A2724D0C31D5B390CDE246436838F1586347FBF6931A5BE35D337DA071734794704
E0563AC2E4727D0050215C4ED00B2D2EC80D38D6B7096E701EE2EB61B8579A47C60BB0902F3C
39D59F5E6CB0743DFA3D193781250E5DCBEA329308B2FA89D95406FA860FC6754FFDB2A61A9A
92D764998F74B35C183CD0E5435C8AB0AB15D83777D0F4C9744CCC040310332B6AE7F0411AF8
15EAC3094E734CB73BE514B428003D104F6BE22C67FB7C6641F68D2CD80A071C5C85E639BEC6
0A321AB9B7069F058994E6BCAB2AD918DAE026B5EEBF3C95CD286B155A01210D202AC89247E2
996CBCAA5B0FC5F72DE1F2AFE326431B49E4D09E42958E2162CF67ABF2D2C335424EC4908D52
D1A3534CAD58BC48E6549528E20DA15A13BE3F3F4656D97BA087D356AAE63C4FE4FFF8161ACE
2A0C465671017431CB3FF45FAFDBA1A7D6CEC695E3EC2C91CAD76B0CDE6B8DEEEB81D0443DA1
EBDD1475BB8DF19AB4BAF2FA6F91B5E753F5EE11F62C67D5DC78550991FB2D2BCA39E0EEC87A
A1D2302D3B7FBC57297BA3285DFD875F00FA3BC92E74AEE09407BD8F16FBFA1AC0AB08E58F92
3A10D5E4BBF72B034F9340BD734373F0CEB0DDD6CEE44A903994806252A4107AB65B18B04D59
BC46ADDB5CBC56C2F196A458C8F1BADD3C24A003E42239F058D6B9404306F6B38505E827284B
60DC3C22E878F92F6001DDCC3FE63DC61A04087FBF2B4E3F2339AA658147186D88793EE70D6F
24FE1D72150546A34202FC655D0145AFC2EC4247F8DAC8C3B5B6BD930934BD435043057CE6A8
6A5F6DE5B8E51D7DB3BA0B3449612951E35F475E83B659041DDC1DC942A437A1A2778662ECE4
5722DD25D0A59787F7E58B0C96A652B7708A8C89DAA9B577B9492DC8C48D98AC27C4B73CCF9C
55B430FBCD12B5C6EA7CF90BD28DB91954BEA34CFFA6683EC5A3B84F0413FBBE04E550D6005A
5936816848671AC4E369C1D833F41607C041F85B9DD20098B41349AD5331606BDEFF5B5C936E
C356254A6CEB340345BC9DB418E4093FEFDAC4693A609D4DBE0669D67D443DCDE4735A8918A8
B8009D055C0746380B8A4195DB3371015F61B302C95B45E2B11F013F8522A44C49040748AA94
37884F805358D1DE4036F01FBDA4B986114CF9842F1E5D6E7E88F978F480FCCA51E4E0C929C1
E3227595FDA8EB1A5D6361A5028E1209CED07ACE7D33E42846571A784D2CA58D02058D20FFF1
955D0E5D9497B0D9CD46D37DAAD7951B5C1F44F63FE8EC3D7209F5C7F4ED7806138EFD4F0746
39EB7A5CC5419BFD245C95ABD4AD268D4BBE6721F74A1565E2B7FCE1A0A235E4A6802545E8E5
25BCB645DFDD9B87BF0E7379676F0EAA0E4312F9FEA5D9EC809EDF9EB4A09C8F7110E3842FAE
2B2EE8AB6287C3411FF5417144ADA4C05B9BE3FBE325243AE2C0623837D2648C2712DB61D180
AAAA7E06B2952E288536A7366163454831ADD3C48D865B5455B97DEFF5CE69746BA056903A11
8A2A088817AD86EA8E6A7D7C1B30FD957DAE33BA15EA45FF661AAE136FC48A7481C567FBE81E
DD7094ED2C4D6E710E2A0B626CFF67E78D83522A6F84F4B1C3196BE60B1F1F1C1A55EE0B0ED4
F9BAF40264960A149A01D8EB0346131BD6DC12D336F67421A844541B519D5FB85C0CA8E82B53
AD008F3BA141B332FFC6B505EFEBBBA8DC78EB8FB94506A14C8B212F51C0CE2E1D978FE6DCE9
488831BD96ED5F2A9DC1204402CA8BF9D2086E4E78183CF56A3B514046FFE9F1FBAE06A6F719
8AC66C62182F636E9277BEFD5378F6853733E1823BB93D5BAD028647AEABEEB969F4CAE37597
667C1F08091CF9F1704B3492F4834E93283CF29652706DC0C6AD689F8D3BF4FB7C3C2C01E417
C122C8F7CD30AA58E8C01C90953F55439AE0DBED0800686F8D096EDE6A1934B5F34B5FC73D27
89F4B4FD8C8DE720238EB84BC5CF71D6E9FD4E618848C9C4B33BA6BE7D8566DD3708B2C244AA
86E256B8E5954734EDA64472C438A0436B293D245B268C5DAA08750AD0BE8D1B3F5A7B4881E7
D74FD9E3E7FA5705050141FBC24D71844055960815A3C0949283DAC0C1CF8FEBD10EAC6F9F4C
A3F93D54165B0F74A811C31C8CAFF4BFE3AD6C8AF02FFCB2576A04C25A9DEA57FC322836B2AD
A20745D121C6E65A4839DC52063FBA8D67D42F09A5878C9339E06249BC4758859A994504A369
A67A17D7F36D583256DD65FE76DC44981EF254D5CD33C9C79717C051F20EDDC7B2744148BC18
FC2244F596340B69D9BE1316941D6E1F00B3EE56A0425438ECADEF4BA8A9452D2947C7CDDEDF
5D1BC2C3AE280D77241C48072ADD5C4A4E8806FA581E39F45C95CB6C41D87759AB21155ECFAE
D8AD387A70B27DAE6122895AB20793ED40912BEFD7C25265D8B52E9AB0308A5920A80C4B6C06
38F7AEC070C3195D24C3D601546143F7E62573DA6C7203115A2613ACDD2C583B88A1C905D3BE
019B392560425C82FDE2C57F18079E17A0C191C9A715338B94F72DB795C151C17B60B4813A15
04DD4D91E7F1150EBD02D600C96322FA5D90E221562B7C5AFEF894F4A9DD36426964508E4155
B2373221D5AFBF01CE958798CC04A4E6AA3EEEEB4C72A11224A645D7326FD4E704FA13663B3B
93855501B9E12F3AD4F1820E1051285A9F435FD9C1572BC264C355C792A477A70FCE84813E23
FAB7A325C03229A257B30A055ACD0620AEE4DA877057BB3FF16A78028FD293B8A5507858BC11
9E83EA0D0CF842EBB9E4C48BB4480CD0EB448FD1925A88EF9F68AF1F868F9E477870A4A78DFC
5B299AD9D3966C21C202716B7A7D830E7200CDDE60C5810D574AB778C9D59459A432C117C78B
7A2E5F23C88308FDA04AB0A0FE01F2426BB7E508ECEF7E87603D51BFEB723ABBFEDD44EF9365
1C1B8AB35A306B96D92D1736AC62CE8D2C2C60E67583DBCF37953A7ED2F22FED2B3338A5B4AB
A0EB8282AE9BE5FB37780576D3BD2022C9D4EE4E8F5088816372A236A48534220B210BA346D7
667A8E22843937D77B770B1BEFA195DE3A41DE77CEBB2FABC5549032344A9B8373984843AC29
73BEC2CB18AD56D965CA2BC27081C1A88D5222CFEC5DB939B26BE8E78D6EA2DD75D58DF88EE0
847E9A9135D39160233AC728E73E2EF3A6C89D60722D69A90EB0095700A5CB404F9014D51A65
3F0605103DBE7068B70584531DF286F2BFA72CF6A8F002BDFEC2A411FE3837B11F2A01C0CCFF
0D009299F9B53BE568584B919096398E1B88938F94D1DAF5965E485FCF5CF682BD85818F1B8B
6D3B467B4EB10E8F2971D7E5E4EE3BD0B4B11F6EE7D720B1D69636ACCDA458C3C8EA663362A7
6650F38BD3EDECA408FB81388840887B60ECB1BF5F67AF16EEA563DBD2AA4288615D9C014BE6
C555FC5C2FD2EB877A4EE67B81859E96679330732A445C3C1A4FEF79318DCCFB5BC1BF5BBD53
A51EBD88D9A424F1AE14B38200844296C03651E109446FD75DA1D35B9D7713E91419194EE1E6
89844AC889D3B392243CFE12F129DB9C0FD0014848CD1A7109441B72E5C503FDC13A0541839C
B7B8573443145D6AFA1D2B110BB3C9A181A82275641CCF5FBE9A4C2EFA5959662F2B74586C82
6F7B39972928EF8E3AD74E7DF53E456A5B74DCFED01B39E4B4BA25D14B9C770A8DEA7145D338
603B25E8ABB72E85A1FA7E28307F9C3FF1CF333AA3644A5B764DB438A358EB5CA7ECAFFEADC4
53996CE17869F07F41D2E2A052FBE036239E548A1AEF946B0AD7A3DC7962E9DE93A55DF87CCC
E22208A98DCA6B2FDDC856F63B13317791EFA4070328D10E8119E6015C0A46D868C568029D68
9D40437BD2737F0B4D1042AE53973818F4A46B37119D18C1A54F43FC8F700B7534F806798169
31556D5EB3E24F51F3979BF43E9D336BD90411FE10E1A1B9DDC8B58FD232F35C240B495CD27C
BEC0F22560E5856E86EB13197CE095022003DAF7AFA837D86B96C4A3AF6C29D06AE252712B51
53B1ACCDF58AA1D32E78BEB442E3904835BEBBEE01803A9191ADF2A6A579FBAE5EC828B17F3A
C98BE2B9888AB8154455A3897913C30EA380226809F4076C72D81E8C02A59B6ACD1C97364CB0
F4F5B01AF8F567F73840F93B30A923A002370F6FEFCEE17B62A7F1F352FC3725FE9F4F4F011D
3075BD9297C94D81988C37DA6189F8D3AF00624922F1BD4D1B99D532488A3887E8F52153A95F
56759C9EA10B4941185AF057F3809E84704D5EADDC50AA1929768265D97C8EFECE1ABC7B3D1A
119DA997BD7BD6FBF08EAD3985566B3DE614A84A4FDB8D9077428AEE4AAF19092702499F2BE8
7DC21918301841F266975D134FA9E8A9344EC6D2E23B0E1E81305FD0DFC0971A250DD385EBDB
872110B585666CFA5621CB25DE4B332465CF1FCC2CC64AA3BE9D6372FAB5B31E1D402B12361D
D7242D20A87F11B28F2B1F0EF8F24F8D23DCE63870297B8CCF0C0CE5B1890A035BC3FFD7F833
031AB13636FF96E421D7823C8B6917FE7E594AFF9E1BBD16A11D991F033517D007156AEE9B89
7147998F4FA943D2255FF70F556B12EB8D7E438471C012A7A9FB702FC31D2BED3C1006A30AD9
71C708E5C971BEBC35D40C78FDE0EC2321FB3670265D106E24ACBBB449DED5F4DE5D170B1676
DF800358E882936BC24B279123B89F8988EBCBB6B44D4F0E06E0C611F9EC17AE9A1BA48E8FEE
F40BC359C40EFD821EA76BB8ECB02F4C596963F192A8E5AE7AE5917F7B0B457D0234F914B07C
C61420E11D092068AEE4A44D2424D5A9DB5074B57659E0A7599AF8D3F4E2785430825C108691
297C172659ED2869C0E23394E03DD550659018BC817D0409362AE35685B284D275DAC2626E29
877670188B868665B29DA3D5E37217CB421EB2880D78F379172886F80109608B8A3FE464355F
D86FAE057A8F6A68C2C3F884A7A62DFB74D20614A478B7D325CB89CD529772E27410CEF348DD
E18239D13FCF5BB30B5AFD02E71D7CCA9F0FF5A2EB7B88488558201F51F02C6F3FD7683290CD
A6035FFF4AA488537315649C9541186736AB7EF2727CB0793E5736CB0E6FB12213CAF845640A
15083BE4AFC34F9A22FFB953FF36654DC266E24B1604950E41B2BAFD6A8D0EFF82F1A89B6C0F
8AD52418A9A26DCA74E4BB4BCEF479735C17A657B63CDB9D4AFC434CD385A6ABA1D9ABC3F128
9748BD29DEFE7E45ADA40BF65F700A029AF59F2D6CEA188C1E9887C382FBC986B26179D241F6
E2881DB9C8F0C577735604671D53EBAE52FA47EEE9B74C390F186ECE2C962720F09FF261983F
8EBB312F17B4C08AB2DD4D3AB3C36846EBA599C6EA8A8F64D0CDE5A4E599534232D4484C7A46
FF7606E711C52E900EB668399BC7A30CA0F19A470078BA4D2858531A8A2AF2FB72172C242B25
4911AA4D6DB4D491C7330CC922B22594578D02628670CBFF2D4D0B029F90D4A912728CD4FC68
0DF3BAE8E905BC74D3FF36D1BC4F6A013F8ADE5DE35F0D22B89119E0356FD9F175094EA8C5A1
3A5CD7CA4B9A1948FF82FB471C38031AB513036C08E8DA771220358EFC7FEB26B4FE3F99E244
6F008DDDAE0DABE2732EEEC19A4917CF63D482D121708A416D7763B1ECB12666E936311EF376
625B65B59482C6059AF535BBD80F939FB21452B72828419B635A7CFBA0BED1A2F1F639F57274
4BE8E00B114203409742F65327537AD4B52E46D1285049D46E4D2E86B915C8B24E621732916B
9A487EA1DBE547F83FCD6BD5B77132380D8566B3333C9C15549AF57975BE4D33E360530594B7
7B07B10BBBC6F247A4EB65A8176C32F6751FBC26303655AF7DC43508F4525CBC18C73F6C7431
F0170EA6B39658510F537A6992C90F968C6D3BCB3E0269FE2206A763E715B7C9B5F483176AFE
2F545CD2B1AA662831146FEC8AB40475E6276D0AA4F3EDC8D8AA99076E7C55980D3729928052
AE4A0D1E5249F0FFBBD28B54D208B496C4AAB0A5192832D9513E8856281B771D26921230C0D6
5C0A84574BCC7531406B9E79F4F56627E692B5901D346A59EACB9328E96C6C02461D3B420BE4
B3BB7DA35E2AB0975D6021C11DE28A0814D38BE87904329DDDA53FC320BFA72B136AAFCCD7A5
AF2F64A7D364AF2AE27DAF5BE67EAB44F02BF350067A4191FA821322833EE156927F8CA078AE
9D16B0454805BDCB57053C03A3A5FBC8AB47A425ACE5DEA6EA0E2A34B9A1707B651EA9FB3A39
1C4DC0826A6ADDB97764ADB310287CDB83CC7A268FDC65A04418660A2E25A64FACAEFA106148
50DF597A1172061DCB6F39E53C77ABFCF5B12D85636E03D3F150D3DCDF1DDD84F5B7165C4454
E6F44B7D2E64E483DA6D3755F09DE3BA9EA41C38E37CA05894DB3FB1E9C1946E2D1B25FC183A
D7BF236B8E410C326CD34850BB6FD5200C0481B4A9E62836F8093892B2BC67CA2EBA62BA0F15
C5BB65CFD03A35F6629CD051A0CE3A78F7C5C16553C55C2F424E608512E5CE607521A567AB97
8C8BE962E869C7FBBF582FB801BEA242CCDC8E8C84B2CAB30C9EC78220E5928F945AAD997595
94A63B02C8CD99EA09D865F08275DE178123BF0D5B8BA2A3B1E5243BCF448EF3B882DF28F36B
415987EA7C06B719034FDCD115BE92FEDD09526DA14BDBD78C23B9B3740ECF878825B193B802
D0C36A059EF8D81FAA909E7EA951D0889A2D799A32720E93DE638040540BCE28F8E16F230968
E8EEDC30EE042A7980D53E14888301C77A4EB7152D760D7BC9D13B1FC39BC592DCE2C1010E05
0B6AECB896456D3C714353A1AA7D6F04172759E034534A9E9A07B7AD1D66F1EAFA7D212694AC
385A4E20F82BDDD1B66AEB6866CC942D5448C15517B5D107F6E7058360417139F77B8A668578
D7D61576CE8C44232F4BE41379DC28F3E7C180611D27124873BA90457D2A2F4BCA2A84ADCE08
9855938AA62E3776959EF719D97C09468584C4B138A16747C63FC06290FCFC59A2DA0E73BBF3
B444D90B6F7D4E050052EBB2577C2389311B6956E7D583BC378CAA3051BBBFA134F391EF55DD
752332473020E8B7A1849DFB64803E961EC4E396053482393684556289EF802D3865167BBC84
06A93F55E337F79050052D3E10ACA40E1FF68C475DB20A9A49776696ABAB21011DC3CB3E651C
F279200226E8407E6A3FB8053B9C1096FF3E6A7105E76A09505E8CE7EB8481B9A9BDD98926A7
7280CCE379A6EB0C4EE91B90E4EDC9A23921AB0CEF381D3E7F1A18ECD4CB46037C6296237A5B
079E62614C08847E5BB18D1EDFBB25CE3C1C4947C709D09B7A130B63C9CF093A62A974D5C3D8
C858F7D067042F76FDF0513D26463FA238D4D96A58FF898B31FCD014DA4989661E456D0DC620
4D65AE05B89158DDEA46E51FA1665EAD01715845B575E89BFE34C629755A109BFDEA871945A8
9E18D8CD452CBE93594D246FC0D31B50521BDD3BAF6D752949B907AF9505FDDBC937D2DB89BC
64E503EB71D1043B66DB13F11EDA59E03FB64DE3AA9B2E7FE668607A02BB54B7FD5E84C65B20
659D16841E09902A03A9C326D9D332C7622AF73787DC8B98909FBEE0AA73D43428D0674BE761
72E94E57917363351ADF9DF2E8256ECEA99558691DE9EE2775624F7675210E6FBB4A8C648F33
8AE65B478F4E94A2485B75187441ABF860D0EB31D657FFF520694F8E36E7F5052F2EC333CA7B
318374F74EC8FEAE6CFA920AA04094EE42F2E111E889F469FF848BF0D13548669FAA9333931D
8480E5159AB8F4110BEB98D24613DD4C1B0B3D078B799D00364027D24295242024EF4E323BF8
32D54EE33CDE826945FEA9F7FCB8D5EABD8E7BA3A623CF1E1987CFE1A2152688C1B9C097F18F
237DC2C3E0B10841CA7A26AF98D4A1300FC249347EDC2FE5158694E7884850A8DF7450273C84
AB9A10ED07E68443483B01A1181E791B10248AE0B893DD2CF901820F710EC8DA35F18D08C04B
F13841E77871B3A8AC3E75C5364A75CAFF0FC7B963169FC90A7D55F6661E7ACFA13D6D239885
E782499325F50E24CF795F501BB91422E09E0B1A6FC28EF7BB7439A52DFA48B04D2584466AA8
A5202915D70E93AC51B9B31454D2F2AFC421DC0F23FEBA2E54C11B58241B73D8D8D3728D6D9C
AD925CF425398273D7724FFD3E2581AD147DEEFD5DF7A3BF404A767A56D51E334DF0CB49817D
6042712F55C513DF1F40A052649B55BB50D09EACB2B49DC75C44EB6386D842CDF42037DA6959
3C0D72B0954E55F4E94E30043F9A644A8F10406AB77173EDA4C260EE96498C0E3AF61AC5B223
8FD73AB9F1685F13601D080267E514D666C8342AAD4C30F9E0FEF2255C2A4AE62802DC36C15F
3C41F2BC1281D44E3D77860FD18EA7D67D335BC11EAAEF15CAE8D1CCD26741D738EBA92F5BD3
C527B920CF883F7F4BD31711D7A467D4DDA775F811BB31AAE9311E4B0DAFE50A2EBF8301C2F2
A50840C8E61411FF8FEEA7D3E948CC0B796184C30A500CF5A198694566812BA6CC2B02CAA64A
038CD3112FAAE519EA9E6BA8CDA04592F5759F2962CA28743B2171B85A69DB0689154D69C5D9
6649B621ECAF2B2B6E4477C8707C1C32C2AD2CA8AD0CE598265907D3BA86D613ECC85A93B3ED
741F0BAB3D78E035EC3F0070D0C53D46E52C7FBB8DE776079E36D6512BA0F6863BFBD8DB3AF4
3F0456B00416321DD7464992940B8B7AD3BFC002A73D199BCDAA01EF0B37CD871036923C25F8
DFE5A756917875150ED2F442A6FA9D53651C715FEE87ABE09D097210A1BEEC3408B5CFF4365D
53D196FB2FB5723A479ED6FA7C7509C038E2F248447FE6E6619B329AE5D948777ACA0D756339
576960242F3EDC31CDBBDA235718A53E64FDB146EA3487C816992A733DFC1C43EBABC7A3D77E
635BD4E964DA2F540FD38A0D843AA6D9E4BD30F16E17491C3C7AE1F6CC4717015948CBC7B7B7
8D51DA7997A876A9AA18E3C4A09453B35B1961C8990857550F05583732192DB74F1A55BE0526
BAB47F6875EB7F9274F09829A5E21BCAA61FBE29234E52E803A92262DCE826D2A7A04B497565
5A39205DC80FB9C6C2845C5B3B98892AC2414C54D6DEC09C38CA648C51B24B6C22F5E73C5F9B
60C495DDCCFA5F9A1153A5A2381A74D99D1C0392C3A668D6281A623FFB8CCF2336F68A5E1BD3
9FD0FCA558DEE89FDF4CC7B65C324C1613C4A0777E0B99A24898298CF61BF898B1FE53E23794
A433C612ED800A77CE6DF76C6AAFC406AEE44767FA1B109FF5A39117BE5A3B8BFE784FF34EA8
EF65BA77940F3B7A662738CAA98E19714A96AC66F7E7AFA33C244BA06488B854CE55F5AA659F
646C3A15F5C082CB11B979DBCB780605ADF4332B246C6DDFC3F7A8FDAFC78380EDC0BF3B7B4B
8A843F78B49828811CCBBECD281B724EB6C146774A01513170165EE561C724B81DB0ECDA2404
6FAEC3124184E30EB1C3080F983818D04F287B2E44F68C5B84F4B4BFB861063661D2A89FAECF
49F30572136172CDE89F3585088FD3C12190CB7E2183B865AA60339892855B014B6F84BE699D
C1FD0558D5AABD02C1282D5E74E3BE31CBB4BE35256101FAF84CD4883FCE88329F095EEE8D46
CAF552537276E03BC886E2B45A6B080B7FF8B3EF1C3ADF7593B3E7123AB67F632B34AA129376
1B85704241D79B9EF7544393153622959B3EF1DA3911EDD2A2C1EAFE61DFF8153D2A5F06CD26
A70143A1F2C8571D6D35B20ACA92BA8EE5568F020B7867BFFB13B258A30D5C7BA5A73765AAD4
1166B4F0D889D0E0B91B3F1D8EA44F425EE974DAC37064BC195A7D02DB8BE32ECC8B3718B599
F3751DD224713C603F5DC2C78E802E491E0B0020BAF14A0396196219FFEE2C4DCC14E6E8D34D
38F7830A9B4535610825E91D4E08DA8A31C6CAEB161F183F8BFDA5EE4A7CF1A78C32141DD2A1
62379CA05C4D9D005779A4A175DE2CD14A0B49FEF14F9BEB98C8B967196135D8247931557872
E0ABE65042048EC380BC19359F705B96C3C45BA4469E923B754E08973A8DA02343C972315498
5CEA4524CCCC134699E8C9577E750C865F6CD7FED22EEEAC8E6B2B01A1B95F426FB051821632
E02698F44B97E60E43C04E5A3B1A8DAB994C148DD438C0166A3AFAF9964A8CED14C34D07FBFF
291183884E24B51BF050C394D591DA8E043FC358DD00221C3072DABDD75305A74BD92875BA8F
E54F599EC04EDA89A20B8FEA682232E566CA147FF5BA08B64816DFADC69CDD39452BA27C9EE2
1F8D974BBB2B8AEF87BEF53BB11D7DB870745FCD64647BBC60F538DEF1E2DAA92B672B23E150
D206249DB7BD73273F58AFD7E6543E819BE241D7C363283E19A9E54C349764A1DF2CB4847D73
80C35CF54C2ED12651D64CB6804DEE1C71176A008D6F6EF24CCB36C60746B9AFF719EBD587A2
E66F3252A0B79B48B09F6D23E0DB2078B77949AB861B041AD4FB8B2CCA6462AF42EFE2E8CF7E
178E59D3AE268135997FB721C703F7A9FAF9D4EEA0082C20F2EC900BC1DD30B3D129D6151A1E
FAF52E9379E6437CB3F5DC75F03A3B1BF457F29B8F58292036084B4E58B296DCE28CEE150998
3F399C24B7D065E74C51C8E54D07F6E8939D93B46170AC18E1E0AE2CFD954063007F00E6490C
05C139864F37C4D07F67DCC22ABBA07D2B3965D97B1AC483E65AC14043F71156B3CD9717BE1D
24DD1F642AF88361AADE33C89E1C3AA48FF9DA04C185A6F0E7E834B06100D5867C1133B8C462
A60C4291B98E69E7B0419561AD1A42ECB01A8E2FC09644F84367EE7E51359BC07C2195C40E21
0F66DD2E2CDB7C6AAE4AF98027EF3826E8BF93F10B1D5182BFC5E838EB95B7114A10B73FB4BD
6296EEE0DCF7193166C4E903BDFC2467222183BCBD4DB6A772AB10C1C8F9E20B08D15736DB16
4AEB29BCD29A1D59BE64C46338577460D04D043E406EAD24081198BA62D0EF6AD52246DB3CF4
8CFB6E2B70F43F3D5B68464E8F922BC11DBA3E2951A5F98F1BC1FD6B22A3CF2D179B933AAA63
2BE6EEBFD2BB965FC3ADDADBA49BD3603922E67B60DD1FE11E533FEA668B8AB3A73A58976975
F9017893033E88BFE3543B3FFAF4D9575D1458BF77AF4A7CAEE22CAFAF8ABCCD31ADCA0116F3
9D423EAE339EF19050428B5B835EF58D438A4A88695E4F2EAB2855ED05F408A2C8A574747C6D
7D11F3FFA46AB02170FBA0C38DF2C4BB28542DF2E553D519F45CD54167EB2BC52B5BCC38E54B
FB605B0A0D001DA0032EABCCF5C73F965CEB1C33CB820E00E50578B4C398C99AC5E71EDDA32A
7606599B9CE8DA0B440B4B71BCCE74004F6E4C52894B4BA16E9E47E00B4176D09DD75CEE0350
7BF43898FAA27D8BE506FBBB6CF9D7E225FEC783439F315221EF02A9CF54276A7CD1F6F8853E
A51876A91EE00FA11135DB5C3F6285C12857D345DB8EEEF81EE2F61FC14FCBED119737ADA169
7F584C0A5BF780913B5E5EDAA7356382EB77DED29B0A3B47B4D7A9B078EB32B82AC6824B84D6
D89BB055421C29685783B37DF7370075A7CBEAE339EDE8B43C7EDCCC956AE0E04D903A8286BA
0CF6DADDC9968C441230E2AD17174A8FCA2FF7791BEE9B88649686314F2C8136BE6CAA48E25B
56D50DE62BE38633E7039B5F00713A7288FB1B5A5094A99FCD54183F2ADD51FCB9365813EDBB
653AADC6AFBC475A695B12D28308049346549EC2602F42215A4F08E91864EE3AB5FF00A0FFB1
DB66AF760077126CB747E5DD8E6158DD902A2A265262562E6B5B09847BCF4C182EE4E90BDF4A
3DA1F725A203AF4EDA966E75718DA1D1C304941CF1E3347E36BAE78DD32843F92029516A51C3
CAB2C8E4D899F24CC4F45E50E132501A8AC50D92BE48B4DDEA54B7E21545942337785B1AC5AD
25C1A7C6ABD2A925F8593AE4AF9ADCEEF7555D6DC8ED79DA8B3DBFA39EAB384B0BB42A5A9F71
84C31A98911AC23FF30E3ED0DD58B0348BE7FB0E3F465343F05FF871E502EA6382017FB79277
56D5265C67ECBE9CB98B5C20D995F393E828273CE50D4C92F7CEE429B966D0A7BC4B57F9E5B6
CCBA051E34BDB6E3F2932ABF50111BCD5FA0D32E349496B4F3827E591E8725F8809FABAC9AE3
5B5B1BA79748C0C98295D61D4C83D040523A2BD4DE07002EE83BBEC2C6038C9F89977F06B610
1D5D8E9EB3F0F7EA4D2CAAC71B8AA0180F8E0B675AFDCF608EF92355B9B31AD1719B90C527B7
DD4F3E4ACBF3196DE1CD39ED0A06E8614A23C2B43B92DF172382ED02DAEED306AF67C7AD37F4
6DC1D9209F857C1C0BAB085D3691DC707985980899E410F8F33A56B3E45F7909927793862D6B
FCBC9DD9D40E3A4BD68728C54C5C63FAB65D9FF73817F1BB70DFD1F22241ABB7960AC01610EE
358B67C90990410AE8583C1E9D8C9A827E8A2C2793597F1200E0BFC141C261D5C43FB596931F
147A68B8421DBD6746BF32D58C044F2BF8082D717C1A196590AC9183BF07E7CA0747CDA6B2C9
EA7B5244FE456F939EF8F82589024E4B23F81612795BAB3F074576BABA4C73F63A166E93DD37
22F6142DE5ADB791982E52C6DC3AFA0FBF730D0504E857A5D9103CBF2A2DE364C443641FABF8
2BFE180DC51AB2EAF10A93E15380C99B608E77568EA2E5BA20F8CD41D7F989CE46D1FB6AEF8C
EEA02063948136064C240067661C1D1021B8660DD175EB9EB8CE9D634528E7333EAB1F0006AA
65246F03D4DC9D8D86659F856E81BBFD6ECA496E67022C3445FC11295A37090EEA3FBACFF051
4A6EF31050F30A24971F3EE2D1938CA86BD461845998652CAB1325EF273DFF53B0C44B5BA13A
51EB92495EEB28BF467883B09944F87AB5C2BC7C516019CE49F0DA012205E81F9678D39D4362
A63C153567EA9F287173CBBA03F98ED56C75FADA320F5F238B10998AB396A10D852E37A0CF50
76CF1F0E99AD15C1FE29DD10AD143E3C46B7F317956D13CF75C45C8AC35F6FC174E7584D10F7
903BF1801FE16ECE31111748EECCACD0FD054AC5AE8260A7287A9A48731420CA33531F351578
06A591ED7644DD90B57311CABC9E47F5CF19B55F618009F095C1ED38B13229A50404AFED1B63
137DF4833B8FA87968AFA64DFCA521257D523986FB6BDCE7DBC3CA1995281A5165B28545F638
A24A7891BEAEA40CDAB87CC3F6460CA1B1875BDF47C0122E6A5417B86A04F51CD6933F5E0AAD
D81F646FEEAB281F3D264E75593D03A9C03B183FA2E38484D831C3B1D3813864651B3374AAE3
8E530C3850EDD6EE45F09AA3A319FFFC32788F82C0D9A7C71B0F43BAA1A77B31FCCA8C3292A6
34817DB608761E96C0EC5F31CE1626BDEF2A912C9974942F808EF7D53E5E649725AF40EAB1F3
12F929CB329FE013906E986BD0F956559B147153D3E0FA3FA057B9DC113818E0863D071EC31D
A183A1B1C07A5091CDF22E53A6BA95E1D87981DCFD50E0F7DF2DB6F6E83E05BF41C7E4D17CDA
BA4A886D882A0A9A76E9427E4C7675ACEB7F3D9293C0C18192506D906255BD8AAE0E8B80ABBB
CAF6FBE733C7E389C52AF822C2C3CB82BD9B53D9BD926AE7E8C29EE4782EC841DAF2F40D3DF2
38FB1D3C099E52071D742C6774FAFAA4CE4CD481FBE9AEB58AA2F3BFD9E80B0CA0C6CDEB2BC7
85F586ED775025CA84E9EBA4ABA79FF34E93275D8D888557B0719C072E900C67996862FA3109
1263D4ADABAC7B50078FDD845C98B16CCE135CD701FB4499E7FA1108553FC0D113B7A5EFC258
5912EDA7D68DFAAF058E0134E0C276126535E4122A06289A1F2BCF7684DE89F4444E762D0F44
B2E19FD4F74C9EEB536AD6CE38E24C8737A4810C5B2611EA03A73CB17480F5F871510A093A01
A7489EBC57B20375CF8DB11D5D854BAD973599306FD9F843645336E35C8AD236E5990FC4457B
36400B2D2DC8B3E4FB0148382FEBD864A3CC897C967DF0D8198487B0FF5FF25C62C9C43D54A2
80E0F5FB77867A9F0FC23C1B6DA7E582345FB81BCBF9B512E0425128C50E6EF312A8E6C877A5
8E5CBAA425C2AA586D86012CE8C2864447A8AB9F46AA7229990082C52E2BF84F6107C0A4C687
8746243FC3CE6B09522B8BF06C4766E3E5A131F7EC96326694CA723FDA91973A49BBEACFDA2E
3989E4CA48F74FA8AE73A280E24022A766A8188850D08C9B8F78743E3E11D897BA3ED9AE6E7B
1059F5F6D36807069DE3A172205ACB8622177D41229F816AA50116E696DAEC917BFE2AA7B5E4
F32AC5721061D928AAD96A8CDC5150321200A36EF61EE82D771A25DB81CC1E71A7A1B8171886
1C9EB588C99CE789326F232B96EC72054DECA172564111B0143AD0836BD42173B4C4B04820AB
FA65D2FA0B77D0B073227FF5BF3711DFA823CD1AEDE119DFAC288CDD99C7F6A80088FC9BCC69
A9AD8775D8E58766D7083FA505C88E1829283ACF717E630EFC7A501D490D54594EA13E190588
9B7344400A1327F0C75198CBB939AF89E93305A033B65CA255CC4CCB27377A85462E2A4B65C7
EAA385233B6C4773D85DB846D5AB82F5C0B0A6BC9A3176974DA1A239D352B2E9B546128110D6
D643ED714BFA82C7851DA0C66320FA2739A423A2CE503CF0DDBC3F0660B7B8B2E3B7155327F9
59F77FFA144CFEA492E50B3F6D3278F33BF3EFE4C9F4901EDA676DD6D3B01ED3DD28DA965727
3595DFA14280609886A498027A9F169F87A0D9A5C800D6F3233BD47FB18CE16A0380557ADCAD
CAD9A8366A36C54E33B81B2F22C346EA4FD71727D4D8CFEADCD4083F057F3DC34BCC6D93D580
C91AB78F0C5015B3137A242BD7EE24E7BC218472C48C92D16687AE450F6BDAFB2A6417AB0E20
BDDBDDA07E8014F110551859FE25EFF5E84B30EA57234304225799769ED77AC5FFC65084720E
F3B6ECA720E09DA6375B2DCF24CB495241674A1B6B23EEDBC3233E304D783218C6BCA464E448
D6149948689776289CDDE7D915073948E0AAC04E4526CBD5915EEA88263630A679B7B7C794FC
6717FE4885A77785BEE4731C9B2CC8BF04D580043113BB9A69233406374B06937195813B9D03
419A6C75414047F672899FC68B1E62B12563C92B3DDFB3A8B0336EEE7556A1AF21AF371164DD
EA91BADFFCF660E8261E51F8C0DF4BBA1E8D6CAA1011BF919E85CFBA2A5E69E4893D2EC98325
99AB56484BD6CDABECF05EF40512DC42979C9357F5410E73D85B07CEA86674B380AECE9F3B36
D072CCE3D9586D8C0FF6524E3210EFE54E179DD9801E06B45990E9F2C8F18BBB78F0BFFC2F0B
9A0504F38B0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark



%%EndProcSet
%%BeginProcSet: 74afc74c.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmbxti10 cmff10 cmfi10 cmfib8 cmti10 cmti12 cmti7 cmti8cmti9 cmu10
%
/TeX74afc74cEncoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute /caron /breve
/macron /ring /cedilla /germandbls /ae /oe /oslash /AE /OE /Oslash
/suppress /exclam /quotedblright /numbersign /sterling /percent
/ampersand /quoteright /parenleft /parenright /asterisk /plus /comma
/hyphen /period /slash /zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /exclamdown /equal /questiondown /question
/at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /quotedblleft /bracketright /circumflex /dotaccent
/quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u
/v /w /x /y /z /endash /emdash /hungarumlaut /tilde /dieresis /suppress
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /space
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /.notdef
/.notdef /Omega /ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute
/caron /breve /macron /ring /cedilla /germandbls /ae /oe /oslash /AE
/OE /Oslash /suppress /dieresis /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: 0ef0afca.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmr5
%
/TeX0ef0afcaEncoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/arrowup /arrowdown /quotesingle /exclamdown /questiondown /dotlessi
/dotlessj /grave /acute /caron /breve /macron /ring /cedilla /germandbls
/ae /oe /oslash /AE /OE /Oslash /suppress /exclam /quotedblright
/numbersign /dollar /percent /ampersand /quoteright /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /quotedblleft
/bracketright /circumflex /dotaccent /quoteleft /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /endash /emdash
/hungarumlaut /tilde /dieresis /suppress /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /Gamma /Delta /Theta /Lambda
/Xi /Pi /Sigma /Upsilon /Phi /Psi /.notdef /.notdef /Omega /arrowup
/arrowdown /quotesingle /exclamdown /questiondown /dotlessi /dotlessj
/grave /acute /caron /breve /macron /ring /cedilla /germandbls /ae /oe
/oslash /AE /OE /Oslash /suppress /dieresis /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMR5
%!PS-AdobeFont-1.1: CMR5 1.00B
%%CreationDate: 1992 Feb 19 19:55:02
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR5) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR5 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-341 -250 1304 965}readonly def
/UniqueID 5000788 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA1F9B0FF4CFF25B8E64D0747A3
7CAD14E0DBA3E3CA95F10F24B7D5D75451845F1FB7221D7794A860756CFBB3E7
704A52A22448C34812C3DBEDD41892577AABA7D555E9298C1A0F7DA638078167
F56E29672683C51CF1C003764A8E7AD9D8ADE77B4983F56FE2D12723AAD8BF36
682CFBB71B1D12210144D39DD841A971F71DB82AC6CD815987CDCF29ABC3CC96
5EEBD5D661F452C6E0C74F9ED8D0C5B3755551A172E0FE31EA02344176E32666
14B6853A1C303A5E818C2E455A6CF8FC9A66DC6E279101D61C523BD9DB8EB82F
EAF4D7FDF6372383C0794C4568D079648689A199D4B65BA646CF95B7647E4BEC
83856C27A8EF177B3A686EDA6354FE9573E123C12EC4BA56A7E8BFB8F9B75147
9DD79A743968F36F7D0D479FA610F0816E6267E5CE327686A5485AB72201525C
FB3B7CA10E1BF26E44C24E1696CB089CB0055BD692C89B237CF269F77A31DC81
0F4B75C8400ABCFDCEC6443CD0E81871CD71AA3064ABDE882C4C52322C27FA8B
41C689F827FB0F8AAF8022CF3C1F41C0B45601190C1328831857CBF9B1E7D1AA
246117E56D6B7938488055F4E63E2A1C8D57C17D213729C68349FEC2C3466F41
171E00413D39DF1F67BC15912F30775AFDF7FB3312587E20A68CF77AD3906040
842D63C45E19278622DD228C18ABDD024DD9613CDC0B109095DB0ADC3A3C0CB5
AB597D490189EA81239E39202CBC7A829EB9B313A8F962F7879D374ADF529BD0
5533EF977142F647AD2F5975BA7E340419116099B19ACCCC37C55124CA6C6A2C
D961E1362D29A5F4C3393CEA88CA1D53F81296F71F35FC4E06FDBE4695C770BB
267169831247580CE6E26A1F4C19517DC691412D4818A1ED7CF5073D250FC250
008D9587EF62564FF302C0D4893BD9D77047EA9516CF9E4D602FB15CE3383E0E
90613E43709E4CF50611AA0AF6E7391F6DF4FE5C40F58E68D2AF28167A08935D
34B7452F9213264C6909EE7D51902E7A8AE8029EE2F2077051992E49233DB137
E8814313347CC3A1D4900299E3422A5B4821A3BCADE91F07746D2ACFED53E280
05836F4126B03497129AE61CE9BCC872CBF233BD94CAEDE087E36FF230E1C888
13DBF82ECC450633DB7E9C373CDDCB80C4349E9E2519C7C91235346D11A8E886
D16E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMTI10
%!PS-AdobeFont-1.1: CMTI10 1.00B
%%CreationDate: 1992 Feb 19 19:56:16
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMTI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-163 -250 1146 969}readonly def
/UniqueID 5000828 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E3948FFB0B4E70F212EC976D65099D84E0D37A7A771C3101D6AD26A0513378F
21EC3643079EECE0C9AB54B4772E5DCA82D0D4ACC7F42FB493AA04A3BF4A1BD6
06ECE186315DBE9CFDCB1A0303E8D3E83027CD3AFA8F0BD466A8E8CA0E7164CF
55B332FAD43482748DD4A1CB3F40CB1F5E67192B8216A0D8FE30F9F05BF016F5
B5CC130A4B0796EE065495422FBA55BEE9BFD99D04464D987AC4D237C208FA86
0B112E55CE7B3782A34BC22E3DE31755D9AFF19E490C8E43B85E17ECE87FA8B9
1485831624D24F37C39BF9972D74E6EC4784727AC00B9C4A3AD3DA1C22BD6961
7E0ADAF55422F22ACA5E4DCD4DF9FCD187A566B7FB661D0530454D0DD6C6C50A
7A3875C6CBF8EC7769F32A1F3F7FC1C072BADEC97794D4E90E0035282A170402
356E5A9CD9ABD80AC4342A5283E458A7269252F4541CBB6452B39ED54D336D0B
19928E9CD1AB26AD83EB209E2EC75011A2643813053B5DBB0246097C4821B5F2
C92554E9140BE35B2DBFCD98809A8EC9FC910FDE9E0D86457C70ACB056EBF90F
244DC0A5BBD455E15D6E3180311D52CF50B0BF7D0A7F64F3A1821E0AEDBC2E7B
AEB549FE1D51088C153799C6E089B5D5D65E1C4E2D2B430CDF1FFA23CCB25D95
592943209E846E55B4CB54F6658CBA3C0B29796D69D0435D5431ABECF3448C15
98CA2F36F3659E29AEB79355EC2ADF835CF0886C21B766B9DEBC3950B5B3B496
2E06D980A8C60305B273232D4604F12632FB4F1B2F9703952C823C098543AED1
CFB4ECF259A11985F0C944A57B5AFD853374FCF12305601200C2A393E2FC77FD
F78C2BED60AF8B7CDA6B5746055940D7754D9893E0ED980780A2597AD76B2BB9
9BBD0D2D6610EE36F5CCD0AF70BCA329E4D7455C944D180B7C5587927F33AB59
300A8A47F33787848E5209146786FB1BC70B35A5702762061C05F5E498E94A21
D76021CEE50E9E717136C674439F53ED886338E21EEBC8531AFDDF06210095FC
2A735F6083E06E38F6A779B07D20698C5E0CE9AC1DD7129A75B77C038EB0BAF3
B7B052BFB293605411EAB227FA8E6C6A79F4CD249A903A461173EC926D37C6A1
927E4F9B4C06FE165516AAEB797E3AABABA5E419CDCE1541DC22879B28270722
5340E5A1659178D577CD26B6242C18FCED1E6A85288CB5E94767090FCE4CE98C
0D8912CC63AFB5390AFC76F55014AE0EF39EE40EEE72365CAA273BC0B312D45E
E0675487B7F6EEF9A70F684D09A723D45734A4EC403F84B27BF3F0D8027F65A5
24448CF801BDD8B4E46D47B1BF46F2C3DA0BF5D6E915AD39A2A905D30EA18C11
DE16A0E3989B49188E8DA243CA227A3D727FE6D5E68C9EB701AF79943EC2008D
27A6033FD78BE06ADC1DC8041BB3865088C9EA5577C838F7507F1DFD4FA8FD83
7B34856DF6301CC18306FF39D7FFFFFF1A3E1F5E211BFB7ED3D2D1B60BB246AC
AE8091692414285BACFD9B132E55E8478E2979A661C31A344B0FF022DFFF1C3A
B9469DAC2AD20C2971B082ACED45E553D8770402D5B3177BC518FF5A90A6707C
03536171315436CE67EDA9F4CD609FAE3A619ABC6E83D8E08B1DFD0940171230
EBFBDAAE42537276A1CB5B4E58F3D0AAF1E9FD6069BA0533EFB3B7E67132DD55
8B19B358509363E3D158F275DBB43EE6BA2C38D99EF7A682E6B8646B1BD909DB
B618923A1B64D1E19DD7C00DCC67AFE5A5E4700A008590B2D222248AB3CF6F4D
AC94B22BA94A46D1A2EBFBCF5D27039EDCD1F8045B4254B188B00469530F82F2
CD09F3B9F2BE0C1BE4AD0757E52EC2D5771E6342AD5D95863D395B3F67040D8E
0A0FB5D27A1698256840BEAF9B9651BA37BFA6A27F91FC34FA8BB43249ABAD75
E709ACABE32CBD9D678B71AA688041E85D08E1ADCB99A199FE2962B14064BBF7
C648B80DBE03DE184A9969FC87E16BA3AD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY6
%!PS-AdobeFont-1.1: CMSY6 1.0
%%CreationDate: 1991 Aug 15 07:21:34
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY6 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-4 -948 1329 786}readonly def
/UniqueID 5000816 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
221A37D9A807DD01161779DDE7D5FC1B2109839E5B52DFB7605D7BA557CC35D6
49F6EB651B83771034BA0C39DB8D426A24543EF4529E2D939125B5157482688E
9045C2242F4AFA4C489D975C029177CD6497EACD181FF151A45F521A4C4043C2
1F3E76EF5B3291A941583E27DFC68B9211105827590393ABFB8AA4D1623D1761
6AC0DF1D3154B0277BE821712BE7B33385E7A4105E8F3370F981B8FE9E3CF3E0
007B8C9F2D934F24D591C330487DDF179CECEC5258C47E4B32538F948AB00673
F9D549C971B0822056B339600FC1E3A5E51844CC8A75B857F15E7276260ED115
C5FD550F53CE5583743B50B0F9B7C4F836DEF7499F439A6EBE9BF559D2EE0571
CE54AEC4721DCF5D2D062695FD884DD6C5E69AD4D7EDE06019AA63DBD7A415FE
A62C4BA084B29A6D5F00A85E00A9B4087867ADAB0AC160B1DCC24BCED3BE7BAE
8BF608F4D4C69D22B92A00B55CE87EC85E592FCC21B503F439CD2E8E215E38F9
33E27ADBDE5AC5F925D27C80188DCACA70C0E326DAB9EE31CAAFD5356518E25C
7CCA1DBFA1350351C915C4748BB1655B2C47F39FFD7EC38F48D52DF76F3EC2CF
139EBD840EEC65AA2A9B6B201D81D8A73B0E1CF21B1F3EE2A3820FABE3755443
BF4CCDEA0BC576A84EA0DEDF34FA8B4A35F9784EFC9474AD102741
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMEX10
%!PS-AdobeFont-1.1: CMEX10 1.00
%%CreationDate: 1992 Jul 23 21:22:48
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMEX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMEX10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /braceleftBigg put
readonly def
/FontBBox{-24 -2960 1454 772}readonly def
/UniqueID 5000774 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CAC6A7BEB5D02276E511FFAF2AE11910
DE076F24311D94D07CACC323F360887F1EA11BDDA7927FF3325986FDB0ABDFC8
8E4B40E7988921D551EC0867EBCA44C05657F0DC913E7B3004A5F3E1337B6987
FEBC45F989C8DC6DC0AD577E903F05D0D54208A0AE7F28C734F130C133B48422
BED48639A2B74E4C08F2E710E24A99F347E0F4394CE64EACB549576E89044E52
EABE595BC964156D9D8C2BAB0F49664E951D7C1A3D1789C47F03C7051A63D5E8
DF04FAAC47351E82CAE0794AA9692C6452688A74A7A6A7AD09B8A9783C235EC1
EA2156261B8FB331827145DE315B6EC1B3D8B67B3323F761EAF4C223BB214C4C
6B062D1B281F5041D068319F4911058376D8EFBA59884BA3318C5BC95684F281
E0591BC0D1B2A4592A137FF301610019B8AC46AE6E48BC091E888E4487688350
E9AD5074EE4848271CE4ACC38D8CBC8F3DB32813DDD5B341AF9A6601281ABA38
4A978B98483A63FCC458D0E3BCE6FD830E7E09B0DB987A6B63B74638FC9F21A5
8C68479E1A85225670D79CDDE5AC0B77F5A994CA700B5F0FF1F97FC63EFDE023
8135F04A9D20C31998B12AE06676C362141AAAA395CDEF0A49E0141D335965F2
FB4198499799CECCC8AA5D255264784CD30A3E8295888EFBC2060ADDD7BAC45A
EEEECDFF7A47A88E69D84C9E572616C1AC69A34B5F0D0DE8EE4EDF9F4ADE0387
680924D8D5B73EF04EAD7F45977CA8AD73D4DD45DE1966A3B8251C0386164C35
5880DD2609C80E96D1AB861C9259748E98F6711D4E241A269ED51FF328344664
3AF9F18DCE671611DB2F5D3EA77EE734D2BED623F973E6840B8DAD1E2C3C2666
DD4DD1C1C8384F906A7BAACDF441BB0AAEA2A697E453C9A10A119BBE236F5B3D
E6C27A9B608666E509C8F9B09DB3D41BDE7375D769F4C62F1CDAB748731734B1
06284A7C45142D0FE4E88F9584D88AD8ED3FEE113073589A471C3DEE38E16CAA
77CF129F6D9B781161AA1D888FF06C9188B9C6F0A4F98986C26D4DEDA2AFA61F
6F664EBDB011C6FE6AD2F2075C7A2A8FBAF29D58A293AF049F8718E212B55168
FCFD0930E6C4C7CC6B7C807DF99AC0BDE168E9F3DF08AC5C032F159F444CFA6D
67E568DB3C1748FB2EF61B2DC6E616597A8195BFD494F6458895406B4D208114
AF3CC231C2C44E194CAA5F54BD608FFA26B603DF675E83D485D03D4F8B579783
E65BEA1B95BCACAE3E7261C3A4729B611ADB6553FC8A8F01FD6BC09D56D7BEF0
41E9E20CBB4234035CA11D909E765A9368127350185F8698246E6B1700AE3D18
CCEC2F8BA4D05106619FC814218CD877612BFFCE37E85EFF6DCFE78AB2A45900
2E1345FDA0AC100EF081E1C9E7A867E580D9B7E75C103C230C35A5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI8
%!PS-AdobeFont-1.1: CMMI8 1.100
%%CreationDate: 1996 Jul 23 07:53:54
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI8 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-24 -250 1110 750}readonly def
/UniqueID 5087383 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D6A8F05B47AF95EF28A9C561DBDC98C47CF5
5250011D19E9366EB6FD153D3A100CAA6212E3D5D93990737F8D326D347B7EDC
4391C9DF440285B8FC159D0E98D4258FC57892DDF753642CD526A96ACEDA4120
788F22B1D09F149794E66DD1AC2C2B3BC6FEC59D626F427CD5AE9C54C7F78F62
C36F49B3C2E5E62AFB56DCEE87445A12A942C14AE618D1FE1B11A9CF9FAA1F32
617B598CE5058715EF3051E228F72F651040AD99A741F247C68007E68C84E9D1
D0BF99AA5D777D88A7D3CED2EA67F4AE61E8BC0495E7DA382E82DDB2B009DD63
532C74E3BE5EC555A014BCBB6AB31B8286D7712E0E926F8696830672B8214E9B
5D0740C16ADF0AFD47C4938F373575C6CA91E46D88DE24E682DEC44B57EA8AF8
4E57D45646073250D82C4B50CBBB0B369932618301F3D4186277103B53B3C9E6
DB42D6B30115F67B9D078220D5752644930643BDF9FACF684EBE13E39B65055E
B1BD054C324962025EC79E1D155936FE32D9F2224353F2A46C3558EF216F6BB2
A304BAF752BEEC36C4440B556AEFECF454BA7CBBA7537BCB10EBC21047333A89
8936419D857CD9F59EBA20B0A3D9BA4A0D3395336B4CDA4BA6451B6E4D1370FA
D9BDABB7F271BC1C6C48D9DF1E5A6FAE788F5609DE3C48D47A67097C547D9817
AD3A7CCE2B771843D69F860DA4059A71494281C0AD8D4BAB3F67BB6739723C04
AE05F9E35B2B2CB9C7874C114F57A185C8563C0DCCA93F8096384D71A2994748
A3C7C8B8AF54961A8838AD279441D9A5EB6C1FE26C98BD025F353124DA68A827
AE2AF8D25CA48031C242AA433EEEBB8ABA4B96821786C38BACB5F58C3D5DA011
85B385124F45E7F16EEDF0F899CF8026C4E42BBBCAA4BAD268398A722F7BDC1E
4D7DCB8D728CE06B4F8C39CA5D708D936E4FEBF97E0DD5D7BE33CAC09F7EC25B
BC47FA3B33E4A614B5DC031AD7288A220C6FD2D61FEB4B2D6B3A76CBD38833BB
517F6190370883D0C78B57035E1D6127E5D6D555BFD5BA7AAD9ECCAE87CA2FC4
6D883F5B57F182B4643447B3CB636C00D8385A364B8B6A0E75D02E042566DACE
E9A476347F378E97958EB941050F2126B2387018AAF6B6F775AA26AF5D132F1C
AE47B179AD56A36DC9AB8EF78451E3552CB82CCC5E2BC8B1C0182DF682276C8D
8EDF974DCF1865AABDAE88AD95446AF27B4A88B5807E95D23D180F82220FA579
09D93D5B5370FA5845D48BBE126E3723347304D36108F18568CA584011B558A2
F24ECF3C2A53BA5C3565A08DCF435ED2DD7DC2D14D14E6A1EB852C3D80A97773
AA580778CE95ACD6581BDC64E6B7FF3FDA400041CF4D883AF53F814898E2B913
214637B3730B573516B995A9D23C10D00AE4B2EE8083B0960FE715A26422C96C
98FE6A9C3687124A6F0600953A9B7540F1A751A721591A6C4B4308DA40C01E90
1938F672D9233B5DBBE0E5740AEF07EE9FFF151A872FEFAB220C7A3CAD519FB9
3D44263C2B19787123CE0F474E2476331F010305770C9970356FEB0DC2D029A1
070BE8C031E8A4B88E96645F8C29590B1A849FDF9FBBB7FEE69B6D100B1D5C7A
2B816BF917675292AF687286FAAD554075674FF08C231B5B25C1F728950B784D
D95A64E9EFC197F37607DFB32413C94F6969763BD397124D45E804587F2CD829
2C973BE760C70A1A09DABEAD062291AFB8315D0C6163E6808CBAA212A868E41F
71C285916464263EA9777829E9B0CA8D71DD4690D8CF3311B69811C3EFCC4A54
C2DAA54A67F7E4912BFEC5D807AF065F30492E08C8AB26DEFF59D506D5015B1B
76BE1C3A859EA4CCE75484574C71272B7168B6523C6B771C722C974A424F9F3F
1E1FEA7040C6A9A8481EF6CE70D367A033FD745221AB748723F8F9DB2777F3FD
1E3022F7949794192A8363B42105081DF4E05BF860E44A3AB8B31CF3A6FAE156
C550A08472799405168102A0B5A37B04A06FF0A7D850B5FD89ABE4A775BB1C97
23BCA3DD99860221FC675AB2F848B6D6CE47CCBC6490F1D35CF10B3E0AED9D2E
5DF5BB114DE0A090F38346CAAC670E101F7AB5E92C363147002C26D01C491297
524930A80871E9A1F148C71D590D6461C18D07635F0C88A5A556435E5F95F460
AC2E258E3DE38EC7E43693B72C2D97B3121A3F2AB7D1206279AE0DA1EF02D9B7
85E654C28EA51C956F1A4FCD97431C842190285B048FCC5411B066D8F8392EDA
74EBFCEE557DA2D7163AA0C6221359778A29F86ED86E5E7D44F31D4824B182AF
B5031AF8EAB07D235362E87E43721BFBEA6CA09E3C17F74D8EDF0E16BA767B6B
8D32A088772860CF816ED40EDB37FB055CEB12A4E1482BA72EFDB9DF0D1F385C
996BD524D49C29C9651F90955C384C8C9676A8488F9A6A4DF568285BA7E861CB
9FF70B557EB4BE708C361B3E05CFDBD7D7BD42D7FEFE468339F55DC7C102BA65
0E9CA19A320BA835E80D5C644FF79AD896637BF337DB708BB613DE287344B1C0
7B7712128DF80B50511E676BEAB0BE1C03119809AF910E5D503558BC4C2804DE
33BDDBA760B804D9C1501B621AB82BA58CAB0A77036DC0E753B44D922F0F199E
1C54A16D2B651266998A4F6655491EF7C96331969E822459D46D57ED9CB067AE
FAE96D10E5DE1CAC993EB1ABB8295CFE445EC466ED13719AA6B7594F6F6DFA92
D894EB6F38755688113AB08DF480B4F50B902042FE8B6AA0ECD12F249E36D022
96DB543C548E9DA3DDD30703E6AB6776E337FD6C87FA9D41C6C85EEEF15F9AFC
000BA9025B47FC47E64844A7669EBF7F6353BB8448208354378C99300A345194
C36CAFF82ADE520B9EB689B2BE2B457DCB981E2769921E0434F600DEFFE0599A
71630EE7993732CCD58FD85349FEC58B80A2390952607DDA75744F0C31D3F5C3
808A5C8EBE729CA3DD2373F88B45A076780E281090E566A8DEF35F582D3CD77E
52590A3D2F00FEADD53CCEA1FBEBE07A484A63E60669272DC72DB7B70A23F964
BF0DC57C73067C94D27879D861FE1BC0DE2EE48E4A76A5DFC94ED50060DB2E3A
B4A14CD74623E238F34FDB043039E3CD6AF2A8E3512BE481A9A6724B5F30E626
9805B01AB3D9069EDD5BA1D7919D8989AC7B20E71A229663D3099D214D89DCD3
5A32D5BF97A51929F8D3B47323C97AA0B165F37B8C975259D331849F8C10833D
CE79555213EF4A493D863753DEF71110760E469A1303F6E978A4CDB19F17047F
AB42B906757BDC6F26F1451D57BDE299FDA2122ABB5F373CC711E3886597194E
9CD9E836C3C32E42653D8C7C6731BF67D259FC1653C2348D4FC39E88BB504EE5
877BD463C5B8DD075B09A3B6725E0C10F722CA67CB42393C5F4FF47EC8C7CDF4
52D66955AAAFE0013A8F0AEB8B1BD8D5CC9D566B3FD6DEE663CF84F6EF87DD4B
64A4918A91288DB72383FC2DE06BA9C2EA5E12160744D45717D2F52631E9A832
042A306BA7244E469D259BB3CAC8C54BB9F4A95FBE1B9404F21DAD16A595A841
733EC398A384E38E5EA2585F37B20CD55519C066B00D034CA26542F6A728E26B
5465FC4F89BA3F40546FE00C2C4BA7E184581BD406FD1DB4F9263414334298ED
67EB204218FE898C6453167C157BE9A8A6660873EE45C58C9093C7862F23F56F
2AD125221A3C86181959E7A3BD999DD43F91E4D8DB5C0B630FD8137588E9A6FA
B802071122E3740CD3EC4E2EB28F3777BE55F75E29AA161FE4727FC27801BF68
B12FAB2C7461DF2014755F3CF9B985A31E7C9B4B24A425C8BA2CE7816DB64D57
3294271B597BDB65BECC412D134220E7B9DA02599AEB9EA8E1DDE0FC059CEEDB
DFF78A8D54C0E6F6AC3883CAC6A8B3474CCCEFEB6778F0CAE3938CABE1FD57C4
749D12E5C307C55737915EB1A4714DA14526D09A5BAB61F57618A3314446DC19
0CB709C64B9BDE637925FB00C8CDB4D301331AF610341FC4B423F7EE2B32A22D
4FD9CD16597DDBEFBDB459364266D7A37194AC081041F45C5038B093389742B5
7D0AAA24CAC3EFFEEDD71369908D889C71C5DEA4A6729ACA0D38DF313D1EF1C0
1DD6C3423A1041FFE918D3900329E179B1E5B7A910F3F8AD6EEEC3A96CC26BFF
10E84B1F5D8C9FCFE5A837C34160E7672B7AAB63E317C397AA9B9FCBACC86F2D
6A0FDF374D2873F5D8263C8946C537A5E9F29F618EAB994C9CBF6F8486BB4DE7
5B2CCC4C4D0F864CA6DDBEA16089A91654ADB6CCDC003979073AF0DB6EE6604D
BD48CA4088A29DA3A6B12463966444029D5EFEA94CF5776326C59A1565484F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
/UniqueID 5000793 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3901F92CC2EC9BC842
5EE578CF06846C7078E026DFCB18AD4D78023652F0165DE17C183E43752132BB
19F361414774D5C13AD718B01F47E61745009D823C3996FB208C3A9D4B4F116E
4D38E56725461BBA1FE17CDC27CD99AC7D748CF7750CA2C6E1EC5E4746AC85F5
E8274DA59750A144AD5AEBE6C9A7CE843BD6837FE2A88078124AA1A94EFC1C50
B811EAEB2679AD57294AB13E45AEEB8C6EA105696E341E4C14ECF573EEBB83E6
F9DE39BD6CC376158231CA2A83D91F721ABD116A40698F26610853E7FD075472
ED40CCE32031FCFAE2737B412807F7C9E6494D0B73B7AB13AFD20D5219A71562
12A7B57DD9965B15AFB38BEDA28D35D73282D4F1F9A15C4403B7C69C7E80DF54
C112D7813F7271A5474438A7CC380735F029CFDF4C0C30C3901A7E30F8B3B017
B1A663CC9481C79B903806F30AF37522828FD5DE3EC220C719B63A90FB3CE105
3D5E0F56440F1657C4D99760B010A26A6B8411D2FC60C28C4E885AD14A379244
841B408BEDC905276B7C9BE5BDFC5672B756BA24DB51A2A131B516923D5CC746
A42AAAD7ED66852D662539893749454A72279EDAAB4BC7804C34C04221558E90
4C662D40F2E16EACD389622F0C6AA2A6F0542C47F2DDAEB4FEC66994C8D8A157
C1B12092B41A555E83CDC6FE9A381EBE6BACE592F7322FD839E299B2BFD48916
13E637436423A1E45FC8AAE72C17639FA8DBEB72F0CF54388923B2B4779346EE
3F3E231496B16AE1658A3090E45A3A73782278A12A94631329CBA644CAA765A5
780BB4F3D29001C81617E5523E396372590710904BC63886DC1F8DFF7798A569
971FCF90EBCB613C772AA9D24CF8FC8377F426524D2E495A9EC54E792A0C419F
01F7982FDA4794F22FF2B385C5B76666B8DDC6CB9EF128968A6174D74E48A244
489A9BFE94B3EBD19C05D9827FF1CFA66CE787467EC0B0C1E808863783B65AB8
5CCE532BB6F78EE340660D6BDE81E8DB134DE42DBDBA294334AE9DCC7D3F6320
56C979418736A5354E6D20595B1F5BB31786299E8C703A3D7082C1F462033F39
295E832150080258423D8A3BCD52C10A0D5A4D0F2A355BEAED9B38E54F9D7792
B23C519CA603C9B380C44883201156E9EF3990DDF16D011EB96EB6C0FBA099C0
34A559449CFD8BD05B94EE7E68E18B6B97F5B55895D7F6E5BF1E63E3F7F746F2
C26E8F56CC09E0D7A7857DB0CF23846164E94F0F567156A3578A2B11E8CC963C
B5B1B596083CA260A34748277D4895FF837E134F15A0522D4EB92024F87F53D9
51BBBCC0451B10355C63F2A119DE8A2553CD1FCDA28937A022240157B0AA64D9
DA98B88B1248426FEA2F899B035DDF5BF6B1385921411C5655D58E2B8A385BC9
92FCD5A7C100FE3595801262C82AB9B31B81D4A055A31B620140447A850208FE
5C3626D3BADD3BB88D0A35A4512C4A4D9203858A89BE4D5EFC80A407DD265ED3
9F73D39BD02BEDB401341D9DEA34BEF5A876CAA93D5A30DACE5D0ECA3EBB0335
D95C16BDF15A17747837B75C4B188AE11BF64D86521D812A220D9A23BBD6CEAC
5ED72E1868EF18F27FCACDB99E156E44C7E831FED9914E0496E7B297A57603E8
2ED4CBEC346B5A0183768FA28CAAC84AF7EFC4C5ACE21DC503B6BB04A1DBB81B
DADCC978625072FF16A409C4689A22B9623C28411C034A5794A8CCAB9FBFD5DD
6D08537B6524C4B594F7BC385E6D5A48B5B5EE393C771F62B5F5E9FE6DF4A03E
F0BCA67B1B8D826D9DB0ACA9E610483FFD124EAD08D7364F1CCEB38DE4AF37BC
048610CBE5E77FD3693DB98B764DA922C0C29A7B0FC137C5E4B3BD9A307D1768
7FD7B62D0BD83ACA47C283F90285752EFA9544173B0F62461C19A471DFC029EB
7B8C6329155B1BD739520A5506B32E00FD1A1E3615173E4C735DA2977C5AFE7E
D24B574A6A5C33A42C903C57DEE6F832743C2ED1BF8141887E9A59C2E834D560
FD970338FC358F12259E7E4DEB804925BD09E5CDD07B7B1445AC055921BB08FE
8852B27231AF2EC6248CE11C9C8A7375ADA9FDB9DF0BF92F9E7F16AF5E2873BC
6A15F8A1A43325A22C2E7565895F365DD751EC6936E6090ADAAAAE69699417FE
091C29A3091B1C6CF18E2A8B8C2490BBA8F757D36640DB2D94B1AAEE2DBCA35F
C2CB5A235E3CBCDC08A7A3598FF2CD6A726655A6B35E1FD41A72B934833FCAE7
FC019A93045BD061C1622FA1D1210D06C3AED91AE49DED522979D650F2C6283D
1E1503E07A78C3D103588F1E31D51ED8A06EBA7A0847056C3502B30962F2B8BD
7375A31D98FB19644D02C5735D1D97F437DAEEEE1B74249924A13825D7BB07E1
278A985492BBCF302C44C2ADD330DFE5C5AFD73A2CC0DFA7E2BBC79800856C1E
D130D18979FD4669CB8748195ECA95FBFF436FBEC0DAB49F9CAC49E56E32A367
4C75E3CF6419D26D152D93463921EA4F706CA84AB716C1E08EADADDA71D0D6DA
AFCCF529EC22E7FA805CA4DCC52FD5BDF4587AB438DBD5F4EB7E59D8F9C78880
9585AC4E9518C96FB6FDE8FE74A65690D321288B4A00BF107A01C252124A8591
08802ACC2B504AC709E6937F3F5BDD20F1915790320A5058F32F9132567E6361
8E1BECD729D51C499D900270523B57B5E570A89BBF64F7C195853DB25FB687FE
6489B257B41EEFD4F9B021F1B19BBE272A9271E30FFAB971845ECDE59D8EDCFF
042CA15738966CB3290DE20FE255AD2EF3781CDE09B90CA0B5E04F56A280BCD3
4394717A599BCCD3ACBA86E797CA6613EE0843E8FE76B33CB6F6432CC2ACA728
CCC3B0908006A22F3102B3F0A855C550FE18CC319EBD3C18454E732AD4539515
0E6190E9384E23D10C1B7224BD1BECD7DC6C84DCAA6045C75C07D426C2CAF6A9
916CBB126E17787C0B24975077E21BD09D80947887045DFDF795B6A08E0F665F
E3E59875729CE4B49ECBEED5CDB81EF86E1963FBB3866A52F372CB9C89EF2F06
D235999D9249356B621DE8F8274A44FBE071CF475EEEF6A35792ED0A0544D49A
D6B5E06C0C89250C3967094D938470C1287C09DE7897552E8FAD3C2E7F4DAE1E
C8C5B66A2C993580C672C4D14ADEEA83ED9ADA6D3CBCCBD37369BCCB91912265
0630DBA96EF35336D9D0CAC99CB613BB5951C33647B59776D7FA50B1E9999785
6A1C3FA74B6C2CBA399A4199CFDD26F846C093FBE64DD4562AEC3707CFA36AC8
76E71A78C426BA4D3C89E35184BC3F58C8E431D104BD27824645CB6A19C75495
6045975C5C8EF590EC4594356B5A7952FBA029554BEC50733DEF52A04F78DC0A
2036A58BC41B869B8D7A8F000566972C0D0892B3647504BBACE05F29FAA0AB7E
7C4A924780A95E37D7F27C852CB7DC877334DB77D3A736C5BFAAA1CB13DE7494
0CD2A3ADF2942C634453686595F03AF0FEE6BA0A711C0ECAAFD2D2ADB8B6FF5C
CF2D0DFAC9C069FD6DB8C4F408960A60C3FB6DC8A4B181DB772C9196C10FFF47
CE20618A119D45D2F9B8543856D9FDA00D095709F92DF665681089FC5C250A97
E525945F16234C342FE41A87B7B1C1A2B4B19E87E5581BC1235008B4C4B2B4C1
6FE346EAB683DF0D81E0B8D870F9FF1AAC076E8FA273177499EEC8D6BE5AF8BB
CD16858E915211EB87D31281C0E673BBD1982CECF6320EE3E1C8A89301100893
6876384A650F31
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.1: CMSY10 1.0
%%CreationDate: 1991 Aug 15 07:20:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-29 -960 1116 775}readonly def
/UniqueID 5000820 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
221A37D9A807DD01161779DDE7D31FF2B87F97C73D63EECDDA4C49501773468A
27D1663E0B62F461F6E40A5D6676D1D12B51E641C1D4E8E2771864FC104F8CBF
5B78EC1D88228725F1C453A678F58A7E1B7BD7CA700717D288EB8DA1F57C4F09
0ABF1D42C5DDD0C384C7E22F8F8047BE1D4C1CC8E33368FB1AC82B4E96146730
DE3302B2E6B819CB6AE455B1AF3187FFE8071AA57EF8A6616B9CB7941D44EC7A
71A7BB3DF755178D7D2E4BB69859EFA4BBC30BD6BB1531133FD4D9438FF99F09
4ECC068A324D75B5F696B8688EEB2F17E5ED34CCD6D047A4E3806D000C199D7C
515DB70A8D4F6146FE068DC1E5DE8BC57036537C42A2CE49D6C4C9FF1C3908F6
707398A95DFBDD74738ECB713BB7D3092869DF8074F736C6E8F94B200E4C41BB
3838C1D4DC86A2DC2036E37B191CB7EBCD1124EFAEC6E9B59ADC2C4FA5D509D8
15D59F6019BA306075E41798B479263FE89D4893E8C207CF9E3F6E1ACFF89B39
6D18238F251154B10116204CF7FA5CB5D5C5069DABA9E6B339839C96C5C55801
072C78B325382E513485971FB9ECBE1A81D30AD550D7C53ADE620448929820AE
84C0A508539B1055965ED2F17159294CA5D75681FC9EBBD82B259E00FF6E78ED
2B931BA3007833E53A063DD4C7AC02195DE71887947606BECCE03D98CCB05C66
38A2A0365B9227423C581A5533D6368F532F45B8ABC7E640E6D11B13732BA6D8
54799D268FBE0FFCED284A385C31D0F51AC4920B91F7C876C4F7E8C4B629290A
A02DDFB7ACD2553AAB889C587CD05A0A56ED125A65C742B0BD1B2382F7D2CBC2
66269064FF0365B3C37F6CBC2AC2B7C81227BA87C2F7FBA2AF530310685BD7B4
04986C56524572B81D4F23F7AB4F44B999736E86765DE1FEE57AF2BAB56307D2
520A23BDDC4205584373BB55E9CA1705F6F7AB5B20DDAA42613A13593A79104B
394EF4C7DF5E905D1366256941ECCD784B73A450B3D0B92F9F857ACB9A85244D
882591FCCD0B577364A2F9DB9AAB6A5890239E61BBF5C537771F47E0E0B1B814
8B9D503A288743498A9CBE0533E452CC7B691371856E48E22B100968506EBB74
10DACF99246A8D4EEAA01AEA7CCADC9DBC7E2F2506CA15B372C7B52B2A422C42
3322A0C063FB5372917572DB565DF89A961ADA422D339561726DCF4E6E73A6F4
E66A665B5B589E5C5F5F71EE49C445F8FD55A6E8EE85EC72E129928E34E0D481
2455E05A313D06CDCEDDACF19A69E47A879D83C96EC3040E6336C034D02D5037
B36F4554543048029A78DC434D8746B877B08E197BAF12C0FB7F23FCD5718631
DFB782739021415AECF879C10C8F5AF3475E73D0E746BA7DC95B601CAC8F6E1A
080A7BDB2EF863FE51018A464D5AFA8EA67008E1B599058B280B6CB45B26265A
98D45722DA9D912DB6E9DB792C4603EFE5421887ABC47EA1F7372CC8E7F58055
F5F16D61E8DA5D95E1242BFBBB614E85513759E79E392334F4BBDB64187A0F8F
E5F7477FA979615ACB0C42B2FEAB77BA14EE3866F9F504E211AB1D7AA4A9C155
1C7AA82BEA2D9C234ADCBD8CE33265E6A66C3842BCE05DB423F6F5FAA983D3B3
90B497AE640580C05041911E02278FC1C5096C7A4C51120A335DD61F67D73511
CF7629FE1D1FE04758F184F55A0DC7CEFD45B599A82059E33611F51B0CD7E4DD
5CC26D8308E6CDC450D08E1D1CFBC79AA728D558332BF332D02856F3749613CC
37755FA84E3D7A5F8354FD0C85E0F12A8D329F1C5C62140E2DF792DF74703EDA
22268E6D26B1E6760CD8938E22C57FFEEF610003B58571FD90220EF383ED16B2
67ABE5A431110450428E9EACF42917C54B765A74826509D4802ED8BC524D485E
D7090B8EA57F9A09D2C58CE5A6D8735DE9D396BB342C1DED49F5F0FB582FFB55
E6E0FAFB37637A1DFC7F53BDF12CF2DAE10442AC780C41210D29A04F8CEFCA9F
A0EF37832EEA5C35DC368469E943C251F90BCE70067D74C210B60A174730C38C
C6AAE42725D27AB26876916FC093BB8F9618E36837B1C2CB613B4BCFD010080C
1B7ACF061C75742C2C9E002533F8C9C39E7C1BB84B0E09FAC58E908F745095F9
F57426ED04EB78EA6E80AA734844CF6A44D083608F5CA472B44441A3A8456E34
90C06C86AAD4BA058B40475AF2D0A8A9B4365E8C532EB05D331D78898E5448CF
718D51968140977D68DED520AB1E8AE4A0F6DEA4FE1F1564E70518C1F33A8F54
9F971BE9B2CD5BF94AAFDC7EBDB7CCFA77574658BB45DA6421F1A2E802E08671
45CB74C96B92244DA31C8707691696BCD57406CD7AF9501A7523B0446C3E383F
F70008143565C5B6FB96391C5BEBA44E71B8B88A43C1794FADED52D0E6E49DFF
A22F9EA8CF6FB2B11EAB4AE7E49D2C221C3E6507F05B60A9B95FD11F1DA1475D
E40767EE2C391B72DADE5DF08B94C4E45A8CC0FA602734DE2AFE39C0EABAAAA8
054B1509DBD5E2D0ABF7DCACDEC2C06F94FBFB3D49A44382DAC494AC94A4B424
614E2FD59F4FE45228D20354FB5D4B6F9A88584046D9E1661182E960AD6CFF6D
60E27FEE1EF62E30574AB93E8D3960DE1A41969F011A87D126CEE423EE861964
4AC8E34D4C7D615306F2267472FDF4562CA414BBBE9C0F4BC200F2401E710E70
5C3B72C32CD25D6FC28129211302DC1A679DE8E82BB4FCA5852A325C296B93B0
DC9049D7A0AA1D877AB2E03794A1259CCEAC62D351EB3DA4C1641442BB806233
CA5F706BA869136CCE49E61CD0300301A4F313495D89B5964D106B68F99768C4
03302FB9F0D1B65BFDD5780ABBE18C3DE1CFFCEC136D3F98C546D87F44A83523
411BB5A12890A99917226DB457514A084FF06EC25495001CC489CE5F7DB62FD3
193AB01B343270ADD2C3513E29AD6FD5DE9BFF855EF5B48C3E5589D5152C4288
785D83976E5FC738B1D9E3F179BFE9C3FB0732014882A122B6B45573BFA7C527
F617D41DC1F1A92D5F5828F8D587F84276C2DD9667A2D75B83052A5BDF34219F
2D2B85F1DFF0ADF1CCD815BDD54E24B60D9B92C35238C31AD7F800EA43E1A48D
D269F85C03ECF80E9787C94011435AE989EB29AA715F2A33DF04DE302519E6F0
74A6F36E64D20741AD90834C5BD030209AE02CEBF1118450AF4473E9B0485A1E
3327EC0A737B58106DCB389CD46A66311BC810E9768DB41BE03353D14B15FBA9
4E42FBDD8B7BCA29DB1A98B2AA8FAB48B9D67CBBE03E2B9A315B541A1595EEDC
ABE6CB07C11F77BE70BE7951288AFE9C8C117439ECFC915D65AAD2C85D070359
C6FAC613C3D5F5AFCD16C4929E6240E2A19F7FF50B1CAC7D29296551D4899C7B
20FF4C5F6EB55EA92B0653A6BFA7D7CBD9AA795B455AE0852431820E2F023586
7D4CC5950966B4F3008879E837B52FC36D8D123EFC4D0C307EDFFA66A670D34E
0FF5B59946343643D21A9185BE861040EB334126B935B32FDD11232A4A3EEDC5
CDFC8AFA77F5561C83418C859C23792CFE2C715FEC04D385E31DC39638956A13
4DC555D0A46E4F1C4DD48160F9F2E9EA894DC6B02BC6703089EC3692024CB963
04D42C193807F7CFF183499B4A0FD303B2575D1E0C916E3B04CB36FC25D7381C
0CD75BBC39E4CFC67DFDCDA3B57B29466F7E8779B9502604FB0BD236E5BC89AB
A9445400CAB1335AB6654A2FA9A16F3F31AD1D559555C9506BCAC3C121A628A8
0D57E972E9E9F3D1E52A837CC8978BDD49E038A4E4A1E79AE8CA59CA0971DC75
634D7612D5EB8A8D0943E162DDB732B6833E2B7E423E6DFF2DD079C927B67E04
EA80F3D54242F9CA6431EB623A4A9F02500972D07F100CD8217EDBBFADA31979
5E17D61923E73791F940A06FED47AFF3AA56EB39A5DFB41F9D1B403663593ED3
828C1C38A8FB6580833C24171CC174EC99977B75B5CEBA103C17F40E3D86FF05
58CD6C8B860BDA65D5457E67C350A3C017B28F34D917965BD29CC6EB4236E73E
5513113FA26FA418563817679F54237802428C8D40419509ABB9939A95C60AB9
C654DB0F087DABB725CA1C33B95DD7DD485227384F4C11D49E93F539D6A0B6AF
0960260A8BFA7BB31326C884CB94A6F442A9900D967E9BEC34053F1BC7F44703
80AAF507F6AAD2F81164E8459200EB25A13D37C951D2BD52C625D1981A08ACCF
9A10D3397BF23B956212745DD0058F374AC9BE984265B76B57B53323B230DDB8
A29FB13437747D9C00771C01F070A084A9EEC57A8F2CEAA96974A0495C6DCF4D
30C36333713C6E99146E0FDEED36FBD1292AB7A1DDE578874653A62A38A987F3
991BC423DE7A45C479632662C2DB9158627F9AD9C63A259FDC7242EC7CBC3CF0
35747795C683194BD0BB52A18FEEDAE3A957AAA4E41572D278877A406F773B16
DAAFBF3F5517138333581E61A0E4102E75ED59567A6A32F530FA886F7F44FF28
3F91009D2430700A50283EEDA8B7292EB7E68531222EA1E0AA37DD362516E940
253AEFC4F088E70C0BC64BA8551F3A9722D7789AC77E2ED725D939C05E518012
995BE7CE7D43302B28C5C0B3351C7FE9E23D956AFF3B9A4E7843FC4EBBC13F67
CA82C84A209B94F92AE1E6A54835FB710B5BF2871C2C9109AE9CBF16336D948A
08C63EF532074766382E9F9A9F119482A9E0D5B179AFDD7AF5A7409B4C7B6274
624318C36C91226B5CC98EB9C8C6E067B87B2186CF9E8BE67DD9AE66D7A7B78D
15556E9AF6D29E0D117DF998AC86766AC3B89D7AC4EF2B0DE449A572412D09B2
C2DBA923BF9DD4D5C309DF2E21359FE53EDF502B0AB53810DF2DCC265E3E483B
E37BF8E203FCD7265703DC2D1CB4B323F0F9111E9A090D7113F8005AC235AB69
19815712DC633CA579F8C0EE459F3273C8DE944BC951797088FE89DC1A793D4D
361599A3B9CE907CD225C301E4A23CCB69BF0BFFC583E7B804C31800C3946A08
79A310B7604FB3C37859072E312D1954030D693BDF087F18B45C29BDF7695C71
0B4E921253FB8C644C7A2229ACDD474C91E82E69B859C97333B6F2AC1303639E
90A7B2B7DCA20A8F4F418F0A8226162F3A6E35B4E4B1838A13E90B4C91B1A510
C3D216EAA308A07727040DFC4FB167440D63E946E877898189A57ED3B51AA356
48A17AF137D3CE6C4C4C7780C1A8DE61BA1EC27CDA71D7FC25A1B23E01607838
0D7AFCFB8C2ED6C24BDC8E15A1F96AE2DDB1DDF2C820750C309987498255421C
AD50D7B70C67974B33E9C52CFBA856926C20D15C62476358A1E63CB3B61D08CB
A6AD04360446B73222C7FFF6C5DD7FAB385250955AD127E7122E435974A0BE89
FC84F7D647E4EC7DD5286021EFC691661B85F7E7B0A2A41A2641FDB22B2FCA3D
15504CE71D04AF7643BAA53DCA68A96AA5B9E73EFDE3C3715EB4899A533AC106
67CD78AB00FCE084B06FD5B7C4E962938F30FEEB0703D1372ADD222DBCEF6EA3
3219BE84AC377B847DCC211E5C5041DE5E067B7E1528CF806183F05479053747
C721BA8495C61D93447D9B7DC1929CCD0552274E108B8CB216B6A68B1D3F1596
7B9E072C3E2DDAD7F1EDA8447113B722B087E968662F6243AB78897CBE9898A0
C0C946210AF2DEC19BB311EE1546BA7FC32DCC03F8FB4E9F1B6565C65831ED1E
1318CC9BFD896313F6F4F5DF5201E320895A3DD536312EBDA678DFD7B48BAB0F
BB18E14220502067667DA042164455C804A4D302761E5EDFD9271BA745553B0E
63A9F8FD8D0C7C84ACC042C586F9024723E9B632CC496B628972152CC6526DA9
F56D5781470200699ECBD8FD2DD89CDE462980533FD5DF2357A7EA806BADDA06
9CF310EC6FC648C83E2739DC611C5F8D09FC64DB9B04DD8D60C563EF8942DC8F
9466CF0AED4FC25C87C9C8154F0021ED854D769D5A8FDDDC5049BED48E5DEF1C
30DD216A063606BB0ED9DE10085E068D9CBD3941780C10277E05FA9E3C48814F
131FE43A60B533CE43FD03E7D0C6168D6B2ACA0D83430F0A6EF9038EAA3A8BAF
A8D833BEF18093437AA50ED12713A8F8EEA68842130E912F42EAC6A3462A2124
4A9126C3B6E6355AA31773A9CFDA57802B5EE9683795121828FA5F5201A2B2E1
484A532EAD32E62A7C451259D1BBC4BB9E4C81D7CE2411E57363C07EF882FB13
44DF60E375608B1841DB5E703702C8061F6A76DB2E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR8
%!PS-AdobeFont-1.1: CMR8 1.0
%%CreationDate: 1991 Aug 20 16:39:40
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR8 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-36 -250 1070 750}readonly def
/UniqueID 5000791 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF4E9D2405B169CD5365D6ECED5D768D66D6C
68618B8C482B341F8CA38E9BB9BAFCFAAD9C2F3FD033B62690986ED43D9C9361
3645B82392D5CAE11A7CB49D7E2E82DCD485CBA1772CE422BB1D7283AD675B65
48A7EA0069A883EC1DAA3E1F9ECE7586D6CF0A128CD557C7E5D7AA3EA97EBAD3
9619D1BFCF4A6D64768741EDEA0A5B0EFBBF347CDCBE2E03D756967A16B613DB
0FC45FA2A3312E0C46A5FD0466AB097C58FFEEC40601B8395E52775D0AFCD7DB
8AB317333110531E5C44A4CB4B5ACD571A1A60960B15E450948A5EEA14DD330F
EA209265DB8E1A1FC80DCD3860323FD26C113B041A88C88A21655878680A4466
FA10403D24BB97152A49B842C180E4D258C9D48F21D057782D90623116830BA3
9902B3C5F2F2DD01433B0D7099C07DBDE268D0FFED5169BCD03D48B2F058AD62
D8678C626DC7A3F352152C99BA963EF95F8AD11DB8B0D351210A17E4C2C55AD8
9EB64172935D3C20A398F3EEEEC31551966A7438EF3FEE422C6D4E05337620D5
ACC7B52BED984BFAAD36EF9D20748B05D07BE4414A63975125D272FAD83F76E6
10FFF8363014BE526D580873C5A42B70FA911EC7B86905F13AFE55EB0273F582
83158793B8CC296B8DE1DCCF1250FD57CB0E035C7EDA3B0092ED940D37A05493
2EC54E09B984FCA4AB7D2EA182BCF1263AA244B07EC0EA901C077A059F709F30
4384CB5FA748F2054FAD9A7A43D4EA427918BD414F766531136B60C3477C6632
BEFE3897B58C19276A301926C2AEF2756B367319772C9B201C49B4D935A8267B
041D6F1783B6AEA4DAC4F5B3507D7032AA640AAB12E343A4E9BDCF419C04A721
3888B25AF4E293AACED9A6BDC78E61DA1C424C6503CC1885F762BD779B0C3709
4DF9CB65F0648B72373A300B521D8280D79BA483342B304C7FCD0887A49D9CE1
192E8AE36AB004FFB7CE0A42F4EA48B04B505F2C0D88EB09CF93D6FFCDB7AD23
D03BF93916F6D7E71637553DC8AC311C856BE481C14947F7E6353B3171FDFEB9
652488E0592D5A181B538AF6A8C5BDFFA421891E6B7D8BFA7DAEE72A40ECB2E5
3F5EA53E698B4CE4CE31F1297A130E7D07082DD823B52053937F6144F6F5075D
332F58EFF0673E6D02D755E2D22E45F1C2EB496635F4B24F1A4BD2096444823E
4BEC968977DC961FF4EEBD4D67AF1C8AAEB9BF82BC107CC8219C0F30911BF4F7
955156820801C614148534DD89013FD4553CD0DDB7ADA5DAF370BAB76BA1B129
B9F75447DD85EC131928B2B89D21A6FBDA17F429A9329087164BF03347748E45
852E94E25547659B0DBB55144A06C17F7F5304A12DC78C74AB686F5ADDA3E65B
4FF617D1AE6A471FBE52CBD53074C1E3BEE2F96E65810976CF21765695CF3C75
42A3B1AA32E3B85EA3CEC04273CF138B7E4BF07B938D32ABEE2F357D217F4954
CE5F3AFCDCD4DCAA6BF9D3C732623B950491C9FA3EF64A33FEEBF136C02E2D9A
D3276B2CE1E5BF85E8F9C7CA1B6D62E7871BCE9ADDE08F9C51260A9D53229CA9
CC809602ABDBC2F7DF4DB6A35005A7F91A1BFFBEBC81509D67D3D553CDBEA049
04C18FBE7CB5FD0E7AB13B96DB0649F7A61836CDBFE8A2B1E5B8E4CF19D98D14
A6F58ADF7F6079F89617CE6971EEEFFD2A2BF946180E03C0136FB6A0224178F6
7F7A64FED6CD9AE154C741FF30B9D94CC4DC7BE1620CCEF08FFA74F25EB814E2
DB559400F7AD9F680444B512DDD872A627BE9567353B8C6480824F8DF2C08587
B36AB044823F6A9AFBA2DDE6B0DD3915472D0FBE291643D66150B804E8ED0292
0FA89D4D2688127DC9AE50F364DC4D75DD1D6EA89B24D585FD9C2F4021EB122C
141EEEA01FA77DFD58F45B6D9505F80A64165579F613FC77919E655FEA5D78CA
36ADCEE43395B48E775AFBCB3F2C49A03AAD6C8065C14A62FCE738B9FD491A50
8E510EC6B31FB1E36977C5A9AFA48C65CC92F0686CAFF6536B02D9CA07A588E6
50A0076F34DA16D059C9D3F39898BE3BB46916EAD67BF8A83336CC0083B50895
7D32446FB6D9A6BD45266755C4BFE691D1C4EF81A18FC89E40F8A0ADE94081B4
3B774915A39646C98FD681857D7195D73FAE82C5DD4F4AF44382A24B83668B3D
DB5217072EEE84A9C3FE9D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
/UniqueID 5087385 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
AFC0E2F840512D321166547B306C592B8A01E1FA2564B9A26DAC14256414E4C8
42616728D918C74D13C349F4186EC7B9708B86467425A6FDB3A396562F7EE4D8
40B43621744CF8A23A6E532649B66C2A0002DD04F8F39618E4F572819DD34837
B5A08E643FDCA1505AF6A1FA3DDFD1FA758013CAED8ACDDBBB334D664DFF5B53
95601766776C8140D977299D20DE733E7B5633E92E0E56490C3236B909A266E1
89CE3521561FC7BF8FA8A90EFB975052D6DB72E83981E55520CD74BF716B82E0
33CE2B3F41E043B81573B76059238999F26719D35AE225276284035FE69E3054
D9E086C9E6D314D07915B9FE8B33E44C0CD7FB10FFE427E1054E5EABC2DE41CE
E1AF4F4C13981C9B24DEEB686C1737F8B4C9A7E63D485BAF31628F596BF08546
5102CF08B3FDBA08797A736018BB951B1D2838D28DAC90F996782C42788A3A01
7AE2BC5AD36362B7BCE1903A55451C248E879823BE88BFC8DBBECC6417A24338
B59ECDEEF842B21C639335213B1168165321A29910AB3A0EEABAFA6D2FB1754A
9646F44D2A98E9AA914FBA6E1692A9EEC8B471C1B8316DA069C3A47CEBDF41AA
C201F27394E2826EECF2846B2CF1B8C3F25DC93AEF554FF96B09F089E461C3B5
4A3BA2CEE119B9248AB3BFF84FAB7008CA9676FAACBCC82717FFC2C271823A52
25B3BF9996523C5386152652486464264739AE7ED7E3006DC748BBADA8B03AEC
406E16BE58F7091E3129D6384C833229FFB4D49C70E37582BB779FC8E1D908E4
41CA311C3FDCB08E1F6111D5E4B49B997784540E28282C1CCEA85B0783A69BF3
606C5F083E322FC68C83D04D3090DF55F0A5B7C9C00837841C114AFCB6234A36
7BB5A12A9053880F64E26C0950ED5ADC203853B89CDF13C5B0240C8BBFC154C1
EFE41697C7D0C779D17F5C4A5490DA3EF014418447F69B1C7A314EE10B223963
B6DBF92CAC36E6C63FC36C0404B9DD8AC9BCFD07B70C0C5B00731D93C17F4531
EE2D54F25441915981D113979F2B572F2693CE669B1CA280771730D4F54246BF
BC3CC69F0737324B9FD2EA03ACC6A62874676547AB24FECA2C6D1B2B9309AA0D
7A917DE4FDD7410123BAC821452183BD47F613030EC69C8B3FC858C524D29A27
FFFB165D462588F407E4F535440A3AC91761B01F06544FCEF75A47E8670BD7FF
2A4ACE2722FA0992EEB4A09ABE1D96F8E29AA8CF7D3AEDA10F0E0D723202B2EC
8A7A497770281D50CC3B12B39784AB9A4052B1C047C669B2EEBFE9D011D1695F
C0934F799892BED79F3EE47E6A8A41A71FEF54F784F246C6124E7F9C832511B2
B2293BB824A24EDC7A76EB308F7D8088231C4AD34C8C9FF2D5950A71578AED9B
A3D14FE003D7E61C769E8FD9FD8149799D8E2533830EAAE100C8470CC7996EBC
0F8F1E120CF06EDA68C1B898A261381C474E125F64C99F8C543430EA45A1AF42
43E7996BF0627D0256CF69A98EFD54C588B3ACE95CF9A689713920E5F7A9239E
38AB9390D9C2551A64CE97F33465C66B97860E04C1EE752BF7E7ED63FBDED7A9
C26B684E8FAFF6157A829E235B7948C8E8BBB7E4B2CB40A464858FEA400F04AD
3A8A5E507C15346963D3658108C3722D4C0E03006FB5F0188B41C011B8730310
6619FF381CAE33E9C87E394ECFF1B3132A344A76D04C460165AC24B7872595E1
AD51A42884C3300760A41FC7728543DDD607D13DF97AB362280968F39345FA29
76BAF82B6A2B1DDF6D2F389DBF5ED0DD48CB3D1D2C5ABCD1CFE2D1DAAA8453F8
9A0D8D9E5C522E86C8AE91262CC4B189502DB8B47D720066BAB2DDAE888319A5
69F0A14010BA472DD7CF20F7777FDDA65FAD150A71EFF1C4F9A00A8F832D50C2
17C311DD1D8EF13298D6BBF882D829CCBDB9443C9491B01E885BD6DC26DD110E
BFE23E8897CC4EEF55B7D35EDFF01C7373E18488DD60BF2D8330F9FF1B9F3806
50F8F7D84B640685DD9C73C1F5F83C735EFCAB7F2D646B05912A9A2A707A4826
4C761F6ECC95FF06C2502605066DB2C2605930E59029B647C9D023147F418CA9
66ED466C20D41E1F52B6BB05B36DF617EF269DE2DE9207591AE4A9EEE3FBC017
F76F9CBD4049DB4960EC3AF0E649837B2400A5B981BCA1EACF6A8494C64BFCFB
E451D734B35AA63D644592CF64B081306B2E0886852DA3E98B27C77F35D99BA5
34BC1524C857A0ACF7B3F7E72B34B05EAB79AA6C586EAF0C992FBA7F6248CC84
49995308AF04BEA661E45D0FBF5307BD36068C710D29C3A4B536E738A4B99C2C
D0C7F4FCDB1B172AAE6E1444419DC5CFB6574A30C7FAA87E01FFADECC1530A1B
E51232F73EDAB35D7E629120A1999E7E4A1422C77B7A9165409E53AB10A07D66
F6371A6B050C5669ECFECAAA005A97183DB500874984B03A8B980CCDCE65BAA8
0D4BBA7C299F723BF01AD381253238DC2AE008CBC5AA25208B230832073FF641
F8D558E82CE6FA7A3D30DAA74DD5792E2B306253BF7A229F471652448A0086B0
F58A454746A6883D035F7CE98D1B06304E880FA36E34D15E9B655B52AE7C1472
F6E71B879E720F28BDCD08DF959BD7D74E468CD3158C9F681590DD5A050A5B23
60CF3E946067FAFBA4BF15F6DE080EB3C839266639BB61D305079FEE3B68256E
61A63485310E5432620D64B3BE51FEB9CA8973738F7E650AE51CBEC22C3B59F1
4273C44D83D12E01DF1DE0579CF759454A3AA0A5035C75CAB6A347BEFD319EA3
ECB9AEEE456DA449571D4D3AE705826074EF40244C78BD1722EE2B6198F98313
52ED3712BFEE511B63FCB352DB64281315CBAD394DBB1A9652146CAC2CC19B86
BEE0DC3216A1F4BF1190EE04A97265E047485AE5C30D633A30E3A44E36B912E9
A4F4E3416253808AEA6A981B31F6902DD426C2247B497D9B32F4CA616A8CA016
5B889BF9AD7823484C053B66CE734F112F1FFF0D01BB3B216FC4822F6179160D
4A7E1B7711C59ABEA70C139ACFB4EFB2C78CB16F23413735A0DD222DDD72DF1B
499BF3BC34C47807D8DF853023AE386F8D8AABE2724F189B3282ED1FF84F9EDE
B2D3D8F1BD90E96A9D58958B13401284A6DCCFAC2BE6836B2C6764A86B857291
D98AD4A9319E291741425AB62127BC9E75150D129E183A31A07DF422832F404B
EDEC78877E48E7C26BE9EC881F26ECE47E1592499010C68FE0AD339582169F93
5080010A859E7CE542A97EE646C2A31AE8037472FA536C3905D5C51360046C3C
C87ADD5D3C98CB1A14B1B47B8FB2539BDE852F9E81BBE3BB8888EC95FD73C9FC
192F1FEEF3D65F349FAC0E6BFB774D8A5932E4485113997A6CFA3F4B8C68E422
E31233877D10C525320C9E1BD189CF24D87EC7A50575E63ADCA7C9B9F8E03D6E
480D3E9A9FEABF4B1151492F4753E3688014B0E9B2947011FAAA56198CFF26E8
BD931B9C7BDD0A7D991821775534EAA3E9119385340C052943B9660D37F9EDA9
7BC842E38EC9F30E9E99608BB24C8A152A1484BB71114A034053F2B0AD43F795
E824C780B3830C920CFFBE5778BAF4883FC75A90AFAEA828C66B314B6A9BA309
B079358044F8C3DB67F3803599AC08CE7012ADC60853BC95E4540198D2DE4FA0
D90016ABA77E4C43271B466522805522F8C3B2CCA2197E6E08E680BC48228918
75906AAD6343EB076762FF73D8EC27337977D57D42BD1E6CBCB06C0D33E6CB9F
7E949406345A157A2925E843E0295BDB41F0F39201160373CD3821B9EEB08A64
1171121908413A6AAC90E7821CEFBE2EE26C0AB6D550A58FAD065EB487EC01AF
747AF059E9C06F10697E961793EF69C0FAE88E016A46E2B5A8D18FFD1CDD1D17
E261DB7C23E829F88B8DAF22904010B40FB2603B06BEB2EC4761B2F72B0F85AD
23703C27F3104143F5FF7183660B4D2B284E4B7421E5E8B3FFEC431476FB380D
9AF9745A4E47638243B16E157E6EE0F1E097D2995697877971B0EB0ABCF158E6
BC6F4A0CD415A08A4757F49558837735903AAC422D0A4E4304081B1315852BFA
A548ABF8DE9FD58D7DBD6BE031E464E052783623C10B90C0671BA0C8AC0DE4F6
FED81C3D7A5A073970780647F1B760261CF6FE12FD36E8C4026FEDC7E3FE6AD3
E20CDA621093FABDA16BA21AD4159F06B72D207FC4BEDEEF7D8D8C8A997DBAF2
912A55DD2559264BBAE009274A2A192FD184864E32AD21AD75B55FF09C4FD191
9A6852D5C8F4FBBD02FB28C0423D77764734E98BEF824D8CBAB4715CB06D5792
C6E08C4F83F047850D34F5F8E8416931289DF6004D1734EE67C81DF4E05A82F9
E1377227E66C5C4B8DE808D7483B3A7B7B7093647E6C038A529662C3378D34EE
306286A7D3A785701A780902B8EAF381A181551BB37254DD36F0F09FA772F9F6
48B8BC2C3E709FF3190995639ABECBFB21A9DF8158A6413A76648E6199EDB0AF
923DBF5C4AB82D5B76E6CB426A6AD0BF7B538CA0307A8DFD4B734442E8F77B24
3B967DF5E96684A7AB35F1FE2191E24B8D5491B136FF22AD3C504CC5D4530FED
B5F418B5C58FC9A473D166F36B86FE8113444BA3ECA16C0EE793EDC2D41DE1C7
59246B1EABDEC6B09AAA88C8870505986BD5AABD485CC97F5FA6A22452072F11
FCC1BC440C71994670BFBBD16A02E5812334BFD1D2E8838B5D725A1CA6435D45
6F44C91B120D15EA6518426E987B9C22A1B3CCDB8934C51EC1C0841A8699BC67
06E2F3F25B3F6B45428460AC5B616BEEA032F2FFFF0878B1EC13365F282569C8
1A90C87A34AAB6F58D4892FA505273B146F63A320D6106FE9A4EDA743030A840
C56A3CD294DE4BDEE276DEDDD2329EEAAF205B1A55B842C418C1C970B19827E7
0796679D6F566D1975DC6D4B484DD85FA6AE3069CBE8F2DE6EC260D56DB30B82
489157338EBE25CABABF64F999EABFBA657414A7C0CC0071A56216F95A17CAA2
33C7AF29468CB7A6DA9FFC4FDFBF1E74E333B204F35E93C05410D5BE1A9AE51B
12AEAB7B790F8F76021C7F07C078DE1D72047C3082DB057384B24F9D0764F306
2CBC7496684B5417DFDFF3C07F36AE9BD81C919F22AAFD4251363E00E263C9C7
60172BF2DAEE14886371EE01039A6C5308C95D50B440C3CCBB5A669039566F99
D44EB1E5CDD098DE6FFEC497F200C1E5BD14A6F19A7CEDD7FA44A78547B08E25
202EDFAE2EBD1037AFD5728CE0B0E2B2A2C6B789AB71642D43E3E1C91E643F1A
13962E82673D75EDD93FD4AA15FB663A6D6D2C312070C4BEBE5334D2F6E2E0AA
C9B113F6F0F881F8F0BEF4616724379075A4F33A76E3B07660A1A63006AC8E7B
85F1762DDC71F1557A6236240814D64CB8007407EF52A3E72C39D4E30B05FBCF
0F7ACBCC19FFEEF5555BB578C0E3D0CE332F47F34C9D59C0E4A68348DCFFDE77
81B0C84483D598B9CDA1762E98F5A4609F1045AAB721C5128B94A187CE026020
0EC881552341607C7D4D1A890B8956C6145285175001A20EA72154CEB5ECC0CF
4B7C1458852F479A11C5AB52309EA721ED8441D22729FC99F92628C8848AD468
C0317949F1AB8D77EB7707551D451E40014308A556AF0B476C844B841FF25F54
ADD575CE6CE20BBC6D7D42541DC85721A5D4977752FECA8E026FF8A2AE626DA5
9B2F452A8BB8104C748FC4919CAA7EABEC27AB15AB412D99E8A426DAD9157DF3
9C5502A4F461E417862DA665C2C8C7004EEDC8065DC72643BF8BD0FC34422472
F12C445260A2274F42C49AFEFB1ACA8C1967EBD5F3DDDE4828A9321D2AD8246A
929B050449E3F3F06DA0A1DACD8888755EFADAD2F315ACDF1151380F68CF56AB
5CD3DD635C5349758AE9A8D9B67EE6A42DE9FA739A484A0045072F0D466E5860
EBA60695660804FB88D27F58485EFA49CC76D4E8549FEB6B6A3FD70E8859A793
B5A787437AB81557CB7538289488B3BE2B128010581B761A428A1C06237B9D44
88633FE5725FE889AD534A27D57BD0841693AFFA10D2744BF39FED03D1632B0B
BB791BF3BDEDD42096B5A1477E58F9D9D049E383D6C10E2F469DEE8A80FF9D69
65BFDE8F008A4497CD1BF24B5B85B5C982980497DB8AC65A17A2279CD09DA413
69F69C6A53F1C79B75F2133F97BDF4A3FB325C505EC259C9F60AE614FE43BBDC
DB97334C4FA148C72C136C5036B27EA82BA3DC8529ED51F8E7D9FDB3FA6D3E3D
F91767AA1E022ACC6EE89F4858DA94E6ACEDBB620B2140B7350EC98678889F72
BF6919D38EC4C18EF2FDB59867CFECD6670DFA9A781F2AE076955CE798BA6C54
9B4FACCC9D971EF2B1732B64029F8FE294A0591B3E84A59964D46EF1D0D7EC56
4FBD931BD2F4747AB2D188F7363A06E5168F721C51D9AB8DACA1BF59E0B6128C
8DB22E3556747E381F79685F2057C7CB15852DABF9E5EE0B9706525A70DA3672
83235E11B97E2AEEB77973FAA0DECADBF391E3BC6908F3E10E18D3CC3CA4E8B9
51FCA074E446CF41839C49B78C25CC968E69ADDB17F336AB4EF2C66A43C0B734
1281E55117F3F36E3C8924D64B6DBBFADC5717092EC69D81E317AE75F26DF265
1F1AFA5A55E03BDAE8B331D2BC6A62CDE0F65518A3D0E815EC19B9F091CDC439
4B22CBA8317A309B34BC34306427BB7BE56EE6A71DC24F5B9A952A9174991D9D
473BC864DBE41C4175929E056BBE4C42784895A5DC68293D3925B0A39F6BC882
D103FCEF5A38291DCA51294A2010D49C111DA4DB81D1698449FC785EBB5D38A6
AF460084FC5097DE89753ADAAB90E90AC7E0F470F980248B0F9ACCBB99D8C66C
7FED29946EF03E0D100FFEE9357E46CDAC90312CC6AC6F93556DF5B846FAC389
68764499E9945E3CDD8AC8B88CFBDBB90B0058572DA7FD829305D824B0DD953E
73C449DCEC3C7D24B2886DE386976A73DAEFA44BFC8FE65DE372768EDB582803
92DD1B15D513A4E441276BEF42DE27FA684432474EAF2397BA27465BECEE3828
67B92A1F13EF7CB21D2ADEB5B4D4B05FD9C4F3F2149FAE0145F20D7AC5DA05C5
FA06888DB7FD2C1D8147E566D9F5279D4F72FCFFCDA1FCB86255EA04499128D8
10B26EADB918760917000B7EABA94DEB7CA3AA9EC89072AF016FBE2A1CED80F4
EFE728E229439110084D27DE24B0B2F0AACB94079B6533D8380D641CFE7888ED
6CB5C8A41DEFEE5C30310B09908936997F5747FC52A0D051C0A20B039FC008F9
822C85EAB799C3950F3B8DA9C77B4896E4BA8D501B2E19954CF1B1F691B9E278
D86DB6F7B152EFFF30BF29812DF9923C07822CA53E09DABE9FCD2D133B48874C
CAC3F4C56D136ABD8B11F2A8099AF46DA4E97E392D8426872947D16A2C3EDF90
6A96F8A5EB16A75287C178A31ABA8B558894D84C1BE938B354BB36DB59DA4E52
6499AA8A32E9CB03F665D97BF2841A58E86365284711142CE9EDDC4DBEAAA123
F7F877EFA22857AB6B07D038ACE957672F8EA9C51F83CCEE654F9F68E21A0614
08B77E87BA441ED8AA1D6E8AE2E596AAFB87A4D5AF1F615E5824084F33339956
DA645706C8373FA87772902E8F4E7D0B2C0A6DC1635653EC0CF6E27BB31DF4A4
2A976A2F998F1A79265C82D25B16CB9682414ABE86B558FA8742AE46AE218DF5
83CBEC04D60A23E7266768D4F00378419B3191DAA84C77BE4FFC511245545402
AEDF826962A22D630D1BBAD3EF0693C1E9C0400EC9464C0196998FB461D842FB
E74A75F31D973A068BD5A982BF9C085946A1652F718880D532035965B0AF1CD7
4BA61883A9D0BDC8A33DA40461A6124288EB9452991EC75DF5E4B41EF7868AC2
FF73735C6159A2F0E744953A7EC0235ECD34C4885F01975E416565A181D98320
D3FCFD72DBA29CC783812FDAE139D35DFEC3B009249D4BCD3D8799F45F0BAA65
4331E74184D99CA6DA47400CDDF6623B75751CF54B22CD059644CB1F477086FA
34EED180FDC6ABF11A2081DC539E96A15B31724BC5B9B7B190CA024EF2199A21
EB57546E158507070E84BDDE2C80561B31A266699CB04FC36534F58F22374400
73869DA6FD25322AE346B9E7C6385CAEF842F7E27EF1971CFB7C7C2DC4894E6A
A9966660A097E8A971772CA0781136D579F346F0E9A2A92D05D3F5927C6A1FD2
72D05B4A4A11AC1FB7B39F43D3867F584809BE9909C1D8B5E367FD568DDC5256
20C4EADAA31E59234A575BB36FAF7FA3FB97F620AC81311AE53C078EDEA6A07E
A2E999734A8DF4F9452D61A421DE165D78EBA811A78DE32DDC46D8D3E602C001
AB18AC312CB062CFDADDF0ABAB69D06D2821208E9CE710D6275AD09EAA291169
E72282EABFBD90CD5D22474E89D439ADB1B928A82F4C5E620649B47AE4FAECD7
F387676370A11852F56E7B32FD8C915EB094596D226CE813B0003CA9CD65AC24
CC2A3F2CCB74A253596D66E77DE97572E08A01AD164499C5FE00D72D18AC91BD
1919EC8756C473FD31B54EBA9BE45C985E8BF1E5538ECD7C5CBF4B7CFB9800B0
BE46C8FA571E734CA7FCB2B987B0D914CBC2360D7A4BBAAAC045A753D54A5A34
9943410A6E0358C172AB31E62C088DDF3F59F2051C1A3237B9EDE7461A3B9663
D724083F6C89E05A321793BBFE0231D09D16256968D8D7D96BB16451D63FF5D2
B73B9AEEF2BD94B1B574CBF08260E3DDD2159624B6669077AEA73684D60FC11D
2F86B970406BA1B1B6C6C25E46E1723DB1B81B2BDB887990D5CDD360853D0A5B
3B7FEC1440E2732245428CD1D171576362199BC7133AA9D444D4DA17B4F3196C
4A3C3A124F8D50E17E47279F79657CC083A0F297CC0002F6BDF3BA956738BCFB
FCF22BCC5DF7EA047B55DAD360CB4201717CF2760165ACF7E47C30F617D18E0F
08488464344A382FA9686A84D8307364F7B851A8127B1E4995056CD346BBC411
E359AF5EFD7F17AFC59A4DFF1F582685C8603D25AABEFFDACBD0AB6834086300
B8CDBA21F5CF7441C77FA6ABB0D78BDC365190726064CA856FB8EE026A8495F6
1E12959ED832471B8405EAB9A121B77893946C518B27436B07B376EEB821F2E4
8A4E1206148CE02C0543E50A6AE279865FC033601CD24EDCDCE918E1BA9B1584
453C98E27DA2A2729452A29869B2D913E7FB967EA9AF9247572824B1C58DDC6E
592EF069D020302716F51DBA057EF730C13F5CB99D998672C8B647D2D9C824E5
5FEA1BE32AE479B6960D6E8015067DCDA79D5CA824F3C72A60FE306BE1D5AC1F
76B9163E5EFB378C02808514BC95A3852C030AC704AB3E640CE55B40B662E141
2F773746FEAEDBD275E279CBA6971B8136BC2301C293CF3ABFE1D071457B16DF
7E58017162CE7ACF287025E2190C98DD3185B72DFD8862A4E76525A41B5F8FF6
DECC99BF751C1757712BA66EFF45D35B8A1BAEF8DCD844E2D648FFA2F433B3E1
9F7F1AE711895872AB667C9CE92AEC065BCADCD412CA994F3116E0C65E2D7622
4A781728FD9DF14BFBA6FCEC91C62098BCD53100FDADC3E90781FBE46C1EFCCB
707449FDFB0E17F962F115664DBC24045543F6D62B5FA583B871B79D58BC3A78
C4ABD5CF61AE84B9DF92FAF00AF99A05332DF29F42F1CB1EE26C427AD27F636F
9B7FD3B343FFB4BC655185CF3368B7D7DB8525A9844FEF06D4A5761CC1A6F087
AF45EE1DBC94936F23B6562E25FCF71D696DF01BE4B1A0CDD54FCEB8960C09C4
8DE0D4B6BC0ED3134D5FD9A5CA5CC140249EECC6CF101BAF059160BCE191B4BA
2269197A0E3DA99457ABF7BD034613F727C99628A27FC7702CEE9A8561625735
F639DB6375C05DE1292FD10766C6AD4021F32A2CE170FDF37E382E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY8
%!PS-AdobeFont-1.1: CMSY8 1.0
%%CreationDate: 1991 Aug 15 07:22:10
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY8 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-30 -955 1185 779}readonly def
/UniqueID 5000818 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
221A37D9A807DD01161779DDE7D5FC1B2109839E5B52DFBB2A7C1B5D8E7E8AA0
5B10EA43D6A8ED61AF5B23D49920D8F79DAB6A59062134D84AC0100187A6CD1F
80F5DDD9D222ACB1C23326A7656A635C4A241CCD32CBFDF8363206B8AA36E107
1477F5496111E055C7491002AFF272E46ECC46422F0380D093284870022523FB
DA1716CC4F2E2CCAD5F173FCBE6EDDB874AD255CD5E5C0F86214393FCB5F5C20
9C3C2BB5886E36FC3CCC21483C3AC193485A46E9D22BD7201894E4D45ADD9BF1
CC5CF6A5010B5654AC0BE0DA903DB563B13840BA3015F72E51E3BC80156388BA
F83C7D393392BCBC227771CDCB976E933025375FFCDD9E2FD073678A57A333F9
6BDA681912781873D34F1060DA2238B7AB834333319B517B60BDB4F18DE99AB8
B40846B3F6D0578519001B7B056AE25901CC201A6D84E792E3EF9A50BB295B13
35277ECB2CE2348EE3C64DDCD19A9BA2072C8E4659010CE82AEB0B35282E4CFE
154FF4C063CA92D0A232A76A5E66D6FB387AECCFA3022EE45643A55D599896EA
25514CCCB2F283349F0AF6B54D2B805EA6B53E91118889A285ABC89E3CCE03EC
774A46B3CDF069CE17510B2CE786087ED38DA92CF3613B15A8E8485CBE148A92
5E5B61E27DA6DA431325D50FF20418EE16FE0A87A5FE7282846251B6A1C8183E
5F70E8BE65A19B32085A06BAB2EC70D9B6EE66D14C86BF90BCA3CF4BE030EE94
6CC6CCDD171FAC898F7DBBD65FAC2C5D79C5E8704D98E14B5571ED51DA4DFD95
60B7F94834F11B2CB4947DB930A8B59D43A855F5ADA4A861DE5EFC628F784A05
F3F75CC695D223FE62F14842FC44B6F6CEF4424F1AC55A39C00F79F137CC8262
073092C7ABD91724243399D577D45A9DD669F3DFA6B782C852E1D5CBB4951FFE
A06523D7C315FF210E3C528E62C21AA055C380055D8B33DDD7F89D2A9C528BEE
D57A89A73B74A30A511B63DA0B40BBE0C16EF66A16139E61497CDDC01175232A
361051B06ADE9C090CEE9858B70DADF1C1A0E95081CA3A47276FA5190880C11F
F89281ED007DAFAAA1C653F9884008476083D7EA3161AB08808FE25236D7A8D7
C0F555F509695751C75931B46D919ED5304FE6BF6FA47CCC618B69B0A6B5D389
8D52D88125635EA5555BBCA59544BA48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (JAIR06_Downward.dvi)
@start /Fa 184[58 71[{ TeXBase1Encoding ReEncodeFont }1
74.7198 /Times-Bold rf /Fb 212[43 43[{
 TeX0ef0afcaEncoding ReEncodeFont }1 41.511 /CMR5 rf
/Fc 136[36 2[14 25 17 2[28 28 1[11 7[28 25 1[28 7[33
4[30 33 2[33 2[41 28 3[36 39 30 1[36 36 1[33 19[17 3[17
17 40[{ TeXBase1Encoding ReEncodeFont }25 49.8132 /Helvetica
rf /Fd 134[28 10[30 29[33 2[41 5[39 30 1[36 2[36 21[29
43[{ TeXBase1Encoding ReEncodeFont }9 49.8132 /Helvetica-Bold
rf /Fe 136[45 2[45 1[45 1[45 45 4[45 45 45 45 5[45 38[45
10[45 45 46[{ TeXBase1Encoding ReEncodeFont }13 74.7198
/Courier rf /Ff 170[43 37 4[43 43 1[37 2[20 3[37 1[40
1[43 65[{ TeXBase1Encoding ReEncodeFont }9 59.7758 /Times-Roman
rf /Fg 171[65 12[70 2[69 68[{ TeX74afc74cEncoding ReEncodeFont }3
90.9091 /CMTI10 rf /Fh 207[18 48[{ TeXbbad153fEncoding ReEncodeFont }1
49.8132 /CMSY6 rf /Fi 215[73 40[{}1 90.9091 /CMEX10 rf
/Fj 134[40 45 61 40 51 25 35 35 1[45 45 51 71 25 45 1[25
51 45 30 40 45 40 45 45 12[56 51 2[56 2[81 7[61 66 61
1[61 19[30 3[30 30 30 35[51 51 2[{ TeXBase1Encoding ReEncodeFont }37
90.9091 /Times-BoldItalic rf /Fk 137[34 3[32 3[43 2[37
29 24 2[34 1[36 36[35 3[20 23[42 35[{ TeXaae443f0Encoding ReEncodeFont }
11 66.4176 /CMMI8 rf /Fl 134[33 3[37 21 29 29 1[37 37
37 54 21 2[21 37 37 1[33 1[33 37 37 51[25 42[37 2[{
 TeXBase1Encoding ReEncodeFont }19 74.7198 /Times-Italic
rf /Fm 194[71 2[25 3[45 45 1[45 45 45 45 4[71 1[35 35
29[66 4[68 5[{ TeXf7b6d320Encoding ReEncodeFont }13 90.9091
/CMR10 rf /Fn 107[33 33 24[33 37 37 54 37 37 21 29 25
37 37 37 37 58 21 37 21 21 37 37 25 33 37 33 37 33 9[71
2[46 42 5[66 46 54 1[25 54 54 42 1[54 50 1[54 5[21 1[37
37 37 37 37 37 37 37 37 37 1[19 25 19 2[25 25 25 58 35[42
2[{ TeXBase1Encoding ReEncodeFont }60 74.7198 /Times-Roman
rf /Fo 145[45 3[25 35 35 45 45 6[61 61 2[61 4[56 2[55
3[72 10[70 2[73 1[71 71 2[45 61 2[0 0 3[61 91 15[91 2[71
11[71 2[45 12[71 25 71{ TeXbbad153fEncoding ReEncodeFont }29
90.9091 /CMSY10 rf /Fp 136[55 55 55 55 55 55 1[55 55
55 1[55 2[55 1[55 55 55 55 55 55 55 24[55 4[55 5[55 3[55
1[55 1[55 55 55 55 55 55 1[55 55 45[{ TeXBase1Encoding ReEncodeFont }31
90.9091 /Courier rf /Fq 104[81 28[35 40 40 61 40 45 25
35 35 45 45 45 45 66 25 40 1[25 45 45 25 40 45 40 45
45 9[76 56 66 51 45 56 1[56 1[61 76 51 1[40 30 1[66 56
56 66 61 1[56 1[45 4[30 45 45 45 45 45 45 45 45 45 45
1[23 30 23 2[30 30 30 35[45 45 2[{ TeXBase1Encoding ReEncodeFont }64
90.9091 /Times-Italic rf /Fr 166[53 53 69 53 53 44 40
49 1[40 53 53 65 44 53 1[24 53 53 40 44 53 49 49 53 65[{
 TeXBase1Encoding ReEncodeFont }23 72.7272 /Times-Roman
rf /Fs 204[35 35 35 35 4[55 43[{ TeXf7b6d320Encoding ReEncodeFont }5
66.4176 /CMR8 rf /Ft 134[45 52 65 44 52 33 43 41 1[46
44 55 1[27 47 1[31 52 1[45 42 47 39 39 48 17[69 7[71
58 67 75 65 69 68 4[71 25 25 22[54 9[52 25[{
 TeXaae443f0Encoding ReEncodeFont }34 90.9091 /CMMI10
rf /Fu 207[19 34[71 9[35 3[{ TeXbbad153fEncoding ReEncodeFont }3
66.4176 /CMSY8 rf /Fv 87[30 16[91 45 1[40 40 24[40 45
45 66 45 45 25 35 30 45 45 45 45 71 25 45 25 25 45 45
30 40 45 40 45 40 30 5[56 66 66 86 66 66 56 51 61 66
51 66 66 81 56 66 35 30 66 66 51 56 66 61 61 66 1[40
3[25 25 45 45 45 45 45 45 45 45 45 45 25 23 30 23 2[30
30 30 71 2[45 31[51 51 2[{ TeXBase1Encoding ReEncodeFont }82
90.9091 /Times-Roman rf /Fw 134[50 50 72 1[55 33 39 44
1[55 50 55 83 28 55 1[28 55 50 33 44 55 44 55 50 9[100
72 1[66 55 72 1[61 2[94 1[78 1[39 2[61 66 72 72 1[72
8[50 50 50 50 50 50 50 50 2[25 33 45[{ TeXBase1Encoding ReEncodeFont }
46 99.6264 /Times-Bold rf /Fx 87[28 46[37 37 55 37 42
23 32 32 1[42 42 42 60 23 37 1[23 42 42 23 37 42 37 42
42 11[60 8[46 55 1[28 1[60 51 4[51 7[42 1[42 1[42 2[42
42 42 2[28 21 41[42 2[{ TeXBase1Encoding ReEncodeFont }40
83.022 /Times-Italic rf /Fy 107[37 37 24[37 42 42 60
42 42 23 32 28 42 42 42 42 65 23 42 1[23 42 42 28 37
42 37 42 37 9[78 2[51 46 2[46 60 2[51 2[28 60 60 46 51
60 55 1[60 76 5[23 42 42 42 42 42 42 42 42 42 42 1[21
28 21 2[28 28 28 36[46 2[{ TeXBase1Encoding ReEncodeFont }60
83.022 /Times-Roman rf /Fz 105[45 28[45 45 66 45 51 30
35 40 1[51 45 51 76 25 51 1[25 51 45 30 40 51 40 51 45
7[66 2[66 66 61 51 66 1[56 71 66 86 61 71 1[35 71 71
56 61 66 66 61 66 7[45 45 45 45 45 45 45 45 45 2[23 30
1[52 7[45 32[51 2[{ TeXBase1Encoding ReEncodeFont }59
90.9091 /Times-Bold rf /FA 134[60 1[86 2[40 47 53 2[60
66 100 33 2[33 66 60 1[53 66 2[60 12[80 66 2[73 9[73
1[86 68[{ TeXBase1Encoding ReEncodeFont }20 119.552 /Times-Bold
rf /FB 105[33 31[33 33 18 26 22 1[33 33 33 52 18 2[18
33 33 22 29 33 29 33 29 7[48 1[63 1[48 41 37 44 2[48
48 59 41 48 26 22 48 48 37 41 48 1[44 48 5[18 1[33 33
33 33 33 33 33 33 33 33 18 17 4[22 22 37[37 2[{
 TeXBase1Encoding ReEncodeFont }56 66.4176 /Times-Roman
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
letter
%%EndPaperSize
 end
%%EndSetup
%%Page: 191 1
TeXDict begin 191 0 bop 150 -200 a FB(Journal)18 b(of)f(Arti\002cial)j
(Intelligence)h(Research)e(26)e(\(2006\))g(191\226246)1060
b(Submitted)18 b(01/05;)h(published)g(07/06)989 339 y
FA(The)30 b(F)m(ast)f(Do)o(wnward)i(Planning)h(System)150
612 y Fz(Malte)24 b(Helmert)1491 b FB(H)t(E)t(L)t(M)t(E)t(RT)t
Fy(@)t FB(I)t(N)t(F)t(O)t(R)t(M)t(A)m(T)t(I)t(K)t Fy(.)t
FB(U)t(N)t(I)t Fy(-)t FB(F)t(R)t(E)t(I)t(B)s(U)t(R)t(G)t
Fy(.)t FB(D)t(E)150 725 y Fx(Institut)20 b(f)436 726
y(\250)429 725 y(ur)h(Informatik)150 838 y(Albert-Ludwigs-Univer)o(sit)
1011 839 y(\250)1004 838 y(at)e(F)-5 b(r)m(eib)n(ur)m(g)150
950 y(Geor)m(g)o(es-K)518 951 y(\250)511 950 y(ohler)n(-Allee)o(,)19
b(Geb)1069 951 y(\250)1062 950 y(aude)f(052)150 1063
y(79110)g(F)-5 b(r)m(eib)n(ur)m(g)o(,)20 b(Germany)1765
1373 y Fw(Abstract)457 1515 y Fy(F)o(ast)i(Do)n(wnw)o(ard)e(is)j(a)f
(classical)g(planning)e(system)i(based)f(on)g(heuristic)g(search.)28
b(It)22 b(can)f(deal)h(with)f(gen-)316 1615 y(eral)d(deterministic)f
(planning)g(problems)f(encoded)h(in)h(the)g(propositional)e(fragment)g
(of)i(PDDL2.2,)f(including)316 1715 y(adv)n(anced)27
b(features)h(lik)o(e)h(ADL)g(conditions)e(and)h(ef)n(fects)h(and)f
(deri)n(v)o(ed)f(predicates)h(\(axioms\).)50 b(Lik)o(e)28
b(other)316 1814 y(well-kno)n(wn)21 b(planners)g(such)h(as)h(HSP)h(and)
e(FF)-7 b(,)23 b(F)o(ast)g(Do)n(wnw)o(ard)e(is)j(a)f(progression)d
(planner)m(,)h(searching)h(the)316 1914 y(space)17 b(of)f(w)o(orld)g
(states)h(of)g(a)g(planning)d(task)j(in)g(the)f(forw)o(ard)f
(direction.)23 b(Ho)n(we)n(v)o(er)m(,)15 b(unlik)o(e)h(other)f(PDDL)i
(plan-)316 2013 y(ning)25 b(systems,)i(F)o(ast)f(Do)n(wnw)o(ard)e(does)
i(not)f(use)h(the)f(propositional)f(PDDL)i(representation)d(of)i(a)h
(planning)316 2113 y(task)j(directly)-5 b(.)49 b(Instead,)30
b(the)f(input)e(is)j(\002rst)f(translated)f(into)h(an)f(alternati)n(v)o
(e)g(representation)e(called)j Fx(multi-)316 2213 y(valued)c(planning)e
(tasks)p Fy(,)28 b(which)d(mak)o(es)h(man)o(y)e(of)i(the)f(implicit)h
(constraints)f(of)h(a)g(propositional)d(planning)316
2312 y(task)i(e)o(xplicit.)39 b(Exploiting)23 b(this)i(alternati)n(v)o
(e)f(representation,)f(F)o(ast)j(Do)n(wnw)o(ard)d(uses)j(hierarchical)d
(decom-)316 2412 y(positions)f(of)h(planning)e(tasks)i(for)f(computing)
e(its)k(heuristic)e(function,)g(called)g(the)h Fx(causal)f(gr)o(aph)g
(heuristic)p Fy(,)316 2512 y(which)d(is)h(v)o(ery)e(dif)n(ferent)g
(from)g(traditional)g(HSP-lik)o(e)h(heuristics)h(based)e(on)h(ignoring)
e(ne)o(gati)n(v)o(e)h(interactions)316 2611 y(of)i(operators.)457
2724 y(In)28 b(this)g(article,)i(we)e(gi)n(v)o(e)f(a)h(full)g(account)e
(of)i(F)o(ast)g(Do)n(wnw)o(ard')-5 b(s)27 b(approach)f(to)i(solving)f
(multi-v)n(alued)316 2824 y(planning)e(tasks.)44 b(W)-7
b(e)28 b(e)o(xtend)d(our)h(earlier)g(discussion)g(of)g(the)g(causal)h
(graph)e(heuristic)h(to)h(tasks)g(in)m(v)n(olving)316
2924 y(axioms)22 b(and)g(conditional)e(ef)n(fects)i(and)g(present)g
(some)g(no)o(v)o(el)f(techniques)g(for)h(search)g(control)f(that)h(are)
h(used)316 3023 y(within)g(F)o(ast)g(Do)n(wnw)o(ard')-5
b(s)22 b(best-\002rst)h(search)f(algorithm:)29 b Fx(pr)m(eferr)m(ed)22
b(oper)o(ator)o(s)h Fy(transfer)e(the)i(idea)g(of)f(help-)316
3123 y(ful)i(actions)f(from)g(local)h(search)f(to)i(global)d
(best-\002rst)j(search,)f Fx(deferr)m(ed)f(e)o(valuation)f
Fy(of)i(heuristic)f(functions)316 3222 y(mitigates)e(the)h(ne)o(gati)n
(v)o(e)d(ef)n(fect)i(of)g(lar)o(ge)f(branching)f(f)o(actors)i(on)h
(search)f(performance,)d(and)j Fx(multi-heuristic)316
3322 y(best-\002r)o(st)26 b(sear)m(c)o(h)g Fy(combines)f(se)n(v)o(eral)
g(heuristic)h(e)n(v)n(aluation)e(functions)g(within)i(a)h(single)e
(search)h(algorithm)316 3422 y(in)21 b(an)g(orthogonal)d(w)o(ay)-5
b(.)27 b(W)-7 b(e)23 b(also)e(describe)f(ef)n(\002cient)h(data)f
(structures)h(for)f(f)o(ast)i(state)g(e)o(xpansion)d(\()p
Fx(successor)316 3521 y(g)o(ener)o(ator)o(s)h Fy(and)g
Fx(axiom)g(e)o(valuator)o(s)p Fy(\))g(and)g(present)g(a)h(ne)n(w)f
(non-heuristic)f(search)h(algorithm)f(called)h Fx(focused)316
3621 y(iter)o(ative-br)l(oadening)26 b(sear)m(c)o(h)p
Fy(,)31 b(which)d(utilizes)i(the)f(information)d(encoded)i(in)h(causal)
g(graphs)f(in)h(a)h(no)o(v)o(el)316 3721 y(w)o(ay)-5
b(.)457 3834 y(F)o(ast)24 b(Do)n(wnw)o(ard)e(has)h(pro)o(v)o(en)e
(remarkably)g(successful:)31 b(It)24 b(w)o(on)f(the)g
(\223classical\224)h(\(i.)13 b(e.,)24 b(propositional,)316
3933 y(non-optimising\))c(track)j(of)g(the)g(4th)h(International)d
(Planning)h(Competition)g(at)i(ICAPS)g(2004,)f(follo)n(wing)e(in)316
4033 y(the)27 b(footsteps)g(of)g(planners)g(such)g(as)h(FF)g(and)f
(LPG.)h(Our)f(e)o(xperiments)e(sho)n(w)j(that)f(it)h(also)g(performs)e
(v)o(ery)316 4133 y(well)f(on)e(the)h(benchmarks)e(of)i(the)g(earlier)g
(planning)e(competitions)h(and)g(pro)o(vide)f(some)i(insights)g(about)g
(the)316 4232 y(usefulness)c(of)g(the)g(ne)n(w)g(search)g
(enhancements.)150 4506 y Fw(1.)35 b(Intr)n(oduction)150
4693 y Fv(Consider)23 b(a)e(typical)i(transportation)j(planning)e
(task:)29 b(The)21 b(postal)i(service)g(must)e(deli)n(v)o(er)i(a)e
(number)h(of)g(parcels)150 4806 y(to)30 b(their)g(respecti)n(v)o(e)i
(destinations)h(using)e(its)e(v)o(ehicle)i(\003eet)f(of)f(cars)h(and)g
(trucks.)49 b(Let)29 b(us)g(assume)i(that)f(a)f(car)150
4918 y(serv)o(es)35 b(all)e(the)h(locations)i(of)e(one)g(city)-6
b(,)37 b(and)d(that)g(dif)n(ferent)i(cities)e(are)g(connected)i(via)e
(highw)o(ays)i(that)e(are)150 5031 y(serv)o(ed)23 b(by)g(trucks.)30
b(F)o(or)21 b(the)i(sak)o(e)g(of)f(simplicity)-6 b(,)24
b(let)f(us)f(further)i(assume)f(that)g(tra)n(v)o(elling)i(on)d(each)h
(se)o(gment)g(of)150 5144 y(road)g(or)f(highw)o(ay)i(incurs)f(the)g
(same)f(cost.)29 b(This)22 b(is)g(not)h(a)e(highly)j(realistic)h
(assumption,)f(b)n(ut)f(for)f(the)h(purposes)150 5257
y(of)i(e)o(xposition)i(it)e(will)f(do.)33 b(There)25
b(can)g(be)g(an)o(y)g(number)h(of)e(parcels,)j(posted)f(at)f(arbitrary)
i(locations)g(and)e(with)171 5504 y FB(c)150 5506 y Fu(\015)p
FB(2006)17 b(AI)g(Access)g(F)o(oundation.)23 b(All)18
b(rights)g(reserv)o(ed.)p eop end
%%Page: 192 2
TeXDict begin 192 1 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)775
1332 y @beginspecial 71 @llx 580 @lly 353 @urx 721 @ury
2820 @rwi @setspecial
%%BeginDocument: figures/initial-example.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.92b Copyright 2002 Radical Eye Software
%%Title: initial-example.dvi
%%BoundingBox: 71 580 353 721
%%DocumentFonts: CMMI10 CMR7
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o initial-example.eps initial-example.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2006.07.12:1710
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: aae443f0.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmmi10 cmmi12 cmmi5 cmmi6 cmmi7 cmmi8 cmmi9 cmmib10
%
/TeXaae443f0Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/alpha /beta /gamma /delta /epsilon1 /zeta /eta /theta /iota /kappa
/lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon /phi /chi /psi
/omega /epsilon /theta1 /pi1 /rho1 /sigma1 /phi1 /arrowlefttophalf
/arrowleftbothalf /arrowrighttophalf /arrowrightbothalf /arrowhookleft
/arrowhookright /triangleright /triangleleft /zerooldstyle /oneoldstyle
/twooldstyle /threeoldstyle /fouroldstyle /fiveoldstyle /sixoldstyle
/sevenoldstyle /eightoldstyle /nineoldstyle /period /comma /less /slash
/greater /star /partialdiff /A /B /C /D /E /F /G /H /I /J /K /L /M /N
/O /P /Q /R /S /T /U /V /W /X /Y /Z /flat /natural /sharp /slurbelow
/slurabove /lscript /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p
/q /r /s /t /u /v /w /x /y /z /dotlessi /dotlessj /weierstrass /vector
/tie /psi /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi
/.notdef /.notdef /Omega /alpha /beta /gamma /delta /epsilon1 /zeta /eta
/theta /iota /kappa /lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon
/phi /chi /psi /tie /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: f7b6d320.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmb10 cmbx10 cmbx12 cmbx5 cmbx6 cmbx7 cmbx8 cmbx9 cmbxsl10
%     cmdunh10 cmr10 cmr12 cmr17cmr6 cmr7 cmr8 cmr9 cmsl10 cmsl12 cmsl8
%     cmsl9 cmss10cmss12 cmss17 cmss8 cmss9 cmssbx10 cmssdc10 cmssi10
%     cmssi12 cmssi17 cmssi8cmssi9 cmssq8 cmssqi8 cmvtt10
%
/TeXf7b6d320Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute /caron /breve
/macron /ring /cedilla /germandbls /ae /oe /oslash /AE /OE /Oslash
/suppress /exclam /quotedblright /numbersign /dollar /percent /ampersand
/quoteright /parenleft /parenright /asterisk /plus /comma /hyphen
/period /slash /zero /one /two /three /four /five /six /seven /eight
/nine /colon /semicolon /exclamdown /equal /questiondown /question /at
/A /B /C /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X
/Y /Z /bracketleft /quotedblleft /bracketright /circumflex /dotaccent
/quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u
/v /w /x /y /z /endash /emdash /hungarumlaut /tilde /dieresis /suppress
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /space
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /.notdef
/.notdef /Omega /ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute
/caron /breve /macron /ring /cedilla /germandbls /ae /oe /oslash /AE
/OE /Oslash /suppress /dieresis /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMR7
%!PS-AdobeFont-1.1: CMR7 1.0
%%CreationDate: 1991 Aug 20 16:39:21
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-27 -250 1122 750}readonly def
/UniqueID 5000790 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CABB9FFC6CC3F1E9AE32F234EB60FE7D
E34995B1ACFF52428EA20C8ED4FD73E3935CEBD40E0EAD70C0887A451E1B1AC8
47AEDE4191CCDB8B61345FD070FD30C4F375D8418DDD454729A251B3F61DAE7C
8882384282FDD6102AE8EEFEDE6447576AFA181F27A48216A9CAD730561469E4
78B286F22328F2AE84EF183DE4119C402771A249AAC1FA5435690A28D1B47486
1060C8000D3FE1BF45133CF847A24B4F8464A63CEA01EC84AA22FD005E74847E
01426B6890951A7DD1F50A5F3285E1F958F11FC7F00EE26FEE7C63998EA1328B
C9841C57C80946D2C2FC81346249A664ECFB08A2CE075036CEA7359FCA1E90C0
F686C3BB27EEFA45D548F7BD074CE60E626A4F83C69FE93A5324133A78362F30
8E8DCC80DD0C49E137CDC9AC08BAE39282E26A7A4D8C159B95F227BDA2A281AF
A9DAEBF31F504380B20812A211CF9FEB112EC29A3FB3BD3E81809FC6293487A7
455EB3B879D2B4BD46942BB1243896264722CB59146C3F65BD59B96A74B12BB2
9A1354AF174932210C6E19FE584B1B14C00E746089CBB17E68845D7B3EA05105
EEE461E3697FCF835CBE6D46C75523478E766832751CF6D96EC338BDAD57D53B
52F5340FAC9FE0456AD13101824234B262AC0CABA43B62EBDA39795BAE6CFE97
563A50AAE1F195888739F2676086A9811E5C9A4A7E0BF34F3E25568930ADF80F
0BDDAC3B634AD4BA6A59720EA4749236CF0F79ABA4716C340F98517F6F06D9AB
7ED8F46FC1868B5F3D3678DF71AA772CF1F7DD222C6BF19D8EF0CFB7A76FC6D1
0AD323C176134907AB375F20CFCD667AB094E2C7CB2179C4283329C9E435E7A4
1E042AD0BAA059B3F862236180B34D3FCED833472577BACD472A4B067A46F8EE
2AFACDE591ADF7304939394F221B5B9B316BC47DC7772711A35B466E1790D4F5
C02C57DE57A0498128C6041CB7E702F4D8500433633B8358C438237BBA39C647
F659FACF75574B1AAD3FE61FB97D6C5D0B19E4AC762321891092E73D192C4816
2F14A6FFAA1B22AABB65E8F611F1E9AF66DF68DA1B2B64B4CA8870261F8663FA
28953254FA64F0AD6EFBFAB15830AF856A65835C803B70963595060F91F4079B
F8BF5396F04C070254AC5DCACB20C0B1FADD38825886322366927C97E3C5AA1B
EA858D5974EBC14D17D4ADDCB3C7EA74A8A2B75293747CFCE0B484713D631F95
43BD5A359229F1276D2F652078ADA5000D1E060CE5CDF2E57401E487F3C10975
09AACD27CEE8581EBADC25D0FC9CEA533B99DCEDC0F28E782F4FE22AE097CCF3
F73338DA748C535291B4E8AF84546FE4B910107B6FFC5439C5B966DE6C905D86
460A69D6031EC3F7261FCB6D932F722BC1F550574EBD6F676AC9770969657422
4C8212F9FC9A49C9F0E813A2ACD16D1131A73D3001E698C63F76FE6D6143D310
155256BE90530489736CF35CA2D7E4A1FAEAE2423ABB52E55DD7314097DF7C09
F39C3E3A29F9BAA3AEBA89CC3E7B134E79A2DA39D449D98FE4ADE1A0ACDA79C4
1E2C78CDCC5BDD192DAA27F17DC4368EBC54CC009802018E50519F69025DE7E8
FB61694AEA672E59D00F6BA0CA9509FB8DC6544CB92B70BA0AE393A43959C90E
8857B0DA53A8D26426CAE0DCF2F3033BAC62502E08447B09CC18B2525AB65EC2
C63074FF725168D115137ECDAB1EEB083711F647F757C9806056811466D59087
B93D6B71594046B3B60A7D5789D6B99FC14764428A251F0A54ED
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
/UniqueID 5087385 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
AFC0E2F840512D321166547B306C592B8A01E1FA2564B9A26DAC14256414E4C8
42616728D918C74D13C349F4186EC7B9708B86467425A6FDB3A396562F7EE4D8
40B43621744CF8A23A6E532649B66C2A0002DD04F8F39618E4F572819DD34837
B5A08E643FDCA1505AF6A1FA3DDFD1FA758013CAED8ACDDBBB334D664DFF5B53
95601766758D28AA39D6FF7952C9CF80458BACD8BE9F674B53519CFDA2413631
3ADFEE7362EC52FF8A95800347A90094BC939FDA0F0C9ACCEDA6F1F578C408CE
51DDFB242D4A0C2177090B97DEAF3660678346641EFEADEF1482CBA1B73B37D4
9D801DFBEB457E017CCC119E1700951E3C6CA6B34BE40C914ECA5F726763B453
74B1044538C16D013DB7A3F9E5D73CA5164E542F636FD677BBFEB60627B19E4D
280D03C5B6C1495E483313E6F92BD6343D014E96F5B5B64FF26F0D91CEE10322
0C9C106676E863109E322CE164DD45B01BE1E12C0820B2BE059591C093F3BE67
420A80DFB937C088F559C1077711CAD8BEA50429588CA17A3E32EC546E03C8C6
8377200684DC6CD56AF90DD5DA5FDA8E23D76A37CA5D84D1C7DEC87116A2A529
5BB8485A8DC1FE69CE397D3E7B6EAF83F103381B2972A58FB30679B507B039EF
E255C5FE2454B059490D0DFDAC15B589BE198AB9175D98C3F01B982D73E695C8
B35FA464BD88A7503EF3D80C13BA36A276B8E7CA67F42617D035D1933ECACEFA
5523516C1F563A35105DD4D887AA3FE14C7D1935BBECD47AE2C99F396CA37CC0
B0668096FE59774F25CC64DDD902D625A31DFEC1A5BA6E2EB1AEB92573C48D06
2D232C7E71ABEC0E593C0CF27CF240CBCD1AFFD173874BC572BE4371A0B88121
0F4D88F0F99911DEDB78318DE86644E5B727BB0A3D44D644AA9375FCAEE20711
CD6243F54C756AE5DEF0E795F89EB31F61A0E2B071135691FB59ED48E52EA00F
FE99D742D93CBA2D68CBB40B5E60531F1D13C0E424D0A8FAF4FA56B5C7E91954
38964DA11204F4704CC501EF7FAD90A01B5C94D3A39ADB360E3BB71B492B494A
8FF4376D9767966B9128EC7D5D31650041EA9E9723B5EC03D8393D4ACD0ACD5B
BD14AE6AB1418A75F4E0574357EA4ED4185180478C630A765254BE02001BA64E
17AAC8A8428ED22C8C6C300D5FC633C11F2F2077E96740A1A33C068AB9F873FF
E011721621A03524987F6F7422AF780737C7EFDB868AB2AAAEA099568B618562
29B44C4333CBED30F301215424206771B94973DB82D61F5F9DA4172535A32E0C
10A97BAAF0BC4C986C3D4BC811143C1DC53D4B74AF1168A5B76671ECD787ADE9
4BEF91BEF0554F4B0426E52FF07D15876D6643C1D2F18E9357CF8A00C5B1C5B8
6288B8CF40A56DBEB75C06358B9D114C7BEA5823321ADE835376E4FB17963D18
D93A66ABBFA85A4A70296F2525E5D004455E4C743CFE666267A30CB0DD28F60B
EC1070FDCCCA579BB664127A4F83B1EA6459FCC6D56B0A44C2E432471FF48509
CC519696771E91CC72B3CED19F26544D07796E800F75487DF85C6984F85A8B35
F0568CE272F79FEDC31B63C531BE625288655DA9BB4C78FA3333F5814087411A
46BF914248BD5E1C4DCB97C12A6BE95E168937D1E340DAF61EB6528ED9029E99
E99820CDD7CB9FB4CB489697C89C9528AF3365210E712D0879FA490024D93ADC
9D30791E3A6950DE43AEE077FF6D9FD6AF096CD90B8EEDD13CC1E4C4BB6D9031
39704B011A0DBDEB77FFD9058C086499959BB2154CB208C27E6B5DB0BBA91B52
024717EBBC2891CBF77446BD0E48ED32C3DDD3D178964D28AF84CA893B86AED2
E9560FB8F85DF3CEB50EE61110A35CC08372092DF7F699AA637B4273EE022943
EB1C54F66B563AF2A6226BC880E6E423AE56F39AD87A6F3AF2CA05512DDFC371
D66BCA22B5FEF2720E0E9D45873E9D8D1919D29A165DCFECEF0A3525030E633D
59200157D73520E3DDB5150501C18660BFD121504D1851369477F37E2EDE0F56
604C798031C9EB8320A4B5DF8ED6F5C403FCE40CA91581B69F73F82589C35882
B29139A74D5D3D34C3867AB741963E6342F04253420EEB3797974D40A9BDC209
EA5F88CE13595E4EB91DC8A349056FD9E8AB4B3C97F3C92676DC62D054D68676
796A7EE1630D168FBB4D50DB68C2AB60E2E78C62AF0844F8FE399FE41800E115
0F1726DA00BBCB89F6BA83F82E8FED8A746B212C9561FF067BD8D3EFF3D2B329
EFA090C5BAA904D5F3E43DFDC8BFAC328425F499F86AF6F8B3CB941480C2F735
4A503FB42D5338263EFC7AA98F7D022339FF1915AEFF36B9C719209C4C460A04
12FB1A909E170BF2B04699F0B669027707EB4AA87A33BBDC5DD0D4E0935B492B
C42128A7657055ABA274B41A650D9E6DA1EA6B05664B10A1C2704B20D056F0BF
DB6470244D4E70B6FADE4117ED2F36E8738FEB21582850F779765EC9BD1BFC22
3AE6F07E1EF48835487E54CDFCDA9030FA005C2FC762652D9FF16D05868B75E0
249BEE9E2BE6C6164CE200B95F2105D5C697BA4D1D3AE1764A720167492D870A
F1BD5D61BEB39DDBE5C07AEBD927B0E97ED31D1F1408AE7D361A41E950FB21BC
FD382E5213429C3C9E3DECEAFE9F8AD635C15840F44EADBD42D255D9EE809A55
5AF6444829950F4EA81BADE21C11896AA405B7501AC0564DDB7AC417F5AA0A3E
5F8FFE73D9C5A3B66917333203261A4272778AD3BEC7A6A766E3098710458F72
BD7F00F53FC81E6F358551455A4E2705EC878F99EAFB69865CA2A6B51FEE8CA7
6CC3BB4B98756008C903FDAC8FF11BA734C4704E15F6E3A7EAADB1950A8528CF
16FA8B2385F65588CF27D551BCD79AB80F645A6F59B7C6373945119C98AB0DA5
F55542E6B992B7618F8323E5169DFD5448CF75ED26BB9A44465F2E7BFF1CE4D1
7A675B6000101B307417419DC4D86242B70E05A74D999F0F829D5AD3DE6D367F
54B2B4E1B344BB8392852D4F7F077E3FC2F8B15AE5A6DEF7B2FA6192AB0F8427
73A9B2B29BA1AF63EE0DE4579428348ABC4112BBF8AA8D4514F84319437F555A
FBAC7F60BB257B94D76F85D195FB05AD57EE472ABBE046744331AA0C2DB4F01E
A028DFD8615A1BBE760CC3F6C8938FB64E9405BBD3EEED4D252916D6C26D564B
CB15F6348170E45E7857EE2292242EB968669EC6A97B99DF7098D49F67C5CC7E
028DE73F9C98ACFAFFB6C5D0010BCE5C02F8730C4AF5F3FF01A9631FCAE7A159
386AE8F0A67928CFD1AADE1EE3A471A73A97FAAD963C86956354B0052A9B0C09
00C1EADF302B4B933178FACACB41D36312886BD7C7F69905C03F845CD84BA193
D7B6C57B7E9CB720DE1B313EFE60C9B24EB5DB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (initial-example.dvi)
@start /Fa 204[33 33 33 49[{ TeXf7b6d320Encoding ReEncodeFont }3
58.1154 /CMR7 rf /Fb 139[30 3[42 12[36 27[65 53 61 69
59 63 62 65[{ TeXaae443f0Encoding ReEncodeFont }10 83.022
/CMMI10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 1157 a
 tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 1157 a 0 1157 2336 1158
v 2336 1157 a
 currentpoint grestore moveto
 2336 1157 a 94 1039 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 56.90549 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 94 1039 a
 tx@Dict begin tx@NodeDict begin {0.0 56.90549 14.22636 } false /N@A
11 {InitCnode } NewNode end end
 94 1039 a 94 1039 a
 tx@Dict begin { 0.0 56.90549 } PutCoor PutBegin  end
 94 1039 a
63 1068 a Fb(A)94 1039 y
 tx@Dict begin PutEnd  end
 94 1039 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  56.90549 113.81097 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 94 1039 a
 tx@Dict begin tx@NodeDict begin {56.90549 113.81097 14.22636 } false
/N@B 11 {InitCnode } NewNode end end
 94 1039 a 94 1039 a
 tx@Dict begin { 56.90549 113.81097 } PutCoor PutBegin  end
 94 1039 a
60 1068 a Fb(B)94 1039 y
 tx@Dict begin PutEnd  end
 94 1039 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  56.90549 0.0 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 94 1039 a
 tx@Dict begin tx@NodeDict begin {56.90549 0.0 14.22636 } false /N@C
11 {InitCnode } NewNode end end
 94 1039 a 94 1039 a
 tx@Dict begin { 56.90549 0.0 } PutCoor PutBegin  end
 94 1039 a
61 1068 a Fb(C)94 1039 y
 tx@Dict begin PutEnd  end
 94 1039 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  56.90549 56.90549 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 94 1039 a
 tx@Dict begin tx@NodeDict begin {56.90549 56.90549 14.22636 } false
/N@D 11 {InitCnode } NewNode end end
 94 1039 a 94 1039 a
 tx@Dict begin { 56.90549 56.90549 } PutCoor PutBegin  end
 94 1039 a
58 1068 a Fb(D)94 1039 y
 tx@Dict begin PutEnd  end
 94 1039 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  199.1692 56.90549 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 94 1039 a
 tx@Dict begin tx@NodeDict begin {199.1692 56.90549 14.22636 } false
/N@E 11 {InitCnode } NewNode end end
 94 1039 a 94 1039 a
 tx@Dict begin { 199.1692 56.90549 } PutCoor PutBegin  end
 94 1039 a
61 1068 a Fb(E)94 1039 y
 tx@Dict begin PutEnd  end
 94 1039 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  256.07469 106.18549
14.22636 .5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end


@endspecial 94 1039 a
 tx@Dict begin tx@NodeDict begin {256.07469 106.18549 14.22636 } false
/N@F 11 {InitCnode } NewNode end end
 94 1039 a 94 1039 a
 tx@Dict begin { 256.07469 106.18549 } PutCoor PutBegin  end
 94 1039 a
62 1068 a Fb(F)94 1039 y
 tx@Dict begin PutEnd  end
 94 1039 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  256.07469 7.62547 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 94 1039 a
 tx@Dict begin tx@NodeDict begin {256.07469 7.62547 14.22636 } false
/N@G 11 {InitCnode } NewNode end end
 94 1039 a 94 1039 a
 tx@Dict begin { 256.07469 7.62547 } PutCoor PutBegin  end
 94 1039 a
61 1068 a Fb(G)94 1039 y
 tx@Dict begin PutEnd  end
 94 1039 a 94 1039 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@A /N@D InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 94 1039
a 94 1039 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@B /N@D InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 94 1039 a 94 1039 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@C /N@D InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 94 1039 a 94 1039 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@E /N@F InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 94
1039 a 94 1039 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@F /N@G InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 94 1039 a 94 1039 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@G /N@E InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 94 1039 a 94 1039
a
 tx@Dict begin gsave STV newpath 3.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@D /N@E InitNC { NCLine  } if end gsave 3.0 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 94 1039 a 94 1039 a
 tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@A known { /N@A load
GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 94 1039 a 94 1039 a
 tx@Dict begin { 11.38092 -17.07181 } PutCoor PutBegin  end
 94 1039 a 57
1051 a Fb(c)93 1063 y Fa(1)94 1039 y
 tx@Dict begin PutEnd  end
 94 1039 a 94 1039
a
 tx@Dict begin PutEnd  end
 94 1039 a 94 1039 a
 tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@B known { /N@B load
GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 94 1039 a 94 1039 a
 tx@Dict begin { 11.38092 -17.07181 } PutCoor PutBegin  end
 94 1039 a 57
1051 a Fb(c)93 1063 y Fa(2)94 1039 y
 tx@Dict begin PutEnd  end
 94 1039 a 94 1039
a
 tx@Dict begin PutEnd  end
 94 1039 a 94 1039 a
 tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@G known { /N@G load
GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 94 1039 a 94 1039 a
 tx@Dict begin { 11.38092 -17.07181 } PutCoor PutBegin  end
 94 1039 a 57
1051 a Fb(c)93 1063 y Fa(3)94 1039 y
 tx@Dict begin PutEnd  end
 94 1039 a 94 1039
a
 tx@Dict begin PutEnd  end
 94 1039 a 94 1039 a
 tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@E known { /N@E load
GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 94 1039 a 94 1039 a
 tx@Dict begin { -17.07181 11.38092 } PutCoor PutBegin  end
 94 1039 a 79
1065 a Fb(t)94 1039 y
 tx@Dict begin PutEnd  end
 94 1039 a 94 1039 a
 tx@Dict begin PutEnd  end
 94 1039 a 94
1039 a
 tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@C known { /N@C load
GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 94 1039 a 94 1039 a
 tx@Dict begin tx@NodeDict begin {} false /N@temp 14 {22.76227 -14.22636
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 7.0 d add def /l r neg
def /u 7.0 d add def /d u neg def /NodePos { GetRnodePos } def} NewNode
end end
 94 1039 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.0 SLW 0.75 setgray  /x2 7.0 CLW .5 mul
sub def /y2 7.0 CLW .5 mul sub def 22.76227 -14.22636 2 copy y2 sub
/y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0
eq { pop pop Rect } { OvalFrame } ifelse gsave 0.75 setgray fill grestore
end


@endspecial 94 1039 a
 tx@Dict begin PutEnd  end
 94 1039 a 94 1039 a
 tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp known { /N@temp
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 94 1039 a
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true -7.0 -7.0 7.0
7.0 .5 Frame  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial 94 1039 a
 tx@Dict begin PutEnd  end
 94 1039
a 94 1039 a
 tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp known { /N@temp
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 94 1039 a 54 1049 a Fb(p)96 1061 y Fa(1)94
1039 y
 tx@Dict begin PutEnd  end
 94 1039 a 94 1039 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@temp /N@G InitNC { yB yA sub xB xA sub Atan dup -20.  add /AngleA
ED -20.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 5.0 3.0 -2 0 add DashLine  grestore  grestore end
 94 1039 a 94 1039 a
 tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@F known { /N@F load
GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 94 1039
a 94 1039 a
 tx@Dict begin tx@NodeDict begin {} false /N@temp 14 {-22.76227 14.22636
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 7.0 d add def /l r neg
def /u 7.0 d add def /d u neg def /NodePos { GetRnodePos } def} NewNode
end end
 94 1039 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.0 SLW 0.75 setgray  /x2 7.0 CLW .5 mul
sub def /y2 7.0 CLW .5 mul sub def -22.76227 14.22636 2 copy y2 sub
/y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0
eq { pop pop Rect } { OvalFrame } ifelse gsave 0.75 setgray fill grestore
end
 
@endspecial
94 1039 a
 tx@Dict begin PutEnd  end
 94 1039 a 94 1039 a
 tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp known { /N@temp
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 94 1039 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true -7.0 -7.0 7.0
7.0 .5 Frame  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial 94 1039 a
 tx@Dict begin PutEnd  end
 94 1039 a 94 1039
a
 tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp known { /N@temp
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 94 1039 a 54 1049 a Fb(p)96 1061 y Fa(2)94 1039 y
 tx@Dict begin PutEnd  end
 94
1039 a 94 1039 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@temp /N@E InitNC { yB yA sub xB xA sub Atan dup -20.  add /AngleA
ED -20.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 5.0 3.0 -2 0 add DashLine  grestore  grestore end
 94 1039 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 150 1644 a Fv(Figure)24 b(1:)46 b(A)20 b(transportation)25
b(planning)e(task.)28 b(Deli)n(v)o(er)21 b(parcel)h Ft(p)2248
1658 y Fs(1)2308 1644 y Fv(from)e Ft(C)27 b Fv(to)21
b Ft(G)f Fv(and)h(parcel)h Ft(p)3217 1658 y Fs(2)3276
1644 y Fv(from)f Ft(F)33 b Fv(to)21 b Ft(E)5 b Fv(,)526
1757 y(using)26 b(the)e(cars)h Ft(c)1090 1771 y Fs(1)1130
1757 y Fv(,)e Ft(c)1215 1771 y Fs(2)1255 1757 y Fv(,)h
Ft(c)1341 1771 y Fs(3)1404 1757 y Fv(and)h(truck)g Ft(t)p
Fv(.)30 b(The)24 b(cars)g(may)h(only)g(use)f(inner)n(-city)j(roads)f
(\(thin)f(edges\),)526 1870 y(the)f(truck)h(may)e(only)h(use)g(the)g
(highw)o(ay)h(\(thick)g(edge\).)150 2277 y(arbitrary)37
b(destinations.)64 b(Moreo)o(v)o(er)l(,)38 b(cities)e(can)e(be)h(of)f
(v)n(arying)i(size,)h(there)e(can)g(be)f(one)h(or)f(se)n(v)o(eral)i
(cars)150 2390 y(within)26 b(each)f(city)-6 b(,)26 b(and)g(there)f(can)
h(be)f(one)g(or)g(se)n(v)o(eral)h(trucks)h(connecting)h(the)d(cities.)
34 b(Cars)25 b(will)g(ne)n(v)o(er)g(lea)n(v)o(e)150 2503
y(a)c(city)-6 b(.)29 b(Fig.)21 b(1)h(sho)n(ws)g(an)g(e)o(xample)g(task)
h(of)f(this)g(kind)h(with)e(tw)o(o)h(cities,)h(three)g(cars)f(and)g(a)g
(single)h(truck.)29 b(There)150 2615 y(are)24 b(tw)o(o)g(parcels)i(to)e
(be)h(deli)n(v)o(ered,)h(one)f(of)f(which)g(\()p Ft(p)1884
2629 y Fs(1)1924 2615 y Fv(\))g(must)g(be)g(mo)o(v)o(ed)g(between)i
(the)e(tw)o(o)g(cities,)h(while)g(the)150 2728 y(other)g(\()p
Ft(p)436 2742 y Fs(2)475 2728 y Fv(\))e(can)h(stay)g(within)g(its)g
(initial)h(city)-6 b(.)291 2856 y(The)34 b(astute)h(reader)g(f)o
(amiliar)g(with)f(the)g(planning)i(literature)g(will)e(ha)n(v)o(e)g
(noticed)i(by)e(no)n(w)f(that)i(we)e(are)150 2969 y(essentially)23
b(describing)g(the)f(L)t Fr(O)t(G)t(I)t(S)t(T)t(I)t(C)t(S)k
Fv(domain,)21 b(a)f(standard)i(benchmark)g(for)f(classical)h(planning)g
(systems,)150 3082 y(e)o(xtended)j(to)d(roadmaps)i(that)f(are)g(not)g
(complete)h(graphs.)30 b(\(P)o(art)22 b(of\))h(a)f(propositional)k
(STRIPS-lik)o(e)c(encoding)150 3195 y(of)h(the)h(task)g(is)g(sho)n(wn)g
(in)f(Fig.)g(2.)291 3323 y(Ho)n(w)i(w)o(ould)h(human)h(planners)h(go)e
(about)h(solving)h(tasks)f(of)f(this)g(kind?)38 b(V)-10
b(ery)26 b(lik)o(ely)-6 b(,)27 b(the)o(y)g(w)o(ould)f(use)h(a)150
3436 y(hierarchical)h(approach:)34 b(F)o(or)24 b Ft(p)1187
3450 y Fs(1)1226 3436 y Fv(,)g(it)g(is)h(clear)g(that)h(the)f(parcel)h
(needs)g(to)e(be)h(mo)o(v)o(ed)g(between)g(cities,)h(which)f(is)150
3549 y(only)e(possible)h(by)e(using)h(the)g(truck.)29
b(Since)22 b(in)g(our)g(e)o(xample)h(each)g(city)g(can)f(access)h(the)g
(highw)o(ay)g(at)f(only)h(one)150 3662 y(location,)h(we)c(see)i(that)g
(we)e(must)h(\002rst)g(load)h(the)g(parcel)g(into)g(some)g(car)f(at)g
(its)h(initial)g(location,)i(then)e(drop)g(it)f(of)n(f)150
3774 y(at)f(the)g(\002rst)f(city')-5 b(s)21 b(highw)o(ay)g(access)g
(location,)i(load)d(it)g(into)g(the)g(truck,)i(drop)e(it)g(of)n(f)f(at)
h(the)g(other)h(city')-5 b(s)21 b(highw)o(ay)150 3887
y(access)32 b(location,)i(load)d(it)f(into)h(the)f(only)h(car)g(in)f
(that)h(city)-6 b(,)32 b(and)f(\002nally)g(drop)g(it)f(of)n(f)g(at)g
(its)h(destination.)52 b(W)-7 b(e)150 4000 y(can)22 b(commit)g(to)g
(this)g(\223high-le)n(v)o(el\224)j(plan)e(for)f(deli)n(v)o(ering)i
Ft(p)2044 4014 y Fs(1)2104 4000 y Fv(without)f(w)o(orrying)g(about)g
(\223lo)n(wer)n(-le)n(v)o(el\224)h(aspects)150 4113 y(such)f(as)g(path)
g(planning)i(for)d(the)h(cars.)29 b(It)22 b(is)h(ob)o(vious)h(to)e(us)h
(that)g Fq(any)g Fv(good)g(solution)i(will)d(ha)n(v)o(e)h(this)g
(structure,)150 4226 y(since)h(the)e(parcel)i(can)f(only)g(change)i
(its)d(location)j(in)d(a)g(fe)n(w)g(clearly)i(de\002ned)f(w)o(ays)g
(\(Fig.)f(3\).)28 b(The)22 b(same)h(\002gure)150 4339
y(sho)n(ws)k(that)g(the)g(only)h(reasonable)i(plans)e(for)f(getting)h
Ft(p)1977 4353 y Fs(2)2042 4339 y Fv(to)f(its)g(destination)j(require)e
(loading)h(it)d(into)i(the)f(car)150 4452 y(in)22 b(its)h(initial)g
(city)g(and)g(dropping)i(it)d(of)n(f)g(at)h(its)f(tar)n(get)i
(location.)30 b(There)23 b(is)f(no)g(point)i(in)e(e)n(v)o(er)h(loading)
h(it)e(into)h(the)150 4565 y(truck)i(or)e(into)h(an)o(y)g(of)f(the)h
(cars)g(in)g(the)f(left)h(city)-6 b(.)291 4693 y(So)30
b(say)h(we)f(ha)n(v)o(e)h(committed)h(to)e(the)h(\(partially)i
(ordered,)h(as)d(mo)o(v)o(ements)g(of)g(the)g(tw)o(o)f(parcels)i(can)f
(be)150 4806 y(interlea)n(v)o(ed\))i(\223high-le)n(v)o(el)f(plan\224)f
(sho)n(wn)f(in)f(Fig.)g(5.)47 b(All)29 b(we)g(need)i(to)e(do)h(to)g
(complete)h(the)f(plan)g(is)g(choose)150 4918 y(a)c(linearization)k(of)
c(the)h(high-le)n(v)o(el)i(steps)e(and)g(\002ll)f(in)g(mo)o(v)o(ements)
h(of)g(the)f(v)o(ehicle)i(\003eet)e(between)i(them.)37
b(W)-7 b(e)150 5031 y(ha)n(v)o(e)35 b(thus)h(decomposed)h(the)e
(planning)j(task)d(into)h(a)e(number)i(of)e(subproblems.)66
b(The)34 b(parcel)i(scheduling)150 5144 y(problem)25
b(\(where,)g(and)f(by)h(which)f(v)o(ehicles,)i(a)d(parcel)j(should)g
(be)e(loaded)h(and)g(unloaded\))i(is)d(separated)i(from)150
5257 y(the)j(path)h(planning)i(problem)e(for)g(each)f(v)o(ehicle)i(in)e
(the)g(\003eet)g(\(ho)n(w)g(to)g(mo)o(v)o(e)g(it)g(from)g(point)h(X)e
(to)h(Y\).)f(Both)1888 5506 y Fy(192)p eop end
%%Page: 193 3
TeXDict begin 193 2 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)p
246 537 3409 4 v 246 4376 4 3839 v 296 624 a Fv(V)-10
b(ariables:)406 737 y Fp(at-p1-a)p Fv(,)51 b Fp(at-p1-b)p
Fv(,)g Fp(at-p1-c)p Fv(,)g Fp(at-p1-d)p Fv(,)g Fp(at-p1-e)p
Fv(,)g Fp(at-p1-f)p Fv(,)g Fp(at-p1-g)p Fv(,)406 850
y Fp(at-p2-a)p Fv(,)g Fp(at-p2-b)p Fv(,)g Fp(at-p2-c)p
Fv(,)g Fp(at-p2-d)p Fv(,)g Fp(at-p2-e)p Fv(,)g Fp(at-p2-f)p
Fv(,)g Fp(at-p2-g)p Fv(,)406 962 y Fp(at-c1-a)p Fv(,)g
Fp(at-c1-b)p Fv(,)g Fp(at-c1-c)p Fv(,)g Fp(at-c1-d)p
Fv(,)406 1075 y Fp(at-c2-a)p Fv(,)g Fp(at-c2-b)p Fv(,)g
Fp(at-c2-c)p Fv(,)g Fp(at-c2-d)p Fv(,)406 1188 y Fp(at-c3-e)p
Fv(,)g Fp(at-c3-f)p Fv(,)g Fp(at-c3-g)p Fv(,)406 1301
y Fp(at-t-d)p Fv(,)g Fp(at-t-e)p Fv(,)406 1414 y Fp(in-p1-c1)p
Fv(,)f Fp(in-p1-c2)p Fv(,)h Fp(in-p1-c3)p Fv(,)f Fp(in-p1-t)p
Fv(,)406 1527 y Fp(in-p2-c1)p Fv(,)g Fp(in-p2-c2)p Fv(,)h
Fp(in-p2-c3)p Fv(,)f Fp(in-p2-t)296 1640 y Fv(Init:)406
1753 y Fp(at-p1-c)p Fv(,)h Fp(at-p2-f)p Fv(,)g Fp(at-c1-a)p
Fv(,)g Fp(at-c2-b)p Fv(,)g Fp(at-c3-g)p Fv(,)g Fp(at-t-e)296
1866 y Fv(Goal:)406 1979 y Fp(at-p1-g)p Fv(,)g Fp(at-p2-e)296
2092 y Fv(Operator)57 b Fp(drive-c1-a-d)p Fv(:)406 2204
y(PRE:)c Fp(at-c1-a)106 b Fv(ADD:)54 b Fp(at-c1-d)106
b Fv(DEL:)53 b Fp(at-c1-a)296 2317 y Fv(Operator)k Fp(drive-c1-b-d)p
Fv(:)406 2430 y(PRE:)c Fp(at-c1-b)106 b Fv(ADD:)54 b
Fp(at-c1-d)106 b Fv(DEL:)53 b Fp(at-c1-b)296 2543 y Fv(Operator)k
Fp(drive-c1-c-d)p Fv(:)406 2656 y(PRE:)c Fp(at-c1-c)106
b Fv(ADD:)54 b Fp(at-c1-d)106 b Fv(DEL:)53 b Fp(at-c1-c)296
2769 y(...)296 2882 y Fv(Operator)k Fp(load-c1-p1-a)p
Fv(:)406 2995 y(PRE:)c Fp(at-c1-a)p Fv(,)e Fp(at-p1-a)106
b Fv(ADD:)54 b Fp(in-p1-c1)105 b Fv(DEL:)54 b Fp(at-p1-a)296
3108 y Fv(Operator)j Fp(load-c1-p1-b)p Fv(:)406 3221
y(PRE:)c Fp(at-c1-b)p Fv(,)e Fp(at-p1-b)106 b Fv(ADD:)54
b Fp(in-p1-c1)105 b Fv(DEL:)54 b Fp(at-p1-b)296 3334
y Fv(Operator)j Fp(load-c1-p1-c)p Fv(:)406 3446 y(PRE:)c
Fp(at-c1-c)p Fv(,)e Fp(at-p1-c)106 b Fv(ADD:)54 b Fp(in-p1-c1)105
b Fv(DEL:)54 b Fp(at-p1-c)296 3559 y(...)296 3672 y Fv(Operator)j
Fp(unload-c1-p1-a)p Fv(:)406 3785 y(PRE:)c Fp(at-c1-a)p
Fv(,)e Fp(in-p1-c1)106 b Fv(ADD:)53 b Fp(at-p1-a)106
b Fv(DEL:)54 b Fp(in-p1-c1)296 3898 y Fv(Operator)j Fp(unload-c1-p1-b)p
Fv(:)406 4011 y(PRE:)c Fp(at-c1-b)p Fv(,)e Fp(in-p1-c1)106
b Fv(ADD:)53 b Fp(at-p1-b)106 b Fv(DEL:)54 b Fp(in-p1-c1)296
4124 y Fv(Operator)j Fp(unload-c1-p1-c)p Fv(:)406 4237
y(PRE:)c Fp(at-c1-c)p Fv(,)e Fp(in-p1-c1)106 b Fv(ADD:)53
b Fp(at-p1-c)106 b Fv(DEL:)54 b Fp(in-p1-c1)296 4350
y(...)p 3651 4376 V 246 4379 3409 4 v 150 4649 a Fv(Figure)24
b(2:)46 b(P)o(art)34 b(of)h(a)f(typical)j(propositional)h(encoding)g
(of)c(the)h(transportation)k(planning)e(task)f(\(no)f(actual)526
4762 y(PDDL)21 b(syntax\).)1888 5506 y Fy(193)p eop end
%%Page: 194 4
TeXDict begin 194 3 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)300
1573 y @beginspecial 71 @llx 555 @lly 467 @urx 721 @ury
3960 @rwi @setspecial
%%BeginDocument: figures/initial-example-parcel-dtg.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.92b Copyright 2002 Radical Eye Software
%%Title: initial-example-parcel-dtg.dvi
%%BoundingBox: 71 555 467 721
%%DocumentFonts: Times-Roman CMMI10 CMR7
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o initial-example-parcel-dtg.eps
%+ initial-example-parcel-dtg.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2006.07.12:1710
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc
% File  8r.enc as of 2002-03-12 for PSNFSS 9
%
% This is the encoding vector for Type1 and TrueType fonts to be used
% with TeX.  This file is part of the PSNFSS bundle, version 9
% 
% Authors: S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry, W. Schmidt
%
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida + Euro.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (6) /Euro is assigned to 128, as in Windows ANSI
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there down to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /Euro /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def

%%EndProcSet
%%BeginProcSet: aae443f0.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmmi10 cmmi12 cmmi5 cmmi6 cmmi7 cmmi8 cmmi9 cmmib10
%
/TeXaae443f0Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/alpha /beta /gamma /delta /epsilon1 /zeta /eta /theta /iota /kappa
/lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon /phi /chi /psi
/omega /epsilon /theta1 /pi1 /rho1 /sigma1 /phi1 /arrowlefttophalf
/arrowleftbothalf /arrowrighttophalf /arrowrightbothalf /arrowhookleft
/arrowhookright /triangleright /triangleleft /zerooldstyle /oneoldstyle
/twooldstyle /threeoldstyle /fouroldstyle /fiveoldstyle /sixoldstyle
/sevenoldstyle /eightoldstyle /nineoldstyle /period /comma /less /slash
/greater /star /partialdiff /A /B /C /D /E /F /G /H /I /J /K /L /M /N
/O /P /Q /R /S /T /U /V /W /X /Y /Z /flat /natural /sharp /slurbelow
/slurabove /lscript /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p
/q /r /s /t /u /v /w /x /y /z /dotlessi /dotlessj /weierstrass /vector
/tie /psi /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi
/.notdef /.notdef /Omega /alpha /beta /gamma /delta /epsilon1 /zeta /eta
/theta /iota /kappa /lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon
/phi /chi /psi /tie /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: f7b6d320.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmb10 cmbx10 cmbx12 cmbx5 cmbx6 cmbx7 cmbx8 cmbx9 cmbxsl10
%     cmdunh10 cmr10 cmr12 cmr17cmr6 cmr7 cmr8 cmr9 cmsl10 cmsl12 cmsl8
%     cmsl9 cmss10cmss12 cmss17 cmss8 cmss9 cmssbx10 cmssdc10 cmssi10
%     cmssi12 cmssi17 cmssi8cmssi9 cmssq8 cmssqi8 cmvtt10
%
/TeXf7b6d320Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute /caron /breve
/macron /ring /cedilla /germandbls /ae /oe /oslash /AE /OE /Oslash
/suppress /exclam /quotedblright /numbersign /dollar /percent /ampersand
/quoteright /parenleft /parenright /asterisk /plus /comma /hyphen
/period /slash /zero /one /two /three /four /five /six /seven /eight
/nine /colon /semicolon /exclamdown /equal /questiondown /question /at
/A /B /C /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X
/Y /Z /bracketleft /quotedblleft /bracketright /circumflex /dotaccent
/quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u
/v /w /x /y /z /endash /emdash /hungarumlaut /tilde /dieresis /suppress
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /space
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /.notdef
/.notdef /Omega /ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute
/caron /breve /macron /ring /cedilla /germandbls /ae /oe /oslash /AE
/OE /Oslash /suppress /dieresis /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMR7
%!PS-AdobeFont-1.1: CMR7 1.0
%%CreationDate: 1991 Aug 20 16:39:21
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-27 -250 1122 750}readonly def
/UniqueID 5000790 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CABB9FFC6CC3F1E9AE32F234EB60FE7D
E34995B1ACFF52428EA20C8ED4FD73E3935CEBD40E0EAD70C0887A451E1B1AC8
47AEDE4191CCDB8B61345FD070FD30C4F375D8418DDD454729A251B3F61DAE7C
8882384282FDD6102AE8EEFEDE6447576AFA181F27A48216A9CAD730561469E4
78B286F22328F2AE84EF183DE4119C402771A249AAC1FA5435690A28D1B47486
1060C8000D3FE1BF45133CF847A24B4F8464A63CEA01EC84AA22FD005E74847E
01426B6890951A7DD1F50A5F3285E1F958F11FC7F00EE26FEE7C63998EA1328B
C9841C57C80946D2C2FC81346249A664ECFB08A2CE075036CEA7359FCA1E90C0
F686C3BB27EEFA45D548F7BD074CE60E626A4F83C69FE93A5324133A78362F30
8E8DCC80DD0C49E137CDC9AC08BAE39282E26A7A4D8C159B95F227BDA2A281AF
A9DAEBF31F504380B20812A211CF9FEB112EC29A3FB3BD3E81809FC6293487A7
455EB3B879D2B4BD46942BB1243896264722CB59146C3F65BD59B96A74B12BB2
9A1354AF174932210C6E19FE584B1B14C00E746089CBB17E68845D7B3EA05105
EEE461E3697FCF835CBE6D46C75523478E766832751CF6D96EC338BDAD57D53B
52F5340FAC9FE0456AD13101824234B262AC0CABA43B62EBDA39795BAE6CFE97
563A50AAE1F195888739F2676086A9811E5C9A4A7E0BF34F3E25568930ADF80F
0BDDAC3B634AD4BA6A59720EA4749236CF0F79ABA4716C340F98517F6F06D9AB
7ED8F46FC1868B5F3D3678DF71AA772CF1F7DD222C6BF19D8EF0CFB7A76FC6D1
0AD323C176134907AB375F20CFCD667AB094E2C7CB2179C4283329C9E435E7A4
1E042AD0BAA059B3F862236180B34D3FCED833472577BACD472A4B067A46F8EE
2AFACDE591ADF7304939394F221B5B9B316BC47DC7772711A35B466E1790D4F5
C02C57DE57A0498128C6041CB7E702F4D8500433633B8358C438237BBA39C647
F659FACF75574B1AAD3FE61FB97D6C5D0B19E4AC762321891092E73D192C4816
2F14A6FFAA1B22AABB65E8F611F1E9AF66DF68DA1B2B64B4CA8870261F8663FA
28953254FA64F0AD6EFBFAB15830AF856A65835C803B70963595060F91F4079B
F8BF5396F04C070254AC5DCACB20C0B1FADD38825886322366927C97E3C5AA1B
EA858D5974EBC14D17D4ADDCB3C7EA74A8A2B75293747CFCE0B484713D631F95
43BD5A359229F1276D2F652078ADA5000D1E060CE5CDF2E57401E487F3C10975
09AACD27CEE8581EBADC25D0FC9CEA533B99DCEDC0F28E782F4FE22AE097CCF3
F73338DA748C535291B4E8AF84546FE4B910107B6FFC5439C5B966DE6C905D86
460A69D6031EC3F7261FCB6D932F722BC1F550574EBD6F676AC9770969657422
4C8212F9FC9A49C9F0E813A2ACD16D1131A73D3001E698C63F76FE6D6143D310
155256BE90530489736CF35CA2D7E4A1FAEAE2423ABB52E55DD7314097DF7C09
F39C3E3A29F9BAA3AEBA89CC3E7B134E79A2DA39D449D98FE4ADE1A0ACDA79C4
1E2C78CDCC5BDD192DAA27F17DC4368EBC54CC009802018E50519F69025DE7E8
FB61694AEA672E59D00F6BA0CA9509FB8DC6544CB92B70BA0AE393A43959C90E
8857B0DA53A8D26426CAE0DCF2F3033BAC62502E08447B09CC18B2525AB65EC2
C63074FF725168D115137ECDAB1EEB083711F647F757C9806056811466D59087
B93D6B71594046B3B60A7D5789D6B99FC14764428A251F0A54ED
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
/UniqueID 5087385 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
AFC0E2F840512D321166547B306C592B8A01E1FA2564B9A26DAC14256414E4C8
42616728D918C74D13C349F4186EC7B9708B86467425A6FDB3A396562F7EE4D8
40B43621744CF8A23A6E532649B66C2A0002DD04F8F39618E4F572819DD34837
B5A08E643FDCA1505AF6A1FA3DDFD1FA758013CAED8ACDDBBB334D664DFF5B53
95601766758C197F327101A9C9BF396ED625E27A7791ADD59D3237889D3B15FB
FDEEF1E148AAB37EDB931D0F2F99563148BDCDFF50A608BE23EC300C2A3EDC5C
C9F360C23B8180FCC3D565FEF29FFBE7B8FB05CB1A7CCBBD6A40277FD1A158BE
3F90227C8A294DBC7F4C30D7382F1ECC630742ED3424FF96797139EC0C164CF4
189482BD32B1915EF76B651A86E8C3708ACA0E329D3BE2A6DA58AD8DB308BEFF
E65AC4D638FF677365E51AFB29ADD7588817AB0EAC38C6342812FA5FF26EA162
47726BF6B399863AC80A42FD04BD912F45EA3D0FCF54D157E25239CAEA80B5FB
C9AA658F9FDD5E362A0732790625AD3E5408AB1633BDE567FF2D5FFFBFC55ECA
C5C54931CAA6354CE5364960FF83CBE638028DBE76F6CD8340D49EF6783F8426
3AF8DF28C9D795C0B7D24E92F16F8904CDE9213E6D537089D04574251EED5D90
3B40DB27DCD0823B152083E075CD1EA79BE7F4984011F3BBE92B632047F0610C
2AC2F2AD24E8C440D816EE7F452E1F593DE5ADD52EB3E4F549B6A8689752870C
F3411042D27DD479B5241EC451F0FC2955BE24D8D1DC4939C3A880666D2275D3
F56FE4CB4386B5774DCEF86B4E728286238FCD6E633CD3D28E0E4E5059492779
CEB2D7CAE5856E6B1055E4A8E638D2CD3A3DE247B2F9DBDF5619944C61AC0350
30A6634D4F8F117AA79AABAEF9246EC1941DD46D0903F53710268154C274D6FD
C9E4715A224555AF0DE82A230D3B3E66A4C30CA21EC37900A98A62D15AC23874
19288C3F577F8F27CBC3B4BC64F299EBF0CDC6B97B06BB34828B18D07915BE28
308EAF7907E29ADDA8B2A77CFC544EB8DC828D686EAD4EB725E9BBA391A7E75C
C1FBADA98E35D10FB527B141D915D997E9CA5963C98155B5DDEA82E0F6A2A23F
5F63D34F402C927C5B95F3313A2D5611D2B099D563A3009D7561806DC889FEF7
B66AA970253D6357D0160CAAEB4E3CB0C3BAAAA5B2CA98AB8C7AB6D76B2CD744
D1F356E8F970FB942A31E3F7A205722216ACDE5B96E06A9FBB1AE03E85A06D94
C7ABE959B6467DFC83363DA88B5F937725A3B6DA27F32D4DC25A43B1CB45740F
A105A48DD0717F862E3091CD03E72C6919F201A8A1F6B5CE87AF5D4DD69514C3
BA5EB638986BE157B1D526582D2EE4F34B76DD93983669E45ABCA2A60D3E0313
80A7AE0FF222C9AB0755656620DA7D8ADAC464EBB7E2E97816625CA8E3F458A2
7256609E26D2E2CD700776D2779AED7A5F30444FD52EB3C9571C7C83361ABBA8
41C9BA07078EA660BA02E39D52B43FB30D1757B25ED1000E38F797EBD42C57F6
FDCC563157E35EADA08F5BC8F78BF0E9F591853821D8D8B6CBB340F96D9FF4DA
09F2586BE8D2D4BB5A6282E29A3CEABB37D0F9B735215A0196505B350C87733E
59C7ACE98CD29BFD5D62997C08AC6448A0D4749976F499C38891CDDA2CBA1452
7689977519CF81DE00566520C4182D05E35C55018FB4B38080E4CEE87FA2B9FD
2E10D3DCF7195A79756E3B966AC23D21BB347E072CEB7614F0CF84601EAC04B7
6E2719A6FE80BBEE60FF766EA092D219BE244D8C51A22710743AB1E2E2832606
CE7631B276E0A5B66A525AAFFD30B0171247EB7709F09A2B39F85B03C1C7BFF6
D0D41C58ABA68E45DE09E3C1E4C6FED5C003238F6015C319FAFF8200C1C99A3E
82FAB4128DCCA02F40C543A3E4D14F09CB2755B080C9119A906FA19261E35D9A
F01880AAF137142F3C1CD438515E4AB76DD216005866D8A4DD88B1D80BBF6B21
DE075734774DC0634A9C1629F01F2BC646D653DA781D7CE015174083859796BE
8FD049C83952058BE4AE2FFE625221DF44B0FF0164017CAE81CEE365F9F231F3
1F4C0DFBF9CCF89F6FAFC8FF3EC434A604FF434D91AAECAA4A4DDDB70C188B48
56DF2B378EBE5A50064B7D68E1321CC557171F580590836D2A6EE5B34959BDA1
AEA0EA2835FED05A95D846A6CD7ED7CB38FC207576EBB61CCBBFACF26B86187F
DD01564CB4075628DB1D7BBD1C4C4247E404E4D744801187876F4096B8CB3B5D
A82347A72C77F402689440FBDDEFF28379ADA3EBACF91C6B69D060F4C474EC0A
7DA8D1D41552A05DDAE0133FD5622468957D463805A8F502E36295A2BDDDC5C7
D867972911DA65AE232D21A0851FF11019DBC38CAC07343470DB93A8EC3345F5
8BFB9D24FEFF9DEFC9274CC8D54331B0873C66D607DDFB1C074C789D2F9F59C0
FEC5A1502ECB44D7758E10EB913FF692F6BE07303BEEC119F73E640D03CEC91F
B410675739D003EBC43077991831CEB88B7AB5C39A75E9DB6B8E09B18D168C73
B28F79A3874E467092B6969A45312C65A82F43D515B47C59C77FF76524C32F76
7D18CFC576DDA497CCAB444F5E72058742C561E7F9D7062A093996BB56C8C218
AD77991A9F9413A6B8A48F0BE6A4B557E1A866920129F6958D2316D2C6341175
FB73334F9DD3C06D3146A70BD39062F3A8E159F58BA27589A8A371BED050CD29
B9A0FB8392C3F62E826A4AD4144D85B1EB67093C953270D5685E8834579A04D1
ADC6ABFC29C667A5DE8F07817C3A46512AC1EA829CFE51EA7C7F9CE1291E4B39
AA6510A64D5A7734C22A85ED0CA4ED7F424F5909BB869E58FD7C11D1C174BCC2
4192933EAFC1219806B3F3A28F0471D09E1E81EA3455C90F78AA096BFEF0A210
B60E616ACD2662FC5E79D0A336A54FE84DBD2CD40041C40641182D99D218CB6B
D7C75B6973960619C7D5E8082CD6782E88C427E7A66CB9AA53722A098657DEB3
A31CDFDA95577880B4E5C57DB71646B3D6DB47275252EFE0DF3BBCE70552A988
9F5E1A1A289FE0B15E05
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600
(initial-example-parcel-dtg.dvi) @start /Fa 204[33 33
33 49[{ TeXf7b6d320Encoding ReEncodeFont }3 58.1154 /CMR7
rf /Fb 139[30 16[36 27[65 53 61 69 59 63 62 65[{
 TeXaae443f0Encoding ReEncodeFont }9 83.022 /CMMI10 rf
/Fc 139[23 5[42 4[23 7[37 97[{ TeXBase1Encoding ReEncodeFont }4
83.022 /Times-Roman rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 1370 a
 tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 1370 a 0 1370 3281 1371
v 3281 1370 a
 currentpoint grestore moveto
 3281 1370 a 94 685 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 0.0 14.22636 .5
CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 94 685 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 14.22636 } false /N@A 11
{InitCnode } NewNode end end
 94 685 a 94 685 a
 tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 94 685 a 23 713
a Fc(at)21 b Fb(A)94 685 y
 tx@Dict begin PutEnd  end
 94 685 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  56.90549 0.0 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 94 685 a
 tx@Dict begin tx@NodeDict begin {56.90549 0.0 14.22636 } false /N@B
11 {InitCnode } NewNode end end
 94 685 a 94 685 a
 tx@Dict begin { 56.90549 0.0 } PutCoor PutBegin  end
 94 685 a 20 713
a Fc(at)g Fb(B)94 685 y
 tx@Dict begin PutEnd  end
 94 685 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  113.81097 0.0 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 94 685 a
 tx@Dict begin tx@NodeDict begin {113.81097 0.0 14.22636 } false /N@C
11 {InitCnode } NewNode end end
 94 685 a 94 685 a
 tx@Dict begin { 113.81097 0.0 } PutCoor PutBegin  end
 94 685 a 21 713
a Fc(at)g Fb(C)94 685 y
 tx@Dict begin PutEnd  end
 94 685 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  170.71646 0.0 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 94 685 a
 tx@Dict begin tx@NodeDict begin {170.71646 0.0 14.22636 } false /N@D
11 {InitCnode } NewNode end end
 94 685 a 94 685 a
 tx@Dict begin { 170.71646 0.0 } PutCoor PutBegin  end
 94 685 a 18 713
a Fc(at)g Fb(D)94 685 y
 tx@Dict begin PutEnd  end
 94 685 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  256.07469 0.0 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 94 685 a
 tx@Dict begin tx@NodeDict begin {256.07469 0.0 14.22636 } false /N@E
11 {InitCnode } NewNode end end
 94 685 a 94 685 a
 tx@Dict begin { 256.07469 0.0 } PutCoor PutBegin  end
 94 685 a 21 713
a Fc(at)g Fb(E)94 685 y
 tx@Dict begin PutEnd  end
 94 685 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  312.98018 0.0 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 94 685 a
 tx@Dict begin tx@NodeDict begin {312.98018 0.0 14.22636 } false /N@F
11 {InitCnode } NewNode end end
 94 685 a 94 685 a
 tx@Dict begin { 312.98018 0.0 } PutCoor PutBegin  end
 94 685 a 21 713
a Fc(at)g Fb(F)94 685 y
 tx@Dict begin PutEnd  end
 94 685 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  369.88567 0.0 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 94 685 a
 tx@Dict begin tx@NodeDict begin {369.88567 0.0 14.22636 } false /N@G
11 {InitCnode } NewNode end end
 94 685 a 94 685 a
 tx@Dict begin { 369.88567 0.0 } PutCoor PutBegin  end
 94 685 a 21 713
a Fc(at)g Fb(G)94 685 y
 tx@Dict begin PutEnd  end
 94 685 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  85.35823 71.13185 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 94 685 a
 tx@Dict begin tx@NodeDict begin {85.35823 71.13185 14.22636 } false
/N@C1 11 {InitCnode } NewNode end end
 94 685 a 94 685 a
 tx@Dict begin { 85.35823 71.13185 } PutCoor PutBegin  end
 94 685 a 15 707
a Fc(in)g Fb(c)137 719 y Fa(1)94 685 y
 tx@Dict begin PutEnd  end
 94 685 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  85.35823 -71.13185 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 94 685 a
 tx@Dict begin tx@NodeDict begin {85.35823 -71.13185 14.22636 } false
/N@C2 11 {InitCnode } NewNode end end
 94 685 a 94 685 a
 tx@Dict begin { 85.35823 -71.13185 } PutCoor PutBegin  end
 94
685 a 15 707 a Fc(in)g Fb(c)137 719 y Fa(2)94 685 y
 tx@Dict begin PutEnd  end
 94
685 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  312.98018 -71.13185
14.22636 .5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 94 685 a
 tx@Dict begin tx@NodeDict begin {312.98018 -71.13185 14.22636 } false
/N@C3 11 {InitCnode } NewNode end end

94 685 a 94 685 a
 tx@Dict begin { 312.98018 -71.13185 } PutCoor PutBegin  end
 94 685 a 15 707 a Fc(in)g Fb(c)137
719 y Fa(3)94 685 y
 tx@Dict begin PutEnd  end
 94 685 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  213.39557 42.67911 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 94 685 a
 tx@Dict begin tx@NodeDict begin {213.39557 42.67911 14.22636 } false
/N@T 11 {InitCnode } NewNode end end
 94 685 a 94 685 a
 tx@Dict begin { 213.39557 42.67911 } PutCoor PutBegin  end
 94 685 a 36 713
a Fc(in)g Fb(t)94 685 y
 tx@Dict begin PutEnd  end
 94 685 a 94 685 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@A /N@C1
InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 94 685 a 94
685 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@A /N@C2
InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 94 685 a 94 685 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@B /N@C1
InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 94 685 a 94 685 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@B /N@C2
InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 94 685 a 94
685 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@C /N@C1
InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 94 685 a 94 685 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@C /N@C2
InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 94 685 a 94 685 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@D /N@C1
InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 94 685 a 94
685 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@D /N@C2
InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 94 685 a 94 685 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@D /N@T
InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 94 685 a 94 685 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@E /N@C3
InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 94 685 a 94
685 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@E /N@T
InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 94 685 a 94 685 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@F /N@C3
InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 94 685 a 94 685 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@G /N@C3
InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 94 685 a eop
end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 150 1885 a Fv(Figure)24 b(3:)46 b(Domain)32
b(transition)i(graph)f(for)f(the)g(parcels)h Ft(p)2075
1899 y Fs(1)2145 1885 y Fv(and)f Ft(p)2353 1899 y Fs(2)2392
1885 y Fv(.)52 b(Indicates)34 b(ho)n(w)d(a)h(parcel)h(can)f(change)526
1998 y(its)e(state.)47 b(F)o(or)28 b(e)o(xample,)j(the)f(arcs)g
(between)g(\223at)g Ft(D)s Fv(\224)f(and)g(\223in)h Ft(t)p
Fv(\224)f(correspond)j(to)e(the)f(actions)i(of)526 2111
y(loading/unloading)f(the)23 b(parcel)i(at)f(location)h
Ft(D)h Fv(with)d(the)h(truck)g Ft(t)p Fv(.)421 3512 y
@beginspecial 71 @llx 583 @lly 438 @urx 721 @ury 3670
@rwi @setspecial
%%BeginDocument: figures/initial-example-other-dtgs.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.92b Copyright 2002 Radical Eye Software
%%Title: initial-example-other-dtgs.dvi
%%BoundingBox: 71 583 438 721
%%DocumentFonts: CMMI10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o initial-example-other-dtgs.eps
%+ initial-example-other-dtgs.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2006.07.12:1710
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: aae443f0.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmmi10 cmmi12 cmmi5 cmmi6 cmmi7 cmmi8 cmmi9 cmmib10
%
/TeXaae443f0Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/alpha /beta /gamma /delta /epsilon1 /zeta /eta /theta /iota /kappa
/lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon /phi /chi /psi
/omega /epsilon /theta1 /pi1 /rho1 /sigma1 /phi1 /arrowlefttophalf
/arrowleftbothalf /arrowrighttophalf /arrowrightbothalf /arrowhookleft
/arrowhookright /triangleright /triangleleft /zerooldstyle /oneoldstyle
/twooldstyle /threeoldstyle /fouroldstyle /fiveoldstyle /sixoldstyle
/sevenoldstyle /eightoldstyle /nineoldstyle /period /comma /less /slash
/greater /star /partialdiff /A /B /C /D /E /F /G /H /I /J /K /L /M /N
/O /P /Q /R /S /T /U /V /W /X /Y /Z /flat /natural /sharp /slurbelow
/slurabove /lscript /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p
/q /r /s /t /u /v /w /x /y /z /dotlessi /dotlessj /weierstrass /vector
/tie /psi /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi
/.notdef /.notdef /Omega /alpha /beta /gamma /delta /epsilon1 /zeta /eta
/theta /iota /kappa /lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon
/phi /chi /psi /tie /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMMI10
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
/UniqueID 5087385 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
AFC0E2F840512D321166547B306C592B8A01E1FA2564B9A26DAC14256414E4C8
42616728D918C74D13C349F4186EC7B9708B86467425A6FDB3A396562F7EE4D8
40B43621744CF8A23A6E532649B66C2A0002DD04F8F39618E4F572819DD34837
B5A08E643FDCA1505AF6A1FA3DDFD1FA758013CAED8ACDDBBB334D664DFF5B53
956017667C419C4021DA92976C7550A196C257FC2124D75B3EEFC20B233EDAB9
6D4FBD800A5E08905B7DE3227246EA99E1C1C6109B8CA7165559BACBD61F5D10
421095F562272A41D2209AD455BA56FC4BCC6FB65098433D91663DA37A2CEE82
DBDFF54691444E0761CBE7152CBB024C049BF64E40676CE48A33C751BD7D8D99
A596BBE8D0B97A522AD84D474FDF996B8385F8FD728CB768A0E1AB64488C84DA
971889B8BF16E1AE0E4CCC0E94A0793D3144CC78EC757258A4BE1B6CB0198D6D
D7F46380C028860689D0DCC0DAACD910DE2B361B838648C376C5721A94D81521
604B8556B3DF1EE2F67D7C5F3257BD882E413CF02F93F467979FDC17AF88F169
F7B607CC00CD8E4462A75E75F01D284837698C8E6DA02D1F17B0B3325A421378
AE06B606CE5E71FE7436B3BB2A569403E675CE5CD50FAE25870B051EB3EE51DC
E3C5A2A07FBD8DADEF6CC6DA7C47A6A6E8B0628BEFA3A79A1B5937AA3D30E376
A3B6EB7B7FB4BBFFFF4306A5845AD5F555C01B8DE1AA1C6D32B72621CC89BE35
2552DE16BF214577CE7706FDA4805C1D5871DD5CC7237ABBED2CF9ED2E1C95E0
46BC1FB5C1076DB3DA75C4C2175698CF5EAFA31CAA648C0EB9FA278D4E78C427
6917A2BF15E87540301220AEBA8F48DC84817C4AF9722F8BE16FD6C7B5DA1F4D
A0F51A0AC318D43A829682F79C788CF338088E70E95868B32DCEEE54FEA14018
05EAE51CAE319E811E9A52D45CDA0C6FA9D9A20135DB78B57CA7FF431C291A88
A05A7EFBBB93D4BA940FA23C1937AD2437432BD41BB2AD65BF048EC555A7B030
09F11DFF39ADF02836591F801F15397E179448713DA590A8FB226A7F3F8C2674
3BDCC128AB21EF1DC126F6454D2F93D9569644B0A0AD533B6FD72FF87509FBB9
E97EDE2F36179B77ADB758D41ADE1F6760B1E132652BD1741947BE7AE815A65B
60C173136EA5D6C26A4964B5D637282F3748A593AECDB747344C1B2EE6E4D6F5
8206D15CF958B62020B0731D612B35187B831FB7627CDA64E68EB4AB63CE0F0E
8C217812515B98A084687A3562BD5752D51AA9FA17E22EF6A31FAC8447EED9EF
A2027E384D45C5AA725A294176159819E0E2EACB8A1AB91F4A3D25C66777530F
719E818053ED8FE1972564C1FFB5CF288E028501B785E6AC120707EB29DB6437
77DFC2509476CD3319FBFE4AB6332706457874E6BD0EB1A792009A373A8A20F3
A6851F36C9AE0DDB923462D80E3963D2FAF5C84FB570C6B8A3C61522774CD2DA
C7969D2219A7614BA835F94CEC2A4EBF962C68130565F623408674C4333B4C37
CDC1663CC2D294F761D41F4B17B3443A684E49862CBCBC14BDAEA981EC5DA2AC
B273CF00F2E3C9D1FB5959117D56A2268795091C1E20FF9D897D493DEA46666C
9786345B725C57F26F25522B37E04E463208E241E803F95EF5CF2428578C4430
EB28242CE2B4BE34631E0650F764D09E1F7C6E6DE5D9B2B6E758C5C0F5DA37FE
BDE5B45687B752761A0623BB9AFEDD88CA97A45179448429BF1F472B196AED3E
8775254AD6D023AB5BC90BD0939288E3E390E81B7DD82D412F216C01ABA7A653
944740868615C33D29C75EE81419D04748F47ECE0ED5D11EF8F02B64A13D453B
2574651E0A797830B96EE8AD95FE20B01963165F85BB37C6D60F6CA8FB5123DA
9BD8D0DB2F09EBD8957E2B7591066C6E799BF32914CE73B01C4DC46D4FEC21F0
8DAB967B641E68976CFE070C27C09A4EED118BFEE0D9934CDB2157DD6B2EBCE1
438735BCB55461526DCEED9DBB53ECC68186191F408BEAD44DC13F5B1547DD57
621BA479E024D900498A4C6B620478DD2E7A70F73318434D1D83A7EF72E4C73A
951D99AC9530442AF91A54F2FB4E93B5DDBA1AA8DB5FEFCCE525A1D6720DE819
A0AFC0392526C429B44ECDB387DFDFAF41DB85AEA29BB4893B25078742119D37
A8F9D087DCCF3014C005D8D8F49722780D7F976D2D2DD021B059BFAE2B38C804
00CEA855DC28F3F5ACD084D55E4ED2F010B2794BF0E88E62B1843E5E7B725D8E
85DB44D54A1C7AEBB0DE6592FD9ABC1BB8B729B88EBFDDAEAA8685421AF419FA
4104F6200C516EBF91FA6008115122A2516C9C4C171251296E5C01B33E7379BA
D72ACE7D3BFFFABD5B13817DD1AF8A81EA57AA5C953238397732CFD84CE7A4F3
280E903D525E3563F51B6E00887993B6FD4B30FA64A1FA458F63D146D7773DB8
93918AF430F322080A233F36B8EAD2F9A0E8887F9D2B77BE8BC3A27B366221D7
A6159ABB0FD077908D71BC0EA1449B28362DDB8BAFDA1515125A435192B167B8
20A2905CAE0A180FEAE536AE72E69C8C83DE563A7E5EADFF21649FD0B392731A
5C82BCD0B99CDC0877A2FE32F933D5BBC8E46398CA1A40F44654A0BFC529
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600
(initial-example-other-dtgs.dvi) @start /Fa 184[65 53
61 69 59 63 62 65[{ TeXaae443f0Encoding ReEncodeFont }7
83.022 /CMMI10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 1134 a
 tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 1134 a 0 1134 3045 1134
v 3045 1134 a
 currentpoint grestore moveto
 3045 1134 a 94 1039 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 56.90549 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 94 1039 a
 tx@Dict begin tx@NodeDict begin {0.0 56.90549 14.22636 } false /N@A
11 {InitCnode } NewNode end end
 94 1039 a 94 1039 a
 tx@Dict begin { 0.0 56.90549 } PutCoor PutBegin  end
 94 1039 a
63 1068 a Fa(A)94 1039 y
 tx@Dict begin PutEnd  end
 94 1039 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  56.90549 113.81097 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 94 1039 a
 tx@Dict begin tx@NodeDict begin {56.90549 113.81097 14.22636 } false
/N@B 11 {InitCnode } NewNode end end
 94 1039 a 94 1039 a
 tx@Dict begin { 56.90549 113.81097 } PutCoor PutBegin  end
 94 1039 a
60 1068 a Fa(B)94 1039 y
 tx@Dict begin PutEnd  end
 94 1039 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  56.90549 0.0 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 94 1039 a
 tx@Dict begin tx@NodeDict begin {56.90549 0.0 14.22636 } false /N@C
11 {InitCnode } NewNode end end
 94 1039 a 94 1039 a
 tx@Dict begin { 56.90549 0.0 } PutCoor PutBegin  end
 94 1039 a
61 1068 a Fa(C)94 1039 y
 tx@Dict begin PutEnd  end
 94 1039 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  56.90549 56.90549 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 94 1039 a
 tx@Dict begin tx@NodeDict begin {56.90549 56.90549 14.22636 } false
/N@D 11 {InitCnode } NewNode end end
 94 1039 a 94 1039 a
 tx@Dict begin { 56.90549 56.90549 } PutCoor PutBegin  end
 94 1039 a
58 1068 a Fa(D)94 1039 y
 tx@Dict begin PutEnd  end
 94 1039 a 94 1039 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@A /N@D
InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 94 1039
a 94 1039 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@B /N@D
InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 94 1039 a 94 1039 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@C /N@D
InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 94 1039 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  142.26372 56.90549 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 94 1039 a
 tx@Dict begin tx@NodeDict begin {142.26372 56.90549 14.22636 } false
/N@D 11 {InitCnode } NewNode end end
 94 1039 a 94 1039
a
 tx@Dict begin { 142.26372 56.90549 } PutCoor PutBegin  end
 94 1039 a 58 1068 a Fa(D)94 1039 y
 tx@Dict begin PutEnd  end
 94 1039 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  199.1692 56.90549 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 94 1039 a
 tx@Dict begin tx@NodeDict begin {199.1692 56.90549 14.22636 } false
/N@E 11 {InitCnode } NewNode end end
 94 1039 a 94 1039
a
 tx@Dict begin { 199.1692 56.90549 } PutCoor PutBegin  end
 94 1039 a 61 1068 a Fa(E)94 1039 y
 tx@Dict begin PutEnd  end
 94 1039 a 94 1039
a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@D /N@E
InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 94 1039 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  284.52744 56.90549 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 94
1039 a
 tx@Dict begin tx@NodeDict begin {284.52744 56.90549 14.22636 } false
/N@E 11 {InitCnode } NewNode end end
 94 1039 a 94 1039 a
 tx@Dict begin { 284.52744 56.90549 } PutCoor PutBegin  end
 94 1039 a 61 1068 a Fa(E)94
1039 y
 tx@Dict begin PutEnd  end
 94 1039 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  341.43292 106.18549
14.22636 .5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial
94 1039 a
 tx@Dict begin tx@NodeDict begin {341.43292 106.18549 14.22636 } false
/N@F 11 {InitCnode } NewNode end end
 94 1039 a 94 1039 a
 tx@Dict begin { 341.43292 106.18549 } PutCoor PutBegin  end
 94 1039 a 62 1068 a Fa(F)94
1039 y
 tx@Dict begin PutEnd  end
 94 1039 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  341.43292 7.62547 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial
94 1039 a
 tx@Dict begin tx@NodeDict begin {341.43292 7.62547 14.22636 } false
/N@G 11 {InitCnode } NewNode end end
 94 1039 a 94 1039 a
 tx@Dict begin { 341.43292 7.62547 } PutCoor PutBegin  end
 94 1039 a 61 1068 a Fa(G)94
1039 y
 tx@Dict begin PutEnd  end
 94 1039 a 94 1039 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@E /N@F
InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 94 1039 a 94 1039 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@F /N@G
InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 94 1039
a 94 1039 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@G /N@E
InitNC { NCLine  } if end gsave 1.0 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 94 1039 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 150 3824 a(Figure)g(4:)46 b(Domain)25 b(transition)j
(graphs)e(for)g(the)f(cars)g Ft(c)1952 3838 y Fs(1)2016
3824 y Fv(and)h Ft(c)2211 3838 y Fs(2)2275 3824 y Fv(\(left\),)g(truck)
g Ft(t)e Fv(\(centre\),)i(and)g(car)f Ft(c)3431 3838
y Fs(3)3495 3824 y Fv(\(right\).)526 3937 y(Note)f(ho)n(w)g(each)g
(graph)i(corresponds)h(to)d(the)g(part)h(of)f(the)g(roadmap)i(that)e
(can)h(be)f(tra)n(v)o(ersed)i(by)e(the)526 4050 y(respecti)n(v)o(e)i(v)
o(ehicle.)158 4909 y @beginspecial 71 @llx 648 @lly 501
@urx 721 @ury 4300 @rwi @setspecial
%%BeginDocument: figures/initial-example-high-level-plan.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.92b Copyright 2002 Radical Eye Software
%%Title: initial-example-high-level-plan.dvi
%%BoundingBox: 71 648 501 721
%%DocumentFonts: Courier
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o initial-example-high-level-plan.eps
%+ initial-example-high-level-plan.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2006.07.12:1710
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc
% File  8r.enc as of 2002-03-12 for PSNFSS 9
%
% This is the encoding vector for Type1 and TrueType fonts to be used
% with TeX.  This file is part of the PSNFSS bundle, version 9
% 
% Authors: S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry, W. Schmidt
%
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida + Euro.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (6) /Euro is assigned to 128, as in Windows ANSI
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there down to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /Euro /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 40258437 52099154 1000 600 600
(initial-example-high-level-plan.dvi) @start /Fa 138[50
50 3[50 50 50 1[50 4[50 50 50 50 50 1[50 45[50 50 50
3[50 45[{ TeXBase1Encoding ReEncodeFont }16 83.022 /Courier
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 591 a
 tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 591 a 0 591 3565 591
v 3565 591 a
 currentpoint grestore moveto
 3565 591 a 236 118 a
 tx@Dict begin tx@NodeDict begin {} false /N@A 14 {0.0 0.0 /Y ED /X
ED /d .5 .5 sub CLW mul neg def /r 28.45274 d add def /l r neg def
/u 14.22636 d add def /d u neg def /NodePos { GetRnodePos } def} NewNode
end end
 236 118 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 28.45274 CLW .5
mul sub def /y2 14.22636 CLW .5 mul sub def 0.0 0.0 2 copy y2 sub /y1
ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 137 88 a Fa(load)62 188 y(c1-p1-c)236
118 y
 tx@Dict begin tx@NodeDict begin {} false /N@B 14 {71.13185 0.0 /Y
ED /X ED /d .5 .5 sub CLW mul neg def /r 28.45274 d add def /l r neg
def /u 14.22636 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 236 118 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 28.45274 CLW .5
mul sub def /y2 14.22636 CLW .5 mul sub def 71.13185 0.0 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial
677 88 a Fa(unload)652 188 y(c1-p1-d)236 118 y
 tx@Dict begin tx@NodeDict begin {} false /N@C 14 {142.26372 0.0 /Y
ED /X ED /d .5 .5 sub CLW mul neg def /r 28.45274 d add def /l r neg
def /u 14.22636 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 236 118
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 28.45274 CLW .5
mul sub def /y2 14.22636 CLW .5 mul sub def 142.26372 0.0 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 1318 88 a Fa(load)1268
188 y(t-p1-d)236 118 y
 tx@Dict begin tx@NodeDict begin {} false /N@D 14 {213.39557 0.0 /Y
ED /X ED /d .5 .5 sub CLW mul neg def /r 28.45274 d add def /l r neg
def /u 14.22636 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 236 118 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 28.45274 CLW .5
mul sub def /y2 14.22636 CLW .5 mul sub def 213.39557 0.0 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end


@endspecial 1858 88 a Fa(unload)1858 188 y(t-p1-e)236
118 y
 tx@Dict begin tx@NodeDict begin {} false /N@E 14 {284.52744 0.0 /Y
ED /X ED /d .5 .5 sub CLW mul neg def /r 28.45274 d add def /l r neg
def /u 14.22636 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 236 118 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 28.45274 CLW .5
mul sub def /y2 14.22636 CLW .5 mul sub def 284.52744 0.0 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial
2499 88 a Fa(load)2424 188 y(c3-p1-e)236 118 y
 tx@Dict begin tx@NodeDict begin {} false /N@F 14 {355.65929 0.0 /Y
ED /X ED /d .5 .5 sub CLW mul neg def /r 28.45274 d add def /l r neg
def /u 14.22636 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 236 118
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 28.45274 CLW .5
mul sub def /y2 14.22636 CLW .5 mul sub def 355.65929 0.0 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 3040 88 a Fa(unload)3015
188 y(c3-p1-g)236 118 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@A /N@B InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore  grestore end
 236 118 a 236 118 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@B /N@C InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore  grestore end
 236 118 a
236 118 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@C /N@D InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore  grestore end
 236 118 a 236 118 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@D /N@E InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore  grestore end
 236 118 a 236 118 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@E /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore  grestore end
 236
118 a 236 118 a
 tx@Dict begin tx@NodeDict begin {} false /N@A 14 {142.26372 -42.67911
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 28.45274 d add def /l r
neg def /u 14.22636 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 236 118 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 28.45274 CLW .5
mul sub def /y2 14.22636 CLW .5 mul sub def 142.26372 -42.67911 2 copy
y2 sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial
1318 443 a Fa(load)1243 542 y(c3-p2-f)236 118 y
 tx@Dict begin tx@NodeDict begin {} false /N@B 14 {213.39557 -42.67911
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 28.45274 d add def /l r
neg def /u 14.22636 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 236 118
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 28.45274 CLW .5
mul sub def /y2 14.22636 CLW .5 mul sub def 213.39557 -42.67911 2 copy
y2 sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 1858 443 a Fa(unload)1834
542 y(c3-p2-e)236 118 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@A /N@B InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore  grestore end
 236 118 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 827 5205 a(Figure)e(5:)29 b(High-le)n(v)o(el)c(plan)f(for)
g(the)f(transportation)28 b(planning)e(task.)1888 5506
y Fy(194)p eop end
%%Page: 195 5
TeXDict begin 195 4 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)987
882 y @beginspecial 71 @llx 634 @lly 302 @urx 721 @ury
2310 @rwi @setspecial
%%BeginDocument: figures/initial-example-causal-graph.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.92b Copyright 2002 Radical Eye Software
%%Title: initial-example-causal-graph.dvi
%%BoundingBox: 71 634 302 721
%%DocumentFonts: CMMI10 CMR7
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o initial-example-causal-graph.eps
%+ initial-example-causal-graph.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2006.07.12:1710
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: aae443f0.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmmi10 cmmi12 cmmi5 cmmi6 cmmi7 cmmi8 cmmi9 cmmib10
%
/TeXaae443f0Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/alpha /beta /gamma /delta /epsilon1 /zeta /eta /theta /iota /kappa
/lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon /phi /chi /psi
/omega /epsilon /theta1 /pi1 /rho1 /sigma1 /phi1 /arrowlefttophalf
/arrowleftbothalf /arrowrighttophalf /arrowrightbothalf /arrowhookleft
/arrowhookright /triangleright /triangleleft /zerooldstyle /oneoldstyle
/twooldstyle /threeoldstyle /fouroldstyle /fiveoldstyle /sixoldstyle
/sevenoldstyle /eightoldstyle /nineoldstyle /period /comma /less /slash
/greater /star /partialdiff /A /B /C /D /E /F /G /H /I /J /K /L /M /N
/O /P /Q /R /S /T /U /V /W /X /Y /Z /flat /natural /sharp /slurbelow
/slurabove /lscript /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p
/q /r /s /t /u /v /w /x /y /z /dotlessi /dotlessj /weierstrass /vector
/tie /psi /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi
/.notdef /.notdef /Omega /alpha /beta /gamma /delta /epsilon1 /zeta /eta
/theta /iota /kappa /lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon
/phi /chi /psi /tie /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: f7b6d320.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmb10 cmbx10 cmbx12 cmbx5 cmbx6 cmbx7 cmbx8 cmbx9 cmbxsl10
%     cmdunh10 cmr10 cmr12 cmr17cmr6 cmr7 cmr8 cmr9 cmsl10 cmsl12 cmsl8
%     cmsl9 cmss10cmss12 cmss17 cmss8 cmss9 cmssbx10 cmssdc10 cmssi10
%     cmssi12 cmssi17 cmssi8cmssi9 cmssq8 cmssqi8 cmvtt10
%
/TeXf7b6d320Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute /caron /breve
/macron /ring /cedilla /germandbls /ae /oe /oslash /AE /OE /Oslash
/suppress /exclam /quotedblright /numbersign /dollar /percent /ampersand
/quoteright /parenleft /parenright /asterisk /plus /comma /hyphen
/period /slash /zero /one /two /three /four /five /six /seven /eight
/nine /colon /semicolon /exclamdown /equal /questiondown /question /at
/A /B /C /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X
/Y /Z /bracketleft /quotedblleft /bracketright /circumflex /dotaccent
/quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u
/v /w /x /y /z /endash /emdash /hungarumlaut /tilde /dieresis /suppress
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /space
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /.notdef
/.notdef /Omega /ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute
/caron /breve /macron /ring /cedilla /germandbls /ae /oe /oslash /AE
/OE /Oslash /suppress /dieresis /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMR7
%!PS-AdobeFont-1.1: CMR7 1.0
%%CreationDate: 1991 Aug 20 16:39:21
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-27 -250 1122 750}readonly def
/UniqueID 5000790 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CABB9FFC6CC3F1E9AE32F234EB60FE7D
E34995B1ACFF52428EA20C8ED4FD73E3935CEBD40E0EAD70C0887A451E1B1AC8
47AEDE4191CCDB8B61345FD070FD30C4F375D8418DDD454729A251B3F61DAE7C
8882384282FDD6102AE8EEFEDE6447576AFA181F27A48216A9CAD730561469E4
78B286F22328F2AE84EF183DE4119C402771A249AAC1FA5435690A28D1B47486
1060C8000D3FE1BF45133CF847A24B4F8464A63CEA01EC84AA22FD005E74847E
01426B6890951A7DD1F50A5F3285E1F958F11FC7F00EE26FEE7C63998EA1328B
C9841C57C80946D2C2FC81346249A664ECFB08A2CE075036CEA7359FCA1E90C0
F686C3BB27EEFA45D548F7BD074CE60E626A4F83C69FE93A5324133A78362F30
8E8DCC80DD0C49E137CDC9AC08BAE39282E26A7A4D8C159B95F227BDA2A281AF
A9DAEBF31F504380B20812A211CF9FEB112EC29A3FB3BD3E81809FC6293487A7
455EB3B879D2B4BD46942BB1243896264722CB59146C3F65BD59B96A74B12BB2
9A1354AF174932210C6E19FE584B1B14C00E746089CBB17E68845D7B3EA05105
EEE461E3697FCF835CBE6D46C75523478E766832751CF6D96EC338BDAD57D53B
52F5340FAC9FE0456AD13101824234B262AC0CABA43B62EBDA39795BAE6CFE97
563A50AAE1F195888739F2676086A9811E5C9A4A7E0BF34F3E25568930ADF80F
0BDDAC3B634AD4BA6A59720EA4749236CF0F79ABA4716C340F98517F6F06D9AB
7ED8F46FC1868B5F3D3678DF71AA772CF1F7DD222C6BF19D8EF0CFB7A76FC6D1
0AD323C176134907AB375F20CFCD667AB094E2C7CB2179C4283329C9E435E7A4
1E042AD0BAA059B3F862236180B34D3FCED833472577BACD472A4B067A46F8EE
2AFACDE591ADF7304939394F221B5B9B316BC47DC7772711A35B466E1790D4F5
C02C57DE57A0498128C6041CB7E702F4D8500433633B8358C438237BBA39C647
F659FACF75574B1AAD3FE61FB97D6C5D0B19E4AC762321891092E73D192C4816
2F14A6FFAA1B22AABB65E8F611F1E9AF66DF68DA1B2B64B4CA8870261F8663FA
28953254FA64F0AD6EFBFAB15830AF856A65835C803B70963595060F91F4079B
F8BF5396F04C070254AC5DCACB20C0B1FADD38825886322366927C97E3C5AA1B
EA858D5974EBC14D17D4ADDCB3C7EA74A8A2B75293747CFCE0B484713D631F95
43BD5A359229F1276D2F652078ADA5000D1E060CE5CDF2E57401E487F3C10975
09AACD27CEE8581EBADC25D0FC9CEA533B99DCEDC0F28E782F4FE22AE097CCF3
F73338DA748C535291B4E8AF84546FE4B910107B6FFC5439C5B966DE6C905D86
460A69D6031EC3F7261FCB6D932F722BC1F550574EBD6F676AC9770969657422
4C8212F9FC9A49C9F0E813A2ACD16D1131A73D3001E698C63F76FE6D6143D310
155256BE90530489736CF35CA2D7E4A1FAEAE2423ABB52E55DD7314097DF7C09
F39C3E3A29F9BAA3AEBA89CC3E7B134E79A2DA39D449D98FE4ADE1A0ACDA79C4
1E2C78CDCC5BDD192DAA27F17DC4368EBC54CC009802018E50519F69025DE7E8
FB61694AEA672E59D00F6BA0CA9509FB8DC6544CB92B70BA0AE393A43959C90E
8857B0DA53A8D26426CAE0DCF2F3033BAC62502E08447B09CC18B2525AB65EC2
C63074FF725168D115137ECDAB1EEB083711F647F757C9806056811466D59087
B93D6B71594046B3B60A7D5789D6B99FC14764428A251F0A54ED
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
/UniqueID 5087385 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
AFC0E2F840512D321166547B306C592B8A01E1FA2564B9A26DAC14256414E4C8
42616728D918C74D13C349F4186EC7B9708B86467425A6FDB3A396562F7EE4D8
40B43621744CF8A23A6E532649B66C2A0002DD04F8F39618E4F572819DD34837
B5A08E643FDCA1505AF6A1FA3DDFD1FA758013CAED8ACDDBBB334D664DFF5B53
956017667094CD8DC214A666D7D12CB23EC030318B42D86AF321F0A234FDF8C8
0A6CBC992B9FF791249226FB589E459A7EE7E76DE47055EF5AB8EC15687EEEE5
A349DD8DBCAA138439A148C4308A1BF947B2C53AA511E57094B4EE63FEE5AD73
99371434C8ED6DA51C882658C2E20F74BD3AB348E2B158C6B1910B7611786A4B
9506F7EE9C31C3A451494290C9A8FFA96CF2BBB6A108B756F778C87906E658F7
97476AF567248875F9D61E5ABDD71551C3EE4690B654523DCED8EE7D1928C76F
184A6B38C34CDC0350D1DC2BDF60C1839EC6C9644E96DE313991A9BE05FB1DA8
2E8CC1B54CB306F72CB6667B4D61134301A0E721050F7E8559E3560413923D0B
2453FD9738F6FB6BDACC077B1BF04202A0BF96C478DB1422E44F73542A8AECF8
542AFAC6ABB611E20533EBCA28FD3ACB4161FEF356F95478D926BED2A19245B5
6D6C3DA8099A2CCA40BFC719F871279EBCED47E174691A748F0F25D3EF4E6FF3
CCA4C4AC248C0EA186005C0C7F9862DA2CCCE522616894D6C924DC0FD59C3341
18E135BD8463F476AA2517B5C34BC2DAAC1D23C8AF8BA8DDC3196732B5F6376E
9EABC4262FA5B357E9933B7464374D20B93C57AA1E1991E7E836DAA070A976AE
A6C8ECBE42FB3D6CD9F8E3B8335288F69D024FC3BF9C930EE98456CB77D82650
C46DB3284B94877D565FD4B2FACFF875CF135F7D41FA052C70D573BA4E8E0D95
218E997543FD9D8E3C36B4ECFC9CB97A5BDC81565A29020A101255671713CA68
A77606ECA8A30EAC595DDED6F245EA1E18A404ACA39D0F2740669AAA453EC548
3E1017C1153AA3D8565722506E3A10CAB97C5AF638FD2394033B8F4BFD317DB3
A31FCF2F0488F5F74117788B57CC0F44B1C6BCC3B5CBEA92D1B7EDC55F86196E
015B067593284C6ECDAA1818C7D9391E6614A94D653B0568950B5D14948C733D
6AA8A8E189043B00B3BD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600
(initial-example-causal-graph.dvi) @start /Fa 204[33
33 33 49[{ TeXf7b6d320Encoding ReEncodeFont }3 58.1154
/CMR7 rf /Fb 139[30 3[42 12[36 99[{ TeXaae443f0Encoding ReEncodeFont }3
83.022 /CMMI10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 709 a
 tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 709 a 0 709 1911 709
v 1911 709 a
 currentpoint grestore moveto
 1911 709 a 945 118 a
 tx@Dict begin tx@NodeDict begin {} false /N@C1 14 {-85.35823 0.0 /Y
ED /X ED /d .5 .5 sub CLW mul neg def /r 14.22636 d add def /l r neg
def /u 14.22636 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 945 118 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 14.22636 CLW .5
mul sub def /y2 14.22636 CLW .5 mul sub def -85.35823 0.0 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 200 130 a Fb(c)236 142 y Fa(1)945
118 y
 tx@Dict begin tx@NodeDict begin {} false /N@C2 14 {-28.45274 0.0 /Y
ED /X ED /d .5 .5 sub CLW mul neg def /r 14.22636 d add def /l r neg
def /u 14.22636 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 945 118 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 14.22636 CLW .5
mul sub def /y2 14.22636 CLW .5 mul sub def -28.45274 0.0 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial
672 130 a Fb(c)708 142 y Fa(2)945 118 y
 tx@Dict begin tx@NodeDict begin {} false /N@C3 14 {28.45274 0.0 /Y
ED /X ED /d .5 .5 sub CLW mul neg def /r 14.22636 d add def /l r neg
def /u 14.22636 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 945 118 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 14.22636 CLW .5
mul sub def /y2 14.22636 CLW .5 mul sub def 28.45274 0.0 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 1145 130 a Fb(c)1181 142 y Fa(3)945
118 y
 tx@Dict begin tx@NodeDict begin {} false /N@T 14 {85.35823 0.0 /Y
ED /X ED /d .5 .5 sub CLW mul neg def /r 14.22636 d add def /l r neg
def /u 14.22636 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 945 118 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 14.22636 CLW .5
mul sub def /y2 14.22636 CLW .5 mul sub def 85.35823 0.0 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial
1639 144 a Fb(t)945 118 y
 tx@Dict begin tx@NodeDict begin {} false /N@P1 14 {-28.45274 -56.90549
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 14.22636 d add def /l r
neg def /u 14.22636 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 945 118 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 14.22636 CLW .5
mul sub def /y2 14.22636 CLW .5 mul sub def -28.45274 -56.90549 2 copy
y2 sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end


@endspecial 669 601 a Fb(p)711 613 y Fa(1)945 118 y
 tx@Dict begin tx@NodeDict begin {} false /N@P2 14 {28.45274 -56.90549
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 14.22636 d add def /l r
neg def /u 14.22636 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end

945 118 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 14.22636 CLW .5
mul sub def /y2 14.22636 CLW .5 mul sub def 28.45274 -56.90549 2 copy
y2 sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 1142
601 a Fb(p)1184 613 y Fa(2)945 118 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@C1 /N@P1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 945 118 a 945 118
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@C2 /N@P1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 945 118 a 945 118 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@C3 /N@P1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 945 118 a 945 118 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@T /N@P1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore  grestore end
 945 118 a 945
118 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@C1 /N@P2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 945 118 a 945 118 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@C2 /N@P2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 945 118 a 945 118 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@C3 /N@P2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 945 118
a 945 118 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@T /N@P2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore  grestore end
 945 118 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 747 1178 a Fv(Figure)f(6:)29 b(Causal)24
b(dependencies)j(in)d(the)g(transportation)j(planning)f(task.)150
1485 y(of)i(these)i(are)f(graph)g(search)h(problems,)h(and)e(the)g
(corresponding)k(graphs)d(are)e(sho)n(wn)h(in)f(Fig.)g(3)g(and)h(Fig.)f
(4.)150 1598 y(Graphs)c(of)g(this)g(kind)g(will)f(be)h(formally)h
(introduced)h(as)e Fq(domain)g(tr)o(ansition)i(gr)o(aphs)f
Fv(in)f(Section)g(5.)291 1726 y(Of)35 b(course)i(these)f(graph)h
(search)g(problems)g(interact,)j(b)n(ut)c(the)o(y)g(only)h(do)e(so)h
(in)f(limited)i(w)o(ays:)53 b(State)150 1839 y(transitions)31
b(for)d(the)g(parcels)h(ha)n(v)o(e)f(associated)j(conditions)f(re)o
(garding)g(the)e(v)o(ehicle)h(\003eet,)f(which)g(need)h(to)e(be)150
1952 y(considered)h(in)d(addition)i(to)e(the)g(actual)h(path)g
(planning)h(in)e(Fig.)f(3.)33 b(F)o(or)24 b(e)o(xample,)i(a)e(parcel)i
(can)g(only)g(change)150 2065 y(state)e(from)f(\223at)h(location)h
Ft(A)p Fv(\224)e(to)g(\223inside)i(car)f Ft(c)1659 2079
y Fs(1)1699 2065 y Fv(\224)e(if)h(the)h(car)f Ft(c)2145
2079 y Fs(1)2208 2065 y Fv(is)g(at)g(location)i Ft(A)p
Fv(.)j(Ho)n(we)n(v)o(er)l(,)23 b(state)h(transitions)150
2178 y(for)35 b(the)h(v)o(ehicles)g(ha)n(v)o(e)g(no)f(associated)j
(conditions)g(from)d(other)h(parts)g(of)f(the)h(planning)h(task,)h(and)
e(hence)150 2291 y(mo)o(ving)27 b(a)e(v)o(ehicle)i(from)f(one)g
(location)i(to)e(another)i(is)e(indeed)h(as)f(easy)h(as)f(\002nding)g
(a)g(path)g(in)g(the)g(associated)150 2404 y(domain)f(transition)h
(graph.)31 b(W)-7 b(e)23 b(say)h(that)g(the)g(parcels)h(ha)n(v)o(e)g
Fq(causal)g(dependencies)j Fv(on)c(the)g(v)o(ehicles)h(because)150
2517 y(there)31 b(are)g(operators)i(that)e(change)h(the)e(state)i(of)e
(the)h(parcels)h(and)f(ha)n(v)o(e)g(preconditions)j(on)d(the)f(state)i
(of)e(the)150 2630 y(v)o(ehicles.)g(Indeed,)24 b(these)f(are)f(the)g
(only)h(causal)h(dependencies)i(in)c(this)g(task,)h(since)g(parcels)h
(do)e(not)g(depend)i(on)150 2743 y(other)i(parcels)g(and)g(v)o(ehicles)
h(do)e(not)g(depend)i(on)e(an)o(ything)h(e)o(xcept)g(themselv)o(es)h
(\(Fig.)e(6\).)32 b(The)25 b(set)g(of)g(causal)150 2856
y(dependencies)i(of)d(a)f(planning)j(task)e(is)f(visualized)k(in)c(its)
h Fq(causal)h(gr)o(aph)p Fv(.)291 2984 y(W)-7 b(e)23
b(ar)n(gue)i(that)f(humans)g(often)g(solv)o(e)h(planning)g(tasks)g(in)e
(the)h(hierarchical)j(f)o(ashion)e(outlined)h(in)d(the)h(pre-)150
3097 y(ceding)32 b(paragraphs,)j(and)30 b(that)h(algorithmic)i
(approaches)g(to)e(action)g(planning)i(can)e(usefully)h(apply)f
(similar)150 3210 y(ideas.)d(Indeed,)22 b(as)e(we)f(will)g(sho)n(w)h
(in)f(the)h(follo)n(wing)i(section,)f(we)e(are)h(not)g(the)g(\002rst)g
(to)f(introduce)k(domain)d(tran-)150 3322 y(sition)29
b(graphs)g(and)f(causal)h(graphs.)43 b(Ho)n(we)n(v)o(er)l(,)28
b(earlier)h(w)o(ork)f(has)g(almost)g(e)o(xclusi)n(v)o(ely)i(focused)g
(on)e Fq(acyclic)150 3435 y Fv(causal)k(graphs,)i(and)e(for)f(a)f(good)
i(reason:)46 b(If)30 b(the)h(causal)i(graph)f(of)f(a)f(planning)j(task)
f(e)o(xhibits)g(a)f(c)o(ycle,)i(hi-)150 3548 y(erarchical)e
(decomposition)i(is)28 b(not)i(possible,)i(because)e(the)g(subproblems)
h(that)f(must)e(be)h(solv)o(ed)h(to)f(achie)n(v)o(e)150
3661 y(an)c(operator)j(precondition)h(are)d(not)f(necessarily)k
(smaller)d(than)g(the)g(original)h(task.)35 b(As)25 b(f)o(ar)g(as)g(we)
g(are)h(a)o(w)o(are,)150 3774 y(we)h(were)g(the)g(\002rst)g(\(Helmert,)
i(2004\))g(to)e(present)i(a)e Fq(g)o(ener)o(al)i Fv(planning)h
(algorithm)f(that)f(focuses)h(on)f(e)o(xploit-)150 3887
y(ing)c(hierarchical)j(information)f(from)d(causal)i(graphs.)30
b(Ho)n(we)n(v)o(er)l(,)24 b(our)f Fq(causal)j(gr)o(aph)e(heuristic)i
Fv(also)e(requires)150 4000 y(ac)o(yclicity;)43 b(in)35
b(the)g(general)h(case,)i(it)d(considers)i(a)e(relax)o(ed)h(planning)h
(problem)f(in)f(which)g(some)g(operator)150 4113 y(preconditions)28
b(are)23 b(ignored)j(to)d(break)i(causal)g(c)o(ycles.)291
4241 y(Kno)n(wing)d(that)g(c)o(ycles)g(in)g(causal)h(graphs)g(are)e
(undesirable,)k(we)c(tak)o(e)h(a)f(closer)i(look)f(at)f(the)h
(transportation)150 4354 y(planning)i(task.)29 b(Let)21
b(us)g(recall)i(our)f(informal)h(de\002nition)g(of)f(causal)g(graphs:)
30 b(The)21 b(causal)i(graph)g(of)f(a)f(planning)150
4467 y(task)27 b(contains)h(a)d(v)o(erte)o(x)i(for)f(each)g(state)h(v)n
(ariable)h(and)e(arcs)g(from)g(v)n(ariables)i(that)f(occur)g(in)e
(preconditions)30 b(to)150 4580 y(v)n(ariables)e(that)f(occur)g(in)f
(ef)n(fects)h(of)f(the)g(same)g(operator)-5 b(.)39 b(So)25
b(f)o(ar)l(,)i(we)e(may)h(ha)n(v)o(e)h(gi)n(v)o(en)f(the)g(impression)j
(that)150 4693 y(the)h(causal)g(graph)h(of)e(the)g(e)o(xample)i(task)f
(has)f(the)h(well-beha)n(v)o(ed)i(shape)e(sho)n(wn)g(in)f(Fig.)g(6.)45
b(Unfortunately)-6 b(,)150 4806 y(ha)n(ving)27 b(a)d(closer)j(look)e
(at)g(the)h(STRIPS)c(encoding)27 b(in)e(Fig.)f(2,)h(we)f(see)i(that)f
(this)h(is)f(not)g(the)g(case:)33 b(The)25 b(correct)150
4918 y(causal)h(graph,)g(sho)n(wn)f(in)g(Fig.)f(7,)g(looks)i(v)o(ery)f
(messy)-6 b(.)33 b(This)25 b(discrepanc)o(y)i(between)f(the)f(intuiti)n
(v)o(e)i(and)e(actual)150 5031 y(graph)31 b(is)e(due)g(to)h(the)f(f)o
(act)h(that)g(in)f(our)h(informal)h(account)g(of)e(\223human-style\224)
k(problem)d(solving,)j(we)28 b(made)150 5144 y(use)k(of)f
(\(non-binary\))k(state)e(v)n(ariables)g(lik)o(e)f(\223the)h(location)g
(of)f(car)f Ft(c)2411 5158 y Fs(1)2451 5144 y Fv(\224)g(or)g(\223the)i
(state)f(of)f(parcel)i Ft(p)3413 5158 y Fs(1)3452 5144
y Fv(\224,)g(while)150 5257 y(STRIPS-le)n(v)o(el)27 b(state)i(v)n
(ariables)h(correspond)h(to)d(\(binary\))i(object-location)j
(propositions)e(lik)o(e)e(\223parcel)h Ft(p)3623 5271
y Fs(1)3689 5257 y Fv(is)1888 5506 y Fy(195)p eop end
%%Page: 196 6
TeXDict begin 196 5 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)325
1732 y @beginspecial 71 @llx 532 @lly 461 @urx 721 @ury
3900 @rwi @setspecial
%%BeginDocument: figures/initial-example-strips-causal-graph.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.92b Copyright 2002 Radical Eye Software
%%Title: initial-example-strips-causal-graph.dvi
%%BoundingBox: 71 532 461 721
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o initial-example-strips-causal-graph.eps
%+ initial-example-strips-causal-graph.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2006.07.12:1710
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 40258437 52099154 1000 600 600
(initial-example-strips-causal-graph.dvi) @start end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 1559 a
 tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 1559 a 0 1559 3234 1560
v 3234 1559 a
 currentpoint grestore moveto
 3234 1559 a 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atc1a 14 {14.22636 142.26372
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 14.22636 142.26372 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atc1b 14 {42.67911 170.71646
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 42.67911 170.71646 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atc1c 14 {42.67911 113.81097
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 42.67911 113.81097 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atc1d 14 {42.67911 142.26372
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 42.67911 142.26372 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atc2a 14 {113.81097 142.26372
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 113.81097 142.26372 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atc2b 14 {142.26372 170.71646
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 142.26372 170.71646 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atc2c 14 {142.26372 113.81097
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 142.26372 113.81097 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atc2d 14 {142.26372 142.26372
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 142.26372 142.26372 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@attd 14 {199.1692 142.26372
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 199.1692 142.26372 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atte 14 {227.62195 142.26372
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 227.62195 142.26372 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atc3e 14 {284.52744 142.26372
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 284.52744 142.26372 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atc3f 14 {312.98018 166.90372
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 312.98018 166.90372 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atc3g 14 {312.98018 117.6237
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 312.98018 117.6237 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@inp1c1 14 {0.0 56.90549
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 0.0 56.90549 2 copy y2 sub /y1
ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@inp2c1 14 {71.13185 56.90549
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 71.13185 56.90549 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@inp1c2 14 {99.5846 56.90549
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 99.5846 56.90549 2 copy y2 sub
/y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0
eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@inp2c2 14 {170.71646 56.90549
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 170.71646 56.90549 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@inp1t 14 {199.1692 56.90549
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 199.1692 56.90549 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@inp2t 14 {227.62195 56.90549
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 227.62195 56.90549 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@inp1c3 14 {270.30106 56.90549
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 270.30106 56.90549 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@inp2c3 14 {341.43292 56.90549
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 341.43292 56.90549 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atp1a 14 {0.0 0.0 /Y ED
/X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r neg def
/u 5.69046 d add def /d u neg def /NodePos { GetRnodePos } def} NewNode
end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 0.0 0.0 2 copy y2 sub /y1 ED
x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0 eq { pop
pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atp2a 14 {28.45274 0.0
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 28.45274 0.0 2 copy y2 sub /y1
ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atp1b 14 {56.90549 0.0
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 56.90549 0.0 2 copy y2 sub /y1
ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atp2b 14 {85.35823 0.0
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 85.35823 0.0 2 copy y2 sub /y1
ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atp1c 14 {113.81097 0.0
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 113.81097 0.0 2 copy y2 sub
/y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0
eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atp2c 14 {142.26372 0.0
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 142.26372 0.0 2 copy y2 sub
/y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0
eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atp1d 14 {170.71646 0.0
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 170.71646 0.0 2 copy y2 sub
/y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0
eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atp2d 14 {199.1692 0.0
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 199.1692 0.0 2 copy y2 sub /y1
ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atp1e 14 {227.62195 0.0
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 227.62195 0.0 2 copy y2 sub
/y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0
eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atp2e 14 {256.07469 0.0
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 256.07469 0.0 2 copy y2 sub
/y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0
eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atp1f 14 {284.52744 0.0
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 284.52744 0.0 2 copy y2 sub
/y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0
eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atp2f 14 {312.98018 0.0
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 312.98018 0.0 2 copy y2 sub
/y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0
eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atp1g 14 {341.43292 0.0
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 341.43292 0.0 2 copy y2 sub
/y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0
eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin tx@NodeDict begin {} false /N@atp2g 14 {369.88567 0.0
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 5.69046 d add def /l r
neg def /u 5.69046 d add def /d u neg def /NodePos { GetRnodePos }
def} NewNode end end
 71 1488 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 5.69046 CLW .5 mul
sub def /y2 5.69046 CLW .5 mul sub def 369.88567 0.0 2 copy y2 sub
/y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0
eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end
 
@endspecial 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@atc1a
/N@atc1d InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@atc1b
/N@atc1d InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@atc1c
/N@atc1d InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@atc1a
/N@atc1d InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71
1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@atc2a
/N@atc2d InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@atc2b
/N@atc2d InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@atc2c
/N@atc2d InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488
a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@atc2a
/N@atc2d InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@attd
/N@atte InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@atc3e
/N@atc3f InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71
1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@atc3f
/N@atc3g InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@atc3g
/N@atc3e InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc1a /N@inp1c1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc1a /N@inp2c1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc1b /N@inp1c1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71
1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc1b /N@inp2c1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc1c /N@inp1c1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc1c /N@inp2c1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488
a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc1d /N@inp1c1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc1d /N@inp2c1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc2a /N@inp1c2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71
1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc2a /N@inp2c2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc2b /N@inp1c2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71 1488
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc2b /N@inp2c2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc2c /N@inp1c2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc2c /N@inp2c2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71
1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc2d /N@inp1c2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc2d /N@inp2c2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@attd /N@inp1t InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488
a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@attd /N@inp2t InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atte /N@inp1t InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atte /N@inp2t InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71
1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc3e /N@inp1c3 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc3e /N@inp2c3 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71 1488
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc3f /N@inp1c3 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc3f /N@inp2c3 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc3g /N@inp1c3 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71
1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@atc3g /N@inp2c3 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp1c1
/N@atp1a InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp2c1
/N@atp2a InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488
a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp1c1
/N@atp1b InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp2c1
/N@atp2b InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp1c1
/N@atp1c InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71
1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp2c1
/N@atp2c InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp1c1
/N@atp1d InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp2c1
/N@atp2d InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp1c2
/N@atp1a InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp2c2
/N@atp2a InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71
1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp1c2
/N@atp1b InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp2c2
/N@atp2b InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp1c2
/N@atp1c InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488
a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp2c2
/N@atp2c InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp1c2
/N@atp1d InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp2c2
/N@atp2d InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71
1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp1t
/N@atp1d InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp2t
/N@atp2d InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp1t
/N@atp1e InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp2t
/N@atp2e InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp1c3
/N@atp1e InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71
1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp2c3
/N@atp2e InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp1c3
/N@atp1f InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp2c3
/N@atp2f InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488
a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp1c3
/N@atp1g InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a 71 1488 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@inp2c3
/N@atp2g InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore  grestore end
 71 1488 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 416 2028 a Fv(Figure)24 b(7:)29 b(Causal)24
b(graph)h(for)e(the)h(STRIPS)d(encoding)26 b(of)e(the)f(transportation)
28 b(planning)e(task.)150 2307 y(at)i(location)i Ft(A)p
Fv(\224.)43 b(It)28 b(w)o(ould)h(be)f(much)g(nicer)i(if)e(we)f(were)h
(gi)n(v)o(en)h(a)f(multi-v)n(alued)i(encoding)h(of)d(the)h(planning)150
2420 y(task)h(that)g(e)o(xplicitly)h(contains)h(a)d(v)n(ariable)i(for)e
(\223the)h(location)i(of)d(car)h Ft(c)2499 2434 y Fs(1)2538
2420 y Fv(\224)f(and)h(similar)g(properties.)49 b(Indeed,)150
2533 y(the)27 b(nice)h(looking)g(ac)o(yclic)g(graph)h(in)d(Fig.)g(6)h
(is)f(the)h(causal)i(graph)f(of)e(the)i(multi-v)n(alued)h(encoding)g
(sho)n(wn)e(in)150 2646 y(Fig.)c(8.)291 2760 y(Ha)n(ving)33
b(pro)o(vided)h(some)e(intuition)i(for)e(its)g(underlying)j(concepts,)h
(let)c(us)g(no)n(w)f(state)i(our)f(design)h(goal)150
2873 y(for)g(the)f(F)o(ast)g(Do)n(wnw)o(ard)h(planning)i(system:)48
b Fq(T)-8 b(o)31 b(de)o(velop)j(an)f(algorithm)h(that)f(ef)n
(\002ciently)j(solves)e(g)o(ener)o(al)150 2986 y(pr)l(opositional)28
b(planning)e(tasks)f(by)f(e)n(xploiting)i(the)e(hier)o(ar)m(c)o(hical)j
(structur)m(e)f(inher)m(ent)f(in)f(causal)h(gr)o(aphs.)31
b Fv(W)-7 b(e)150 3099 y(need)24 b(to)g(o)o(v)o(ercome)g(three)h(major)
f(obstacles)i(in)d(this)h(undertaking:)286 3291 y Fo(\017)46
b Fv(First,)31 b(propositionally)k(encoded)d(planning)g(tasks)f
(usually)h(ha)n(v)o(e)e(v)o(ery)g(unstructured)k(causal)d(graphs.)377
3404 y(Ho)n(we)n(v)o(er)l(,)38 b(the)e(intuiti)n(v)o(e)i(dependencies)h
(often)e(become)f(visible)h(in)f(encodings)i(with)e(multi-v)n(alued)377
3517 y(state)25 b(v)n(ariables.)32 b(T)-7 b(o)23 b(e)o(xploit)i(this)g
(f)o(act)f(in)g(an)g(automated)i(PDDL)21 b(planning)26
b(system,)f(we)e(ha)n(v)o(e)i(de)n(vised)377 3630 y(an)18
b(automatic)i(algorithm)g(for)f(\223translating\224)i(\(or)e
(reformulating\))i(propositional)h(tasks)e(to)e(multi-v)n(alued)377
3743 y(ones.)48 b(The)29 b(translation)j(algorithm)g(can)e(be)f
(considered)k(independently)h(from)29 b(the)h(rest)g(of)f(the)h(plan-)
377 3856 y(ner;)h(in)d(f)o(act,)h(it)f(is)g(no)n(w)f(also)i(used)g(as)f
(part)g(of)g(other)h(planning)i(systems)e(\(v)n(an)f(den)h(Briel,)f(V)
-12 b(ossen,)29 b(&)377 3969 y(Kambhampati,)22 b(2005\).)30
b(T)-7 b(o)19 b(k)o(eep)j(the)e(article)i(focused,)h(we)d(do)h
Fq(not)h Fv(discuss)h(the)e(translation)i(algorithm)377
4082 y(here,)i(referring)h(to)e(our)g(earlier)h(w)o(ork)f(for)g(some)g
(of)g(its)g(central)i(ideas)f(\(Edelkamp)g(&)d(Helmert,)i(1999\).)377
4195 y(Instead,)h(we)e(consider)j(its)d(output,)i(a)e
Fq(multi-valued)k(planning)f(task)p Fv(,)d(as)h(a)f(base)h(formalism.)
286 4387 y Fo(\017)46 b Fv(Second,)30 b(no)e(matter)g(ho)n(w)f(cle)n(v)
o(er)i(the)f(encoding)i(is,)f(most)f(planning)i(tasks)f(are)f(not)g
(completely)i(hier)n(-)377 4500 y(archical)k(in)e(nature.)55
b(T)-7 b(o)31 b(deal)h(with)g(causal)h(c)o(ycles,)i(we)c(consider)j
(relaxations)h(where)d(some)g(causal)377 4613 y(dependencies)f(are)d
(ignored)h(and)f(use)g(solutions)i(to)d(the)g(relax)o(ed)i(problem)g
(within)e(a)g(heuristic)j(search)377 4726 y(algorithm.)286
4918 y Fo(\017)46 b Fv(Third,)23 b(e)n(v)o(en)f(for)h(planning)i(tasks)
e(that)g(can)g(be)f(solv)o(ed)h(hierarchically)-6 b(,)27
b(\002nding)c(such)g(a)f(solution)j(is)d(dif-)377 5031
y(\002cult)g(\(indeed,)i(still)e Fz(PSP)-7 b(A)i(CE)p
Fv(-complete\).)28 b(F)o(or)21 b(this)h(reason,)h(our)f(heuristic)i
(function)g(only)f(considers)377 5144 y(a)i(fragment)h(of)f(a)f(task)h
(at)g(a)f(time,)h(namely)h(subproblems)h(induced)g(by)e(a)f(single)j
(state)e(v)n(ariable)i(and)e(its)377 5257 y(predecessors)h(in)d(the)f
(causal)i(graph.)30 b(Ev)o(en)22 b Fq(this)h Fv(planning)h(problem)g
(is)e(still)h(NP-complete,)h(so)e(that)h(we)1888 5506
y Fy(196)p eop end
%%Page: 197 7
TeXDict begin 197 6 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)p
246 764 3409 4 v 246 4377 4 3614 v 296 851 a Fv(V)-10
b(ariables:)406 964 y Fp(p1)p Fv(,)53 b Fp(p2)h Fo(2)g(f)p
Fp(at-a)p Fv(,)f Fp(at-b)p Fv(,)f Fp(at-c)p Fv(,)h Fp(at-d)p
Fv(,)f Fp(at-e)p Fv(,)g Fp(at-f)p Fv(,)h Fp(at-g)p Fv(,)910
1077 y Fp(in-c1)p Fv(,)f Fp(in-c2)p Fv(,)g Fp(in-c3)p
Fv(,)g Fp(in-t)p Fo(g)406 1190 y Fp(c1)p Fv(,)h Fp(c2)h
Fo(2)g(f)p Fp(at-a)p Fv(,)f Fp(at-b)p Fv(,)f Fp(at-c)p
Fv(,)h Fp(at-d)p Fo(g)406 1303 y Fp(c3)240 b Fo(2)54
b(f)p Fp(at-e)p Fv(,)f Fp(at-f)p Fv(,)f Fp(at-g)p Fo(g)406
1416 y Fp(t)295 b Fo(2)54 b(f)p Fp(at-d)p Fv(,)f Fp(at-e)p
Fo(g)296 1529 y Fv(Init:)406 1642 y Fp(p1)g(=)h(at-c)p
Fv(,)f Fp(p2)g(=)h(at-f)406 1754 y(c1)f(=)h(at-a)p Fv(,)f
Fp(c2)g(=)h(at-b)p Fv(,)f Fp(c3)h(=)g(at-g)p Fv(,)e Fp(t)i(=)g(at-e)296
1867 y Fv(Goal:)406 1980 y Fp(p1)f(=)h(at-g)p Fv(,)f
Fp(p2)g(=)h(at-e)296 2093 y Fv(Operator)j Fp(drive-c1-a-d)p
Fv(:)406 2206 y(PRE:)c Fp(c1)h(=)g(at-a)107 b Fv(EFF:)54
b Fp(c1)f(=)h(at-d)296 2319 y Fv(Operator)j Fp(drive-c1-b-d)p
Fv(:)406 2432 y(PRE:)c Fp(c1)h(=)g(at-b)107 b Fv(EFF:)54
b Fp(c1)f(=)h(at-d)296 2545 y Fv(Operator)j Fp(drive-c1-c-d)p
Fv(:)406 2658 y(PRE:)c Fp(c1)h(=)g(at-c)107 b Fv(EFF:)54
b Fp(c1)f(=)h(at-d)296 2771 y(...)296 2884 y Fv(Operator)j
Fp(load-c1-p1-a)p Fv(:)406 2996 y(PRE:)c Fp(c1)h(=)g(at-a)p
Fv(,)e Fp(p1)i(=)g(at-a)107 b Fv(EFF:)54 b Fp(p1)f(=)h(in-c1)296
3109 y Fv(Operator)j Fp(load-c1-p1-b)p Fv(:)406 3222
y(PRE:)c Fp(c1)h(=)g(at-b)p Fv(,)e Fp(p1)i(=)g(at-b)107
b Fv(EFF:)54 b Fp(p1)f(=)h(in-c1)296 3335 y Fv(Operator)j
Fp(load-c1-p1-c)p Fv(:)406 3448 y(PRE:)c Fp(c1)h(=)g(at-c)p
Fv(,)e Fp(p1)i(=)g(at-c)107 b Fv(EFF:)54 b Fp(p1)f(=)h(in-c1)296
3561 y(...)296 3674 y Fv(Operator)j Fp(unload-c1-p1-a)p
Fv(:)406 3787 y(PRE:)c Fp(c1)h(=)g(at-a)p Fv(,)e Fp(p1)i(=)g(in-c1)107
b Fv(EFF:)53 b Fp(p1)h(=)g(at-a)296 3900 y Fv(Operator)j
Fp(unload-c1-p1-b)p Fv(:)406 4013 y(PRE:)c Fp(c1)h(=)g(at-b)p
Fv(,)e Fp(p1)i(=)g(in-c1)107 b Fv(EFF:)53 b Fp(p1)h(=)g(at-b)296
4126 y Fv(Operator)j Fp(unload-c1-p1-c)p Fv(:)406 4238
y(PRE:)c Fp(c1)h(=)g(at-c)p Fv(,)e Fp(p1)i(=)g(in-c1)107
b Fv(EFF:)53 b Fp(p1)h(=)g(at-c)296 4351 y(...)p 3651
4377 V 246 4380 3409 4 v 166 4634 a Fv(Figure)24 b(8:)29
b(P)o(art)23 b(of)h(an)f(encoding)j(of)e(the)f(transportation)28
b(planning)e(task)e(with)g(multi-v)n(alued)i(state)e(v)n(ariables.)1888
5506 y Fy(197)p eop end
%%Page: 198 8
TeXDict begin 198 7 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)377
249 y Fv(are)29 b(content)h(with)e(an)h(incomplete)h(solution)h
(algorithm)f(within)f(the)g(heuristic)h(solv)o(er)-5
b(.)45 b(This)28 b(solution)377 361 y(algorithm)e(has)d(theoretical)k
(shortcomings)g(b)n(ut)d(ne)n(v)o(er)g(f)o(ailed)g(us)g(in)f(practice.)
291 590 y(Ha)n(ving)31 b(introduced)h(the)e(rationale)i(of)d(our)h
(approach,)j(we)c(discuss)i(related)g(w)o(ork)f(in)f(the)h(ne)o(xt)g
(section.)150 703 y(This)18 b(is)h(follo)n(wed)g(by)g(an)g(o)o(v)o
(ervie)n(w)g(of)f(the)h(general)h(architecture)i(of)d(the)g(F)o(ast)f
(Do)n(wnw)o(ard)g(planning)j(system)e(in)150 816 y(Section)25
b(3.)31 b(The)24 b(planning)i(system)f(consists)i(of)d(three)h
(components:)33 b Fq(tr)o(anslation)p Fv(,)28 b Fq(knowledg)o(e)e
(compilation)p Fv(,)150 929 y(and)34 b Fq(sear)m(c)o(h)p
Fv(.)60 b(The)33 b(translation)k(component)f(con)l(v)o(erts)g(PDDL2.2)c
(tasks)j(to)e(multi-v)n(alued)j(planning)g(tasks,)150
1042 y(which)27 b(we)f(formally)i(introduce)h(in)e(Section)g(4.)38
b(The)26 b(kno)n(wledge)i(compilation)i(component)f(is)d(discussed)j
(in)150 1155 y(Section)k(5,)g(the)f(search)h(component)h(in)e(Section)h
(6.)53 b(W)-7 b(e)31 b(conclude)j(with)d(a)h(presentation)j(of)d(e)o
(xperimental)150 1268 y(results)25 b(in)f(Section)g(7)f(and)h(some)g
(discussion)i(in)e(Section)g(8.)150 1538 y Fw(2.)35 b(Related)25
b(W)-7 b(ork)150 1722 y Fv(As)25 b(a)g(planning)j(system)e(based)h(on)e
(heuristic)j(forw)o(ard)f(search,)g(F)o(ast)e(Do)n(wnw)o(ard)g(is)h
(clearly)h(related)g(to)e(other)150 1835 y(heuristic)30
b(planners)g(such)f(as)f(HSP)e(\(Bonet)j(&)e(Gef)n(fner)l(,)i(2001\))h
(or)d(FF)g(\(Hof)n(fmann)i(&)d(Nebel,)k(2001\))f(on)f(the)150
1947 y(architectural)c(le)n(v)o(el.)k(Ho)n(we)n(v)o(er)l(,)21
b(in)f(this)h(section)h(we)e(focus)i(on)e(w)o(ork)h(that)g(is)f
(related)i(on)f(the)g Fq(conceptual)i Fv(le)n(v)o(el,)150
2060 y(i.)15 b(e.,)21 b(w)o(ork)h(that)g(uses)g(similar)h(forms)e(of)h
(hierarchical)j(decomposition)g(of)c(causal)i(graphs)h(and)e(w)o(ork)f
(that)h(uses)150 2173 y(similar)i(forms)g(of)g(search)g(in)g(domain)g
(transition)j(graphs.)150 2416 y Fz(2.1)46 b(Causal)24
b(Graphs)e(and)h(Abstraction)150 2588 y Fv(The)f(term)h
Fq(causal)h(gr)o(aph)g Fv(\002rst)e(appears)j(in)e(the)g(literature)i
(in)e(the)g(w)o(ork)f(by)h(W)l(illiams)h(and)f(Nayak)g(\(1997\),)i(b)n
(ut)150 2701 y(the)h(general)h(idea)f(is)f(considerably)30
b(older)-5 b(.)35 b(The)25 b(approach)j(of)d(hierarchically)30
b(decomposing)e(planning)g(tasks)150 2814 y(is)k(ar)n(guably)i(as)e
(old)g(as)g(the)g(\002eld)f(of)h(AI)f(Planning)i(itself,)i(ha)n(ving)e
(\002rst)f(surf)o(aced)i(in)d(Ne)n(well)h(and)g(Simon')-5
b(s)150 2926 y(\(1963\))25 b(w)o(ork)f(on)f(the)h(General)h(Problem)e
(Solv)o(er)-5 b(.)291 3050 y(Still,)31 b(it)e(took)i(a)e(long)h(time)g
(for)f(these)i(notions)g(to)f(e)n(v)n(olv)o(e)h(to)e(their)i(modern)f
(form.)47 b(Sacerdoti')-5 b(s)32 b(\(1974\))150 3163
y(ABSTRIPS)17 b(algorithm)22 b(introduced)i(the)c(concept)j(of)d
Fq(abstr)o(action)k(spaces)e Fv(for)e(STRIPS-lik)o(e)g(planning)i
(tasks.)150 3276 y(An)28 b(abstraction)k(space)e(of)f(a)f(STRIPS)e
(task)k(is)f(the)g(state)g(space)h(of)f(an)g Fq(abstr)o(acted)i(task)p
Fv(,)g(which)e(is)g(obtained)150 3388 y(by)f(remo)o(ving)i(all)e
(preconditions)k(from)c(the)g(operators)j(of)d(the)g(original)i(task)f
(that)g(belong)h(to)e(a)f(gi)n(v)o(en)i(set)f(of)150
3501 y(propositions)j(\(which)d(are)g Fq(abstr)o(acted)i(away)p
Fv(\).)1696 3468 y FB(1)1774 3501 y Fv(T)-7 b(o)27 b(solv)o(e)h(a)f
(planning)j(task,)f(ABSTRIPS)24 b(\002rst)j(generates)j(a)150
3614 y(plan)g(for)f(an)f(abstracted)k(task,)e(then)g(re\002nes)f(this)h
(plan)f(by)g(inserting)i(concrete)g(plans)f(between)g(the)f(abstract)
150 3727 y(plan)35 b(steps)f(that)h(\223bridge)g(the)g(gap\224)f
(between)h(abstract)h(states)f(by)e(satisfying)k(the)d(operator)i
(preconditions)150 3840 y(which)e(were)g(ignored)i(at)e(the)h(abstract)
h(le)n(v)o(el.)60 b(The)34 b(idea)h(is)e(easily)j(generalized)h(to)d
(se)n(v)o(eral)h(le)n(v)o(els)g(of)f(ab-)150 3953 y(straction)g
(forming)e(an)f Fq(abstr)o(action)j(hier)o(ar)m(c)o(hy)p
Fv(,)h(with)c(a)g(v)o(ery)h(abstract)h(le)n(v)o(el)e(at)g(the)h(top)g
(where)f(almost)h(all)150 4066 y(preconditions)26 b(are)d(ignored,)h
(successi)n(v)o(ely)h(introducing)h(more)c(preconditions)k(at)c(e)n(v)o
(ery)h(layer)g(until)g(the)f(\002nal)150 4179 y(layer)i(of)g(the)g
(hierarchy)h(equals)g(the)f(original)i(planning)g(task.)291
4302 y(One)33 b(problem)i(with)e(this)h(approach)h(to)e(planning)j(is)d
(that)h(in)f(general)i(there)g(is)e(no)g(guarantee)j(that)e(the)150
4415 y(abstract)22 b(plans)f(bear)f(an)o(y)g(resemblance)j(to)d
(reasonable)i(concrete)g(plans.)29 b(F)o(or)19 b(e)o(xample,)i(if)f
(abstraction)j(spaces)150 4528 y(are)e(chosen)i(badly)-6
b(,)23 b(it)e(is)g(quite)h(possible)h(that)f(\002nding)g(a)e(concrete)k
(plan)e(that)f(satis\002es)i(the)e(precondition)k(of)c(the)150
4641 y(\002rst)g(operator)i(in)e(the)h(abstract)h(plan)f(is)f(more)g
(dif)n(\002cult)h(than)g(solving)h(the)e(original)j(goal)d(at)g(the)h
(concrete)h(le)n(v)o(el.)150 4754 y(Such)h(shortcomings)j(spa)o(wned)e
(a)e(lar)n(ge)j(amount)e(of)g(research)i(on)e(the)h(properties)h(of)e
(abstraction)j(hierarchies)150 4867 y(and)d(ho)n(w)f(the)o(y)h(can)g
(be)f(generated)j(automatically)-6 b(.)p 150 4989 1440
4 v 195 5075 a Fn(1.)24 b(In)e(later)h(w)o(ork)g(by)h(other)f(authors,)
h(propositions)g(which)g(are)f(abstracted)g(a)o(w)o(ay)h(are)f(also)g
(remo)o(v)o(ed)h(from)e(the)h(operator)h(ef)n(fects.)275
5166 y(This)17 b(only)h(mak)o(es)g(a)g(dif)n(ference)g(in)f(subtle)h
(cases)g(that)f(require)h(the)f(presence)i(of)f(axioms;)g(we)f(do)h
(not)g(distinguish)g(between)g(these)275 5257 y(tw)o(o)h(kinds)g(of)g
(abstraction)h(here.)1888 5506 y Fy(198)p eop end
%%Page: 199 9
TeXDict begin 199 8 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)291
249 y Fv(T)-6 b(enenber)n(g)31 b(\(1991\))f(gi)n(v)o(es)f(one)g(of)g
(the)g(\002rst)f(formal)h(accounts)i(of)e(the)g(properties)i(of)e(dif)n
(ferent)h(kinds)g(of)150 361 y(abstraction.)45 b(Among)28
b(other)h(contrib)n(utions,)j(he)c(de\002nes)h(the)f(so-called)i
Fq(upwar)m(d)f(solution)h(pr)l(operty)p Fv(,)h(which)150
474 y(can)f(be)g(informally)i(stated)f(as:)42 b(\223If)31
b(there)f(e)o(xists)h(a)f(concrete)i(solution,)h(then)e(there)g(also)f
(e)o(xists)h(an)f(abstract)150 587 y(solution\224.)51
b(Rather)30 b(surprisingly)-6 b(,)36 b(not)30 b(all)g(abstractions)k
(considered)f(at)d(the)g(time)g(satis\002ed)h(this)g(v)o(ery)f(basic)
150 700 y(property)-6 b(,)27 b(without)f(which)g(one)f(w)o(ould)g(be)g
(loathe)i(to)e(call)g(a)f(gi)n(v)o(en)i(state)g(space)g(an)f
(\223abstraction\224)k(of)24 b(another)150 813 y(state)g(space.)291
940 y(A)19 b(limitation)j(of)e(the)g(upw)o(ard)h(solution)h(property)h
(is)c(that)i(it)f(states)h(no)f(relationship)k(between)d(the)f
(concrete)150 1053 y(and)31 b(abstract)h(plan)f(at)f(all.)50
b(F)o(or)29 b(ABSTRIPS-style)g(hierarchical)34 b(planning)e(to)f(be)f
(successful,)35 b(the)30 b(abstract)150 1166 y(plan)37
b(must)g(bear)g(some)g(resemblance)i(to)e(a)f(concrete)j(one;)44
b(otherwise)38 b(there)g(is)e(little)i(point)g(in)e(trying)i(to)150
1279 y(re\002ne)25 b(it.)30 b(Indeed,)c(T)-6 b(enenber)n(g)26
b(introduces)i(stronger)e(v)o(ersions)g(of)e(the)h(upw)o(ard)g
(solution)i(property)-6 b(,)26 b(b)n(ut)f(more)150 1392
y(rele)n(v)n(ant)30 b(to)f(F)o(ast)f(Do)n(wnw)o(ard)h(is)g(Knoblock')-5
b(s)31 b(\(1994\))g(w)o(ork)e(on)g(the)g Fq(or)m(der)m(ed)h
(monotonicity)i(pr)l(operty)p Fv(.)47 b(An)150 1505 y(abstraction)38
b(space)f(satis\002es)f(the)g(ordered)h(monotonicity)h(property)g(if,)f
(roughly)g(speaking,)k(an)o(y)35 b(concrete)150 1617
y(solution)c(can)f(be)f(deri)n(v)o(ed)h(from)f(some)g(abstract)i
(solution)h(while)d(lea)n(ving)i(the)e(actions)i(in)e(the)g(abstract)i
(plan)150 1730 y(intact)d(and)g(rele)n(v)n(ant)h(to)e(the)h(concrete)h
(plan.)40 b(Clearly)-6 b(,)29 b(this)f(is)f(a)g(v)o(ery)h(important)h
(property)g(for)e(ABSTRIPS-)150 1843 y(lik)o(e)d(hierarchical)j
(planning.)291 1970 y(It)21 b(is)f(in)h(Knoblock')-5
b(s)23 b(article)f(that)f(causal)h(graphs)h(\002rst)d(surf)o(ace)j
(\(although)g(he)e(does)g(not)g(introduce)j(a)c(name)150
2083 y(for)37 b(them\).)69 b(T)m(ranslated)39 b(to)e(our)g(terminology)
-6 b(,)43 b(Knoblock)38 b(pro)o(v)o(es)g(the)f(follo)n(wing)i
(relationship)h(between)150 2196 y(useful)33 b(abstractions)j(and)c
(causal)h(graphs:)48 b Fq(If)31 b(the)h(causal)i(gr)o(aph)f(contains)h
(no)e(path)g(fr)l(om)g(a)g(variable)i(that)150 2309 y(is)28
b(not)g(abstr)o(acted)j(away)d(to)g(a)g(variable)i(that)f(is)e(abstr)o
(acted)k(away)-5 b(,)29 b(then)g(the)f(abstr)o(action)j(has)e(the)f(or)
m(der)m(ed)150 2422 y(monotonicity)22 b(pr)l(operty)-5
b(.)30 b Fv(In)20 b(particular)l(,)j(this)d(means)g(that)g(for)g(ac)o
(yclic)g(causal)h(graphs,)h(it)d(is)h(possible)i(to)d(de)n(vise)150
2535 y(an)24 b(abstraction)i(hierarchy)g(where)e(only)g(one)g(ne)n(w)f
(v)n(ariable)i(is)e(introduced)k(at)c(each)i(le)n(v)o(el.)291
2662 y(Besides)31 b(these)h(theoretical)h(contrib)n(utions,)j(Knoblock)
c(presents)h(a)c(planning)k(system)e(called)h(ALPINE)150
2775 y(which)j(computes)i(an)d(abstraction)k(hierarchy)f(for)e(a)g
(planning)i(task)e(from)g(its)g(causal)h(graph)g(and)f(e)o(xploits)150
2888 y(this)29 b(within)g(a)f(hierarchical)k(re\002nement)e(planner)-5
b(.)45 b(Although)30 b(the)f(planning)i(method)e(is)g(v)o(ery)g(dif)n
(ferent,)i(the)150 3001 y(deri)n(v)n(ation)i(of)e(the)g(abstraction)j
(hierarchy)e(is)f(v)o(ery)g(similar)h(to)e(F)o(ast)g(Do)n(wnw)o(ard')-5
b(s)32 b(method)f(for)g(generating)150 3113 y(hierarchical)c
(decompositions)g(of)d(planning)i(tasks)e(\(Section)h(5.2\).)291
3240 y(By)32 b(itself,)k(the)e(ordered)h(monotonicity)h(property)f(is)e
(not)g(suf)n(\002cient)h(to)f(guarantee)j(good)e(performance)150
3353 y(of)29 b(a)f(hierarchical)k(planning)f(approach.)46
b(It)28 b(guarantees)k(that)d(e)n(v)o(ery)g(concrete)i(solution)g(can)e
(be)f(obtained)j(in)150 3466 y(a)i(natural)j(w)o(ay)d(from)h(an)g
(abstract)h(solution,)k(b)n(ut)34 b(it)g(does)g(not)g(guarantee)j(that)
d(all)g(abstract)h(solutions)i(can)150 3579 y(be)31 b(re\002ned)g(to)g
(concrete)i(ones.)52 b(Such)31 b(a)f(guarantee)k(is)c(pro)o(vided)j(by)
e(the)g Fq(downwar)m(d)h(r)m(e\002nement)g(pr)l(operty)p
Fv(,)150 3692 y(introduced)27 b(by)c(Bacchus)i(and)f(Y)-9
b(ang)23 b(\(1994\).)291 3819 y(The)34 b(do)n(wnw)o(ard)g(re\002nement)
h(property)h(can)f(rarely)g(be)f(guaranteed)i(in)e(actual)h(planning)i
(domains,)g(so)150 3932 y(Bacchus)26 b(and)f(Y)-9 b(ang)25
b(de)n(v)o(elop)h(an)f(analytical)i(model)f(for)f(the)g(performance)i
(of)e(hierarchical)j(planning)f(in)e(sit-)150 4045 y(uations)i(where)f
(a)g(gi)n(v)o(en)g(abstract)h(plan)g(can)f(only)g(be)g(re\002ned)g
(with)g(a)f(certain)i(probability)i Ft(p)g(<)f Fm(1)p
Fv(.)35 b(Based)26 b(on)150 4158 y(this)i(analysis,)h(the)o(y)f
(present)h(an)e(e)o(xtension)i(to)e(ALPINE)e(called)j(HIGHPOINT)-7
b(,)24 b(which)k(selects)g(an)f(abstrac-)150 4271 y(tion)h(hierarchy)h
(with)e(high)i(re\002nement)f(probability)i(among)e(those)h(that)f
(satisfy)g(the)g(ordered)h(monotonicity)150 4384 y(property)-6
b(.)43 b(In)27 b(practice,)j(it)d(is)g(not)h(feasible)i(to)d(compute)i
(the)e(re\002nement)i(probability)-6 b(,)31 b(so)c(HIGHPOINT)e(ap-)150
4497 y(proximates)h(this)e(v)n(alue)g(based)h(on)f(the)f(notion)i(of)f
Ft(k)s Fq(-ary)g(necessary)i(connectivity)p Fv(.)150
4743 y Fz(2.2)46 b(Causal)24 b(Graphs)e(and)h(Unary)g(STRIPS)e
(Operators)150 4918 y Fv(Causal)37 b(graphs)h(are)e(\002rst)g(gi)n(v)o
(en)g(a)g(name)g(by)h(Jonsson)h(and)e(B)5 b(\250)-35
b(ackstr)8 b(\250)-38 b(om)38 b(\(1995,)f(1998b\),)k(who)36
b(call)g(them)150 5031 y Fq(dependency)22 b(gr)o(aphs)p
Fv(.)29 b(The)o(y)19 b(study)h(a)e(fragment)j(of)e(propositional)k
(STRIPS)16 b(with)j(ne)o(gati)n(v)o(e)h(conditions)i(which)150
5144 y(has)34 b(the)g(interesting)j(property)f(that)e(plan)h(e)o
(xistence)h(can)e(be)g(decided)i(in)d(polynomial)k(time,)f(b)n(ut)e
(minimal)150 5257 y(solutions)24 b(to)d(a)g(task)h(can)g(be)g(e)o
(xponentially)j(long,)d(so)f(that)h(no)g(polynomial)i(planning)f
(algorithm)h(e)o(xists.)29 b(The)o(y)1888 5506 y Fy(199)p
eop end
%%Page: 200 10
TeXDict begin 200 9 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)150
249 y Fv(present)32 b(an)f Fq(incr)m(emental)i Fv(planning)g(algorithm)
f(with)f(polynomial)i(delay)-6 b(,)33 b(i.)15 b(e.,)32
b(a)e(planning)j(algorithm)g(that)150 361 y(decides)23
b(within)f(polynomial)i(time)d(whether)h(or)f(not)h(a)f(gi)n(v)o(en)g
(task)h(has)g(a)f(solution,)i(and,)f(if)f(so,)h(generates)h(such)150
474 y(a)g(solution)j(step)e(by)g(step,)g(requiring)i(only)e(polynomial)
i(time)d(between)i(an)o(y)e(tw)o(o)h(subsequent)i(steps.)3431
441 y FB(2)291 604 y Fv(The)33 b(fragment)h(of)f(STRIPS)d(co)o(v)o
(ered)35 b(by)e(Jonsson)i(and)e(B)5 b(\250)-35 b(ackstr)8
b(\250)-38 b(om')-5 b(s)35 b(algorithm)g(is)e(called)h
Fq(3S)g Fv(and)f(is)150 717 y(de\002ned)k(by)g(the)f(requirement)j
(that)e(the)g(causal)h(graph)f(of)f(the)h(task)g(is)f(ac)o(yclic)i(and)
f(each)g(state)g(v)n(ariables)150 830 y(is)d Fq(static)p
Fv(,)j Fq(symmetrically)f(r)m(e)o(ver)o(sible)p Fv(,)i(or)33
b Fq(splitting)p Fv(.)62 b Fq(Static)35 b Fv(v)n(ariables)h(are)e
(those)h(for)f(which)g(it)f(is)h(easy)g(to)150 943 y(guarantee)c(that)d
(the)o(y)h(ne)n(v)o(er)f(change)i(their)f(v)n(alue)g(in)f(an)o(y)g
(solution)j(plan.)40 b(These)27 b(v)n(ariables)i(can)f(be)f(detected)
150 1056 y(and)33 b(compiled)i(a)o(w)o(ay)d(easily)-6
b(.)58 b Fq(Symmetrically)35 b(r)m(e)o(ver)o(sible)g
Fv(v)n(ariables)g(are)e(those)h(where)f(for)g(each)g(operator)150
1169 y(which)24 b(mak)o(es)g(them)f(true)h(there)h(is)e(a)g
(corresponding)28 b(operator)d(with)f(identical)h(preconditions)j
(which)c(mak)o(es)150 1282 y(them)33 b(f)o(alse,)j(and)e(vice)g(v)o
(ersa.)58 b(In)33 b(other)h(w)o(ords,)h(a)e(v)n(ariable)i(is)e
(symmetrically)i(re)n(v)o(ersible)g(if)n(f)e(its)g(domain)150
1395 y(transition)27 b(graph)f(is)e(undirected.)34 b(Finally)-6
b(,)26 b(a)e(v)n(ariable)i Ft(v)h Fv(is)d Fq(splitting)j
Fv(if)n(f)d(its)g(remo)o(v)n(al)h(from)f(the)h(causal)h(graph)150
1507 y(weakly)i(disconnects)j(its)d(positi)n(v)o(e)g(successors)j
(\(those)e(v)n(ariables)g(which)f(appear)h(in)e(ef)n(fects)i(of)e
(operators)j(of)150 1620 y(which)d Ft(v)j Fv(is)d(a)f(precondition\))31
b(from)c(its)g(ne)o(gati)n(v)o(e)g(successors)j(\(those)f(v)n(ariables)
g(which)e(appear)h(in)f(ef)n(fects)h(of)150 1733 y(operators)e(of)d
(which)h Fo(:)p Ft(v)i Fv(is)d(a)g(precondition\).)291
1863 y(W)l(illiams)j(and)f(Nayak)g(\(1997\))h(independently)j(pro)o(v)o
(e)c(that)g(incremental)i(\(or)l(,)e(in)g(their)g(setting,)h
Fq(r)m(eactive)p Fv(\))150 1976 y(planning)36 b(is)d(a)g(polynomial)j
(problem)e(in)g(a)f(STRIPS-lik)o(e)f(setting)j(where)f(causal)g(graphs)
h(are)f(ac)o(yclic)h(and)150 2089 y(all)28 b(operators)i(are)d(re)n(v)o
(ersible.)43 b(If)27 b(all)h(operators)i(are)d(re)n(v)o(ersible)j
(\(according)g(to)e(the)f(de\002nition)j(by)d(W)l(illiams)150
2202 y(and)h(Nayak\),)h(all)e(v)n(ariables)j(are)d(symmetrically)j(re)n
(v)o(ersible)f(\(according)i(to)c(the)h(de\002nition)h(by)e(Jonsson)j
(and)150 2315 y(B)5 b(\250)-35 b(ackstr)8 b(\250)-38
b(om\),)23 b(so)e(this)h(is)f(actually)j(a)c(special)j(case)f(of)g(the)
f(pre)n(vious)j(result.)29 b(Ho)n(we)n(v)o(er)l(,)21
b(W)l(illiams)h(and)g(Nayak')-5 b(s)150 2428 y(w)o(ork)30
b(applies)i(to)e(a)g(more)h(general)g(formalism)h(than)f(propositional)
j(STRIPS,)27 b(so)j(that)h(the)g(approaches)i(are)150
2541 y(not)24 b(directly)h(comparable.)291 2671 y(More)32
b(recently)-6 b(,)35 b(Domshlak)d(and)g(Brafman)g(pro)o(vide)h(a)e
(detailed)i(account)h(of)d(the)h(comple)o(xity)h(of)e(\002nd-)150
2783 y(ing)c(plans)g(in)f(the)h(propositional)j(STRIPS)23
b(\(with)k(ne)o(gation\))h(formalism)f(with)f(unary)h(operators)i(and)e
(ac)o(yclic)150 2896 y(graphs)33 b(\(Domshlak)g(&)e(Brafman,)j(2002;)j
(Brafman)32 b(&)e(Domshlak,)35 b(2003\).)2689 2863 y
FB(3)2780 2896 y Fv(Among)d(other)h(results,)i(the)o(y)150
3009 y(pro)o(v)o(e)h(that)h(the)f(restriction)i(to)e(unary)h(operators)
h(and)f(ac)o(yclic)g(graphs)g(does)g(not)f(reduce)h(the)f(comple)o
(xity)150 3122 y(of)29 b(plan)i(e)o(xistence:)43 b(the)30
b(problem)h(is)e Fz(PSP)-7 b(A)i(CE)p Fv(-complete,)30
b(just)g(lik)o(e)g(unrestricted)j(propositional)h(STRIPS)150
3235 y(planning)29 b(\(Bylander)l(,)f(1994\).)38 b(The)o(y)26
b(also)h(sho)n(w)f(that)h(for)f(singly)i(connected)h(causal)f(graphs,)g
(shortest)g(plans)150 3348 y(cannot)20 b(be)f(e)o(xponentially)k(long,)
d(b)n(ut)g(the)f(problem)h(is)f(still)g Fz(NP)p Fv(-complete.)28
b(F)o(or)18 b(an)h(e)n(v)o(en)g(more)g(restricted)i(class)150
3461 y(of)26 b(causal)i(graphs,)g(namely)f(polytrees)h(of)e(bounded)j
(inde)o(gree,)f(the)o(y)f(present)g(a)f(polynomial)j(planning)f(algo-)
150 3574 y(rithm.)36 b(More)25 b(generally)-6 b(,)29
b(their)e(analysis)g(relates)h(the)e(comple)o(xity)h(of)f(STRIPS)d
(planning)28 b(in)e(unary)h(domains)150 3687 y(to)c(the)h
Fq(number)h(of)e(paths)i Fv(in)e(their)i(causal)g(graph.)150
3937 y Fz(2.3)46 b(Multi-V)-8 b(alued)23 b(Planning)f(T)-8
b(asks)150 4114 y Fv(W)l(ith)27 b(the)g(e)o(xception)i(of)e(W)l
(illiams)h(and)f(Nayak')-5 b(s)28 b(paper)l(,)g(all)f(the)g(w)o(ork)g
(discussed)i(so)e(f)o(ar)g(e)o(xclusi)n(v)o(ely)i(deals)150
4227 y(with)i Fq(pr)l(opositional)36 b Fv(planning)e(problems,)g(where)
e(all)f(state)h(v)n(ariables)i(assume)e(v)n(alues)h(from)e(a)g(binary)i
(do-)150 4340 y(main.)c(As)23 b(we)g(observ)o(ed)j(in)d(the)h
(introduction,)j(the)d(question)i(of)e(propositional)k(vs.)23
b(multi-v)n(alued)j(encodings)150 4453 y(usually)g(has)e(a)f(strong)i
(impact)g(on)f(the)g(connecti)n(vity)j(of)c(the)i(causal)g(graph)g(of)e
(a)h(task.)30 b(In)23 b(f)o(act,)i(apart)f(from)g(the)150
4566 y(tri)n(vial)k(M)t Fr(OV)t(I)t(E)h Fv(domain,)d(none)f(of)g(the)h
(common)f(planning)i(benchmarks)h(e)o(xhibits)e(an)f(ac)o(yclic)i
(causal)f(graph)p 150 4715 1440 4 v 195 4801 a Fn(2.)e(Ho)n(we)n(v)o
(er)m(,)g(there)f(is)f(no)i(guarantee)g(that)e(the)h(length)h(of)f(the)
f(generated)j(solution)e(is)f(polynomially)j(related)e(to)f(the)h
(length)h(of)e(an)275 4892 y(optimal)g(solution;)i(it)d(might)h(be)g(e)
o(xponentially)i(longer)l(.)33 b(Therefore,)22 b(the)h(algorithm)f
(might)g(spend)h(e)o(xponential)g(time)f(on)h(tasks)275
4983 y(that)18 b(can)i(be)f(solv)o(ed)h(in)e(polynomial)i(time.)195
5075 y(3.)k(According)29 b(to)f(our)h(formal)f(de\002nition)h(of)f
(causal)h(graphs)g(in)g(Section)f(5.2,)i(operators)g(with)e(se)n(v)o
(eral)g(ef)n(fects)h(al)o(w)o(ays)g(induce)275 5166 y(c)o(ycles)21
b(in)f(the)h(causal)h(graph,)f(so)g Fl(acyclic)h(causal)f(gr)o(aph)h
Fn(implies)f Fl(unary)h(oper)o(ator)o(s)p Fn(.)30 b(Some)21
b(researchers)g(de\002ne)h(causal)f(graphs)275 5257 y(dif)n(ferently)-5
b(,)19 b(so)g(we)f(name)i(both)g(properties)f(e)o(xplicitly)g(here.)
1888 5506 y Fy(200)p eop end
%%Page: 201 11
TeXDict begin 201 10 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)150
249 y Fv(when)31 b(considering)k(its)c(propositional)k(representation.)
55 b(By)31 b(contrast,)j(the)e(multi-v)n(alued)h(encoding)h(of)d(our)
150 361 y(introductory)c(e)o(xample)e(does)f(ha)n(v)o(e)g(an)g(ac)o
(yclic)g(causal)h(graph.)291 482 y(Due)d(to)h(the)g(dominance)h(of)f
(the)g(PDDL)d(\(and)j(pre)n(viously)-6 b(,)25 b(STRIPS\))20
b(formalism,)k(non-binary)h(state)f(v)n(ari-)150 595
y(ables)k(are)f(not)h(studied)h(v)o(ery)f(often)g(in)f(the)g(classical)
i(planning)h(literature.)42 b(One)27 b(of)g(the)g(most)g(important)i(e)
o(x-)150 708 y(ceptions)22 b(to)e(this)g(rule)g(is)g(the)g(w)o(ork)g
(on)f(the)h(SAS)1694 675 y Fs(+)1771 708 y Fv(planning)i(formalism,)f
(of)f(which)g(the)g(papers)h(by)f(B)5 b(\250)-35 b(ackstr)8
b(\250)-38 b(om)150 821 y(and)30 b(Nebel)g(\(1995\))h(and)f(Jonsson)i
(and)e(B)5 b(\250)-35 b(ackstr)8 b(\250)-38 b(om)30 b(\(1998a\))i(are)e
(most)f(rele)n(v)n(ant)i(to)f(F)o(ast)f(Do)n(wnw)o(ard.)47
b(The)150 934 y(SAS)318 901 y Fs(+)403 934 y Fv(planning)31
b(formalism)e(is)f(basically)i(equi)n(v)n(alent)h(to)d(the)h
Fq(multi-valued)h(planning)h(tasks)e Fv(we)f(introduce)150
1047 y(in)i(Section)h(4)e(apart)i(from)f(the)g(f)o(act)h(that)f(it)g
(does)h(not)f(include)i(deri)n(v)o(ed)f(v)n(ariables)h(\(axioms\))f(or)
f(conditional)150 1160 y(ef)n(fects.)49 b(B)5 b(\250)-35
b(ackstr)8 b(\250)-38 b(om)32 b(and)e(Nebel)g(analyse)i(the)f(comple)o
(xity)h(of)e(v)n(arious)h(subclasses)i(of)d(the)g(SAS)3390
1127 y Fs(+)3477 1160 y Fv(formal-)150 1273 y(ism)c(and)g(disco)o(v)o
(er)h(three)g(properties)i(\()p Fq(unariness)p Fv(,)g
Fq(post-uniqueness)i Fv(and)c Fq(single-valuedness)p
Fv(\))32 b(that)26 b(together)150 1386 y(allo)n(w)i(optimal)h(planning)
h(in)e(polynomial)i(time.)42 b(One)27 b(of)h(these)h(three)g
(properties)h(\(unariness\))h(is)d(related)h(to)150 1499
y(ac)o(yclicity)22 b(of)e(causal)h(graphs,)g(and)f(one)h
(\(post-uniqueness\))k(implies)20 b(a)g(particularly)j(simple)d(shape)h
(of)e(domain)150 1612 y(transition)28 b(graphs)e(\(namely)-6
b(,)26 b(in)f(post-unique)k(tasks,)d(all)f(domain)h(transition)h
(graphs)g(must)e(be)g(simple)g(c)o(ycles)150 1724 y(or)e(trees\).)291
1845 y(B)5 b(\250)-35 b(ackstr)8 b(\250)-38 b(om)21 b(and)g(Nebel)f(do)
g(not)h(analyse)h(domain)f(transition)i(graphs)e(formally)-6
b(.)29 b(Indeed,)22 b(the)f(term)e(is)h(only)150 1958
y(introduced)31 b(in)e(the)f(later)h(article)h(by)e(Jonsson)j(and)d(B)5
b(\250)-35 b(ackstr)8 b(\250)-38 b(om)30 b(\(1998a\),)h(which)e
(re\002nes)f(the)h(earlier)h(results)150 2071 y(by)d(introducing)k
(\002)n(v)o(e)26 b(additional)k(restrictions)g(for)e(SAS)1993
2038 y Fs(+)2077 2071 y Fv(tasks,)g(all)g(of)f(which)g(are)h(related)g
(to)f(properties)j(of)150 2184 y(domain)24 b(transition)j(graphs.)291
2305 y(Neither)22 b(of)g(these)g(tw)o(o)f(articles)i(discusses)h(the)d
(notion)i(of)e(causal)i(graphs.)30 b(Indeed,)23 b(the)e(only)h(earlier)
h(w)o(ork)150 2418 y(we)d(are)i(a)o(w)o(are)f(of)g(which)g(includes)j
Fq(both)e Fv(causal)g(graphs)h(and)f(domain)g(transition)h(graphs)g(as)
e(central)i(concepts)150 2531 y(is)i(the)g(article)h(by)e(Domshlak)i
(and)f(Dinitz)g(\(2001\))i(on)d(the)h Fq(state-tr)o(ansition)30
b(support)e Fv(\(STS\))23 b(problem,)j(which)150 2644
y(is)32 b(essentially)i(equi)n(v)n(alent)h(to)c(SAS)1331
2611 y Fs(+)1420 2644 y Fv(planning)j(with)e(unary)h(operators.)56
b(In)32 b(the)g(conte)o(xt)h(of)f(STS,)d(domain)150 2757
y(transition)34 b(graphs)f(are)f(called)h Fq(str)o(ate)l(gy)g(gr)o
(aphs)g Fv(and)f(causal)h(graphs)g(are)f(called)g Fq(dependence)j(gr)o
(aphs)p Fv(,)g(b)n(ut)150 2870 y(apart)28 b(from)f(minor)h(details,)h
(the)f(semantics)h(of)e(the)h(tw)o(o)f(formalisms)h(are)g(identical.)42
b(Domshlak)28 b(and)g(Dinitz)150 2983 y(pro)o(vide)36
b(a)d(map)h(of)g(the)h(comple)o(xity)h(of)e(the)h(STS)d(problem)j(in)f
(terms)g(of)h(the)f(shape)h(of)f(its)h(causal)g(graph,)150
3096 y(sho)n(wing)25 b(that)g(the)g(problem)g(is)f Fz(NP)p
Fv(-complete)i(or)e(w)o(orse)g(for)h(almost)g(all)f(non-tri)n(vial)j
(cases.)32 b(One)24 b(interesting)150 3209 y(result)34
b(is)f(that)h(if)f(the)h(causal)g(graph)h(is)e(a)g(simple)g(chain)i(of)
e Ft(n)f Fv(nodes)i(and)g(all)f(v)n(ariables)j(are)d(three-v)n(alued,)
150 3321 y(the)c(length)g(of)g(minimal)f(plans)h(can)g(already)h(gro)n
(w)e(as)g Fm(\012\(2)2106 3288 y Fk(n)2154 3321 y Fm(\))p
Fv(.)42 b(By)28 b(contrast,)j Fq(pr)l(opositional)i Fv(tasks)c(with)f
(the)150 3434 y(same)23 b(causal)i(graph)f(shape)h(admit)f(polynomial)h
(planning)h(algorithms)f(according)h(to)d(the)h(result)h(by)e(Brafman)
150 3547 y(and)33 b(Domshlak)h(\(2003\),)i(because)f(such)f(causal)g
(graphs)g(are)f(polytrees)i(with)e(a)f(constant)j(inde)o(gree)g(bound)
150 3660 y(\(namely)-6 b(,)24 b(a)g(bound)h(of)e Fm(1)p
Fv(\).)291 3781 y(T)-7 b(o)31 b(summarize)h(and)g(conclude)i(our)e
(discussion)i(of)e(related)h(w)o(ork,)g(we)e(observ)o(e)i(that)f(the)f
(central)i(con-)150 3894 y(cepts)23 b(of)e(F)o(ast)h(Do)n(wnw)o(ard)f
(and)i(the)f(causal)h(graph)g(heuristic,)h(such)e(as)g(causal)h(graphs)
h(and)e(domain)h(transition)150 4007 y(graphs,)29 b(are)e(\002rmly)g
(rooted)i(in)e(pre)n(vious)i(w)o(ork.)39 b(Ho)n(we)n(v)o(er)l(,)28
b(F)o(ast)e(Do)n(wnw)o(ard)h(is)g(the)g(\002rst)g(attempt)h(to)f(marry)
150 4120 y(hierarchical)e(problem)e(decomposition)i(to)d(the)g(use)g
(of)g(multi-v)n(alued)i(state)e(v)n(ariables)i(within)e(a)g(general)h
(plan-)150 4233 y(ning)i(frame)n(w)o(ork.)31 b(It)24
b(is)g(also)g(the)h(\002rst)f(attempt)h(to)f(apply)h(techniques)i
(similar)e(to)f(those)h(of)f(Knoblock)i(\(1994\))150
4346 y(and)e(Bacchus)h(and)f(Y)-9 b(ang)23 b(\(1994\))i(within)f(a)g
(heuristic)h(search)g(planner)-5 b(.)291 4467 y(The)28
b(signi\002cance)i(of)e(this)h(latter)g(point)g(should)h(not)e(be)h
(underestimated:)42 b(F)o(or)27 b(classical)j(approaches)h(to)150
4580 y(hierarchical)c(problem)e(decomposition,)j(it)c(is)f(imperati)n
(v)o(e)j(that)e(an)g(abstraction)j(satis\002es)f(the)e(ordered)i(mono-)
150 4693 y(tonicity)35 b(property)-6 b(,)38 b(and)c(it)f(is)g
(important)i(that)f(the)g(probability)i(of)e(being)g(able)g(to)f
(re\002ne)h(an)f(abstract)i(plan)150 4806 y(to)28 b(a)g(concrete)i
(plan)f(is)e(high,)j(as)e(the)h(analysis)h(by)e(Bacchus)h(and)g(Y)-9
b(ang)28 b(sho)n(ws.)42 b(Unfortunately)-6 b(,)32 b(non-tri)n(vial)150
4918 y(abstraction)g(hierarchies)g(are)d(rarely)h(ordered)h(monotonic,)
h(and)e(e)n(v)o(en)f(more)g(rarely)h(guarantee)i(high)e(re\002ne-)150
5031 y(ment)h(probabilities.)54 b(W)l(ithin)32 b(a)e(heuristic)j
(approach,)h(these)e(\223must-ha)n(v)o(es\224)i(turn)d(into)g
(\223nice-to-ha)n(v)o(es\224:)48 b(If)150 5144 y(an)25
b(abstraction)j(hierarchy)f(is)e(not)h(ordered)h(monotonic)g(or)e(if)f
(an)i(abstract)h(plan)e(considered)j(by)e(the)f(heuristic)150
5257 y(e)n(v)n(aluator)g(is)e(not)h(re\002nable,)g(this)g(merely)g
(reduces)h(the)f(quality)h(of)e(the)h(heuristic)h(estimate,)g(rather)f
(than)g(caus-)1888 5506 y Fy(201)p eop end
%%Page: 202 12
TeXDict begin 202 11 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)229
1116 y @beginspecial 71 @llx 606 @lly 484 @urx 721 @ury
4130 @rwi @setspecial
%%BeginDocument: figures/modules.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.92b Copyright 2002 Radical Eye Software
%%Title: modules.dvi
%%BoundingBox: 71 606 484 721
%%DocumentFonts: Times-Roman CMSY10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o modules.eps modules.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2006.07.12:1710
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc
% File  8r.enc as of 2002-03-12 for PSNFSS 9
%
% This is the encoding vector for Type1 and TrueType fonts to be used
% with TeX.  This file is part of the PSNFSS bundle, version 9
% 
% Authors: S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry, W. Schmidt
%
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida + Euro.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (6) /Euro is assigned to 128, as in Windows ANSI
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there down to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /Euro /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def

%%EndProcSet
%%BeginProcSet: bbad153f.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmsy10 cmsy5 cmsy6 cmsy7 cmsy8 cmsy9
%
/TeXbbad153fEncoding [
/minus /periodcentered /multiply /asteriskmath /divide /diamondmath
/plusminus /minusplus /circleplus /circleminus /circlemultiply
/circledivide /circledot /circlecopyrt /openbullet /bullet
/equivasymptotic /equivalence /reflexsubset /reflexsuperset /lessequal
/greaterequal /precedesequal /followsequal /similar /approxequal
/propersubset /propersuperset /lessmuch /greatermuch /precedes /follows
/arrowleft /arrowright /arrowup /arrowdown /arrowboth /arrownortheast
/arrowsoutheast /similarequal /arrowdblleft /arrowdblright /arrowdblup
/arrowdbldown /arrowdblboth /arrownorthwest /arrowsouthwest /proportional
/prime /infinity /element /owner /triangle /triangleinv /negationslash
/mapsto /universal /existential /logicalnot /emptyset /Rfractur /Ifractur
/latticetop /perpendicular /aleph /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /union /intersection
/unionmulti /logicaland /logicalor /turnstileleft /turnstileright
/floorleft /floorright /ceilingleft /ceilingright /braceleft /braceright
/angbracketleft /angbracketright /bar /bardbl /arrowbothv /arrowdblbothv
/backslash /wreathproduct /radical /coproduct /nabla /integral
/unionsq /intersectionsq /subsetsqequal /supersetsqequal /section
/dagger /daggerdbl /paragraph /club /diamond /heart /spade /arrowleft
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/minus /periodcentered /multiply /asteriskmath /divide /diamondmath
/plusminus /minusplus /circleplus /circleminus /.notdef /.notdef
/circlemultiply /circledivide /circledot /circlecopyrt /openbullet
/bullet /equivasymptotic /equivalence /reflexsubset /reflexsuperset
/lessequal /greaterequal /precedesequal /followsequal /similar
/approxequal /propersubset /propersuperset /lessmuch /greatermuch
/precedes /follows /arrowleft /spade /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMSY10
%!PS-AdobeFont-1.1: CMSY10 1.0
%%CreationDate: 1991 Aug 15 07:20:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-29 -960 1116 775}readonly def
/UniqueID 5000820 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
221A37D9A807DD01161779DDE7D31FF2B87F97C73D63EECDDA4C49501773468A
27D1663E0B62F461F6E40A5D6676D1D12B51E641C1D4E8E2771864FC104F8CBF
5B78EC1D88228725F1C453A678F58A7E1B7BD7CA700717D288EB8DA1F57C4F09
0ABF1D42C5DDD0C384C7E22F8F8047BE1D4C1CC8E33368FB1AC82B4E96146730
DE3302B2E6B819CB6AE455B1AF3187FFE8071AA57EF8A6616B9CB7941D44EC7A
71A7BB3DF755178D7D2E4BB69859EFA4BBC30BD6BB1531133FD4D9438FF99F09
4ECC068A324D75B5F696B8688EEB2F17E5ED34CCD6D047A4E3806D000C199D7C
515DB70A8D4F6146FE068DC1E5DE8BC5703711DA090312BA3FC00A08C453C609
C627A8BECD6E1FA14A3B02476E90AAD8B4700C400380BC9AFFBF7847EB28661B
9DC3AA0F44C533F2E07DCC4DE19D367BF223E33DC321D0247A0E6EF6ABC8FA52
15AE044094EF678A8726CD7C011F02BFF8AB6EAEEE391AD837120823BED0B5D8
F8B15245377871A64F78378BB4330149D6941F7A86FBFFC49B93C94155F5FA7D
F22E7214511C0A92693F4CDBF38411651540572F2DD70D924AE0F18E1CD581F3
C871399127FF5D07A868885B5FF7CDEB50B8323B2533DEF8DC973B1AE84FA0A2

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (modules.dvi)
@start /Fa 133[37 42 42 1[42 42 23 32 28 1[42 42 42 65
23 2[23 42 42 1[37 42 37 42 37 12[51 46 2[46 1[60 74
3[28 1[60 46 1[60 55 1[60 19[28 42[46 2[{
 TeXBase1Encoding ReEncodeFont }34 83.022 /Times-Roman
rf /Fb 240[42 15[{ TeXbbad153fEncoding ReEncodeFont }1
83.022 /CMSY10 rf /Fc 136[72 2[28 39 33 1[50 50 50 78
28 2[28 50 50 1[44 50 44 1[44 12[61 55 7[72 7[66 67[{
 TeXBase1Encoding ReEncodeFont }20 99.6264 /Times-Roman
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 945 a
 tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 945 a 0 945 3423 945
v 3423 945 a
 currentpoint grestore moveto
 3423 945 a 614 189 a
 tx@Dict begin tx@NodeDict begin {-71.13185 0.0 } false /N@Input 10
{InitPnode } NewNode end end
 614 189 a 614 189 a
 tx@Dict begin tx@NodeDict begin {} false /N@A 14 {0.0 0.0 /Y ED /X
ED /d .5 .5 sub CLW mul neg def /r 42.67911 d add def /l r neg def
/u 22.76227 d add def /d u neg def /NodePos { GetRnodePos } def} NewNode
end end

614 189 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.0 SLW 0.75 setgray  /x2 42.67911 CLW .5
mul sub def /y2 22.76227 CLW .5 mul sub def 0.0 0.0 2 copy y2 sub /y1
ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse gsave 0.75 setgray fill grestore
end
 
@endspecial 614
189 a
 tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 614 189 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true -42.67911 -22.76227
42.67911 22.76227 .5 Frame  gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore end
 
@endspecial
614 189 a
 tx@Dict begin PutEnd  end
 614 189 a 614 189 a
 tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 614 189 a 389 223 a Fc(T)m(ranslation)614
189 y
 tx@Dict begin PutEnd  end
 614 189 a 614 189 a
 tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 614 189 a 614 189 a
 tx@Dict begin { 31.29819 -19.91682 } PutCoor PutBegin  end
 614 189
a 6 329 a Fb(\017)41 b Fa(Normalization)6 437 y Fb(\017)g
Fa(In)m(v)n(ariant)19 b(synthesis)6 544 y Fb(\017)41
b Fa(Grounding)6 652 y Fb(\017)g Fa(T)m(ranslation)19
b(to)i(MPT)614 189 y
 tx@Dict begin PutEnd  end
 614 189 a 614 189 a
 tx@Dict begin PutEnd  end
 614 189 a 614
189 a
 tx@Dict begin tx@NodeDict begin {} false /N@B 14 {113.81097 0.0 /Y
ED /X ED /d .5 .5 sub CLW mul neg def /r 42.67911 d add def /l r neg
def /u 22.76227 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 614 189 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.0 SLW 0.75 setgray  /x2 42.67911 CLW .5
mul sub def /y2 22.76227 CLW .5 mul sub def 113.81097 0.0 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.75 setgray fill
grestore end
 
@endspecial
614 189 a
 tx@Dict begin { 113.81097 0.0 } PutCoor PutBegin  end
 614 189 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true -42.67911 -22.76227
42.67911 22.76227 .5 Frame  gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore end
 
@endspecial
614 189 a
 tx@Dict begin PutEnd  end
 614 189 a 614 189 a
 tx@Dict begin { 113.81097 0.0 } PutCoor PutBegin  end
 614 189 a 386 154 a Fc(Kno)n(wledge)365
270 y(Compilation)614 189 y
 tx@Dict begin PutEnd  end
 614 189 a 614 189 a
 tx@Dict begin { 113.81097 0.0 } PutCoor PutBegin  end
 614 189
a 614 189 a
 tx@Dict begin { 31.29819 -19.91682 } PutCoor PutBegin  end
 614 189 a 6 329 a Fb(\017)41 b Fa(Domain)20
b(transition)89 428 y(graphs)6 536 y Fb(\017)41 b Fa(Causal)21
b(graph)6 644 y Fb(\017)41 b Fa(Successor)20 b(generator)6
752 y Fb(\017)41 b Fa(Axiom)20 b(e)n(v)n(aluator)614
189 y
 tx@Dict begin PutEnd  end
 614 189 a 614 189 a
 tx@Dict begin PutEnd  end
 614 189 a 614 189 a
 tx@Dict begin tx@NodeDict begin {} false /N@C 14 {227.62195 0.0 /Y
ED /X ED /d .5 .5 sub CLW mul neg def /r 42.67911 d add def /l r neg
def /u 22.76227 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 614 189
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.0 SLW 0.75 setgray  /x2 42.67911 CLW .5
mul sub def /y2 22.76227 CLW .5 mul sub def 227.62195 0.0 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.75 setgray fill
grestore end
 
@endspecial 614 189 a
 tx@Dict begin { 227.62195 0.0 } PutCoor PutBegin  end
 614
189 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true -42.67911 -22.76227
42.67911 22.76227 .5 Frame  gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore end
 
@endspecial 614 189
a
 tx@Dict begin PutEnd  end
 614 189 a 614 189 a
 tx@Dict begin { 227.62195 0.0 } PutCoor PutBegin  end
 614 189 a 479 223 a Fc(Search)614
189 y
 tx@Dict begin PutEnd  end
 614 189 a 614 189 a
 tx@Dict begin { 227.62195 0.0 } PutCoor PutBegin  end
 614 189 a 614 189 a
 tx@Dict begin { 31.29819 -19.91682 } PutCoor PutBegin  end
 614 189
a 6 329 a Fb(\017)41 b Fa(Causal)21 b(graph)e(heuristic)6
437 y Fb(\017)41 b Fa(FF)22 b(heuristic)6 544 y Fb(\017)41
b Fa(Greedy)20 b(best-\002rst)g(search)6 652 y Fb(\017)41
b Fa(Multi-heuristic)19 b(best-\002rst)i(search)6 760
y Fb(\017)41 b Fa(F)o(ocused)20 b(iterati)n(v)o(e-broadening)15
b(search)614 189 y
 tx@Dict begin PutEnd  end
 614 189 a 614 189 a
 tx@Dict begin PutEnd  end
 614 189 a 614
189 a
 tx@Dict begin tx@NodeDict begin {298.7538 0.0 } false /N@Output 10
{InitPnode } NewNode end end
 614 189 a 614 189 a
 tx@Dict begin gsave STV newpath 3.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@Input /N@A InitNC { NCLine  } if end gsave 3.0 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 614 189 a 614 189 a
 tx@Dict begin gsave STV newpath 3.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@A /N@B InitNC { NCLine  } if end gsave 3.0 SLW 0. setgray 0
setlinecap stroke  grestore  grestore end
 614 189
a 614 189 a
 tx@Dict begin gsave STV newpath 3.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@B /N@C InitNC { NCLine  } if end gsave 3.0 SLW 0. setgray 0
setlinecap stroke  grestore  grestore end
 614 189 a 614 189 a
 tx@Dict begin gsave STV newpath 3.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@C /N@Output InitNC { NCLine  } if end gsave 3.0 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 614 189 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 889 1411 a Fv(Figure)24 b(9:)29 b(The)23
b(three)i(phases)g(of)e(F)o(ast)g(Do)n(wnw)o(ard')-5
b(s)24 b(e)o(x)o(ecution.)150 1683 y(ing)e(the)g(search)h(to)e(f)o(ail)
h(\(in)g(the)f(w)o(orst)h(case\))h(or)e(spend)i(a)e(long)h(time)g
(trying)g(to)g(salv)n(age)h(non-re\002nable)h(abstract)150
1796 y(plans)h(\(in)e(the)h(not)g(much)g(better)h(case\).)150
2056 y Fw(3.)35 b(F)n(ast)24 b(Do)o(wnward)150 2229 y
Fv(W)-7 b(e)22 b(will)h(no)n(w)f(describe)j(the)e(o)o(v)o(erall)h
(architecture)i(of)d(the)g(planner)-5 b(.)30 b(F)o(ast)23
b(Do)n(wnw)o(ard)g(is)f(a)h(classical)i(planning)150
2342 y(system)k(based)g(on)f(the)g(ideas)h(of)f(heuristic)i(forw)o(ard)
f(search)g(and)g(hierarchical)i(problem)e(decomposition.)45
b(It)150 2455 y(can)22 b(deal)h(with)f(the)g(full)h(range)g(of)f
(propositional)k(PDDL2.2)20 b(\(F)o(ox)h(&)g(Long,)h(2003;)i(Edelkamp)f
(&)e(Hof)n(fmann,)150 2568 y(2004\),)i(i.)15 b(e.,)21
b(in)g(addition)j(to)d(STRIPS)e(planning,)24 b(it)d(supports)j
(arbitrary)f(formulae)g(in)f(operator)h(preconditions)150
2681 y(and)j(goal)g(conditions,)j(and)d(it)f(can)g(deal)i(with)e
(conditional)j(and)e(uni)n(v)o(ersally)i(quanti\002ed)g(ef)n(fects)e
(and)g(deri)n(v)o(ed)150 2794 y(predicates)g(\(axioms\).)291
2907 y(The)31 b(name)h(of)g(the)g(planner)h(deri)n(v)o(es)g(from)f(tw)o
(o)f(sources:)47 b(Of)31 b(course,)k(one)d(of)g(these)g(sources)i(is)d
(Hof)n(f-)150 3020 y(mann')-5 b(s)34 b(v)o(ery)g(successful)j(FF)31
b(\(\223F)o(ast)j(F)o(orw)o(ard\224\))g(planner)h(\(Hof)n(fmann)g(&)d
(Nebel,)k(2001\).)60 b(Lik)o(e)34 b(FF)-7 b(,)31 b(F)o(ast)150
3133 y(Do)n(wnw)o(ard)21 b(is)h(a)e(heuristic)k(progression)h(planner)l
(,)f(i.)15 b(e.,)21 b(it)g(computes)i(plans)f(by)g(heuristic)h(search)g
(in)e(the)h(space)150 3245 y(of)i(w)o(orld)g(states)h(reachable)h(from)
e(the)g(initial)h(situation.)32 b(Ho)n(we)n(v)o(er)l(,)23
b(compared)i(to)f(FF)-7 b(,)22 b(F)o(ast)h(Do)n(wnw)o(ard)g(uses)150
3358 y(a)j(v)o(ery)h(dif)n(ferent)h(heuristic)h(e)n(v)n(aluation)g
(function)f(called)g(the)f Fq(causal)h(gr)o(aph)f(heuristic)p
Fv(.)40 b(The)26 b(heuristic)j(e)n(v)n(al-)150 3471 y(uator)h(proceeds)
i(\223do)n(wnw)o(ard\224)f(in)e(so)g(f)o(ar)h(as)f(it)g(tries)h(to)f
(solv)o(e)h(planning)i(tasks)e(in)f(the)h(hierarchical)i(f)o(ashion)150
3584 y(outlined)23 b(in)d(the)h(introduction.)32 b(Starting)21
b(from)g(top-le)n(v)o(el)h(goals,)g(the)f(algorithm)i(recurses)f
(further)h(and)e(further)150 3697 y(do)n(wn)i(the)h(causal)h(graph)g
(until)f(all)g(remaining)h(subproblems)i(are)c(basic)i(graph)g(search)g
(tasks.)291 3810 y(Similar)c(to)g(FF)-7 b(,)19 b(the)i(planner)i(has)f
(sho)n(wn)f(e)o(xcellent)i(performance:)31 b(The)21 b(original)i
(implementation)h(of)d(the)150 3923 y(causal)27 b(graph)g(heuristic,)h
(plugged)g(into)e(a)g(standard)i(best-\002rst)f(search)g(algorithm,)g
(outperformed)i(the)d(pre)n(vi-)150 4036 y(ous)i(champions)i(in)d(that)
h(area,)h(FF)d(and)i(LPG)d(\(Gere)n(vini,)30 b(Saetti,)d(&)g(Serina,)i
(2003\),)g(on)f(the)g(set)f(of)h(STRIPS)150 4149 y(benchmarks)j(from)d
(the)g(\002rst)g(three)h(international)j(planning)e(competitions)h
(\(Helmert,)f(2004\).)43 b(F)o(ast)28 b(Do)n(wn-)150
4262 y(w)o(ard)f(itself)g(follo)n(wed)h(in)f(the)g(footsteps)i(of)e(FF)
e(and)i(LPG)d(by)j(winning)h(the)f(propositional,)k(non-optimizing)150
4375 y(track)c(of)g(the)g(4th)g(International)j(Planning)e(Competition)
g(at)e(ICAPS)f(2004)i(\(referred)i(to)d(as)h(IPC4)e(from)i(no)n(w)150
4487 y(on\).)291 4600 y(As)18 b(mentioned)j(in)e(the)g(introduction,)24
b(F)o(ast)18 b(Do)n(wnw)o(ard)h(solv)o(es)h(a)e(planning)k(task)d(in)g
(three)h(phases)h(\(Fig.)d(9\):)286 4806 y Fo(\017)46
b Fv(The)32 b Fq(tr)o(anslation)k Fv(component)f(is)d(responsible)k
(for)d(transforming)i(the)e(PDDL2.2)e(input)j(into)f(a)f(non-)377
4918 y(binary)d(form)d(which)i(is)e(more)h(amenable)i(to)d
(hierarchical)k(planning)g(approaches.)41 b(It)27 b(applies)i(a)d(num-)
377 5031 y(ber)32 b(of)g(normalizations)j(to)d(compile)h(a)o(w)o(ay)e
(syntactic)j(constructs)h(lik)o(e)d(disjunctions)k(which)c(are)g(not)
377 5144 y(directly)26 b(supported)g(by)d(the)h(causal)h(graph)g
(heuristic)g(and)f(performs)h(grounding)h(of)e(axioms)g(and)g(oper)n(-)
377 5257 y(ators.)40 b(Most)28 b(importantly)-6 b(,)30
b(it)d(uses)g(in)l(v)n(ariant)j(synthesis)f(methods)g(to)e(\002nd)f
(groups)j(of)e(related)i(propo-)1888 5506 y Fy(202)p
eop end
%%Page: 203 13
TeXDict begin 203 12 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)377
249 y Fv(sitions)i(which)e(can)g(be)g(encoded)i(as)e(a)f(single)j
(multi-v)n(alued)g(v)n(ariable.)34 b(The)25 b(output)h(of)f(the)g
(translation)377 361 y(component)h(is)d(a)g Fq(multi-valued)k(planning)
f(task)p Fv(,)e(de\002ned)g(in)f(the)h(follo)n(wing)h(section.)286
542 y Fo(\017)46 b Fv(The)34 b Fq(knowledg)o(e)i(compilation)h
Fv(component)f(generates)h(four)d(kinds)i(of)e(data)g(structures)j
(that)e(play)g(a)377 655 y(central)23 b(role)e(during)h(search:)30
b Fq(Domain)21 b(tr)o(ansition)i(gr)o(aphs)f Fv(encode)h(ho)n(w)-6
b(,)20 b(and)i(under)g(what)e(conditions,)377 768 y(state)28
b(v)n(ariables)h(can)f(change)g(their)g(v)n(alues.)40
b(The)27 b Fq(causal)h(gr)o(aph)g Fv(represents)i(the)d(hierarchical)k
(depen-)377 881 y(dencies)k(between)g(the)e(dif)n(ferent)i(state)f(v)n
(ariables.)60 b(The)33 b Fq(successor)j(g)o(ener)o(ator)h
Fv(is)c(an)h(ef)n(\002cient)g(data)377 994 y(structure)d(for)e
(determining)i(the)d(set)h(of)f(applicable)j(operators)g(in)e(a)f(gi)n
(v)o(en)h(state.)44 b(Finally)-6 b(,)30 b(the)f Fq(axiom)377
1107 y(e)o(valuator)38 b Fv(is)32 b(an)h(ef)n(\002cient)h(data)f
(structure)j(for)d(computing)i(the)e(v)n(alues)h(of)f(deri)n(v)o(ed)h
(v)n(ariables.)59 b(The)377 1220 y(kno)n(wledge)26 b(compilation)g
(component)f(is)f(described)i(in)d(Section)i(5.)286 1401
y Fo(\017)46 b Fv(The)19 b Fq(sear)m(c)o(h)h Fv(component)i(implements)
e(three)g(dif)n(ferent)i(search)e(algorithms)i(to)d(do)g(the)h(actual)g
(planning.)377 1513 y(T)-7 b(w)o(o)27 b(of)h(these)h(algorithms)h(mak)o
(e)e(use)h(of)f(heuristic)i(e)n(v)n(aluation)g(functions:)41
b(One)28 b(is)g(the)g(well-kno)n(wn)377 1626 y(greedy)d(best-\002rst)g
(search)f(algorithm,)h(using)g(the)e(causal)i(graph)f(heuristic.)31
b(The)23 b(other)h(is)f(called)i Fq(multi-)377 1739 y(heuristic)33
b(best-\002r)o(st)f(sear)m(c)o(h)p Fv(,)h(a)c(v)n(ariant)j(of)e(greedy)
h(best-\002rst)h(search)f(that)g(tries)g(to)f(combine)h(se)n(v)o(eral)
377 1852 y(heuristic)h(e)n(v)n(aluators)f(in)f(an)f(orthogonal)j(w)o
(ay;)g(in)e(the)f(case)h(of)f(F)o(ast)g(Do)n(wnw)o(ard,)h(it)f(uses)h
(the)g(causal)377 1965 y(graph)j(and)f(FF)e(heuristics.)56
b(The)31 b(third)i(search)g(algorithm)g(is)f(called)g
Fq(focused)i(iter)o(ative-br)l(oadenin)q(g)377 2078 y(sear)m(c)o(h)p
Fv(;)h(it)30 b(is)g(closely)i(related)g(to)e(Ginsber)n(g)i(and)f(Harv)o
(e)o(y')-5 b(s)30 b(\(1992\))i(iterati)n(v)o(e)g(broadening.)52
b(It)30 b(is)g(not)377 2191 y(a)f(heuristic)i(search)f(algorithm)g(in)f
(the)g(sense)h(that)f(it)g(does)g(not)h(use)f(an)f(e)o(xplicit)j
(heuristic)g(e)n(v)n(aluation)377 2304 y(function.)g(Instead,)25
b(it)d(uses)i(the)g(information)h(encoded)g(in)e(the)h(causal)g(graph)h
(to)e(estimate)h(the)f(\223useful-)377 2417 y(ness\224)e(of)g
(operators)h(to)n(w)o(ards)f(satisfying)i(the)d(goals)i(of)e(the)g
(task.)28 b(The)20 b(search)h(component)i(is)d(described)377
2530 y(in)k(Section)g(6.)150 2790 y Fw(4.)35 b(Multi-V)-9
b(alued)25 b(Planning)g(T)-9 b(asks)150 2963 y Fv(Let)36
b(us)h(no)n(w)f(formally)i(introduce)h(the)e(problem)h(of)f(planning)i
(with)d(multi-v)n(alued)k(state)d(v)n(ariables.)71 b(Our)150
3076 y(formalism)21 b(is)e(based)i(on)f(the)g(SAS)1256
3043 y Fs(+)1333 3076 y Fv(planning)i(model)f(\(B)5 b(\250)-35
b(ackstr)8 b(\250)-38 b(om)21 b(&)e(Nebel,)h(1995;)j(Jonsson)f(&)c(B)5
b(\250)-35 b(ackstr)8 b(\250)-38 b(om,)150 3189 y(1998a\),)25
b(b)n(ut)f(e)o(xtends)h(it)e(with)h(axioms)g(and)g(conditional)j(ef)n
(fects.)150 3381 y Fz(De\002nition)c(1)46 b Fj(Multi-valued)24
b(planning)f(tasks)i(\(MPTs\))150 3494 y Fq(A)c Fj(multi-valued)h
(planning)g(task)g(\(MPT\))f Fq(is)h(given)g(by)g(a)g(5-tuple)h
Fm(\005)j(=)f Fo(hV)7 b Ft(;)15 b(s)2650 3508 y Fs(0)2690
3494 y Ft(;)g(s)2773 3508 y Fk(?)2812 3494 y Ft(;)g Fo(A)p
Ft(;)g Fo(O)s(i)22 b Fq(with)f(the)h(following)150 3607
y(components:)286 3777 y Fo(\017)46 b(V)41 b Fq(is)34
b(a)h(\002nite)g(set)g(of)f Fj(state)h(variables)p Fq(,)40
b(eac)o(h)35 b(with)f(an)h(associated)i(\002nite)f(domain)f
Fo(D)3233 3791 y Fk(v)3274 3777 y Fq(.)61 b(State)35
b(vari-)377 3890 y(ables)24 b(ar)m(e)f(partitioned)j(into)e
Fj(\003uents)e Fq(\(af)n(fected)j(by)e(oper)o(ator)o(s\))j(and)d
Fj(deriv)o(ed)i(variables)g Fq(\(computed)g(by)377 4003
y(e)o(valuating)h(axioms\).)k(The)23 b(domains)i(of)f(derived)h
(variables)h(must)d(contain)j(the)e Fj(unde\002ned)e(value)i
Fo(?)p Fq(.)377 4150 y(A)c Fj(partial)j(variable)h(assignment)d
Fq(or)h Fj(partial)h(state)f Fq(o)o(ver)g Fo(V)27 b Fq(is)21
b(a)g(function)j Ft(s)c Fq(on)h(some)g(subset)i(of)e
Fo(V)28 b Fq(suc)o(h)377 4263 y(that)i Ft(s)p Fm(\()p
Ft(v)s Fm(\))37 b Fo(2)e(D)910 4277 y Fk(v)980 4263 y
Fq(wher)m(e)o(ver)30 b Ft(s)p Fm(\()p Ft(v)s Fm(\))f
Fq(is)g(de\002ned.)47 b(A)28 b(partial)j(state)f(is)g(called)g(an)g
Fj(extended)g(state)g Fq(if)f(it)g(is)377 4376 y(de\002ned)f(for)f(all)
g(variables)i(in)d Fo(V)33 b Fq(and)27 b(a)f Fj(reduced)h(state)g
Fq(or)g Fj(state)g Fq(if)f(it)g(is)g(de\002ned)j(for)d(all)h(\003uents)
h(in)e Fo(V)7 b Fq(.)377 4489 y(In)25 b(the)g(conte)n(xt)i(of)e
(partial)h(variable)h(assignments,)h(we)c(write)h Ft(v)31
b Fm(=)c Ft(d)e Fq(for)g(the)g(variable-value)k(pairing)377
4602 y Fm(\()p Ft(v)s(;)15 b(d)p Fm(\))25 b Fq(or)e Ft(v)29
b Fo(7!)c Ft(d)p Fq(.)286 4783 y Fo(\017)46 b Ft(s)420
4797 y Fs(0)482 4783 y Fq(is)23 b(a)h(state)g(o)o(ver)g
Fo(V)30 b Fq(called)25 b(the)f Fj(initial)g(state)p Fq(.)286
4963 y Fo(\017)46 b Ft(s)420 4977 y Fk(?)482 4963 y Fq(is)23
b(a)h(partial)h(variable)h(assignment)f(o)o(ver)g Fo(V)30
b Fq(called)25 b(the)e Fj(goal)p Fq(.)286 5144 y Fo(\017)46
b(A)26 b Fq(is)g(a)g(\002nite)h(set)g(of)f(\(MPT\))f
Fj(axioms)j Fq(o)o(ver)f Fo(V)7 b Fq(.)37 b(Axioms)26
b(ar)m(e)h(triples)h(of)e(the)h(form)f Fo(h)p Fq(cond)r
Ft(;)15 b(v)s(;)g(d)p Fo(i)p Fq(,)28 b(wher)m(e)377 5257
y(cond)22 b(is)e(a)g(partial)i(variable)g(assignment)h(called)f(the)e
Fj(condition)i Fq(or)e Fj(body)h Fq(of)g(the)f(axiom,)h
Ft(v)i Fq(is)d(a)g(derived)1888 5506 y Fy(203)p eop end
%%Page: 204 14
TeXDict begin 204 13 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)377
249 y Fq(variable)28 b(called)e(the)f Fj(af)n(f)o(ected)j(variable)p
Fq(,)f(and)f Ft(d)i Fo(2)g(D)2151 263 y Fk(v)2216 249
y Fq(is)d(called)i(the)e Fj(deriv)o(ed)h(value)g Fq(for)f
Ft(v)s Fq(.)33 b(The)24 b(pair)377 361 y Fm(\()p Ft(v)s(;)15
b(d)p Fm(\))25 b Fq(is)e(called)i(the)f Fj(head)f Fq(of)h(the)g(axiom)g
(and)g(can)g(be)f(written)i(as)e Ft(v)29 b Fm(:=)c Ft(d)p
Fq(.)377 515 y(The)31 b(axiom)g(set)g Fo(A)e Fq(is)i(partitioned)j
(into)d(a)g(totally)h(or)m(der)m(ed)g(set)f(of)g Fj(axiom)g(layers)h
Fo(A)3193 529 y Fs(1)3271 515 y Fo(\036)39 b(\001)15
b(\001)g(\001)39 b(\036)g(A)3708 530 y Fk(k)377 627 y
Fq(suc)o(h)27 b(that)g(within)g(the)g(same)f(layer)-10
b(,)28 b(eac)o(h)f(af)n(fected)i(variable)f(may)e(only)i(be)e
(associated)k(with)c(a)g(single)377 740 y(value)35 b(in)e(axiom)g
(heads)i(and)e(bodies.)60 b(In)33 b(other)h(wor)m(ds,)h(within)f(the)g
(same)f(layer)-10 b(,)36 b(axioms)e(with)f(the)377 853
y(same)28 b(af)n(fected)i(variable)g(b)n(ut)f(dif)n(fer)m(ent)h
(derived)g(values)f(ar)m(e)f(forbidden,)j(and)e(if)e(a)h(variable)i
(appear)o(s)377 966 y(in)c(an)h(axiom)f(head,)i(then)f(it)f(may)g(not)g
(appear)i(with)e(a)g(dif)n(fer)m(ent)i(value)g(in)e(a)g(body)-5
b(.)37 b(This)26 b(is)g(called)i(the)377 1079 y Fj(layering)d(property)
p Fq(.)286 1273 y Fo(\017)46 b(O)39 b Fq(is)e(a)f(\002nite)i(set)f(of)g
(\(MPT\))e Fj(operators)40 b Fq(o)o(ver)d Fo(V)7 b Fq(.)68
b(An)36 b(oper)o(ator)j Fo(h)p Fq(pr)m(e)q Ft(;)15 b
Fq(ef)n(f)r Fo(i)36 b Fq(consists)j(of)e(a)f(partial)377
1385 y(variable)28 b(assignment)g(pr)m(e)d(o)o(ver)i
Fo(V)32 b Fq(called)26 b(its)g Fj(precondition)p Fq(,)i(and)e(a)f
(\002nite)i(set)e(of)h Fj(ef)n(f)o(ects)h Fq(ef)n(f)q(.)34
b(Ef)n(fects)377 1498 y(ar)m(e)28 b(triples)g Fo(h)p
Fq(cond)r Ft(;)15 b(v)s(;)g(d)p Fo(i)p Fq(,)29 b(wher)m(e)e(cond)i(is)e
(a)g(\(possibly)i(empty\))f(partial)h(variable)g(assignment)h(called)
377 1611 y(the)d Fj(ef)n(f)o(ect)h(condition)p Fq(,)f
Ft(v)i Fq(is)d(a)g(\003uent)i(called)g(the)e Fj(af)n(f)o(ected)j
(variable)p Fq(,)g(and)e Ft(d)j Fo(2)g(D)3061 1625 y
Fk(v)3128 1611 y Fq(is)c(called)i(the)e Fj(new)377 1724
y(value)e Fq(for)g Ft(v)s Fq(.)291 1918 y(F)-10 b(or)24
b(axioms)g(and)g(ef)n(fects,)h(we)e(also)h(use)g(the)g(notation)i(cond)
h Fo(!)e Ft(v)j Fm(:=)e Ft(d)d Fq(in)g(place)i(of)e Fo(h)p
Fq(cond)r Ft(;)15 b(v)s(;)g(d)p Fo(i)p Fq(.)291 2137
y Fv(T)-7 b(o)23 b(pro)o(vide)i(a)e(formal)h(semantics)h(for)f(MPT)d
(planning,)26 b(we)d(\002rst)g(need)h(to)g(formalize)h(axioms:)150
2359 y Fz(De\002nition)e(2)46 b Fj(Extended)24 b(states)h(de\002ned)e
(by)h(a)f(state)150 2472 y Fq(Let)c Ft(s)g Fq(be)h(a)g(state)h(of)f(an)
g(MPT)e Fm(\005)h Fq(with)h(axioms)h Fo(A)p Fq(,)e(layer)m(ed)j(as)e
Fo(A)2226 2486 y Fs(1)2290 2472 y Fo(\036)25 b(\001)15
b(\001)g(\001)26 b(\036)f(A)2686 2487 y Fk(k)2729 2472
y Fq(.)h(The)20 b Fj(extended)h(state)g(de\002ned)150
2585 y(by)j Ft(s)p Fq(,)e(written)i(as)g Fo(A)p Fm(\()p
Ft(s)p Fm(\))p Fq(,)e(is)h(the)h(r)m(esult)h Ft(s)1449
2552 y Fu(0)1494 2585 y Fq(of)f(the)f(following)j(algorithm:)150
2725 y Fz(algorithm)f Fv(e)n(v)n(aluate-axioms\()p Fo(A)1247
2739 y Fs(1)1290 2725 y Fv(,)e Ft(:)15 b(:)g(:)h Fv(,)22
b Fo(A)1575 2740 y Fk(k)1617 2725 y Fv(,)h Ft(s)p Fv(\):)386
2838 y Fz(f)n(or)h(each)f Fv(v)n(ariable)i Ft(v)s Fv(:)622
3007 y Ft(s)665 2974 y Fu(0)688 3007 y Fm(\()p Ft(v)s
Fm(\))i(:=)953 2851 y Fi(\()1026 2943 y Ft(s)p Fm(\()p
Ft(v)s Fm(\))92 b Fv(if)23 b Ft(v)j Fv(is)d(a)g(\003uent)h(v)n(ariable)
1026 3079 y Fo(?)181 b Fv(if)23 b Ft(v)j Fv(is)d(a)g(deri)n(v)o(ed)i(v)
n(ariable)386 3197 y Fz(f)n(or)f Ft(i)h Fo(2)g(f)p Fm(1)p
Ft(;)15 b(:)g(:)g(:)j(;)d(k)s Fo(g)p Fv(:)622 3310 y
Fz(while)23 b Fv(there)i(e)o(xists)f(an)g(axiom)g Fm(\()p
Fq(cond)j Fo(!)e Ft(v)k Fm(:=)c Ft(d)p Fm(\))h Fo(2)f(A)2458
3324 y Fk(i)2508 3310 y Fv(with)f Fq(cond)j Fo(\022)e
Ft(s)3034 3277 y Fu(0)3079 3310 y Fz(and)d Ft(s)3291
3277 y Fu(0)3314 3310 y Fm(\()p Ft(v)s Fm(\))27 b Fo(6)p
Fm(=)e Ft(d)p Fv(:)859 3423 y(Choose)f(such)g(an)g(axiom)g
Fq(cond)j Fo(!)e Ft(v)k Fm(:=)c Ft(d)p Fv(.)859 3536
y Ft(s)902 3503 y Fu(0)925 3536 y Fm(\()p Ft(v)s Fm(\))h(:=)f
Ft(d)291 3755 y Fv(In)c(other)i(w)o(ords,)f(axioms)g(are)f(e)n(v)n
(aluated)j(in)d(a)g(layer)n(-by-layer)k(f)o(ashion)f(using)e(\002x)o
(ed)f(point)h(computations,)150 3868 y(which)i(is)f(v)o(ery)h(similar)g
(to)f(the)h(semantics)h(of)e(strati\002ed)i(logic)g(programs.)30
b(It)23 b(is)g(easy)h(to)g(see)f(that)h(the)g(layering)150
3981 y(property)33 b(from)d(De\002nition)i(1)e(guarantees)k(that)d(the)
g(algorithm)h(terminates)h(and)e(produces)i(a)d(deterministic)150
4094 y(result.)g(Ha)n(ving)24 b(de\002ned)h(the)f(semantics)h(of)e
(axioms,)h(we)f(can)h(no)n(w)f(de\002ne)h(the)g(state)g(space)h(of)e
(an)h(MPT)-5 b(:)150 4315 y Fz(De\002nition)23 b(3)46
b Fj(MPT)21 b(state)k(spaces)150 4428 y Fq(The)g Fj(state)h(space)g
Fq(of)f(an)g(MPT)e Fm(\005)29 b(=)f Fo(hV)7 b Ft(;)15
b(s)1531 4442 y Fs(0)1571 4428 y Ft(;)g(s)1654 4442 y
Fk(?)1693 4428 y Ft(;)g Fo(A)p Ft(;)g Fo(O)s(i)p Fq(,)25
b(denoted)i(as)e Fo(S)7 b Fm(\(\005\))p Fq(,)26 b(is)e(a)h(dir)m(ected)
i(gr)o(aph.)35 b(Its)25 b(verte)n(x)150 4541 y(set)d(is)g(the)g(set)g
(of)g(states)i(of)e Fo(V)7 b Fq(,)21 b(and)i(it)e(contains)k(an)d(ar)m
(c)g Fm(\()p Ft(s;)15 b(s)2099 4508 y Fu(0)2122 4541
y Fm(\))21 b Fq(if)n(f)i(ther)m(e)f(e)n(xists)i(some)e(oper)o(ator)i
Fo(h)p Fq(pr)m(e)q Ft(;)15 b Fq(ef)n(f)r Fo(i)25 b(2)g(O)150
4654 y Fq(suc)o(h)f(that:)286 4848 y Fo(\017)46 b Fq(pr)m(e)26
b Fo(\022)f(A)p Fm(\()p Ft(s)p Fm(\))p Fq(,)286 5041
y Fo(\017)46 b Ft(s)420 5008 y Fu(0)443 5041 y Fm(\()p
Ft(v)s Fm(\))26 b(=)f Ft(d)e Fq(for)h(all)g(ef)n(fects)h(cond)i
Fo(!)f Ft(v)i Fm(:=)d Ft(d)h Fo(2)f Fq(ef)n(f)f(suc)o(h)g(that)g(cond)j
Fo(\022)e(A)p Fm(\()p Ft(s)p Fm(\))p Fq(,)d(and)286 5234
y Fo(\017)46 b Ft(s)420 5201 y Fu(0)443 5234 y Fm(\()p
Ft(v)s Fm(\))26 b(=)f Ft(s)p Fm(\()p Ft(v)s Fm(\))f Fq(for)g(all)f
(other)i(\003uents.)1888 5506 y Fy(204)p eop end
%%Page: 205 15
TeXDict begin 205 14 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)291
249 y Fv(Finally)-6 b(,)24 b(we)f(can)h(de\002ne)g(the)g(MPT)d
(planning)26 b(problem:)150 435 y Fz(De\002nition)d(4)46
b Fj(MPT)21 b(planning)152 548 y Fv(M)t(P)t(T)l(-)t(P)t
Fr(L)t(A)t(N)t Fv(E)t Fr(X)31 b Fq(is)c(the)g(following)i(decision)h
(pr)l(oblem:)38 b(Given)27 b(an)h(MPT)d Fm(\005)i Fq(with)g(initial)i
(state)f Ft(s)3360 562 y Fs(0)3425 548 y Fq(and)g(goal)150
661 y Ft(s)193 675 y Fk(?)232 661 y Fq(,)23 b(does)h
Fo(S)7 b Fm(\(\005\))23 b Fq(contain)j(a)d(path)h(fr)l(om)g
Ft(s)1472 675 y Fs(0)1533 661 y Fq(to)g(some)f(state)i
Ft(s)2074 628 y Fu(0)2120 661 y Fq(with)e Ft(s)2342 675
y Fk(?)2406 661 y Fo(\022)i(A)p Fm(\()p Ft(s)2653 628
y Fu(0)2676 661 y Fm(\))p Fq(?)152 799 y Fv(M)t(P)t(T)l(-)t(P)t
Fr(L)t(A)t(N)t(N)t(I)t(N)t(G)30 b Fq(is)c(the)h(following)h(sear)m(c)o
(h)f(pr)l(oblem:)36 b(Given)26 b(an)g(MPT)f Fm(\005)g
Fq(with)h(initial)i(state)f Ft(s)3362 813 y Fs(0)3427
799 y Fq(and)f(goal)150 911 y Ft(s)193 925 y Fk(?)232
911 y Fq(,)d(compute)h(a)f(path)i(in)e Fo(S)7 b Fm(\(\005\))24
b Fq(fr)l(om)f Ft(s)1411 925 y Fs(0)1473 911 y Fq(to)g(some)h(state)g
Ft(s)2013 878 y Fu(0)2059 911 y Fq(with)f Ft(s)2281 925
y Fk(?)2346 911 y Fo(\022)i(A)p Fm(\()p Ft(s)2593 878
y Fu(0)2615 911 y Fm(\))p Fq(,)e(or)h(pr)l(o)o(ve)g(that)h(none)f(e)n
(xists.)291 1098 y Fv(The)d(M)t(P)t(T)l(-)t(P)t Fr(L)t(A)t(N)t
Fv(E)t Fr(X)h Fv(problem)f(is)e(easily)h(sho)n(wn)g(to)f(be)g
Fz(PSP)-7 b(A)i(CE)p Fv(-hard)18 b(because)k(it)d(generalizes)j(the)d
(plan)150 1211 y(e)o(xistence)28 b(problem)g(for)f(propositional)j
(STRIPS,)23 b(which)k(is)f(kno)n(wn)h(to)f(be)g Fz(PSP)-7
b(A)i(CE)p Fv(-complete)26 b(\(Bylander)l(,)150 1324
y(1994\).)i(It)19 b(is)f(also)i(easy)f(to)g(see)g(that)g(the)g
(addition)i(of)e(multi-v)n(alued)i(domains,)g(axioms)f(and)f
(conditional)j(ef)n(fects)150 1437 y(does)i(not)f(increase)i(the)e
(theoretical)j(comple)o(xity)e(of)f(MPT)e(planning)k(be)o(yond)g
(propositional)i(STRIPS.)19 b(Thus,)150 1550 y(we)24
b(conclude)j(our)e(formal)h(introduction)i(of)d(MPT)e(planning)k(by)e
(stating)i(that)g(M)t(P)t(T)l(-)t(P)t Fr(L)t(A)t(N)t
Fv(E)t Fr(X)h Fv(is)d Fz(PSP)-7 b(A)i(CE)p Fv(-)150 1663
y(complete,)25 b(and)f(turn)g(to)f(the)h(practical)i(side)e(of)g
(things)h(in)e(the)h(follo)n(wing)h(section.)150 1923
y Fw(5.)35 b(Kno)o(wledge)25 b(Compilation)150 2096 y
Fv(The)h(purpose)i(of)e(the)g(kno)n(wledge)i(compilation)h(component)g
(is)d(to)g(set)g(the)h(stage)g(for)f(the)h(search)g(algorithms)150
2209 y(by)21 b(compiling)i(the)e(critical)i(information)g(about)f(the)g
(planning)h(task)f(into)f(a)g(number)h(of)f(data)g(structures)j(for)d
(ef-)150 2322 y(\002cient)h(access.)29 b(In)21 b(other)i(conte)o(xts,)g
(computations)h(of)e(this)f(kind)h(are)g(often)g(called)h
Fq(pr)m(epr)l(ocessing)p Fv(.)32 b(Ho)n(we)n(v)o(er)l(,)150
2434 y(\223preprocessing\224)c(is)23 b(such)h(a)f(nondescript)j(w)o
(ord)e(that)f(it)g(can)h(mean)f(basically)j(an)o(ything.)k(F)o(or)23
b(this)h(reason,)g(we)150 2547 y(prefer)f(a)f(term)g(that)h(puts)g(a)f
(stronger)j(emphasis)e(on)g(the)f(role)h(of)f(this)h(module:)30
b(T)-7 b(o)21 b(rephrase)j(the)f(critical)h(infor)n(-)150
2660 y(mation)j(about)h(the)f(planning)h(task)f(in)g(such)g(a)f(w)o(ay)
g(that)h(it)f(is)h(directly)h(useful)g(to)e(the)h(search)h(algorithms.)
39 b(Of)150 2773 y(the)27 b(three)h(b)n(uilding)i(blocks)e(of)f(F)o
(ast)g(Do)n(wnw)o(ard)g(\(translation,)k(kno)n(wledge)e(compilation,)h
(search\),)f(it)e(is)g(the)150 2886 y(least)i(time-critical)j(part,)e
(al)o(w)o(ays)f(requiring)i(less)e(time)g(than)g(translation)j(and)d
(being)h(dominated)g(by)f(search)150 2999 y(for)24 b(all)f(b)n(ut)h
(the)g(most)g(tri)n(vial)g(tasks.)291 3112 y(Kno)n(wledge)35
b(compilation)h(comprises)g(three)e(items.)60 b(First)34
b(and)g(foremost,)j(we)c(compute)i(the)f Fq(domain)150
3225 y(tr)o(ansition)g(gr)o(aph)e Fv(of)f(each)i(state)f(v)n(ariable.)
54 b(The)31 b(domain)h(transition)i(graph)e(for)g(a)f(state)h(v)n
(ariable)h(encodes)150 3338 y(under)26 b(what)e(circumstances)k(that)d
(v)n(ariable)h(can)f(change)h(its)e(v)n(alue,)i(i.)15
b(e.,)23 b(from)i(which)g(v)n(alues)g(in)g(the)f(domain)150
3451 y(there)j(are)g(transitions)i(to)d(which)h(other)g(v)n(alues,)h
(which)f(operators)i(or)d(axioms)h(are)g(responsible)i(for)e(the)f
(tran-)150 3564 y(sition,)37 b(and)d(which)h(conditions)h(on)e(other)h
(state)f(v)n(ariables)i(are)e(associated)j(with)c(the)h(transition.)62
b(Domain)150 3676 y(transition)25 b(graphs)f(are)e(described)j(in)d
(Section)h(5.1.)29 b(The)o(y)21 b(are)i(a)f(central)i(concept)g(for)e
(the)h(computation)i(of)d(the)150 3789 y(causal)j(graph)g(heuristic,)g
(described)h(in)e(Section)g(6.1.)291 3902 y(Second,)e(we)f(compute)h
(the)g Fq(causal)h(gr)o(aph)f Fv(of)f(the)h(planning)i(task.)k(Where)22
b(domain)g(transition)i(graphs)f(en-)150 4015 y(code)e(dependencies)j
(between)e(v)n(alues)f(for)f(a)g(gi)n(v)o(en)h(state)g(v)n(ariable,)h
(the)f(causal)h(graph)f(encodes)h(dependencies)150 4128
y(between)f(dif)n(ferent)g(state)g(v)n(ariables.)29 b(F)o(or)19
b(e)o(xample,)i(if)e(a)g(gi)n(v)o(en)h(location)i(in)e(a)f(planning)j
(task)e(can)g(be)g(unlock)o(ed)150 4241 y(by)27 b(means)g(of)f(a)h(k)o
(e)o(y)f(that)i(can)f(be)f(carried)j(by)d(the)h(agent,)i(then)e(the)g
(v)n(ariable)h(representing)i(the)d(lock)h(state)f(of)150
4354 y(the)32 b(location)j(is)d(dependent)j(on)d(the)g(v)n(ariable)i
(that)f(represents)i(whether)e(or)f(not)h(the)f(k)o(e)o(y)h(is)f(being)
h(carried.)150 4467 y(This)d(dependenc)o(y)j(is)c(encoded)j(as)e(an)g
(arc)g(in)g(the)g(causal)i(graph.)49 b(Lik)o(e)30 b(domain)g
(transition)j(graphs,)g(causal)150 4580 y(graphs)e(are)f(a)f(central)i
(concept)h(for)d(the)h(computation)i(of)e(the)g(causal)h(graph)f
(heuristic,)k(gi)n(ving)c(it)g(its)f(name.)150 4693 y(The)20
b(causal)i(graph)f(heuristic)i(requires)g(causal)f(graphs)g(to)e(be)g
(ac)o(yclic.)29 b(F)o(or)20 b(this)h(reason,)h(the)f(kno)n(wledge)h
(com-)150 4806 y(pilation)28 b(component)g(also)f(generates)i(an)d(ac)o
(yclic)h(subgraph)i(of)d(the)g(real)g(causal)i(graph)f(when)f(c)o
(ycles)h(occur)-5 b(.)150 4918 y(This)28 b(amounts)h(to)f(a)g
(relaxation)i(of)e(the)h(planning)h(task)f(where)f(some)g(operator)i
(preconditions)i(are)d(ignored.)150 5031 y(In)f(addition)j(to)d(their)i
(usefulness)h(for)e(the)g(causal)g(graph)h(heuristic,)i(causal)e
(graphs)g(are)e(also)i(a)e(k)o(e)o(y)g(concept)150 5144
y(of)e(the)h Fq(focused)i(iter)o(ative-br)l(oadening)j(sear)m(c)o(h)c
Fv(algorithm)g(introduced)h(in)e(Section)g(6.5.)38 b(W)-7
b(e)25 b(discuss)k(causal)150 5257 y(graphs)c(in)f(Section)g(5.2.)1888
5506 y Fy(205)p eop end
%%Page: 206 16
TeXDict begin 206 15 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)291
249 y Fv(Third,)28 b(we)f(compute)h(tw)o(o)f(data)h(structures)i(that)d
(are)h(useful)g(for)g(an)o(y)f(forw)o(ard-searching)32
b(algorithm)d(for)150 361 y(MPTs,)j(called)i Fq(successor)g(g)o(ener)o
(ator)o(s)h Fv(and)e Fq(axiom)f(e)o(valuator)o(s)p Fv(.)58
b(Successor)33 b(generators)i(compute)f(the)e(set)150
474 y(of)26 b(applicable)i(operators)h(in)c(a)h(gi)n(v)o(en)g(w)o(orld)
g(state,)h(and)g(axiom)f(e)n(v)n(aluators)i(compute)f(the)f(v)n(alues)h
(of)f(deri)n(v)o(ed)150 587 y(v)n(ariables)i(for)d(a)g(gi)n(v)o(en)h
(reduced)i(state.)35 b(Both)26 b(are)g(designed)h(to)f(do)f(their)i
(job)f(as)f(quickly)i(as)f(possible,)i(which)150 700
y(is)d(especially)i(important)g(for)e(the)g(focused)i(iterati)n(v)o
(e-broadening)j(search)c(algorithm,)h(which)e(does)h(not)f(com-)150
813 y(pute)32 b(heuristic)h(estimates)f(and)f(thus)h(requires)h(the)e
(basic)h(operations)i(for)d(e)o(xpanding)i(a)d(search)j(node)e(to)g(be)
150 926 y(implemented)25 b(ef)n(\002ciently)-6 b(.)31
b(These)24 b(data)g(structures)i(are)e(discussed)i(in)d(Section)i(5.3.)
150 1159 y Fz(5.1)46 b(Domain)23 b(T)-7 b(ransition)24
b(Graphs)150 1320 y Fv(The)f(domain)h(transition)h(graph)g(of)e(a)f
(state)i(v)n(ariable)h(is)e(a)g(representation)k(of)c(the)g(w)o(ays)h
(in)f(which)g(the)g(v)n(ariable)150 1433 y(can)29 b(change)i(its)e(v)n
(alue,)i(and)e(of)g(the)g(conditions)j(that)d(must)g(be)g(satis\002ed)h
(for)f(such)h(v)n(alue)g(changes)g(to)f(be)g(al-)150
1546 y(lo)n(wed.)f(Domain)22 b(transition)i(graphs)g(were)d(introduced)
k(by)d(Jonsson)i(and)e(B)5 b(\250)-35 b(ackstr)8 b(\250)-38
b(om)22 b(\(1998a\))i(in)e(the)g(conte)o(xt)150 1659
y(of)e(SAS)413 1626 y Fs(+)490 1659 y Fv(planning.)30
b(Our)20 b(formalization)j(of)e(domain)g(transition)i(graphs)e
(generalizes)j(the)c(original)i(de\002nition)150 1771
y(to)h(planning)j(tasks)f(in)l(v)n(olving)i(axioms)d(and)g(conditional)
j(ef)n(fects.)150 1968 y Fz(De\002nition)c(5)46 b Fj(Domain)22
b(transition)j(graphs)150 2081 y Fq(Let)e Fm(\005)i(=)g
Fo(hV)7 b Ft(;)15 b(s)659 2095 y Fs(0)699 2081 y Ft(;)g(s)782
2095 y Fk(?)822 2081 y Ft(;)g Fo(A)p Ft(;)g Fo(O)s(i)23
b Fq(be)h(a)f(multi-valued)j(planning)g(task,)e(and)g(let)g
Ft(v)k Fo(2)d(V)30 b Fq(be)24 b(a)f(state)h(variable)i(of)d
Fm(\005)p Fq(.)291 2194 y(The)g Fj(domain)h(transition)g(graph)g
Fq(of)g Ft(v)s Fq(,)e(in)i(symbols)g(DTG)o Fm(\()p Ft(v)s
Fm(\))p Fq(,)g(is)f(a)g(labelled)j(dir)m(ected)f(gr)o(aph)f(with)g
(verte)n(x)150 2306 y(set)g Fo(D)344 2320 y Fk(v)385
2306 y Fq(.)k(If)23 b Ft(v)j Fq(is)d(a)h(\003uent,)g(DTG)o
Fm(\()p Ft(v)s Fm(\))g Fq(contains)h(the)f(following)h(ar)m(cs:)286
2481 y Fo(\017)46 b Fq(F)-10 b(or)26 b(eac)o(h)g(ef)n(fect)h(cond)j
Fo(!)f Ft(v)j Fm(:=)d Ft(d)1517 2448 y Fu(0)1565 2481
y Fq(of)c(an)h(oper)o(ator)h Ft(o)e Fq(with)g(pr)m(econdition)k(pr)m(e)
d(suc)o(h)g(that)g(pr)m(e)c Fo([)f Fq(cond)377 2593 y(contains)26
b(some)e(condition)i Ft(v)i Fm(=)d Ft(d)p Fq(,)e(an)h(ar)m(c)f(fr)l(om)
h Ft(d)f Fq(to)g Ft(d)2200 2560 y Fu(0)2246 2593 y Fq(labelled)j(with)d
(pr)m(e)f Fo([)d Fq(cond)j Fo(n)f(f)p Ft(v)29 b Fm(=)c
Ft(d)p Fo(g)p Fq(.)286 2776 y Fo(\017)46 b Fq(F)-10 b(or)26
b(eac)o(h)g(ef)n(fect)h(cond)j Fo(!)f Ft(v)j Fm(:=)d
Ft(d)1517 2743 y Fu(0)1565 2776 y Fq(of)c(an)h(oper)o(ator)h
Ft(o)e Fq(with)g(pr)m(econdition)k(pr)m(e)d(suc)o(h)g(that)g(pr)m(e)c
Fo([)f Fq(cond)377 2889 y(does)27 b(not)g(contain)h(the)e(condition)j
Ft(v)k Fm(=)d Ft(d)c Fq(for)g(any)g Ft(d)31 b Fo(2)e(D)2290
2903 y Fk(v)2331 2889 y Fq(,)d(an)g(ar)m(c)g(fr)l(om)g(eac)o(h)h
Ft(d)j Fo(2)g(D)3266 2903 y Fk(v)3329 2889 y Fo(n)23
b(f)p Ft(d)3489 2856 y Fu(0)3513 2889 y Fo(g)i Fq(to)h
Ft(d)3726 2856 y Fu(0)377 3001 y Fq(labelled)g(with)d(pr)m(e)e
Fo([)f Fq(cond)r(.)291 3176 y(If)j Ft(v)j Fq(is)e(a)f(derived)i
(variable)o(,)h(DTG)o Fm(\()p Ft(v)s Fm(\))d Fq(contains)j(the)e
(following)h(ar)m(cs:)286 3350 y Fo(\017)46 b Fq(F)-10
b(or)25 b(eac)o(h)h(axiom)g(cond)k Fo(!)e Ft(v)k Fm(:=)c
Ft(d)1541 3317 y Fu(0)1593 3350 y Fo(2)g(A)c Fq(suc)o(h)i(that)g(cond)g
(contains)h(some)e(condition)j Ft(v)k Fm(=)c Ft(d)p Fq(,)d(an)g(ar)m(c)
377 3463 y(fr)l(om)f Ft(d)f Fq(to)g Ft(d)778 3430 y Fu(0)824
3463 y Fq(labelled)j(with)d(cond)f Fo(n)f(f)p Ft(v)29
b Fm(=)c Ft(d)p Fo(g)p Fq(.)286 3645 y Fo(\017)46 b Fq(F)-10
b(or)28 b(eac)o(h)g(axiom)f(cond)35 b Fo(!)d Ft(v)k Fm(:=)c
Ft(d)1564 3612 y Fu(0)1621 3645 y Fo(2)g(A)26 b Fq(suc)o(h)i(that)g
(cond)g(does)h(not)e(contain)j(the)e(condition)i Ft(v)35
b Fm(=)e Ft(d)377 3758 y Fq(for)24 b(any)g Ft(d)i Fo(2)f(D)889
3772 y Fk(v)930 3758 y Fq(,)d(an)i(ar)m(c)f(fr)l(om)h(eac)o(h)g
Ft(d)h Fo(2)g(D)1841 3772 y Fk(v)1902 3758 y Fo(n)c(f)p
Ft(d)2060 3725 y Fu(0)2084 3758 y Fo(g)i Fq(to)h Ft(d)2293
3725 y Fu(0)2339 3758 y Fq(labelled)i(with)d(cond)r(.)291
3932 y(Ar)m(cs)34 b(of)h(domain)g(tr)o(ansition)i(gr)o(aphs)f(ar)m(e)f
(called)h Fj(transitions)p Fq(.)63 b(Their)35 b(labels)h(ar)m(e)f(r)m
(eferr)m(ed)h(to)e(as)h(the)150 4045 y Fj(conditions)25
b Fq(of)e(the)h(tr)o(ansition.)291 4158 y(Domain)33 b(tr)o(ansition)j
(gr)o(aphs)f(can)e(be)g(weighted,)k(in)c(whic)o(h)g(case)h(eac)o(h)g
(tr)o(ansition)h(has)f(an)f(associated)150 4271 y(non-ne)l(gative)f
(inte)l(g)o(er)e(weight.)41 b(Unless)29 b(stated)g(otherwise)o(,)h(we)d
(assume)h(that)h(all)e(tr)o(ansitions)k(derived)e(fr)l(om)150
4383 y(oper)o(ator)o(s)d(have)e(weight)h(1)e(and)h(all)g(tr)o
(ansitions)i(derived)f(fr)l(om)f(axioms)g(have)g(weight)g(0.)291
4580 y Fv(The)h(de\002nition)i(is)d(some)n(what)i(lengthy)-6
b(,)27 b(b)n(ut)e(its)h(informal)g(content)h(is)e(easy)g(to)g(grasp:)34
b(The)24 b(domain)i(tran-)150 4693 y(sition)h(graph)h(for)e
Ft(v)j Fv(contains)f(a)e(transition)j(from)d Ft(d)g Fv(to)g
Ft(d)1995 4660 y Fu(0)2044 4693 y Fv(if)g(there)h(e)o(xists)g(some)f
(operator)i(or)e(axiom)h(that)g(can)150 4806 y(change)i(the)e(v)n(alue)
h(of)e Ft(v)k Fv(from)d Ft(d)f Fv(to)h Ft(d)1387 4773
y Fu(0)1411 4806 y Fv(.)38 b(Such)27 b(a)f(transition)k(is)c(labelled)j
(with)e(the)g(conditions)j(on)d Fq(other)j Fv(state)150
4918 y(v)n(ariables)e(that)e(must)g(be)f(true)i(if)e(the)h(transition)i
(shall)f(be)f(applied.)37 b(Multiple)27 b(transitions)h(between)f(the)f
(same)150 5031 y(v)n(alues)f(using)f(dif)n(ferent)i(conditions)g(are)e
(allo)n(wed)g(and)g(occur)h(frequently)-6 b(.)291 5144
y(W)f(e)28 b(ha)n(v)o(e)h(already)h(seen)f(domain)g(transition)i
(graphs)f(in)e(the)h(introductory)j(section)e(\(Figs.)e(3)g(and)h(4\),)
g(al-)150 5257 y(though)35 b(the)o(y)f(were)f(only)i(introduced)h
(informally)g(and)e(did)g(not)f(sho)n(w)h(the)g(arc)f(labels)i(usually)
g(associated)1888 5506 y Fy(206)p eop end
%%Page: 207 17
TeXDict begin 207 16 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)171
2132 y @beginspecial 71 @llx 484 @lly 498 @urx 721 @ury
4270 @rwi @setspecial
%%BeginDocument: figures/domain-transition-graphs-grid.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.92b Copyright 2002 Radical Eye Software
%%Title: domain-transition-graphs-grid.dvi
%%BoundingBox: 71 484 498 721
%%DocumentFonts: CMR9 CMMI9 Times-Italic Times-Roman
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o domain-transition-graphs-grid.eps
%+ domain-transition-graphs-grid.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2006.07.12:1710
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: f7b6d320.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmb10 cmbx10 cmbx12 cmbx5 cmbx6 cmbx7 cmbx8 cmbx9 cmbxsl10
%     cmdunh10 cmr10 cmr12 cmr17cmr6 cmr7 cmr8 cmr9 cmsl10 cmsl12 cmsl8
%     cmsl9 cmss10cmss12 cmss17 cmss8 cmss9 cmssbx10 cmssdc10 cmssi10
%     cmssi12 cmssi17 cmssi8cmssi9 cmssq8 cmssqi8 cmvtt10
%
/TeXf7b6d320Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute /caron /breve
/macron /ring /cedilla /germandbls /ae /oe /oslash /AE /OE /Oslash
/suppress /exclam /quotedblright /numbersign /dollar /percent /ampersand
/quoteright /parenleft /parenright /asterisk /plus /comma /hyphen
/period /slash /zero /one /two /three /four /five /six /seven /eight
/nine /colon /semicolon /exclamdown /equal /questiondown /question /at
/A /B /C /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X
/Y /Z /bracketleft /quotedblleft /bracketright /circumflex /dotaccent
/quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u
/v /w /x /y /z /endash /emdash /hungarumlaut /tilde /dieresis /suppress
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /space
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /.notdef
/.notdef /Omega /ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute
/caron /breve /macron /ring /cedilla /germandbls /ae /oe /oslash /AE
/OE /Oslash /suppress /dieresis /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: aae443f0.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmmi10 cmmi12 cmmi5 cmmi6 cmmi7 cmmi8 cmmi9 cmmib10
%
/TeXaae443f0Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/alpha /beta /gamma /delta /epsilon1 /zeta /eta /theta /iota /kappa
/lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon /phi /chi /psi
/omega /epsilon /theta1 /pi1 /rho1 /sigma1 /phi1 /arrowlefttophalf
/arrowleftbothalf /arrowrighttophalf /arrowrightbothalf /arrowhookleft
/arrowhookright /triangleright /triangleleft /zerooldstyle /oneoldstyle
/twooldstyle /threeoldstyle /fouroldstyle /fiveoldstyle /sixoldstyle
/sevenoldstyle /eightoldstyle /nineoldstyle /period /comma /less /slash
/greater /star /partialdiff /A /B /C /D /E /F /G /H /I /J /K /L /M /N
/O /P /Q /R /S /T /U /V /W /X /Y /Z /flat /natural /sharp /slurbelow
/slurabove /lscript /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p
/q /r /s /t /u /v /w /x /y /z /dotlessi /dotlessj /weierstrass /vector
/tie /psi /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi
/.notdef /.notdef /Omega /alpha /beta /gamma /delta /epsilon1 /zeta /eta
/theta /iota /kappa /lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon
/phi /chi /psi /tie /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: 8r.enc
% File  8r.enc as of 2002-03-12 for PSNFSS 9
%
% This is the encoding vector for Type1 and TrueType fonts to be used
% with TeX.  This file is part of the PSNFSS bundle, version 9
% 
% Authors: S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry, W. Schmidt
%
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida + Euro.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (6) /Euro is assigned to 128, as in Windows ANSI
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there down to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /Euro /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMMI9
%!PS-AdobeFont-1.1: CMMI9 1.100
%%CreationDate: 1996 Jul 23 07:53:55
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI9 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-29 -250 1075 750}readonly def
/UniqueID 5087384 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D6F5CA5FED4F9AC9ADE41E04F9FC52E758C9F45A92BED935
86F9CFDB57732045913A6422AD4206418610C81D882EE493DE9523CC1BFE1505
DD1390B19BC1947A01B93BC668BE9B2A0E69A968554239B88C00AF9FBDF09CCD
67D3B2094C11A04762FE8CC1E91D020A28B3C122D24BEAACF82313F4604F2FEF
6E176D730A879BE45DD0D4996EF0247AEB1CA0AB08FF374D99F06D47B36F9554
FAD9A2D3CE451B7791C3709D8A1DDDEFBD840C1B42AB824D5A0DFF0E0F15B0B7
22AEEB877FF489581DA6FA8DA64944555101EB16F7AB0B717E148B7B98D8DBFD
730C52937E226545CF8DC3E07C5BA30739BAFCD0F2B44275A6D503F582C0FB4F
449963D0AD2FAFDE33BA3D77BCA9D1DF878DDAFCA2E22CC4BACD542B282164C7
97C2BDE318AF9D501CA21F6E662E7AAB75A5F24D2C182E598D175D44E88AB19A
E7CD59584F95B389183EE21B525BF52A3F23C0FE5383A5565A19361D716F508C
AAB78411CA5A4D27552CC1C435760D5A89D535B71C593E755C616661363308DA
A683F54ED0C23FB2C225A008392B0B719F66F11A946A090B7C00B662A3C69599
B4ECB0CC70C85C4BBBF207E0026F6C7A19F2ACFB7A60804FC98A4BFFD7BFFF2B
9529E6D9D4238002BBC255BC62959D6F3381FE06E0621B879D5FE5B541D45A1E
759A6E7DC32B1D1632368D09A97039DF255B6492B1B2B7E2C1434E8306ECA7D3
5A79B6D614B4979F10988BC76ED53A5F45315CD7DA216221F842FD0F3E050DD2
BAC23C984D506D8F7D614BCB6B244F5F41321549BB0BD041FBF3053307168680
3435E9C9438B42FAB00E47C88F11FD0F6B4EFE51F0E567ADE8ADA2A9425A4ABD
904D1266556F522D095CAC8635CA6FD41F26524934457A26D8A38656F3CAE2D2
16100D239FFEEA6D3AF7BF3C1FEC739B071791F12D29B1FEFC3C4E637BD1A5F4
0EF7FD30D6BDA873104D7D6EA308710F035CF3AB34B3C7839BB5F0EB05AFF969
573E6E8788F134C72AFB86F5D6C3D633C46A7A50D4C7E3355F730A043B6FE359
3340492E23C80990DAE77EB0B9E2751D736BF10AD4F77A457F5A7DC4B0847478
291081B0AF7C66F9305F4F373587745BF35466DC54C60A1CC1686DAA25CACBF7
E59F650AB891CB1ED5DFDF1018F61B3AF7F902605A42B7F4F1FF0FDA0E1335CD
ED2204779AB12940ECCCBD6323281A6D3DD0D3672642427EFE322FE068940570
E5338F07C067270743048D437003D65311F9E277E0EEBBFA55E1575B43FFA417
B704EAA7D530C84CB20689B83352F1C56847CB048DB4742623F7B4377ECD05F9
8D276E807B82CABA9CCE7FCB3E45EFAC09B9AA7D578C3FC5245A8D1A406FEA10
14CE339F4858A2D0B9B8F9AC85C15F9E0090EEEE5589A52CCD162906CCD156AE
0E6DA990291D472DB50232348678A028647846503A67638D56C72F35FDA781E1
03DB5E3DF4889D7DCDD6B8CACFCFBE4D3F4CDCEBE54CFA41DB3EDEF591629DF0
7E84ACE7940F2B49377935D7BEB0088E2011FD0E94699DEFB045F77F0B355A2E
029C75251060236481EACAFCAC3103B4D2635EED1A0F209963F3F4776976C96E
8131E5B380A159A6A89A15BAE7ECFDD9C5F8AADBB7E69944DCD6932B33354937
DE1026C3EE9BC32F9A095B051C9EE57A643AD5266D198B9282B5C36B939D9834
54F385CBCFD131B235D757F0975154DBC015005BE8D915BD18A1BB3271CEB3A7
CB1D1BA663EE81C74A42EE114535FDDEAA2884A14085E6B4ABD11A9745F12F36
204D0CFAF602705F2C623B65E06FA238D08A80F890072AC474CA2FA413532C3C
7F997BCD9242DD3696FE07B32686D5A5866DDBDF1DC16A8ECB1B243E481099BC
B1BEF48155083EFBA02C62254438F486F0DEA2A51A3E3A247A893F9FFBA0DE9D
18C2D922FF8A013A094CF93876A7170AEDBCC41B33DD994A75E04BEEFBF62B93
73D584BA3866A06DFCBD6202801CBC2568E8A3772A78B767BE30C6EAA9ECE441
9994FFFC90BED74512AE1967EEC65DE20CB8A38C5AB3ADE631AD2B6FB7E54307
8D34F1912298B43C0F08DC355EFB006E67FF9523EEF35D85DD914B3A11697E12
0532306CAD9319C36254188BE9B54DFE7423B1C023396296E1A210C742552C5F
21C7145AEA5257797DF5BF23683CF756F1D343B0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR9
%!PS-AdobeFont-1.1: CMR9 1.0
%%CreationDate: 1991 Aug 20 16:39:59
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR9 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-39 -250 1036 750}readonly def
/UniqueID 5000792 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FADB679CF58BAFDD3E51DFDD314B91A605515D729EE20C42505FD4E0835
3C9D365B14C003BC6DD352F0228A8C161F172D2551CD1C67CD0B1B21DED53203
046FAFF9B1129167921DD82C5964F9DDDFE0D2686875BD075FC81831A941F20E
C5CD90040A092E559F6D1D3B0E9BB71733595AE0EA6093F986377A96060BF12A
A1B525CD9FA741FE051DD54A32BECD55A868DD63119A4370F8322CCBEC889BC2
A723CB4015FC4AA90AE873EA14DE13382CA9CF0D8DFB65F0ABEDFD9A64BB3F4D
731E2E1C9A1789228FF44116230A70C339C9819676022AB31B5C9C589AE9094B
09882051AD4637C1710D93E8DD117B4E7B478493B91EA6306FDB3FA6D738AAB1
49FBB21A00AC2A999C21445DE3177F21D8B6AAB33869C882613EA6B5EC56476B
5634181ECBF03BFEDB57F079EACE3B334F6F384BDF9D70AEBD592C8ECF21378B
54A8B5DBF7CB9282E16AA517E14843909339B5E7C55B038BF3BB493F3B884A1C
C25F9E8FB912CBE23199AD9D2C3E573727701BA301526C66C3617B9514D6F11F
11930B1D97C17816C85B1BFD9B973A191B33CC3B391815AD14F1CBE935942AEC
D4004E6BEF379066FD72209DC88D2E634E79BCC2B98C766CBD92C561F2703F8A
109E6C6CEC7B866F2FC7ADF646BF492E520319F3B949AB5D84AE990B33344A40
3971F58DFDF8D8D67FA0B8F2A0D884F8C09A5A721319B911DBA0A35903877343
C37BC36C5EB32353272D1E6ED5FCA611BE319A7E1E842CB7576E79AF5FAE80E4
56ED4649DC8109FEFBEC0B6BE03F4CFCFBD45A94E39A500C9ECEF70F773782D6
B3C09FAD62DC7D53C1649C96DE8D045DCA5A144FED0663FF4748C1A3E3218293
26B133C9377A9828CDD00BCF27CE8027E4D53B0862A9A4C3EF9853630FFBE5BF
33E1A237EEEAC3C9327B4126F044A7A7846412E87590E4CA1DAE954D9960660F
FE7316AC1AD8AA092610DC6114BE8A1D92F79796634CBB2F3959423BA5A17966
B1A3A33EBB2E367A2D393067857573D21B1E2F2BDE51F91784A83373397AED4F
5880A1BA88A67511EC054D50FD39ED0DA9FEADF64C73D37B861F3AF90109A486
E01EC39E250A1D726FBF41AD21E6AE0260E24E1D1EDACB435A052C2508C181FC
1619F6B7FC1F92DDDDB144ECE2C30C5CA5175BA8330B4C86CC052130B9806C9E
24FBD3A36F91FEC631317A8C8C045EF4BBA538D2FB3C54A112DC2318FEB5A236
873183279DCC31FA10D23A63CB079D3925DF44C0C95E8828CD95F97611B8344C
3EEB99208C4ED0CD407EC9AB6B3011F5531AC56DDB6FBFE603ACD49FCA1CB77D
453141C10C12E5E13E5A06C603351F254F099AD3E5A1FF850DEB553B9E847D9B
D9454C542CC19E6A58F893BB11BADF3D30F705D9031CBC8943F728E506EAC901
4B1572C62FA7F9155ADA1CE3425BB584E8369E0EFF6A29B7F0FD00E00892D842
738AE7C2E6C679E56502A90D022A337819093A045BAE71E8FC6D65E605F70D00
933C51B47C5AEAFB2A5F3946CF78CAF3AAF79EB85DCFD1C90253FD83D83C22B1
940D196ECBFAA735F157E25F9907B1AE8A975536770FCA2B3550E18D00462FAF
0BD089C53B0EEF0A93BFC3CF33330A77A4D196EF6C35A7BD78B9AF8ADEF18E8B
724178056999261C711BBEECA5FFB033C1545743917D8150CD0F997058CA843F
0A9BC84AE4055954F4C898029DA3367AFDFB27499D5236D43780FE4915F2BC8C
197A58AD01A5025E7A1A6913CC373E0DEBABB348E06453B38342EFB3D1CB54C8
ED32A18C888A13EB55D26620123644A1111FE679826EF5A832D591346CD3AB10
55F279B3E6A95D0D121A4F4B8AC3648122F7FA8F21DF966796E0BE02C2CC97B3
C94C700BFF53EA9172B602223851F87C25C123F3570848669846D3B1EBB222D3
78464F9D88D35C41E8D0B122DCA1A24D20AD35B80A6F19AC888946270AE66DD0
35BE56BE6EE0B1AF5FC0CAFA546A8E63B5AFEA9FC622C9E512C641DECA9A1CB4
2B112BCFC576F713D5BA4E132E4ED05D7B60E60D8C8E8A3CB297F412083AAEBC
5C355446FF4FAA22066CAEDBD96E9D83394DE42F559B1935E913F7E227DE4A38
E2C1AE46C3156A188BF6861FB5A7732EA2767E313541482A4706766B2002636E
DDA5D63CAFA5D371EAD0D5FFDB45
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600
(domain-transition-graphs-grid.dvi) @start /Fa 140[29
25 1[37 37 37 1[21 2[21 3[33 37 33 1[33 52[19 44[{
 TeXBase1Encoding ReEncodeFont }12 74.7198 /Times-Roman
rf /Fb 141[29 1[37 37 37 4[21 3[33 37 33 1[37 97[{
 TeXBase1Encoding ReEncodeFont }9 74.7198 /Times-Italic
rf /Fc 141[35 6[40 6[40 40[21 59[{ TeXaae443f0Encoding ReEncodeFont }4
74.7198 /CMMI9 rf /Fd 194[60 9[38 38 38 7[30 30 40[{
 TeXf7b6d320Encoding ReEncodeFont }6 74.7198 /CMR9 rf
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 1961 a
 tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 1961 a 0 1961 3544 1961
v 3544 1961 a
 currentpoint grestore moveto
 3544 1961 a 2669 992 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  -307.2876 102.4292 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 2669 992 a
 tx@Dict begin tx@NodeDict begin {-307.2876 102.4292 14.22636 } false
/N@r11 11 {InitCnode } NewNode end end
 2669 992 a 2669 992 a
 tx@Dict begin { -307.2876 102.4292 } PutCoor PutBegin  end
 2669 992
a 2584 1011 a Fd(\(1)p Fc(;)13 b Fd(1\))2669 992 y
 tx@Dict begin PutEnd  end
 2669
992 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  -230.4657 102.4292 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2669 992
a
 tx@Dict begin tx@NodeDict begin {-230.4657 102.4292 14.22636 } false
/N@r21 11 {InitCnode } NewNode end end
 2669 992 a 2669 992 a
 tx@Dict begin { -230.4657 102.4292 } PutCoor PutBegin  end
 2669 992 a 2584 1011 a Fd(\(2)p
Fc(;)g Fd(1\))2669 992 y
 tx@Dict begin PutEnd  end
 2669 992 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  -153.6438 102.4292 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 2669 992 a
 tx@Dict begin tx@NodeDict begin {-153.6438 102.4292 14.22636 } false
/N@r31 11 {InitCnode } NewNode end end
 2669 992 a 2669 992 a
 tx@Dict begin { -153.6438 102.4292 } PutCoor PutBegin  end
 2669 992
a 2584 1011 a Fd(\(3)p Fc(;)g Fd(1\))2669 992 y
 tx@Dict begin PutEnd  end
 2669
992 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  -307.2876 25.6073 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2669 992
a
 tx@Dict begin tx@NodeDict begin {-307.2876 25.6073 14.22636 } false
/N@r12 11 {InitCnode } NewNode end end
 2669 992 a 2669 992 a
 tx@Dict begin { -307.2876 25.6073 } PutCoor PutBegin  end
 2669 992 a 2584 1011 a Fd(\(1)p
Fc(;)g Fd(2\))2669 992 y
 tx@Dict begin PutEnd  end
 2669 992 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  -230.4657 25.6073 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 2669 992 a
 tx@Dict begin tx@NodeDict begin {-230.4657 25.6073 14.22636 } false
/N@r22 11 {InitCnode } NewNode end end
 2669 992 a 2669 992 a
 tx@Dict begin { -230.4657 25.6073 } PutCoor PutBegin  end
 2669 992
a 2584 1011 a Fd(\(2)p Fc(;)g Fd(2\))2669 992 y
 tx@Dict begin PutEnd  end
 2669
992 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  -153.6438 25.6073 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2669 992
a
 tx@Dict begin tx@NodeDict begin {-153.6438 25.6073 14.22636 } false
/N@r32 11 {InitCnode } NewNode end end
 2669 992 a 2669 992 a
 tx@Dict begin { -153.6438 25.6073 } PutCoor PutBegin  end
 2669 992 a 2584 1011 a Fd(\(3)p
Fc(;)g Fd(2\))2669 992 y
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@r11 /N@r21 InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992
a 2669 992 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2669 992 a 2669 992 a
 tx@Dict begin { 2.0 tx@Dict /NCLW known { NCLW add } if 34.62187 6.25
1.85844 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 2669 992 a 2526 1010
a Fc(d)21 b Fd(=)g Fb(open)2669 992 y
 tx@Dict begin PutEnd  end
 2669 992 a 2669
992 a
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@r21 /N@r11 InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@r21 /N@r31 InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669
992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@r31 /N@r21 InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669 992 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2669 992 a 2669
992 a
 tx@Dict begin { 2.0 tx@Dict /NCLW known { NCLW add } if 34.62187 6.25
1.85844 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 2669 992 a 2526 1010 a Fc(d)g Fd(=)g Fb(open)2669
992 y
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@r12 /N@r22 InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669
992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@r22 /N@r12 InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@r22 /N@r32 InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669
992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@r32 /N@r22 InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@r11 /N@r12 InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@r12 /N@r11 InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669
992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@r21 /N@r22 InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@r22 /N@r21 InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669
992 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2669 992 a 2669 992 a
 tx@Dict begin NAngle  RotBegin  end
 2669 992 a 2669 992 a
 tx@Dict begin { 2.0 tx@Dict /NCLW known { NCLW add } if 34.62187 6.25
1.85844 NAngle 90 add  NAngle  sub Uput exch pop add a PtoC h1 add
exch w1 add exch } PutCoor PutBegin  end
 2669
992 a 2526 1010 a Fc(d)g Fd(=)g Fb(open)2669 992 y
 tx@Dict begin PutEnd  end
 2669
992 a 2669 992 a
 tx@Dict begin RotEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin PutEnd  end
 2669 992 a 2669
992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@r31 /N@r32 InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@r32 /N@r31 InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  -88.60143 51.2146 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2669 992 a
 tx@Dict begin tx@NodeDict begin {-88.60143 51.2146 14.22636 } false
/N@k11 11 {InitCnode } NewNode end end
 2669 992 a 2669 992
a
 tx@Dict begin { -88.60143 51.2146 } PutCoor PutBegin  end
 2669 992 a 2584 1011 a Fd(\(1)p Fc(;)13 b Fd(1\))2669
992 y
 tx@Dict begin PutEnd  end
 2669 992 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 102.4292 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial
2669 992 a
 tx@Dict begin tx@NodeDict begin {0.0 102.4292 14.22636 } false /N@k21
11 {InitCnode } NewNode end end
 2669 992 a 2669 992 a
 tx@Dict begin { 0.0 102.4292 } PutCoor PutBegin  end
 2669 992 a 2584 1011
a Fd(\(2)p Fc(;)g Fd(1\))2669 992 y
 tx@Dict begin PutEnd  end
 2669 992 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  88.60143 51.2146 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2669 992 a
 tx@Dict begin tx@NodeDict begin {88.60143 51.2146 14.22636 } false
/N@k31 11 {InitCnode } NewNode end end
 2669 992 a 2669 992
a
 tx@Dict begin { 88.60143 51.2146 } PutCoor PutBegin  end
 2669 992 a 2584 1011 a Fd(\(3)p Fc(;)g Fd(1\))2669
992 y
 tx@Dict begin PutEnd  end
 2669 992 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 0.0 14.22636 .5
CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial
2669 992 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 14.22636 } false /N@kc 11
{InitCnode } NewNode end end
 2669 992 a 2669 992 a
 tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 2669 992 a 2566 1017
a Fa(carried)2669 992 y
 tx@Dict begin PutEnd  end
 2669 992 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  -88.60143 -51.2146 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 2669 992 a
 tx@Dict begin tx@NodeDict begin {-88.60143 -51.2146 14.22636 } false
/N@k12 11 {InitCnode } NewNode end end
 2669 992 a 2669 992 a
 tx@Dict begin { -88.60143 -51.2146 } PutCoor PutBegin  end
 2669 992
a 2584 1011 a Fd(\(1)p Fc(;)g Fd(2\))2669 992 y
 tx@Dict begin PutEnd  end
 2669
992 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 -102.4292 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2669 992
a
 tx@Dict begin tx@NodeDict begin {0.0 -102.4292 14.22636 } false /N@k22
11 {InitCnode } NewNode end end
 2669 992 a 2669 992 a
 tx@Dict begin { 0.0 -102.4292 } PutCoor PutBegin  end
 2669 992 a 2584 1011 a Fd(\(2)p
Fc(;)g Fd(2\))2669 992 y
 tx@Dict begin PutEnd  end
 2669 992 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  88.60143 -51.2146 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 2669 992 a
 tx@Dict begin tx@NodeDict begin {88.60143 -51.2146 14.22636 } false
/N@k32 11 {InitCnode } NewNode end end
 2669 992 a 2669 992 a
 tx@Dict begin { 88.60143 -51.2146 } PutCoor PutBegin  end
 2669 992
a 2584 1011 a Fd(\(3)p Fc(;)g Fd(2\))2669 992 y
 tx@Dict begin PutEnd  end
 2669
992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@k11 /N@kc InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669 992 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2669 992 a 2669
992 a
 tx@Dict begin NAngle  RotBegin  end
 2669 992 a 2669 992 a
 tx@Dict begin { 2.0 tx@Dict /NCLW known { NCLW add } if 37.31921 6.75
2.25 NAngle 90 add  NAngle  sub Uput exch pop add a PtoC h1 add exch
w1 add exch } PutCoor PutBegin  end
 2669 992 a 2514 1011 a Fc(r)23
b Fd(=)f(\(1)p Fc(;)13 b Fd(1\))2669 992 y
 tx@Dict begin PutEnd  end
 2669 992 a
2669 992 a
 tx@Dict begin RotEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@kc /N@k11 InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669 992 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2669 992 a 2669 992 a
 tx@Dict begin NAngle 180 add  RotBegin  end
 2669 992
a 2669 992 a
 tx@Dict begin { 2.0 tx@Dict /NCLW known { NCLW add } if 37.31921 6.75
2.25 NAngle 90 add  NAngle 180 add  sub Uput exch pop add a PtoC h1
add exch w1 add exch } PutCoor PutBegin  end
 2669 992 a 2514 1011 a Fc(r)23 b Fd(=)f(\(1)p
Fc(;)13 b Fd(1\))2669 992 y
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin RotEnd  end
 2669
992 a 2669 992 a
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@k21 /N@kc InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669
992 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2669 992 a 2669 992 a
 tx@Dict begin NAngle 180 add  RotBegin  end
 2669 992 a 2669 992 a
 tx@Dict begin { 2.0 tx@Dict /NCLW known { NCLW add } if 37.31921 6.75
2.25 NAngle 90 add  NAngle 180 add  sub Uput exch pop add a PtoC h1
add exch w1 add exch } PutCoor PutBegin  end
 2669
992 a 2514 1011 a Fc(r)23 b Fd(=)f(\(2)p Fc(;)13 b Fd(1\))2669
992 y
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin RotEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin PutEnd  end
 2669
992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@kc /N@k21 InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669 992 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2669 992 a 2669
992 a
 tx@Dict begin NAngle  RotBegin  end
 2669 992 a 2669 992 a
 tx@Dict begin { 2.0 tx@Dict /NCLW known { NCLW add } if 37.31921 6.75
2.25 NAngle 90 add  NAngle  sub Uput exch pop add a PtoC h1 add exch
w1 add exch } PutCoor PutBegin  end
 2669 992 a 2514 1011 a Fc(r)23
b Fd(=)f(\(2)p Fc(;)13 b Fd(1\))2669 992 y
 tx@Dict begin PutEnd  end
 2669 992 a
2669 992 a
 tx@Dict begin RotEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@k31 /N@kc InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669 992 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2669 992 a 2669 992 a
 tx@Dict begin NAngle 180 add  RotBegin  end
 2669 992
a 2669 992 a
 tx@Dict begin { 2.0 tx@Dict /NCLW known { NCLW add } if 37.31921 6.75
2.25 NAngle 90 add  NAngle 180 add  sub Uput exch pop add a PtoC h1
add exch w1 add exch } PutCoor PutBegin  end
 2669 992 a 2514 1011 a Fc(r)23 b Fd(=)f(\(3)p
Fc(;)13 b Fd(1\))2669 992 y
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin RotEnd  end
 2669
992 a 2669 992 a
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@kc /N@k31 InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669
992 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2669 992 a 2669 992 a
 tx@Dict begin NAngle  RotBegin  end
 2669 992 a 2669 992 a
 tx@Dict begin { 2.0 tx@Dict /NCLW known { NCLW add } if 37.31921 6.75
2.25 NAngle 90 add  NAngle  sub Uput exch pop add a PtoC h1 add exch
w1 add exch } PutCoor PutBegin  end
 2669
992 a 2514 1011 a Fc(r)23 b Fd(=)f(\(3)p Fc(;)13 b Fd(1\))2669
992 y
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin RotEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin PutEnd  end
 2669
992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@k12 /N@kc InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669 992 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2669 992 a 2669
992 a
 tx@Dict begin NAngle  RotBegin  end
 2669 992 a 2669 992 a
 tx@Dict begin { 2.0 tx@Dict /NCLW known { NCLW add } if 37.31921 6.75
2.25 NAngle 90 add  NAngle  sub Uput exch pop add a PtoC h1 add exch
w1 add exch } PutCoor PutBegin  end
 2669 992 a 2514 1011 a Fc(r)23
b Fd(=)f(\(1)p Fc(;)13 b Fd(2\))2669 992 y
 tx@Dict begin PutEnd  end
 2669 992 a
2669 992 a
 tx@Dict begin RotEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@kc /N@k12 InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669 992 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2669 992 a 2669 992 a
 tx@Dict begin NAngle 180 add  RotBegin  end
 2669 992
a 2669 992 a
 tx@Dict begin { 2.0 tx@Dict /NCLW known { NCLW add } if 37.31921 6.75
2.25 NAngle 90 add  NAngle 180 add  sub Uput exch pop add a PtoC h1
add exch w1 add exch } PutCoor PutBegin  end
 2669 992 a 2514 1011 a Fc(r)23 b Fd(=)f(\(1)p
Fc(;)13 b Fd(2\))2669 992 y
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin RotEnd  end
 2669
992 a 2669 992 a
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@k22 /N@kc InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669
992 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2669 992 a 2669 992 a
 tx@Dict begin NAngle  RotBegin  end
 2669 992 a 2669 992 a
 tx@Dict begin { 2.0 tx@Dict /NCLW known { NCLW add } if 37.31921 6.75
2.25 NAngle 90 add  NAngle  sub Uput exch pop add a PtoC h1 add exch
w1 add exch } PutCoor PutBegin  end
 2669
992 a 2514 1011 a Fc(r)23 b Fd(=)f(\(2)p Fc(;)13 b Fd(2\))2669
992 y
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin RotEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin PutEnd  end
 2669
992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@kc /N@k22 InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669 992 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2669 992 a 2669
992 a
 tx@Dict begin NAngle 180 add  RotBegin  end
 2669 992 a 2669 992 a
 tx@Dict begin { 2.0 tx@Dict /NCLW known { NCLW add } if 37.31921 6.75
2.25 NAngle 90 add  NAngle 180 add  sub Uput exch pop add a PtoC h1
add exch w1 add exch } PutCoor PutBegin  end
 2669 992 a 2514 1011 a Fc(r)23
b Fd(=)f(\(2)p Fc(;)13 b Fd(2\))2669 992 y
 tx@Dict begin PutEnd  end
 2669 992 a
2669 992 a
 tx@Dict begin RotEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@k32 /N@kc InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669 992 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2669 992 a 2669 992 a
 tx@Dict begin NAngle 180 add  RotBegin  end
 2669 992
a 2669 992 a
 tx@Dict begin { 2.0 tx@Dict /NCLW known { NCLW add } if 37.31921 6.75
2.25 NAngle 90 add  NAngle 180 add  sub Uput exch pop add a PtoC h1
add exch w1 add exch } PutCoor PutBegin  end
 2669 992 a 2514 1011 a Fc(r)23 b Fd(=)f(\(3)p
Fc(;)13 b Fd(2\))2669 992 y
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin RotEnd  end
 2669
992 a 2669 992 a
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@kc /N@k32 InitNC { yB yA sub xB xA sub Atan dup 10.  add /AngleA
ED 10.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669
992 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2669 992 a 2669 992 a
 tx@Dict begin NAngle  RotBegin  end
 2669 992 a 2669 992 a
 tx@Dict begin { 2.0 tx@Dict /NCLW known { NCLW add } if 37.31921 6.75
2.25 NAngle 90 add  NAngle  sub Uput exch pop add a PtoC h1 add exch
w1 add exch } PutCoor PutBegin  end
 2669
992 a 2514 1011 a Fc(r)23 b Fd(=)f(\(3)p Fc(;)13 b Fd(2\))2669
992 y
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin RotEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin PutEnd  end
 2669
992 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  -294.48395 -51.2146
14.22636 .5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 2669 992
a
 tx@Dict begin tx@NodeDict begin {-294.48395 -51.2146 14.22636 } false
/N@dc 11 {InitCnode } NewNode end end
 2669 992 a 2669 992 a
 tx@Dict begin { -294.48395 -51.2146 } PutCoor PutBegin  end
 2669 992 a 2574 1017 a Fa(closed)2669
992 y
 tx@Dict begin PutEnd  end
 2669 992 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  -166.44745 -51.2146
14.22636 .5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial
2669 992 a
 tx@Dict begin tx@NodeDict begin {-166.44745 -51.2146 14.22636 } false
/N@do 11 {InitCnode } NewNode end end
 2669 992 a 2669 992 a
 tx@Dict begin { -166.44745 -51.2146 } PutCoor PutBegin  end
 2669 992 a 2596 1001
a Fa(open)2669 992 y
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@dc /N@do InitNC { yB yA sub xB xA sub Atan dup 40.  add /AngleA
ED 40.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a
2669 992 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2669 992 a 2669 992 a
 tx@Dict begin { 2.0 tx@Dict /NCLW known { NCLW add } if 85.72789 6.75
2.25 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 2669 992 a 2313 1011
a Fc(r)24 b Fd(=)d(\(1)p Fc(;)13 b Fd(1\))p Fa(,)19 b
Fc(k)k Fd(=)e Fb(carried)2669 992 y
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992
a
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@dc /N@do InitNC { yB yA sub xB xA sub Atan dup 0.  add /AngleA
ED 0.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669 992 a 2669 992 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2669 992
a 2669 992 a
 tx@Dict begin { 2.0 tx@Dict /NCLW known { NCLW add } if 85.72789 6.75
2.25 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 2669 992 a 2313 1011 a Fc(r)j Fd(=)d(\(2)p
Fc(;)13 b Fd(2\))p Fa(,)19 b Fc(k)k Fd(=)e Fb(carried)2669
992 y
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin PutEnd  end
 2669 992 a 2669 992 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@dc /N@do InitNC { yB yA sub xB xA sub Atan dup -40.  add /AngleA
ED -40.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2669
992 a 2669 992 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2669 992 a 2669 992 a
 tx@Dict begin { 2.0 tx@Dict /NCLW known { NCLW add } if 85.72789 6.75
2.25 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 2669 992 a 2313
1011 a Fc(r)j Fd(=)d(\(3)p Fc(;)13 b Fd(1\))p Fa(,)19
b Fc(k)k Fd(=)e Fb(carried)2669 992 y
 tx@Dict begin PutEnd  end
 2669 992 a 2669
992 a
 tx@Dict begin PutEnd  end
 2669 992 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 150 2444 a Fv(Figure)f(10:)47 b(Domain)33
b(transition)j(graphs)e(of)f(a)i(G)t Fr(R)t(I)t(D)g Fv(task.)58
b(T)-7 b(op)32 b(left:)49 b Fq(DTG)o Fm(\()p Ft(r)s Fm(\))32
b Fv(\(robot\);)40 b(right:)49 b Fq(DTG)o Fm(\()p Ft(k)s
Fm(\))572 2557 y Fv(\(k)o(e)o(y\);)24 b(bottom)h(left:)k
Fq(DTG)o Fm(\()p Ft(d)p Fm(\))24 b Fv(\(door\).)150 2968
y(with)33 b(transitions.)60 b(Fig.)32 b(10)i(sho)n(ws)f(some)g(e)o
(xamples)h(from)f(a)g(simple)g(task)h(in)f(the)i(G)t
Fr(R)t(I)t(D)g Fv(domain,)i(featur)n(-)150 3081 y(ing)30
b(a)g Fm(3)25 b Fo(\002)g Fm(2)k Fv(grid)i(with)f(a)f(single)i
(initially)h(lock)o(ed)g(location)g(in)e(the)g(centre)h(of)f(the)g
(upper)h(ro)n(w)-6 b(,)31 b(unlockable)150 3194 y(by)f(a)f(single)j(k)o
(e)o(y)-6 b(.)48 b(In)29 b(the)i(MPT)d(encoding)k(of)e(the)g(task,)i
(there)f(are)f(three)g(state)h(v)n(ariables:)44 b(v)n(ariable)32
b Ft(r)f Fv(with)150 3307 y Fo(D)220 3321 y Fk(r)300
3307 y Fm(=)42 b Fo(f)33 b Fm(\()p Ft(x;)15 b(y)s Fm(\))32
b Fo(j)g Ft(x)43 b Fo(2)e(f)p Fm(1)p Ft(;)15 b Fm(2)p
Ft(;)g Fm(3)p Fo(g)p Ft(;)51 b(y)45 b Fo(2)d(f)p Fm(1)p
Ft(;)15 b Fm(2)p Fo(g)34 b(g)e Fv(encodes)j(the)e(location)h(of)f(the)g
(robot,)j(v)n(ariable)e Ft(k)h Fv(with)150 3420 y Fo(D)220
3435 y Fk(k)310 3420 y Fm(=)48 b Fo(D)499 3434 y Fk(r)566
3420 y Fo([)28 b(f)p Fq(carried)t Fo(g)35 b Fv(encodes)i(the)f(state)h
(of)e(the)h(k)o(e)o(y)-6 b(,)39 b(and)d(v)n(ariable)h
Ft(d)e Fv(with)g Fo(D)3003 3435 y Fk(d)3091 3420 y Fm(=)48
b Fo(f)p Fq(closed)r Ft(;)15 b Fq(open)s Fo(g)150 3533
y Fv(encodes)26 b(the)d(state)i(of)e(the)h(initially)i(lock)o(ed)f
(grid)f(location.)291 3661 y(If)g(all)h(operators)i(of)d(an)h(MPT)d
(are)j(unary)g(\(i.)16 b(e.,)23 b(only)j(ha)n(v)o(e)f(a)f(single)i(ef)n
(fect\))f(and)g(we)f(lea)n(v)o(e)h(aside)g(axioms)150
3774 y(for)33 b(a)g(moment,)i(then)e(there)h(is)f(a)f(strong)j
(correspondence)i(between)d(the)f(state)h(space)g(of)f(an)g(MPT)e(and)i
(its)150 3887 y(domain)28 b(transition)i(graphs.)42 b(Since)28
b(v)o(ertices)h(in)e(domain)i(transition)h(graphs)f(correspond)h(to)d
(v)n(alues)i(of)e(state)150 4000 y(v)n(ariables,)c(a)d(gi)n(v)o(en)h
(state)g(is)g(represented)i(by)e(selecting)i(one)e(v)o(erte)o(x)g(in)f
(each)h(domain)h(transition)h(graph,)f(called)150 4113
y(the)36 b Fq(active)h(verte)n(x)g Fv(of)f(this)g(state)h(v)n(ariable.)
66 b(Applying)38 b(an)d(operator)j(means)e(changing)i(the)e(acti)n(v)o
(e)h(v)o(erte)o(x)150 4225 y(of)e(some)g(state)h(v)n(ariable)g(by)f
(performing)i(a)e(transition)j(in)c(the)i(corresponding)j(domain)d
(transition)h(graph.)150 4338 y(Whether)28 b(or)e(not)h(such)g(a)f
(transition)j(is)d(allo)n(wed)h(depends)h(on)f(its)f(condition,)k
(which)d(is)f(check)o(ed)i(against)g(the)150 4451 y(acti)n(v)o(e)c(v)o
(ertices)h(of)f(the)g(other)g(domain)h(transition)h(graphs.)291
4580 y(Let)h(us)g(use)g(the)j(G)t Fr(R)t(I)t(D)f Fv(e)o(xample)f(to)f
(illustrate)i(this)f(correspondence.)44 b(Consider)28
b(an)g(initial)g(state)g(where)150 4693 y(the)c(robot)i(is)e(at)g
(location)i Fm(\(1)p Ft(;)15 b Fm(1\))p Fv(,)26 b(the)e(k)o(e)o(y)g(is)
g(at)g(location)j Fm(\(3)p Ft(;)15 b Fm(2\))p Fv(,)25
b(and)g(the)f(door)h(is)f(lock)o(ed.)33 b(W)-7 b(e)23
b(represent)k(this)150 4806 y(by)j(placing)h(pebbles)h(on)e(the)g
(appropriate)j(v)o(ertices)e(of)e(the)h(three)h(domain)g(transition)h
(graphs.)49 b(W)-7 b(e)29 b(w)o(ant)g(to)150 4918 y(mo)o(v)o(e)e(the)h
(pebble)h(in)f(the)g(domain)g(transition)j(graph)d(of)g(the)g(k)o(e)o
(y)g(to)f(location)j Fm(\(2)p Ft(;)15 b Fm(1\))p Fv(.)42
b(This)28 b(can)g(be)g(done)g(by)150 5031 y(mo)o(ving)21
b(the)f(robot)h(pebble)h(to)e(v)o(erte)o(x)h Fm(\(1)p
Ft(;)15 b Fm(2\))p Fv(,)22 b(then)f Fm(\(2)p Ft(;)15
b Fm(2\))p Fv(,)21 b(then)g Fm(\(3)p Ft(;)15 b Fm(2\))p
Fv(,)22 b(mo)o(ving)f(the)f(k)o(e)o(y)g(pebble)i(to)e(the)h(v)o(erte)o
(x)150 5144 y Fq(carried)p Fv(,)j(mo)o(ving)f(the)f(robot)h(pebble)h
(back)f(to)f(v)o(erte)o(x)h Fm(\(2)p Ft(;)15 b Fm(2\))p
Fv(,)23 b(mo)o(ving)g(the)f(door)h(pebble)h(to)e Fq(open)p
Fv(,)h(mo)o(ving)g(the)150 5257 y(robot)i(pebble)g(to)e(v)o(erte)o(x)h
Fm(\(2)p Ft(;)15 b Fm(1\))25 b Fv(and)f(\002nally)g(mo)o(ving)g(the)g
(k)o(e)o(y)g(pebble)h(to)e(v)o(erte)o(x)i Fm(\(2)p Ft(;)15
b Fm(1\))p Fv(.)1888 5506 y Fy(207)p eop end
%%Page: 208 18
TeXDict begin 208 17 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)217
1216 y @beginspecial 71 @llx 594 @lly 487 @urx 721 @ury
4160 @rwi @setspecial
%%BeginDocument: figures/domain-transition-graph-grid-axiom.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.92b Copyright 2002 Radical Eye Software
%%Title: domain-transition-graph-grid-axiom.dvi
%%BoundingBox: 71 594 487 721
%%DocumentFonts: CMSY9 CMMI9 CMR9 Times-Italic Times-Roman
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o domain-transition-graph-grid-axiom.eps
%+ domain-transition-graph-grid-axiom.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2006.07.12:1710
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: bbad153f.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmsy10 cmsy5 cmsy6 cmsy7 cmsy8 cmsy9
%
/TeXbbad153fEncoding [
/minus /periodcentered /multiply /asteriskmath /divide /diamondmath
/plusminus /minusplus /circleplus /circleminus /circlemultiply
/circledivide /circledot /circlecopyrt /openbullet /bullet
/equivasymptotic /equivalence /reflexsubset /reflexsuperset /lessequal
/greaterequal /precedesequal /followsequal /similar /approxequal
/propersubset /propersuperset /lessmuch /greatermuch /precedes /follows
/arrowleft /arrowright /arrowup /arrowdown /arrowboth /arrownortheast
/arrowsoutheast /similarequal /arrowdblleft /arrowdblright /arrowdblup
/arrowdbldown /arrowdblboth /arrownorthwest /arrowsouthwest /proportional
/prime /infinity /element /owner /triangle /triangleinv /negationslash
/mapsto /universal /existential /logicalnot /emptyset /Rfractur /Ifractur
/latticetop /perpendicular /aleph /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /union /intersection
/unionmulti /logicaland /logicalor /turnstileleft /turnstileright
/floorleft /floorright /ceilingleft /ceilingright /braceleft /braceright
/angbracketleft /angbracketright /bar /bardbl /arrowbothv /arrowdblbothv
/backslash /wreathproduct /radical /coproduct /nabla /integral
/unionsq /intersectionsq /subsetsqequal /supersetsqequal /section
/dagger /daggerdbl /paragraph /club /diamond /heart /spade /arrowleft
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/minus /periodcentered /multiply /asteriskmath /divide /diamondmath
/plusminus /minusplus /circleplus /circleminus /.notdef /.notdef
/circlemultiply /circledivide /circledot /circlecopyrt /openbullet
/bullet /equivasymptotic /equivalence /reflexsubset /reflexsuperset
/lessequal /greaterequal /precedesequal /followsequal /similar
/approxequal /propersubset /propersuperset /lessmuch /greatermuch
/precedes /follows /arrowleft /spade /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: aae443f0.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmmi10 cmmi12 cmmi5 cmmi6 cmmi7 cmmi8 cmmi9 cmmib10
%
/TeXaae443f0Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/alpha /beta /gamma /delta /epsilon1 /zeta /eta /theta /iota /kappa
/lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon /phi /chi /psi
/omega /epsilon /theta1 /pi1 /rho1 /sigma1 /phi1 /arrowlefttophalf
/arrowleftbothalf /arrowrighttophalf /arrowrightbothalf /arrowhookleft
/arrowhookright /triangleright /triangleleft /zerooldstyle /oneoldstyle
/twooldstyle /threeoldstyle /fouroldstyle /fiveoldstyle /sixoldstyle
/sevenoldstyle /eightoldstyle /nineoldstyle /period /comma /less /slash
/greater /star /partialdiff /A /B /C /D /E /F /G /H /I /J /K /L /M /N
/O /P /Q /R /S /T /U /V /W /X /Y /Z /flat /natural /sharp /slurbelow
/slurabove /lscript /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p
/q /r /s /t /u /v /w /x /y /z /dotlessi /dotlessj /weierstrass /vector
/tie /psi /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi
/.notdef /.notdef /Omega /alpha /beta /gamma /delta /epsilon1 /zeta /eta
/theta /iota /kappa /lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon
/phi /chi /psi /tie /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: f7b6d320.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmb10 cmbx10 cmbx12 cmbx5 cmbx6 cmbx7 cmbx8 cmbx9 cmbxsl10
%     cmdunh10 cmr10 cmr12 cmr17cmr6 cmr7 cmr8 cmr9 cmsl10 cmsl12 cmsl8
%     cmsl9 cmss10cmss12 cmss17 cmss8 cmss9 cmssbx10 cmssdc10 cmssi10
%     cmssi12 cmssi17 cmssi8cmssi9 cmssq8 cmssqi8 cmvtt10
%
/TeXf7b6d320Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute /caron /breve
/macron /ring /cedilla /germandbls /ae /oe /oslash /AE /OE /Oslash
/suppress /exclam /quotedblright /numbersign /dollar /percent /ampersand
/quoteright /parenleft /parenright /asterisk /plus /comma /hyphen
/period /slash /zero /one /two /three /four /five /six /seven /eight
/nine /colon /semicolon /exclamdown /equal /questiondown /question /at
/A /B /C /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X
/Y /Z /bracketleft /quotedblleft /bracketright /circumflex /dotaccent
/quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u
/v /w /x /y /z /endash /emdash /hungarumlaut /tilde /dieresis /suppress
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /space
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /.notdef
/.notdef /Omega /ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute
/caron /breve /macron /ring /cedilla /germandbls /ae /oe /oslash /AE
/OE /Oslash /suppress /dieresis /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: 8r.enc
% File  8r.enc as of 2002-03-12 for PSNFSS 9
%
% This is the encoding vector for Type1 and TrueType fonts to be used
% with TeX.  This file is part of the PSNFSS bundle, version 9
% 
% Authors: S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry, W. Schmidt
%
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida + Euro.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (6) /Euro is assigned to 128, as in Windows ANSI
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there down to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /Euro /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMR9
%!PS-AdobeFont-1.1: CMR9 1.0
%%CreationDate: 1991 Aug 20 16:39:59
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR9 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-39 -250 1036 750}readonly def
/UniqueID 5000792 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FADB679CF58BAFDD3E51DFDD314B91A605515D729EE20C42505FD4E0835
3C9D365B14C003BC6DD352F0228A8C161F172D2551CD1C67CD0B1B21DED53203
046FAFF9B1129167921DD82C5964F9DDDFE0D2686875BD075FC81831A941F20E
C5CD90040A092E559F6D1D3B0E9BB71733595AE0EA6093F986377A96060BF12A
A1B525CD9FA741FE051DD54A32BECD55A868DD63119A4370F8322CCBEC889BC2
A723CB4015FC4AA90AE873EA14DE13382CA9CF0D8DFB65F0ABEDFD9A64BB3F4D
731E2E1C9A1789228FF44116230A70C339C9819676022AB31B5C9C589AE9094B
09882051AD4637C1710D93E8DD117B4E7B478493B91EA6306FDB3FA6D738AAB1
49FBB21A00AC2A999C21445DE3177F21D8B6AAB33869C882613EA6B5EC56476B
5634181ECBF03BFEDB57F079EACE3B334F6F384BDF9D70AEBD592C8ECF21378B
54A8B5DBF7CB9282E16AA517E14843909339B5E7C55B038BF3BB493F3B884A1C
C25F9E8FB912CBE23199AD9D2C3E573727701BA301526C66C3617B9514D6F11F
11930B1D97C17816C85B1BFD9B973A191B33CC3B391815AD14F1CBE935942AEC
D4004E6BEF379066FD72209DC88D2E634E79BCC2B98C766CBD92C561F2703F8A
109E6C6CEC7B866F2FC7ADF646BF492E520319F3B949AB5D84AE990B33344A40
3971F58DFDF8D8D67FA0B8F2A0D884F8C09A5A721319B911DBA0A35903877343
C37BC36C5EB32353272D1E6ED5FCA611BE319A7E1E842CB7576E79AF5FAE80E4
56ED4649DC8109FEFBEC0B6BE03F4CFCFBD45A94E39A500C9ECEF70F773782D6
B3C09FAD62DC7D53C1649C96DE8D045DCA5A144FED0663FF4748C1A3E3218293
26B133C9377A9828CDD00BCF27CE8027E4D53B0862A9A4C3EF9853630FFBE5BF
33E1A237EEEAC3C9327B4126F044A7A7846412E87590E4CA1DAE954D9960660F
FE7316AC1AD8AA092610DC6114BE8A1D92F79796634CBB2F3959423BA5A17966
B1A3A33EBB2E367A2D393067857573D21B1E2F2BDE51F91784A83373397AED4F
5880A1BA88A67511EC054D50FD39ED0DA9FEADF64C73D37B861F3AF90109A486
E01EC39E250A1D726FBF41AD21E6AE0260E24E1D1EDACB435A052C2508C181FC
1619F6B7FC1F92DDDDB144ECE2C30C5CA5175BA8330B4C86CC052130B9806C9E
24FBD3A36F91FEC631317A8C8C045EF4BBA538D2FB3C54A112DC2318FEB5A236
873183279DCC31FA10D23A63CB079D3925DF44C0C95E8828CD95F97611B8344C
3EEB99208C4ED0CD407EC9AB6B3011F5531AC56DDB6FBFE603ACD49FCA1CB77D
453141C10C12E5E13E5A06C603351F254F099AD3E5A1FF850DEB553B9E847D9B
D9454C542CC19E6A58F893BB11BADF3D30F705D9031CBC8943F728E506EAC901
4B1572C62FA7F9155ADA1CE3425BB584E8369E0EFF6A29B7F0FD00E00892D842
738AE7C2E6C679E56502A90D022A337819093A045BAE71E8FC6D65E605F70D00
933C51B47C5AEAFB2A5F3946CF78CAF3AAF79EB85DCFD1C90253FD83D83C22B1
940D196ECBFAA735F157E25F9907B1AE8A975536770FCA2B3550E18D00462FAF
0BD089C53B0EEF0A93BFC3CF33330A77A4D196EF6C35A7BD78B9AF8ADEF18E8B
724178056999261C711BBEECA5FFB033C1545743917D8150CD0F997058CA843F
0A9BC84AE4055954F4C898029DA3367AFDFB27499D5236D43780FE4915F2BC8C
197A58AD01A5025E7A1A6913CC373E0DEBABB348E06453B38342EFB3D1CB54C8
ED32A18C888A13EB55D26620123644A1111FE679826EF5A832D591346CD3AB10
55F279B3E6A95D0D121A4F4B8AC3648122F7FA8F21DF966796E0BE02C2CC97B3
C94C700BFF53EA9172B602223851F87C25C123F3570848669846D3B1EBB222D3
78464F9D88D35C41E8D0B122DCA1A24D20AD35B80A6F19AC888946270AE66DD0
35BE56BE6EE0B1AF5FC0CAFA546A8E63B5AFEA9FC622C9E512C641DECA9A1CB4
2B112BCFC576F713D5BA4E132E4ED05D7B60E60D8C8E8A3CB297F412083AAEBC
5C355446FF4FAA22066CAEDBD96E9D83394DE42F559B1935E913F7E227DE4A38
E2C1AE46C3156A188BF6861FB5A7732EA2767E313541482A4706766B2002636E
DDA5D63CAFA5D371EAD0D5FFDB45
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI9
%!PS-AdobeFont-1.1: CMMI9 1.100
%%CreationDate: 1996 Jul 23 07:53:55
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI9 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-29 -250 1075 750}readonly def
/UniqueID 5087384 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D6F5CA5FED4F9AC9ADE41E04F9FC52E758C9F45A92BED935
86F9CFDB57732045913A6422AD4206418610C81D882EE493DE9523CC1BFE1505
DD1390B19BC1947A01B93BC668BE9B2A0E69A968554239B88C00AF9FBDF09CCD
67D3B2094C11A04762FE8CC1E91D020A28B3C122D24BEAACF82313F4604F2FEF
6E176D730A879BE45DD0D4996EF0247AEB1CA0AB08FF374D99F06D47B36F9554
FAD9A2D3CE451B7791C3709D8A1DDDEFBD840C1B42AB824D5A0DFF0E0F15B0B7
22AEEB877FF489581DA6FA8DA64944555101EB16F7AB0B717E148B7B98D8DBFD
730C52937E226545CF8DC3E07C5BA30739BAFCD0F2B44275A6D503F582C0FB4F
449963D0AD2FAFDE33BA3D77BCA9D1DF878DDAFCA2E22CC4BACD542B282164C7
97C2BDE318AF9D501CA21F6E662E7AAB75A5F24D2C182E598D175D44E88AB19A
E7CD59584F95B389183EE21B525BF52A3F23C0FE5383A5565A19361D716F508C
AAB78411CA5A4D27552CC1C435760D5A89D535B71C593E755C616661363308DA
A683F54ED0C23FB2C225A008392B0B719F66F11A946A090B7C00B662A3C69599
B4ECB0CC70C85C4BBBF207E0026F6C7A19F2ACFB7A60804FC98A4BFFD7BFFF2B
9529E6D9D4238002BBC255BC62959D6F3381FE06E0621B879D5FE5B541D45A1E
759A6E7DC32B1D1632368D09A97039DF255B6492B1B2B7E2C1434E8306ECA7D3
5A79B6D614B4979F10988BC76ED53A5F45315CD7DA216221F842FD0F3E050DD2
BAC23C984D506D8F7D614BCB6B244F5F41321549BB0BD041FBF3053307168680
3435E9C942FD1C1C0D9A6B89E1493F97E7AA44F255890025C7E6E4E7C658FEB7
9E5418F6BD13CA2D59956CFE40C1437B805A0AF94B94EAAE5918B1E8AA8CF7C9
2D7CE91D901033D04426BA2FB46F03B0D6E24A9B6F9AE4201F34F5BA9B9AAD2F
783E6F3AD8012AA8051C7CDAEA4A498D1D170359093923B8C1D9899A317EF921
BA7EE3F74783C502AC8E96645A22832CCD636570C8F0AA1FDA994CCF91518303
53E69116E9B846F33D8928C64368CED43A847CC28B9A0E2B9F00731461676F95
EDC8A52C3FA957153B87FD9982D59432DF2F1DA5D251E7CBFDC60E75FEE92C4C
2166DE4EF2299B198E11F0C397B75BE3DBED2FD434E87B2D8402D9683E404B6B
6CDF7289B04C11539C32393D106258C3C0745C0EEE3350FEB84314253F5238E2
9909CF41284918AD1303E84128542ED2BF0258E0C1B0F9E4E6AD357F4872CDD7
E75D58D994F010AF5E0F8136FDF40D5D5CF730EA1987BBB476D84D34A840C7A8
BC8FADDE1344CEC7CAEEE9C952773A53925F85A7B9979A0E39B83ABF0613A558
CC9FACAB71046B2BFCB96D101174B10FCA80FA7EDDF13D747A95CA044D30ACAE
4F1E4F2F1AB6A51EA9A3D27CB94E9A7353C411EA93DB5E82DB59A597EA8C89B7
C8B2B49C73DFA3E7D13E53CAB3D0CD1E179BBFC9DEC5F8A5F9DD046A48E8ECD0
CAB3AFD511DEE9948BA1301D9ED0AB22B285A00B30810A0FE89E6C792F2BC5C8
4ED2AFB51D7582C21285C1AE10BE105BA12E2EE69133438A437F93A3621D5132
0E1564A874C7AF3BA44A57D83A066B5EAB107C0A3145898D55665ABC63FEE464
4C0476D3929652906C05F6E87940A6834BFE2C6A00F9EFE0CE47656B34544838
F587450DB7CF1A27DFEA13E4D853DD6735FF196F6740E365E82A8227CFCE27AD
9A59D075D0F82132913A5F63F2082B873D3986302D654574F2E65FAD4D7A2FA3
D612
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY9
%!PS-AdobeFont-1.1: CMSY9 1.0
%%CreationDate: 1991 Aug 15 07:22:27
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY9 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-30 -958 1146 777}readonly def
/UniqueID 5000819 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
221A37D9A807DD01161779DDE7D31FF2B87F97C73D63EECDDA4C49501773468A
27D1663E0B62F461F6E40A5D6676D0037D33F24E2FAC2B0009AD3C8350CDF8CC
65BCA87979C36D14CB552E9A985E48BE4E88ECA16DF418749AF04FDD2B0E1380
D281BB2476BB45FF30946B247DFD7F57305FA87E50CA338121C71CDFDF927A9C
77FF14CB4A1D6D80356FB1171ED38C37702350497B44E42CE31DB2F493807DAA
15B887C671199A54C4C1294BC520F5538C15556BC43C9F62342B121C6DCD6C5F
491DA47FF360201EE21C08A781ED0589A6DF91B99FE118B9B29E4F068672E52F
1A06C514D91C4C937D4E642503392B1CD1BF5AF0BCA28EBD840AD76CC39AD7AA
CF2C057C3DE735395225D98AF0395EC8F43EBEFAD1B050874744BA8AC046E012
94F1C49658046864191BA51893BC09C449C75BBEC5822F9741C66EB1929BB69B
E36F44EFA6C6A66F7A0E82D260EA362D5A34D952B9EA48F46980B97BB6F12CB1
4FEAA3FBD918150017EB97FE320CC153EE1A89322ECE5E7773C36DC23FF55314
230BF5E38FEDBC0831C6D69605E1AF44703327AC5C215F91222BB016C568F06E
1F592C96F402400720183260A0202782F74754F20E360BCCB74F2F5D6E59C885
D973F9EEC11AEA0E0B2FA55E6FA3D3448491EE3761ABABD8DB3EF38C65AC4DEE
B9F4F50CE764638E6A4B1CE2B84BFC2170377C6ADFC82292C8577AC6AA449DA8
17C37FF58B8C13C44453AF0E9DD7351C4A23783B2498C407388A4B63358FF694
7B0EBA7541C083534B8CA94AF2F875E2552275969FC1F570720DD6BBF94A1846
D3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600
(domain-transition-graph-grid-axiom.dvi) @start /Fa 211[19
44[{ TeXBase1Encoding ReEncodeFont }1 74.7198 /Times-Roman
rf /Fb 140[29 2[37 37 37 1[21 6[33 37 33 99[{
 TeXBase1Encoding ReEncodeFont }8 74.7198 /Times-Italic
rf /Fc 194[60 9[38 38 38 7[30 30 40[{ TeXf7b6d320Encoding ReEncodeFont }
6 74.7198 /CMR9 rf /Fd 141[35 13[40 40[21 59[{
 TeXaae443f0Encoding ReEncodeFont }3 74.7198 /CMMI9 rf
/Fe 192[60 60 62[{ TeXbbad153fEncoding ReEncodeFont }2
74.7198 /CMSY9 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 1039 a
 tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 1039 a 0 1039 3446 1040
v 3446 1039 a
 currentpoint grestore moveto
 3446 1039 a 1713 520 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  -192.05475 0.0 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 1713 520 a
 tx@Dict begin tx@NodeDict begin {-192.05475 0.0 14.22636 } false /N@nnf
11 {InitCnode } NewNode end end
 1713 520 a 1713 520 a
 tx@Dict begin { -192.05475 0.0 } PutCoor PutBegin  end
 1713 520
a 1683 546 a Fe(?)1713 520 y
 tx@Dict begin PutEnd  end
 1713 520 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  -51.2146 0.0 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 1713 520 a
 tx@Dict begin tx@NodeDict begin {-51.2146 0.0 14.22636 } false /N@nf
11 {InitCnode } NewNode end end
 1713 520 a 1713 520
a
 tx@Dict begin { -51.2146 0.0 } PutCoor PutBegin  end
 1713 520 a 1683 546 a Fe(>)1713 520 y
 tx@Dict begin PutEnd  end
 1713 520 a 1713
520 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@nnf /N@nf InitNC { yB yA sub xB xA sub Atan dup 40.  add /AngleA
ED 40.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1713 520 a 1713 520 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1713 520 a 1713 520 a
 tx@Dict begin { 1.0 tx@Dict /NCLW known { NCLW add } if 76.44109 6.75
2.25 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 1713
520 a 1395 538 a Fd(d)21 b Fc(=)g Fb(open)r Fa(,)d Fd(r)23
b Fc(=)e(\(1)p Fd(;)14 b Fc(1\))1713 520 y
 tx@Dict begin PutEnd  end
 1713 520 a
1713 520 a
 tx@Dict begin PutEnd  end
 1713 520 a 1713 520 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@nnf /N@nf InitNC { yB yA sub xB xA sub Atan dup -40.  add /AngleA
ED -40.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1713 520 a 1713 520
a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1713 520 a 1713 520 a
 tx@Dict begin { 1.0 tx@Dict /NCLW known { NCLW add } if 76.44109 6.75
2.25 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 1713 520 a 1395 538 a Fd(d)21
b Fc(=)g Fb(open)r Fa(,)d Fd(r)23 b Fc(=)e(\(3)p Fd(;)14
b Fc(1\))1713 520 y
 tx@Dict begin PutEnd  end
 1713 520 a 1713 520 a
 tx@Dict begin PutEnd  end
 1713 520 a
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  51.2146 0.0 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 1713 520 a
 tx@Dict begin tx@NodeDict begin {51.2146 0.0 14.22636 } false /N@enf
11 {InitCnode } NewNode end end
 1713
520 a 1713 520 a
 tx@Dict begin { 51.2146 0.0 } PutCoor PutBegin  end
 1713 520 a 1683 546 a Fe(?)1713 520
y
 tx@Dict begin PutEnd  end
 1713 520 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  192.05475 0.0 14.22636
.5 CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 1713
520 a
 tx@Dict begin tx@NodeDict begin {192.05475 0.0 14.22636 } false /N@ef
11 {InitCnode } NewNode end end
 1713 520 a 1713 520 a
 tx@Dict begin { 192.05475 0.0 } PutCoor PutBegin  end
 1713 520 a 1683 546 a Fe(>)1713
520 y
 tx@Dict begin PutEnd  end
 1713 520 a 1713 520 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@enf /N@ef InitNC { yB yA sub xB xA sub Atan dup 100.  add /AngleA
ED 100.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1713 520 a 1713 520 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1713
520 a 1713 520 a
 tx@Dict begin { 1.0 tx@Dict /NCLW known { NCLW add } if 76.44109 6.75
2.25 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 1713 520 a 1395 538 a Fd(d)21 b Fc(=)g
Fb(open)r Fa(,)d Fd(r)23 b Fc(=)e(\(1)p Fd(;)14 b Fc(1\))1713
520 y
 tx@Dict begin PutEnd  end
 1713 520 a 1713 520 a
 tx@Dict begin PutEnd  end
 1713 520 a 1713 520 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@enf /N@ef InitNC { yB yA sub xB xA sub Atan dup 50.  add /AngleA
ED 50.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1713
520 a 1713 520 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1713 520 a 1713 520 a
 tx@Dict begin { 1.0 tx@Dict /NCLW known { NCLW add } if 76.44109 6.75
2.25 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 1713 520 a 1395
538 a Fd(d)21 b Fc(=)g Fb(open)r Fa(,)d Fd(r)23 b Fc(=)e(\(3)p
Fd(;)14 b Fc(1\))1713 520 y
 tx@Dict begin PutEnd  end
 1713 520 a 1713 520 a
 tx@Dict begin PutEnd  end
 1713
520 a 1713 520 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@ef /N@enf InitNC { yB yA sub xB xA sub Atan dup -25.  add /AngleA
ED -25.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1713 520 a 1713 520 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1713 520 a 1713
520 a
 tx@Dict begin { 3.0 tx@Dict /NCLW known { NCLW add } if 40.12062 6.25
0.13046 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 1713 520 a 1546 545 a Fd(d)21 b Fc(=)g Fb(closed)1713
520 y
 tx@Dict begin PutEnd  end
 1713 520 a 1713 520 a
 tx@Dict begin PutEnd  end
 1713 520 a 1713 520 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@ef /N@enf InitNC { yB yA sub xB xA sub Atan dup 0.  add /AngleA
ED 0.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1713
520 a 1713 520 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1713 520 a 1713 520 a
 tx@Dict begin { 1.0 tx@Dict /NCLW known { NCLW add } if 37.31921 6.75
2.25 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 1713 520 a 1558
538 a Fd(r)i Fc(=)e(\(2)p Fd(;)13 b Fc(1\))1713 520 y
 tx@Dict begin PutEnd  end

1713 520 a 1713 520 a
 tx@Dict begin PutEnd  end
 1713 520 a 1713 520 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@ef /N@enf InitNC { yB yA sub xB xA sub Atan dup 25.  add /AngleA
ED 25.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1713 520
a 1713 520 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1713 520 a 1713 520 a
 tx@Dict begin { 1.0 tx@Dict /NCLW known { NCLW add } if 37.31921 6.75
2.25 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 1713 520 a 1558 538
a Fd(r)23 b Fc(=)e(\(1)p Fd(;)13 b Fc(2\))1713 520 y
 tx@Dict begin PutEnd  end

1713 520 a 1713 520 a
 tx@Dict begin PutEnd  end
 1713 520 a 1713 520 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@ef /N@enf InitNC { yB yA sub xB xA sub Atan dup 50.  add /AngleA
ED 50.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1713 520
a 1713 520 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1713 520 a 1713 520 a
 tx@Dict begin { 1.0 tx@Dict /NCLW known { NCLW add } if 37.31921 6.75
2.25 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 1713 520 a 1558 538
a Fd(r)23 b Fc(=)e(\(2)p Fd(;)13 b Fc(2\))1713 520 y
 tx@Dict begin PutEnd  end

1713 520 a 1713 520 a
 tx@Dict begin PutEnd  end
 1713 520 a 1713 520 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@ef /N@enf InitNC { yB yA sub xB xA sub Atan dup 90.  add /AngleA
ED 90.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1713 520
a 1713 520 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 1713 520 a 1713 520 a
 tx@Dict begin { 1.0 tx@Dict /NCLW known { NCLW add } if 37.31921 6.75
2.25 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 1713 520 a 1558 538
a Fd(r)23 b Fc(=)e(\(3)p Fd(;)13 b Fc(2\))1713 520 y
 tx@Dict begin PutEnd  end

1713 520 a 1713 520 a
 tx@Dict begin PutEnd  end
 1713 520 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 150 1528 a Fv(Figure)24 b(11:)47 b(Domain)29
b(transition)j(graphs)f(for)e(the)h Fq(fr)m(eezing)h
Fv(v)n(ariable)g(in)e(the)j(G)t Fr(R)t(I)t(D)f Fv(task,)g(normal)g
(\(left\))f(and)572 1641 y(e)o(xtended)k(\(right\).)55
b(Note)32 b(that)g(only)h(the)f(e)o(xtended)i(graph)f(sho)n(ws)f(ho)n
(w)f(to)h(change)i(state)e(from)572 1753 y(\223freezing\224)26
b(\()p Fo(>)p Fv(\))d(to)g(\223not)i(freezing\224)h(\()p
Fo(?)p Fv(\).)291 2162 y(The)34 b(e)o(xample)i(sho)n(ws)e(ho)n(w)g
(plan)i(e)o(x)o(ecution)g(can)f(be)f(vie)n(wed)h(as)g(simultaneous)i
(tra)n(v)o(ersal)g(of)d(domain)150 2274 y(transition)e(graphs)e(\(cf.)f
(Domshlak)g(&)f(Dinitz,)j(2001\).)46 b(This)28 b(is)h(an)g(important)i
(notion)f(for)f(F)o(ast)f(Do)n(wnw)o(ard)150 2387 y(because)i(the)f
(causal)h(graph)f(heuristic)i(computes)f(its)e(heuristic)j(estimates)f
(by)e(solving)i(subproblems)i(of)c(the)150 2500 y(planning)34
b(task)e(by)g(looking)i(for)e(paths)g(in)g(domain)g(transition)j
(graphs)e(in)e(basically)j(the)e(w)o(ay)g(we)f(ha)n(v)o(e)h(de-)150
2613 y(scribed.)291 2742 y(As)d(mentioned)j(before,)h(this)d(vie)n(w)g
(of)f(MPT)f(planning)33 b(is)c(only)i(completely)h(accurate)g(for)e
(unary)h(tasks)150 2855 y(without)24 b(axioms,)g(for)f(which)g(the)g
(domain)h(transition)i(graphs)e(are)f(indeed)i(a)d(complete)j
(representation)i(of)c(the)150 2968 y(state)d(space.)29
b(F)o(or)19 b(non-unary)j(operators,)h(we)18 b(w)o(ould)j(need)f(to)g
(\223link\224)g(certain)i(transitions)g(in)e(dif)n(ferent)h(domain)150
3081 y(transition)31 b(graphs)e(which)g(belong)g(to)f(the)h(same)f
(operator)-5 b(.)44 b(These)29 b(could)g(then)g(only)g(be)f(e)o(x)o
(ecuted)h(together)-5 b(.)150 3193 y(F)o(or)22 b(axioms,)h(we)f(w)o
(ould)h(need)g(to)g(mark)g(certain)h(transitions)h(as)e
(\223mandatory\224,)i(requiring)g(that)e(the)o(y)g(be)g(tak)o(en)150
3306 y(whene)n(v)o(er)32 b(possible.)54 b(\(This)31 b(is)g(only)g
(intended)j(as)d(a)f(rough)j(analogy)g(and)e(lea)n(v)o(es)i(out)e
(details)i(lik)o(e)e(layered)150 3419 y(axioms.\))291
3548 y(In)g(our)g(pre)n(vious)i(w)o(ork)d(\(Helmert,)j(2004\),)h(we)c
(ha)n(v)o(e)h(successfully)j(applied)f(this)e(vie)n(w)g(of)f(planning)j
(to)150 3661 y(STRIPS)28 b(tasks.)50 b(Extending)32 b(the)f(notion)h
(to)f(plans)g(with)f(conditional)k(ef)n(fects)e(pro)o(vides)g(no)f
(challenges)i(be-)150 3774 y(cause)e(domain)f(transition)j(graphs)e(al)
o(w)o(ays)f(consider)i(planning)g(operators)g(one)e(ef)n(fect)h(at)e(a)
h(time,)g(in)g(which)150 3887 y(case)k(ef)n(fect)f(condition)j(can)d
(simply)h(be)f(seen)g(as)g(part)h(of)f(the)g(operator)i(precondition.)
61 b(Ho)n(we)n(v)o(er)l(,)34 b(axioms)150 3999 y(pro)o(vide)28
b(a)e(challenge)k(that)d(is)f(easily)i(o)o(v)o(erlook)o(ed.)41
b(If)27 b(we)f(w)o(ant)g(to)h(change)h(the)f(v)n(alue)h(of)e(a)g
(\003uent)h(from)g Ft(d)f Fv(to)150 4112 y Ft(d)197 4079
y Fu(0)221 4112 y Fv(,)f(the)h(domain)g(transition)j(graph)d(contains)i
(all)e(the)g(important)h(information;)j(just)c(\002nd)f(a)h(path)g
(from)g Ft(d)f Fv(to)g Ft(d)3726 4079 y Fu(0)150 4225
y Fv(and)j(try)f(to)g(\002nd)f(out)i(ho)n(w)e(the)i(associated)h
(conditions)i(can)c(be)g(achie)n(v)o(ed.)41 b(Consider)28
b(the)g(same)f(problem)h(for)150 4338 y(a)e(deri)n(v)o(ed)h(state)g(v)n
(ariable.)38 b(Let)26 b(us)g(assume)h(that)g(unlocking)i(the)d
(location)j(in)d(the)i(G)t Fr(R)t(I)t(D)g Fv(e)o(xample)f(leads)h(to)e
(a)150 4451 y(drought,)31 b(causing)e(the)g(robot)g(to)e(freeze)i(if)f
(it)g(enters)h(a)e(horizontally)32 b(adjacent)e(location.)44
b(W)-7 b(e)26 b(could)k(encode)150 4564 y(this)25 b(with)e(a)h(ne)n(w)f
(deri)n(v)o(ed)i(v)n(ariable)h Ft(f)32 b Fv(\(for)25
b Fq(fr)m(eezing)p Fv(\))h(with)e(domain)g Fo(D)2461
4579 y Fk(f)2533 4564 y Fm(=)i Fo(f>)p Ft(;)15 b Fo(?g)p
Fv(,)23 b(de\002ned)i(by)f(the)g(axioms)150 4677 y Ft(d)i
Fm(=)f Fq(open)r Ft(;)15 b(r)29 b Fm(=)c(\(1)p Ft(;)15
b Fm(1\))28 b Fo(!)e Ft(f)35 b Fm(:=)25 b Fo(>)e Fv(and)h
Ft(d)i Fm(=)f Fq(open)r Ft(;)15 b(r)29 b Fm(=)c(\(3)p
Ft(;)15 b Fm(1\))28 b Fo(!)e Ft(f)35 b Fm(:=)25 b Fo(>)p
Fv(.)k(The)23 b(domain)i(transition)h(graph)150 4790
y Fq(DTG)o Fm(\()p Ft(f)10 b Fm(\))23 b Fv(is)g(depicted)j(in)d(Fig.)g
(11)g(\(left\).)291 4918 y(The)g(problem)i(with)f(that)g(domain)g
(transition)j(graph)d(is)g(that)g(it)g(does)g(not)g(tell)g(us)g(ho)n(w)
f(we)g(can)h(change)h(the)150 5031 y(state)31 b(of)g(v)n(ariable)h
Ft(f)39 b Fv(from)30 b Fo(>)g Fv(to)g Fo(?)p Fv(.)49
b(In)30 b(general,)k(in)c(MPTs)f(deri)n(v)o(ed)j(from)e(STRIPS)e(tasks)
j(where)g(deri)n(v)o(ed)150 5144 y(predicates)24 b(occur)f(ne)o(gati)n
(v)o(ely)g(in)e(an)o(y)h(condition,)i(the)d(domain)i(transition)h
(graph)f(does)f(not)g(contain)h(suf)n(\002cient)150 5257
y(information)30 b(for)e(changing)i(the)e(v)n(alue)h(of)f(a)f(deri)n(v)
o(ed)i(v)n(ariable)h(from)d(\223true\224)i(to)f(\223f)o(alse\224.)43
b(Deri)n(v)o(ed)28 b(v)n(ariables)1888 5506 y Fy(208)p
eop end
%%Page: 209 19
TeXDict begin 209 18 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)150
249 y Fv(ne)n(v)o(er)d(assume)g(the)f(v)n(alue)h Fo(?)e
Fv(due)i(to)f(a)f Fq(derivation)k Fv(of)e(this)f(v)n(alue;)i(because)g
(of)e(ne)o(gation)i(as)e(f)o(ailure)i(semantics,)150
361 y(the)o(y)j(only)g(assume)h(the)e(v)n(alue)i Fq(by)e(default)k
Fv(if)c Fq(no)h(other)g(value)h Fv(can)f(be)f(deri)n(v)o(ed.)36
b(If)25 b(we)g(w)o(ant)h(to)f(reason)i(about)150 474
y(w)o(ays)d(of)f(setting)i(the)f(v)n(alue)g(of)g(a)f(deri)n(v)o(ed)i(v)
n(ariable)g(to)e Fo(?)p Fv(,)g(we)f(will)i(need)g(to)f(mak)o(e)h(this)g
(information)i(e)o(xplicit.)291 587 y(In)31 b(logical)i(notation,)i
(whether)e(or)e(not)g(a)g(deri)n(v)o(ed)i(v)n(ariable)g(assumes)f(a)f
(gi)n(v)o(en)h(v)n(alue)g(by)f(triggering)j(an)150 700
y(axiom)e(at)f(a)h(gi)n(v)o(en)g(layer)g(is)g(determined)h(by)f(a)f
(formula)i(in)e(disjuncti)n(v)o(e)j(normal)e(form,)i(with)d(one)h
(disjunct)150 813 y(for)d(each)g(axiom)g(setting)h(the)f(v)n(alue.)44
b(F)o(or)28 b(e)o(xample,)i(our)f(axioms)g Ft(d)35 b
Fm(=)f Fq(open)r Ft(;)15 b(r)37 b Fm(=)d(\(1)p Ft(;)15
b Fm(1\))37 b Fo(!)d Ft(f)44 b Fm(:=)34 b Fo(>)28 b Fv(and)150
926 y Ft(d)i Fm(=)f Fq(open)r Ft(;)15 b(r)33 b Fm(=)c(\(3)p
Ft(;)15 b Fm(1\))32 b Fo(!)e Ft(f)39 b Fm(:=)29 b Fo(>)c
Fv(correspond)k(to)d(the)g(DNF)e(formula)j Fm(\()p Ft(d)k
Fm(=)e Fq(open)24 b Fo(^)d Ft(r)33 b Fm(=)c(\(1)p Ft(;)15
b Fm(1\)\))24 b Fo(_)e Fm(\()p Ft(d)30 b Fm(=)150 1039
y Fq(open)10 b Fo(^)e Ft(r)27 b Fm(=)e(\(3)p Ft(;)15
b Fm(1\)\))p Fv(.)29 b(If)20 b(we)f(w)o(ant)h(to)h(kno)n(w)f(when)g
(these)h(rules)g(do)g Fq(not)h Fv(trigger)l(,)g(we)e(must)g(ne)o(gate)h
(this)f(formula,)150 1152 y(leading)i(to)f(the)f(CNF)f(formula)i
Fm(\()p Ft(d)26 b Fo(6)p Fm(=)f Fq(open)11 b Fo(_)e Ft(r)27
b Fo(6)p Fm(=)e(\(1)p Ft(;)15 b Fm(1\)\))9 b Fo(^)g Fm(\()p
Ft(d)27 b Fo(6)p Fm(=)e Fq(open)11 b Fo(_)e Ft(r)27 b
Fo(6)p Fm(=)e(\(3)p Ft(;)15 b Fm(1\)\))p Fv(.)29 b(T)-7
b(o)20 b(be)g(able)h(to)g(encode)150 1265 y(this)27 b(information)i(in)
d(the)h(domain)h(transition)h(graph,)f(we)e(need)h(to)f(replace)j(the)d
(inequalities)k(with)d(equalities)150 1378 y(and)k(translate)i(the)e
(formula)h(back)f(to)g(DNF)-7 b(.)28 b(Since)j(such)h(transformations)i
(can)d(increase)i(the)e(formula)h(size)150 1491 y(dramatically)-6
b(,)24 b(we)19 b(apply)j(simpli\002cations)h(along)f(the)f(w)o(ay)-6
b(,)20 b(remo)o(ving)i(duplicated)i(and)c(dominated)j(disjuncts.)150
1604 y(The)g(result)i(in)f(this)g(case)h(is)e(the)h(DNF)e(formula)j
Ft(d)h Fm(=)f Fq(closed)e Fo(_)d Ft(r)28 b Fm(=)e(\(2)p
Ft(;)15 b Fm(1\))22 b Fo(_)e Ft(r)28 b Fm(=)e(\(1)p Ft(;)15
b Fm(2\))22 b Fo(_)e Ft(r)28 b Fm(=)e(\(2)p Ft(;)15 b
Fm(2\))22 b Fo(_)e Ft(r)28 b Fm(=)150 1717 y(\(3)p Ft(;)15
b Fm(2\))p Fv(.)291 1830 y(A)k(domain)i(transition)i(graph)e(for)f(a)g
(deri)n(v)o(ed)h(v)n(ariable)h(which)e(has)h(been)g(enriched)h(to)e
(contain)i(the)e(possible)150 1943 y(w)o(ays)26 b(of)f(causing)j(the)d
(v)n(ariable)j(to)d(assume)i(the)e(v)n(alue)i Fo(?)d
Fv(is)i(called)g(an)g Fq(e)n(xtended)i(domain)e(tr)o(ansition)i(gr)o
(aph)p Fv(,)150 2056 y(as)c(sho)n(wn)g(for)g(the)i(G)t
Fr(R)t(I)t(D)g Fv(e)o(xample)e(in)g(Fig.)f(11)h(\(right\).)31
b(Since)24 b(computing)i(the)e(e)o(xtended)i(domain)f(transition)150
2168 y(graph)k(can)f(be)g(costly)i(and)e(is)g(not)g(al)o(w)o(ays)h
(necessary)-6 b(,)31 b(the)e(kno)n(wledge)g(compilation)i(component)f
(scans)f(the)150 2281 y(conditions)39 b(of)d(the)g(planning)i(task)e
(\(axioms,)k(operator)e(preconditions)i(and)c(ef)n(fect)h(conditions,)k
(goal\))c(for)150 2394 y(occurrences)g(of)c(pairings)i(of)f(the)f(type)
h Ft(v)47 b Fm(=)c Fo(?)32 b Fv(for)i(deri)n(v)o(ed)g(v)n(ariables)i
Ft(v)s Fv(.)57 b(Extended)35 b(domain)g(transition)150
2507 y(graphs)25 b(are)f(only)g(computed)h(for)f(those)h(deri)n(v)o(ed)
g(v)n(ariables)g(for)f(which)g(the)o(y)g(are)f(required.)291
2620 y(Note)36 b(that)g(ne)o(gati)n(v)o(e)g(occurrences)j(of)d(deri)n
(v)o(ed)h(v)n(ariables)g(can)f(cascade:)56 b(If)35 b
Ft(u)p Fv(,)j Ft(v)g Fv(and)e Ft(w)h Fv(are)f(deri)n(v)o(ed)150
2733 y(v)n(ariables)30 b(with)e(domain)h Fo(f>)p Ft(;)15
b Fo(?g)28 b Fv(and)h(the)f(condition)j Ft(v)36 b Fm(=)e
Fo(?)27 b Fv(is)h(present)h(in)f(some)h(operator)h(precondition,)150
2846 y(and)f(moreo)o(v)o(er)g Ft(v)i Fv(is)e(de\002ned)g(by)g(the)f
(axiom)h Ft(u)35 b Fm(=)f Fo(>)p Ft(;)15 b(w)37 b Fm(=)d
Fo(>)g(!)h Ft(v)i Fm(:=)e Fo(>)p Fv(,)28 b(then)h Ft(v)i
Fv(assumes)f(the)f(v)n(alue)g Fo(?)150 2959 y Fv(whene)n(v)o(er)24
b Ft(u)f Fv(or)h Ft(w)h Fv(do,)e(so)h(we)f(w)o(ould)h(require)h(e)o
(xtended)g(domain)g(transition)h(graphs)f(for)f Ft(u)f
Fv(and)h Ft(w)h Fv(as)e(well.)291 3072 y(On)28 b(the)g(other)h(hand,)h
(multiple)f(layers)h(of)e(ne)o(gation)i(as)e(f)o(ailure)h(can)g(cancel)
g(each)g(other)g(out:)39 b(If)28 b(deri)n(v)o(ed)150
3185 y(v)n(ariable)e Ft(v)g Fv(only)f(occurs)g(in)f(conditions)j(of)c
(the)i(form)e Ft(v)29 b Fm(=)d Fo(?)d Fv(b)n(ut)h(ne)n(v)o(er)h(in)e
(positi)n(v)o(e)j(form)d(and)i(is)e(de\002ned)i(by)150
3298 y(the)c(axiom)f Ft(u)26 b Fm(=)f Fo(?)p Ft(;)15
b(w)28 b Fm(=)c Fo(?)h(!)h Ft(v)i Fm(:=)d Fo(>)p Fv(,)20
b(then)h(we)f(do)g(not)h(necessarily)i(require)f(e)o(xtended)g(domain)g
(transition)150 3411 y(graphs)j(for)f Ft(u)f Fv(and)h
Ft(w)r Fv(.)291 3524 y(In)i(general,)i(whether)f(or)f(not)g(we)g(need)h
(e)o(xtended)h(domain)e(transition)j(graphs)f(for)e(a)f(deri)n(v)o(ed)j
(v)n(ariable)f(is)150 3637 y(determined)f(by)d(the)h(follo)n(wing)h
(rules:)286 3826 y Fo(\017)46 b Fv(If)30 b Ft(v)j Fv(is)d(a)g(deri)n(v)
o(ed)i(v)n(ariable)g(for)f(which)f(the)h(condition)i
Ft(v)41 b Fm(=)d Ft(d)30 b Fv(for)g Ft(d)38 b Fo(6)p
Fm(=)g Fo(?)29 b Fv(appears)j(in)f(an)f(operator)377
3938 y(precondition,)d(ef)n(fect)e(condition)h(or)d(in)h(the)g(goal,)g
(then)g Ft(v)i Fq(is)d(used)i(positively)p Fv(.)286 4127
y Fo(\017)46 b Fv(If)25 b Ft(v)i Fv(is)e(a)f(deri)n(v)o(ed)i(v)n
(ariable)g(for)f(which)g(the)g(condition)i Ft(v)k Fm(=)c
Fo(?)d Fv(appears)j(in)d(an)h(operator)i(precondition,)377
4240 y(ef)n(fect)e(condition)h(or)d(in)h(the)g(goal,)g(then)g
Ft(v)i Fq(is)d(used)i(ne)l(gatively)p Fv(.)286 4428 y
Fo(\017)46 b Fv(If)25 b Ft(v)j Fv(is)e(a)f(deri)n(v)o(ed)h(v)n(ariable)
i(for)d(which)h(the)g(condition)i Ft(v)k Fm(=)c Ft(d)d
Fv(for)h Ft(d)j Fo(6)p Fm(=)g Fo(?)24 b Fv(appears)j(in)f(the)f(body)i
(of)e(an)377 4541 y(axiom)f(whose)g(head)h(is)e(used)h(positi)n(v)o
(ely)i(\(ne)o(gati)n(v)o(ely\),)f(then)g Ft(v)h Fv(is)d(used)h(positi)n
(v)o(ely)i(\(ne)o(gati)n(v)o(ely\).)286 4730 y Fo(\017)46
b Fv(If)32 b Ft(v)i Fv(is)d(a)g(deri)n(v)o(ed)i(v)n(ariable)g(for)f
(which)g(the)g(condition)i Ft(v)43 b Fm(=)d Fo(?)30 b
Fv(appears)k(in)d(the)h(body)h(of)e(an)h(axiom)377 4843
y(whose)24 b(head)h(is)e(used)h(positi)n(v)o(ely)i(\(ne)o(gati)n(v)o
(ely\),)f(then)g Ft(v)h Fv(is)d(used)h(ne)o(gati)n(v)o(ely)h(\(positi)n
(v)o(ely\).)291 5031 y(The)d(kno)n(wledge)i(compilation)h(component)f
(computes)g(e)o(xtended)g(domain)f(transition)i(graphs)f(for)f(all)f
(de-)150 5144 y(ri)n(v)o(ed)h(v)n(ariables)i(which)f(are)f(used)g(ne)o
(gati)n(v)o(ely)i(and)e(\(standard\))j(domain)d(transition)j(graphs)e
(for)f(all)g(other)h(state)150 5257 y(v)n(ariables.)42
b(Normal)27 b(domain)h(transition)i(graphs)f(are)e(computed)i(by)f
(going)g(through)i(the)d(set)g(of)h(axioms)g(and)1888
5506 y Fy(209)p eop end
%%Page: 210 20
TeXDict begin 210 19 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)150
249 y Fv(the)31 b(set)g(of)f(operator)j(ef)n(fects)e(follo)n(wing)h
(De\002nition)g(5,)f(which)g(is)g(reasonably)i(straight-forw)o(ard;)38
b(the)31 b(com-)150 361 y(putation)c(of)e(e)o(xtended)j(domain)e
(transition)i(graphs)e(has)g(been)g(outlined)h(abo)o(v)o(e.)34
b(Therefore,)27 b(the)f(algorithmic)150 474 y(aspects)f(of)f(this)g
(topic)g(should)i(not)d(require)j(further)f(discussion.)150
714 y Fz(5.2)46 b(Causal)24 b(Graphs)150 881 y Fv(Causal)g(graphs)h(ha)
n(v)o(e)f(been)h(introduced)h(informally)g(in)d(the)h(introduction.)33
b(Here)23 b(is)g(a)g(formal)h(de\002nition.)150 1133
y Fz(De\002nition)f(6)46 b Fj(Causal)23 b(graphs)150
1246 y Fq(Let)33 b Fm(\005)g Fq(be)g(a)g(multi-valued)j(planning)g
(task)e(with)f(variable)j(set)e Fo(V)7 b Fq(.)57 b(The)33
b Fj(causal)i(graph)e Fq(of)h Fm(\005)p Fq(,)h(in)e(symbols)150
1359 y(CG)o Fm(\(\005\))p Fq(,)c(is)e(the)h(dir)m(ected)i(gr)o(aph)e
(with)g(verte)n(x)h(set)f Fo(V)34 b Fq(containing)c(an)e(ar)m(c)g
Fm(\()p Ft(v)s(;)15 b(v)2751 1326 y Fu(0)2776 1359 y
Fm(\))27 b Fq(if)n(f)h Ft(v)36 b Fo(6)p Fm(=)d Ft(v)3170
1326 y Fu(0)3220 1359 y Fq(and)28 b(one)g(of)g(the)150
1472 y(following)d(conditions)i(is)c(true:)286 1686 y
Fo(\017)46 b Fq(The)23 b(domain)i(tr)o(ansition)h(gr)o(aph)e(of)g
Ft(v)1586 1653 y Fu(0)1632 1686 y Fq(has)g(a)f(tr)o(ansition)j(with)e
(some)f(condition)j(on)e Ft(v)s Fq(.)286 1899 y Fo(\017)46
b Fq(The)23 b(set)h(of)g(af)n(fected)h(variables)i(in)c(the)h(ef)n
(fect)h(list)f(of)f(some)h(oper)o(ator)h(includes)h(both)e
Ft(v)i Fq(and)e Ft(v)3431 1866 y Fu(0)3455 1899 y Fq(.)150
2113 y(In)g(the)h(\002r)o(st)f(case)o(,)h(we)f(say)g(that)h(an)f(ar)m
(c)g(is)g(induced)j(by)d(a)g Fj(transition)h(condition)p
Fq(.)31 b(In)24 b(the)h(second)h(case)e(we)g(say)150
2226 y(that)g(it)f(is)h(induced)h(by)f Fj(co-occurring)h(ef)n(f)o(ects)
p Fq(.)291 2472 y Fv(Of)k(course,)34 b(arcs)c(induced)i(by)f
(transition)i(conditions)g(and)d(arcs)h(induced)h(by)f(co-occurring)j
(ef)n(fects)d(are)150 2584 y(not)24 b(mutually)h(e)o(xclusi)n(v)o(e.)30
b(The)23 b(same)h(causal)h(graph)f(arc)g(can)g(be)g(generated)i(for)d
(both)i(reasons.)291 2704 y(Informally)-6 b(,)23 b(the)d(causal)h
(graph)h(contains)g(an)e(arc)g(from)g(a)f(source)j(v)n(ariable)g(to)e
(a)f(tar)n(get)j(v)n(ariable)f(if)f(changes)150 2817
y(in)32 b(the)g(v)n(alue)g(of)g(the)g(tar)n(get)h(v)n(ariable)h(can)e
(depend)h(on)f(the)g(v)n(alue)h(of)f(the)g(source)h(v)n(ariable.)55
b(Such)32 b(arcs)g(are)150 2930 y(included)27 b(also)e(if)f(this)g
(dependenc)o(y)k(is)c(of)g(the)h(form)f(of)g(an)h Fq(ef)n(fect)i
Fv(on)d(the)h(source)h(v)n(ariable.)33 b(This)24 b(agrees)h(with)150
3043 y(the)34 b(de\002nition)h(of)f Fq(dependency)j(gr)o(aphs)e
Fv(by)f(Jonsson)i(and)e(B)5 b(\250)-35 b(ackstr)8 b(\250)-38
b(om)35 b(\(1998b\),)j(although)e(these)e(authors)150
3156 y(distinguish)27 b(between)e(the)e(tw)o(o)h(dif)n(ferent)h(w)o
(ays)f(in)f(which)h(an)g(arc)g(in)f(the)h(graph)h(can)f(be)g
(introduced)i(by)e(using)150 3268 y(labelled)i(arcs.)291
3388 y(Whether)j(or)e(not)h(co-occurring)k(ef)n(fects)c(should)i
(induce)f(arcs)f(in)f(the)h(causal)h(graph)g(depends)g(on)f(the)g(in-)
150 3501 y(tended)21 b(semantics:)29 b(If)19 b(such)h(arcs)f(are)h(not)
f(included,)j(the)e(set)f(of)g(causal)i(graph)f(ancestors)i
Fq(anc)q Fm(\()p Ft(v)s Fm(\))e Fv(of)f(a)f(v)n(ariable)150
3614 y Ft(v)29 b Fv(are)e(precisely)h(those)g(v)n(ariables)g(which)f
(are)g(rele)n(v)n(ant)h(if)e(our)h(goal)g(is)f(to)g(change)i(the)f(v)n
(alue)g(of)g Ft(v)s Fv(.)36 b(Plans)27 b(for)150 3727
y(this)22 b(goal)f(can)h(be)f(computed)i(without)f(considering)i(an)o
(y)d(v)n(ariables)i(outside)g Fq(anc)q Fm(\()p Ft(v)s
Fm(\))p Fv(,)f(by)f(eliminating)j(all)d(v)n(ari-)150
3840 y(ables)k(outside)g Fq(anc)q Fm(\()p Ft(v)s Fm(\))f
Fv(from)f(the)h(planning)i(task)e(and)g(simplifying)i(axioms)f(and)f
(operators)i(accordingly)-6 b(.)32 b(W)-7 b(e)150 3952
y(call)27 b(this)f(the)h Fq(ac)o(hie)o(vability)i(de\002nition)g
Fv(of)d(causal)i(graphs,)g(because)g(causal)f(graphs)h(encode)g(what)e
(v)n(ariables)150 4065 y(are)e(important)h(for)f(achie)n(ving)i(a)d(gi)
n(v)o(en)h(assignment)i(to)d(a)g(state)i(v)n(ariable.)291
4185 y(Ho)n(we)n(v)o(er)l(,)19 b(with)f(the)h(achie)n(v)n(ability)j
(de\002nition,)f(a)d(planner)i(that)f(only)h(considers)h
Fq(anc)q Fm(\()p Ft(v)s Fm(\))e Fv(while)f(generating)150
4298 y(an)g(action)i(sequence)h(that)d(achie)n(v)o(es)i(a)e(gi)n(v)o
(en)h(v)n(aluation)h(for)f Ft(v)i Fv(may)d(modify)h(v)n(ariables)h
(outside)g(of)e Fq(anc)r Fm(\()p Ft(v)s Fm(\))p Fv(,)h(i.)c(e.,)150
4411 y(the)30 b(generated)i(plans)f(ha)n(v)o(e)f(side)h(ef)n(fects)g
(which)f(could)h(destro)o(y)g(pre)n(viously)i(achie)n(v)o(ed)e(goals)g
(or)f(otherwise)150 4524 y(ha)n(v)o(e)d(a)f(ne)o(gati)n(v)o(e)g(impact)
h(on)g(o)o(v)o(erall)g(planning.)39 b(Therefore,)28 b(we)d(prefer)j
(our)e(de\002nition,)i(which)f(we)e(call)i(the)150 4636
y Fq(separ)o(ability)g(de\002nition)f Fv(of)d(causal)i(graphs.)152
4864 y(5)t(.)t(2)t(.)t(1)53 b(A)q Fr(C)t(Y)t(C)t(L)t(I)t(C)28
b Fv(C)t Fr(AU)t(S)t(A)t(L)h Fv(G)t Fr(R)t(A)t(P)t(H)t(S)150
5031 y Fv(F)o(ollo)n(wing)e(the)f(separability)k(de\002nition)e(of)e
(causal)i(graphs,)g(solving)g(a)e(subproblem)j(o)o(v)o(er)d(v)n
(ariables)j Fq(anc)q Fm(\()p Ft(v)s Fm(\))150 5144 y
Fv(is)g(al)o(w)o(ays)i(possible)g(without)g(changing)h(an)o(y)d(v)n
(alues)i(outside)g(of)e Fq(anc)r Fm(\()p Ft(v)s Fm(\))p
Fv(.)46 b(This)30 b(leads)g(us)g(to)f(the)h(follo)n(wing)150
5257 y(observ)n(ation.)1888 5506 y Fy(210)p eop end
%%Page: 211 21
TeXDict begin 211 20 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)150
249 y Fz(Obser)o(v)o(ation)g(7)46 b Fj(Acyclic)24 b(causal)g(graphs)h
(and)e(strongly)i(connected)f(domain)g(transition)g(graphs)150
361 y Fq(Let)f Fm(\005)h Fq(be)f(an)h(MPT)e(suc)o(h)j(that)f(CG)o
Fm(\(\005\))g Fq(is)g(acyclic,)h(all)f(domain)h(tr)o(ansition)i(gr)o
(aphs)e(ar)m(e)f(str)l(ongly)i(connected,)150 474 y(ther)m(e)h(ar)m(e)g
(no)f(derived)i(variables,)i(and)d(no)g(trivially)h(false)g(conditions)
h(occur)f(in)e(oper)o(ator)o(s)j(or)d(goals.)39 b(Then)150
587 y Fm(\005)23 b Fq(has)h(a)f(solution.)291 805 y Fv(By)33
b Fq(trivially)j(false)e Fv(conditions,)39 b(we)33 b(mean)g(conditions)
k(of)c(the)h(kind)h Fo(f)p Ft(v)47 b Fm(=)d Ft(d;)15
b(v)48 b Fm(=)43 b Ft(d)3210 772 y Fu(0)3234 805 y Fo(g)33
b Fv(for)h Ft(d)44 b Fo(6)p Fm(=)g Ft(d)3704 772 y Fu(0)3727
805 y Fv(.)150 918 y(Note)22 b(the)h(similarity)h(of)e(Observ)n(ation)i
(7)e(to)g(the)h(results)g(of)g(W)l(illiams)g(and)f(Nayak)h(\(1997\))h
(on)e(planning)j(in)d(do-)150 1031 y(mains)i(with)f(unary)i(operators,)
g(ac)o(yclic)g(causal)g(graphs)g(and)f(re)n(v)o(ersible)i(transitions.)
31 b(Under)24 b(the)g(separability)150 1143 y(de\002nition)33
b(of)d(causal)j(graphs,)h(ac)o(yclic)e(causal)g(graphs)g(imply)f
(unariness)j(of)d(operators)i(because)g(operators)150
1256 y(with)27 b(se)n(v)o(eral)i(ef)n(fects)f(introduce)i(causal)f(c)o
(ycles.)41 b(Moreo)o(v)o(er)l(,)29 b(strong)g(connectedness)j(of)27
b(domain)i(transition)150 1369 y(graphs)34 b(is)e(closely)h(related)h
(to)e(W)l(illiams')h(and)g(Nayak')-5 b(s)33 b(re)n(v)o(ersibility)i
(property)-6 b(,)37 b(although)d(it)e(is)g(a)f(weak)o(er)150
1482 y(requirement.)291 1596 y(The)18 b(truth)h(of)f(the)h(observ)n
(ation)i(can)d(easily)i(be)e(seen)h(inducti)n(v)o(ely:)29
b(If)18 b(the)h(planning)h(task)f(has)g(only)g(one)f(state)150
1709 y(v)n(ariable)27 b(and)f(the)g(domain)h(transition)h(graph)f(is)e
(strongly)j(connected,)g(then)f(an)o(y)e(state)i(\(of)e(the)h(one)g(v)n
(ariable\))150 1822 y(can)j(be)f(transformed)j(into)e(an)o(y)f(other)i
(state)f(by)f(applying)j(graph)e(search)h(techniques.)46
b(If)28 b(the)h(planning)i(task)150 1935 y(has)c(se)n(v)o(eral)h(state)
g(v)n(ariables)g(and)g(the)f(causal)h(graph)g(is)f(ac)o(yclic,)h(we)e
(pick)i(a)e(sink)i(of)e(the)h(causal)i(graph,)f(i.)15
b(e.,)150 2048 y(a)36 b(v)n(ariable)h Ft(v)i Fv(without)e(outgoing)i
(arcs,)g(and)e(check)g(if)f(a)f(goal)i(is)f(de\002ned)h(for)f(this)h(v)
n(ariable.)68 b(If)36 b(not,)j(we)150 2161 y(remo)o(v)o(e)34
b(the)h(v)n(ariable)h(from)e(the)h(task,)i(thus)e(reducing)h(the)f
(problem)g(to)f(one)h(with)f(fe)n(wer)g(state)h(v)n(ariables,)150
2274 y(solv)o(ed)28 b(recursi)n(v)o(ely)-6 b(.)40 b(If)26
b(yes,)h(we)f(search)i(for)f(a)f(path)h(from)f Ft(s)2137
2288 y Fs(0)2176 2274 y Fm(\()p Ft(v)s Fm(\))h Fv(to)f
Ft(s)2459 2288 y Fk(?)2499 2274 y Fm(\()p Ft(v)s Fm(\))g
Fv(in)h(the)f(domain)i(transition)h(graph)150 2386 y(of)22
b Ft(v)s Fv(,)g(which)h(is)f(guaranteed)j(to)e(e)o(xist)g(because)h
(the)e(graph)i(is)e(strongly)j(connected.)31 b(This)22
b(yields)i(a)e(\223high-le)n(v)o(el)150 2499 y(plan\224)29
b(for)g(setting)h Ft(v)h Fv(to)d Ft(s)994 2513 y Fk(?)1033
2499 y Fm(\()p Ft(v)s Fm(\))h Fv(which)f(can)h(be)f(\003eshed)h(out)g
(by)g(recursi)n(v)o(ely)h(inserting)h(the)e(plans)g(for)g(setting)150
2612 y(the)f(v)n(ariables)i(of)e(the)h(predecessors)i(of)d
Ft(v)j Fv(in)c(the)i(causal)g(graph)g(to)f(the)g(v)n(alues)i(required)g
(for)e(the)g(transitions)150 2725 y(that)h(form)f(the)h(high-le)n(v)o
(el)h(plan.)44 b(Once)29 b(the)f(desired)i(v)n(alue)f(of)g
Ft(v)i Fv(has)d(been)i(set,)f Ft(v)i Fv(can)e(be)f(eliminated)i(from)
150 2838 y(the)24 b(planning)i(task)e(and)g(the)g(remaining)h(problem)g
(can)f(be)f(solv)o(ed)i(recursi)n(v)o(ely)-6 b(.)291
2952 y(The)33 b(algorithm)i(is)e(sho)n(wn)g(in)g(Fig.)g(12.)58
b(Although)34 b(it)f(is)g(backtrack-free,)40 b(it)33
b(can)g(require)i(e)o(xponential)150 3065 y(time)28 b(to)g(e)o(x)o
(ecute)i(because)g(the)f(generated)h(plans)g(can)f(be)f(e)o
(xponentially)k(long.)44 b(This)28 b(is)g(una)n(v)n(oidable;)35
b(e)n(v)o(en)150 3178 y(for)26 b(MPTs)f(that)i(satisfy)g(the)g
(conditions)i(of)d(Observ)n(ation)j(7,)d(shortest)i(plans)f(can)g(be)f
(e)o(xponentially)k(long.)37 b(A)150 3291 y(f)o(amily)31
b(of)f(planning)j(tasks)e(with)f(this)h(property)i(is)d(gi)n(v)o(en)h
(in)f(the)h(proof)g(of)g(Theorem)f(4.4)g(in)h(the)f(article)i(by)150
3404 y(B)5 b(\250)-35 b(ackstr)8 b(\250)-38 b(om)25 b(and)f(Nebel)f
(\(1995\).)291 3517 y(This)j(method)h(for)f(solving)i(multi-v)n(alued)g
(planning)g(tasks)f(is)f(essentially)j Fq(planning)f(by)e(r)m
(e\002nement)r Fv(:)35 b(W)-7 b(e)150 3630 y(be)o(gin)19
b(by)g(constructing)j(a)c(v)o(ery)h(abstract)h(sk)o(eleton)h(plan,)f
(which)f(is)f(merely)h(a)f(path)h(in)g(some)f(domain)i(transition)150
3743 y(graph,)28 b(then)f(lo)n(wer)f(the)g(le)n(v)o(el)h(of)f
(abstraction)j(by)e(adding)h(operators)g(to)e(satisfy)i(the)f
(preconditions)j(required)150 3856 y(for)c(the)g(transitions)j(tak)o
(en)e(by)f(the)g(path.)37 b(Strong)26 b(connectedness)31
b(of)25 b(domain)i(transition)i(graphs)e(guarantees)150
3969 y(that)k(e)n(v)o(ery)f(abstract)i(plan)f(can)f(actually)i(be)e
(re\002ned)h(to)f(a)f(concrete)k(plan.)48 b(This)30 b(is)g(precisely)j
(Bacchus)e(and)150 4082 y(Y)-9 b(ang')k(s)24 b(\(1994\))h
Fq(downwar)m(d)g(r)m(e\002nement)g(pr)l(operty)g Fv(\(cf.)f(Section)g
(2.1\).)152 4304 y(5)t(.)t(2)t(.)t(2)53 b(G)t Fr(E)t(N)t(E)t(R)t(A)l(T)
t(I)t(N)t(G)30 b(A)t(N)t(D)d Fv(P)t Fr(R)q(U)t(N)t(I)t(N)t(G)h
Fv(C)t Fr(AU)t(S)t(A)t(L)g Fv(G)t Fr(R)t(A)t(P)t(H)t(S)150
4466 y Fv(The)d(usefulness)j(of)d(causal)h(graphs)h(for)e(planning)j
(by)d(re\002nement)h(is)f(not)g(limited)h(to)f(the)h(ac)o(yclic)g
(case.)34 b(Con-)150 4579 y(sider)24 b(a)f(subset)i Fo(V)725
4546 y Fu(0)771 4579 y Fv(of)f(the)f(task)i(v)n(ariables)g(which)f
(contains)i(all)d(its)h(causal)g(graph)h(descendants.)32
b(In)24 b(general,)g(if)150 4692 y(we)g(restrict)i(the)f(task)h(to)e
Fo(V)1019 4659 y Fu(0)1067 4692 y Fv(by)g(remo)o(ving)i(all)f
(occurrences)j(of)d(other)h(v)n(ariables)g(from)f(the)g(initial)h
(state,)g(goal,)150 4805 y(operators)i(and)e(axioms,)h(we)e(obtain)j
(an)d(abstraction)k(of)d(the)g(original)i(problem)f(which)f
(satis\002es)h(Knoblock')-5 b(s)150 4917 y(\(1994\))25
b(ordered)g(monotonicity)i(property)f(\(Section)f(2.1\).)291
5031 y(Unfortunately)-6 b(,)23 b(one)d(major)f(problem)h(with)f(this)g
(approach)j(is)d(that)g(the)g(requirement)j(to)d(include)i(all)e
(causal)150 5144 y(graph)28 b(descendants)j(is)26 b(quite)i(limiting.)
40 b(It)27 b(is)g(not)g(uncommon)h(for)f(the)h(causal)g(graph)g(of)f(a)
f(planning)k(task)d(to)150 5257 y(be)c(strongly)i(connected,)h(in)c
(which)i(case)f(this)h(technique)h(will)e(not)g(allo)n(w)g(us)g(to)g
(abstract)h(a)o(w)o(ay)f(an)o(y)g(v)n(ariables)1888 5506
y Fy(211)p eop end
%%Page: 212 22
TeXDict begin 212 21 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)p
151 1036 3598 4 v 151 3877 4 2842 v 202 1123 a Fz(algorithm)25
b Fv(solv)o(e-easy-MPT\()p Fo(V)7 b Fv(,)25 b Ft(s)1390
1137 y Fs(0)1429 1123 y Fv(,)d Ft(s)1517 1137 y Fk(?)1557
1123 y Fv(,)g Fo(O)s Fv(\):)438 1236 y Fz(if)h Ft(s)559
1250 y Fk(?)624 1236 y Fm(=)i Fo(;)p Fv(:)674 1349 y
Fo(f)f Fv(The)f(goal)h(is)f(empty:)30 b(the)24 b(empty)g(plan)g(is)f(a)
h(solution.)30 b Fo(g)674 1462 y Fz(r)n(etur)o(n)24 b
Fo(hi)p Fv(.)438 1575 y Fz(else)p Fv(:)674 1688 y(Let)f
Ft(v)29 b Fo(2)c(V)30 b Fv(be)23 b(a)g(v)n(ariable)j(not)d(occurring)k
(in)c(preconditions)28 b(or)23 b(ef)n(fect)h(conditions)j(in)c
Fo(O)s Fv(.)674 1801 y Fo(f)h Fv(Such)f(a)g(v)n(ariable)i(al)o(w)o(ays)
g(e)o(xists)f(if)g(the)f(causal)i(graph)g(of)e(the)h(task)g(is)g(ac)o
(yclic.)30 b Fo(g)674 1914 y(V)737 1881 y Fu(0)786 1914
y Fm(:=)25 b Fo(V)j(n)20 b(f)p Ft(v)s Fo(g)p Fv(.)674
2027 y Fo(O)749 1994 y Fu(0)798 2027 y Fm(:=)25 b Fo(f)e
Ft(o)j Fo(2)e(O)i(j)d Ft(o)g Fv(does)h(not)g(af)n(fect)g
Ft(v)j Fo(g)p Fv(.)674 2139 y Fq(plan)g Fm(:=)f Fo(hi)674
2252 y Fz(if)e Ft(s)796 2266 y Fk(?)835 2252 y Fm(\()p
Ft(v)s Fm(\))f Fv(is)h(de\002ned:)911 2365 y(Let)f Ft(t)1088
2379 y Fs(1)1127 2365 y Fv(,)f Ft(:)15 b(:)g(:)h Fv(,)23
b Ft(t)1372 2380 y Fk(k)1437 2365 y Fv(be)h(a)f(path)h(of)g
(transitions)i(in)d Fq(DTG)o Fm(\()p Ft(v)s Fm(\))h Fv(from)g
Ft(s)2947 2379 y Fs(0)2986 2365 y Fm(\()p Ft(v)s Fm(\))f
Fv(to)h Ft(s)3263 2379 y Fk(?)3302 2365 y Fm(\()p Ft(v)s
Fm(\))p Fv(.)911 2478 y Fo(f)f Ft(t)1012 2492 y Fs(1)1051
2478 y Fv(,)g Ft(:)15 b(:)g(:)h Fv(,)22 b Ft(t)1296 2493
y Fk(k)1361 2478 y Fv(is)i(a)f(\223high-le)n(v)o(el)j(plan\224)f(that)f
(reaches)h(the)f(goal)g(for)g Ft(v)s Fv(,)979 2591 y(b)n(ut)g(ignores)h
(preconditions)j(on)c(other)g(v)n(ariables.)31 b Fo(g)911
2704 y Fz(f)n(or)23 b(each)h Ft(t)h Fo(2)g(f)p Ft(t)1469
2718 y Fs(1)1508 2704 y Ft(;)15 b(:)g(:)g(:)i(;)e(t)1743
2719 y Fk(k)1786 2704 y Fo(g)p Fv(:)1147 2817 y Fo(f)23
b Fv(Recursi)n(v)o(ely)i(\002nd)f(a)f(plan)h(that)g(achie)n(v)o(es)h
(the)f(conditions)i(of)e Ft(t)p Fv(.)k Fo(g)1147 2930
y Fv(Let)23 b Fq(cond)h Fv(and)g Ft(o)f Fv(be)h(the)f(condition)k(and)d
(operator)h(associated)i(with)c Ft(t)p Fv(.)1147 3043
y(Let)g Ft(s)1334 3010 y Fu(0)1334 3067 y Fs(0)1396 3043
y Fv(be)g(the)h(state)g(reached)i(after)e(e)o(x)o(ecuting)h
Fq(plan)r Fv(,)d(restricted)k(to)e Fo(V)3420 3010 y Fu(0)3443
3043 y Fv(.)1147 3156 y(Extend)g Fq(plan)g Fv(by)g(solv)o(e-easy-MPT)s
Fm(\()p Fo(V)2423 3123 y Fu(0)2446 3156 y Ft(;)15 b(s)2529
3123 y Fu(0)2529 3180 y Fs(0)2569 3156 y Ft(;)g Fq(cond)r
Ft(;)g Fo(O)2901 3123 y Fu(0)2925 3156 y Fm(\))p Fv(.)1147
3269 y(Extend)24 b Fq(plan)g Fv(by)g Ft(o)p Fv(.)674
3382 y Fo(f)g Fv(After)f(dealing)i(with)f Ft(v)s Fv(,)f(recursi)n(v)o
(ely)j(plan)e(for)g(goals)g(on)g(the)g(remaining)h(v)n(ariables.)31
b Fo(g)674 3494 y Fv(Let)23 b Ft(s)861 3461 y Fu(0)861
3519 y Fs(0)923 3494 y Fv(be)h(the)f(state)i(reached)g(after)f(e)o(x)o
(ecuting)i Fq(plan)r Fv(,)c(restricted)k(to)d Fo(V)2947
3461 y Fu(0)2971 3494 y Fv(.)674 3607 y Ft(s)717 3574
y Fu(0)717 3630 y Fk(?)782 3607 y Fm(:=)i Ft(s)946 3621
y Fk(?)1008 3607 y Fv(restricted)h(to)d Fo(V)1525 3574
y Fu(0)1549 3607 y Fv(.)674 3720 y(Extend)i Fq(plan)f
Fv(by)g(solv)o(e-easy-MPT)r Fm(\()p Fo(V)1950 3687 y
Fu(0)1974 3720 y Ft(;)15 b(s)2057 3687 y Fu(0)2057 3745
y Fs(0)2096 3720 y Ft(;)g(s)2179 3687 y Fu(0)2179 3743
y Fk(?)2219 3720 y Ft(;)g Fo(O)2334 3687 y Fu(0)2358
3720 y Fm(\))p Fv(.)674 3833 y Fz(r)n(etur)o(n)24 b Fq(plan)p
3746 3877 V 151 3880 3598 4 v 150 4150 a Fv(Figure)g(12:)47
b(Planning)25 b(algorithm)g(for)f(MPTs)e(with)h(ac)o(yclic)i(causal)g
(graph)g(and)f(strongly)i(connected)g(domain)572 4263
y(transition)g(graphs.)1888 5506 y Fy(212)p eop end
%%Page: 213 23
TeXDict begin 213 22 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)150
249 y Fv(at)30 b(all.)51 b(Ho)n(we)n(v)o(er)l(,)32 b(in)e(a)g
(heuristic)j(approach,)i(we)30 b(are)h(free)g(to)f(simplify)i(the)f
(planning)i(task.)51 b(In)31 b(particular)l(,)150 361
y(by)c(ignoring)j(some)d(operator)j(preconditions)h(for)c(the)h
(purposes)i(of)d(heuristic)i(e)n(v)n(aluation,)i(we)26
b(can)i(mak)o(e)f(an)150 474 y(arbitrary)22 b(causal)g(graph)f(ac)o
(yclic.)29 b(Clearly)-6 b(,)22 b(the)e(more)h(aspects)h(of)e(the)g
(real)h(task)g(we)e(ignore,)j(the)f(w)o(orse)f(we)g(can)150
587 y(e)o(xpect)27 b(our)e(heuristic)j(to)e(approximate)i(the)d(actual)
i(goal)f(distance.)37 b(Considering)28 b(this,)e(our)g(aim)f(is)g(to)h
(ignore)150 700 y(as)d(little)i(information)h(as)d(possible.)31
b(W)-7 b(e)23 b(will)g(no)n(w)g(e)o(xplain)i(ho)n(w)e(this)h(is)g
(done.)291 814 y(The)32 b(kno)n(wledge)j(compilation)g(component)g(be)o
(gins)f(its)f(causal)i(graph)e(processing)j(by)d(generating)j(the)150
927 y(\223full\224)27 b(causal)h(graph)f(\(De\002nition)h(6\).)36
b(One)26 b(consequence)k(of)c(the)h(separability)i(de\002nition)f(of)e
(causal)i(graphs)150 1040 y(is)d(that)h(all)g(state)g(v)n(ariables)h
(which)f(are)g(not)f(ancestors)j(of)e(v)n(ariables)h(mentioned)g(in)f
(the)f(goal)h(are)g(completely)150 1153 y(irrele)n(v)n(ant.)45
b(Therefore,)30 b(ha)n(ving)g(computed)g(the)e(graph,)j(we)c(then)i
(compute)g(the)g(causal)g(graph)h(ancestors)g(of)150
1266 y(all)h(v)n(ariables)i(in)e(the)g(goal.)52 b(An)o(y)31
b(state)g(v)n(ariables)i(which)f(are)f(not)g(found)i(to)d(be)h(goal)h
(ancestors)i(are)d(elimi-)150 1379 y(nated)26 b(from)f(the)g(planning)j
(task)d(and)h(causal)g(graph,)g(and)g(associated)i(operators)f(and)f
(axioms)f(are)h(remo)o(v)o(ed.)3712 1346 y FB(4)150 1492
y Fv(Afterw)o(ards,)k(we)d(compute)i(a)e Fq(pruned)j(causal)f(gr)o(aph)
p Fv(,)h(an)e(ac)o(yclic)h(subgraph)h(of)e(the)g(causal)h(graph)g(with)
f(the)150 1605 y(same)d(v)o(erte)o(x)g(set.)32 b(W)-7
b(e)23 b(try)i(do)g(this)g(in)f(such)i(a)e(f)o(ashion)i(that)f
(\223important\224)i(causal)f(dependencies)i(are)d(retained)150
1718 y(whene)n(v)o(er)f(possible.)31 b(More)24 b(speci\002cally)-6
b(,)26 b(we)c(apply)j(the)f(follo)n(wing)h(algorithm.)291
1832 y(First,)30 b(we)e(compute)h(the)g(strongly)i(connected)h
(components)f(of)d(the)h(causal)h(graph.)45 b(Cycles)30
b(only)f(occur)150 1945 y(within)h(strongly)i(connected)g(components,)h
(so)c(each)h(component)i(can)e(be)f(dealt)h(with)g(separately)-6
b(.)49 b(Second,)150 2058 y(for)32 b(each)g(connected)i(component,)i
(we)31 b(compute)i(a)e(total)h(order)h Fo(\036)d Fv(on)i(the)g(v)o
(ertices,)j(retaining)f(only)e(those)150 2171 y(arcs)26
b Fm(\()p Ft(v)s(;)15 b(v)490 2138 y Fu(0)515 2171 y
Fm(\))25 b Fv(for)g(which)h Ft(v)32 b Fo(\036)d Ft(v)1175
2138 y Fu(0)1199 2171 y Fv(.)k(If)25 b Ft(v)33 b Fo(\036)28
b Ft(v)1563 2138 y Fu(0)1587 2171 y Fv(,)d(we)f(say)i(that)g
Ft(v)2119 2138 y Fu(0)2167 2171 y Fv(has)g(a)f Fq(higher)i(le)o(vel)f
Fv(than)h Ft(v)s Fv(.)34 b(The)25 b(total)h(order)g(is)150
2283 y(computed)f(in)f(the)g(follo)n(wing)h(w)o(ay:)264
2502 y(1.)45 b(W)-7 b(e)25 b(assign)h(a)f(weight)h(to)f(each)h(arc)f
(in)g(the)h(causal)g(graph.)35 b(The)25 b(weight)h(of)f(an)g(arc)g(is)g
Ft(n)f Fv(if)h(it)g(is)g(induced)377 2615 y(by)h Ft(n)e
Fv(axioms)i(or)g(operators.)37 b(The)25 b(lo)n(wer)h(the)f(cumulated)j
(weight)e(of)f(the)h(incoming)h(arcs)f(of)g(a)f(v)o(erte)o(x,)377
2728 y(the)f(fe)n(wer)f(conditions)k(are)d(ignored)h(by)f(assigning)i
(a)d(lo)n(w)g(le)n(v)o(el)h(to)f(this)h(v)o(erte)o(x.)264
2921 y(2.)45 b(W)-7 b(e)22 b(then)h(pick)g(a)f(v)o(erte)o(x)h
Ft(v)i Fv(with)d(minimal)g(cumulated)j(weight)e(of)f(incoming)i(arcs)f
(and)g(select)g(it)f(for)h(the)377 3034 y(lo)n(west)h(le)n(v)o(el,)f
(i.)15 b(e.,)22 b(we)h(set)g Ft(v)29 b Fo(\036)c Ft(v)1492
3001 y Fu(0)1538 3034 y Fv(for)e(all)g(other)i(v)o(ertices)f
Ft(v)2339 3001 y Fu(0)2385 3034 y Fv(in)f(the)h(strongly)h(connected)h
(component.)264 3226 y(3.)45 b(Since)22 b Ft(v)i Fv(has)d(been)i(dealt)
f(with,)f(we)g(remo)o(v)o(e)g(the)h(v)o(erte)o(x)g(and)g(its)f
(incident)i(arcs)f(from)g(consideration)j(for)377 3339
y(the)f(rest)g(of)g(the)f(ordering)j(algorithm.)264 3532
y(4.)45 b(The)20 b(remaining)j(problem)f(is)e(solv)o(ed)i(by)f(iterati)
n(v)o(ely)h(applying)h(the)e(same)g(technique)i(to)e(order)g(the)g
(other)377 3645 y(v)o(ertices)k(until)g(only)f(a)f(single)i(v)o(erte)o
(x)f(remains.)291 3864 y(The)37 b(reader)h(will)e(notice)j(that)e(the)g
(pruning)i(choices)g(within)f(a)e(strongly)j(connected)h(component)f
(are)150 3977 y(performed)23 b(by)e(a)g(greedy)i(algorithm.)29
b(W)-7 b(e)20 b(could)j(also)f(try)f(to)g(\002nd)g(sets)g(of)g(arcs)h
(of)f(minimal)h(total)g(weight)f(such)150 4090 y(that)26
b(eliminating)j(these)d(arcs)h(results)g(in)f(an)g(ac)o(yclic)h(graph.)
37 b(Ho)n(we)n(v)o(er)l(,)26 b(this)g(is)g(an)g Fz(NP)p
Fv(-equi)n(v)n(alent)h(problem,)150 4203 y(e)n(v)o(en)d(in)f(the)h
(case)g(of)g(unweighted)i(graphs)f(\(Gare)o(y)e(&)g(Johnson,)i(1979,)g
(problem)f(GT8\).)291 4317 y(After)d(generating)j(the)d(pruned)i
(causal)f(graph,)g(we)e(also)i(prune)g(the)f(domain)h(transition)h
(graphs)g(by)e(remo)o(v-)150 4430 y(ing)27 b(from)g(the)h(transition)h
(labels)g(of)e Fq(DTG)n Fm(\()p Ft(v)s Fm(\))h Fv(all)f(conditions)j
(on)d(v)n(ariables)i Ft(v)2707 4397 y Fu(0)2757 4430
y Fv(with)e Ft(v)35 b Fo(\036)c Ft(v)3173 4397 y Fu(0)3197
4430 y Fv(.)38 b(These)28 b(are)f(the)150 4543 y(conditions)f(that)d
(are)g(ignored)i(by)e(the)g(heuristic)i(computation.)32
b(Finally)-6 b(,)23 b(we)f(simplify)j(the)e(domain)h(transition)150
4655 y(graphs)k(by)e(remo)o(ving)h Fq(dominated)h(tr)o(ansitions)p
Fv(:)37 b(If)26 b Ft(t)f Fv(and)h Ft(t)2094 4622 y Fu(0)2143
4655 y Fv(are)g(transitions)j(between)e(the)f(same)g(tw)o(o)g(v)n
(alues)150 4768 y(of)32 b(a)g(v)n(ariable,)k(and)c(the)h(condition)i
(of)d Ft(t)f Fv(is)h(a)g(proper)i(subset)f(of)f(the)h(condition)i(of)d
Ft(t)2983 4735 y Fu(0)3006 4768 y Fv(,)h(then)g(transition)i
Ft(t)c Fv(is)150 4881 y(easier)25 b(to)f(apply)h(than)f
Ft(t)916 4848 y Fu(0)939 4881 y Fv(,)f(so)h(that)g(we)f(remo)o(v)o(e)h
Ft(t)1703 4848 y Fu(0)1726 4881 y Fv(.)29 b(Similarly)-6
b(,)24 b(if)g(there)h(are)f(se)n(v)o(eral)g(transitions)j(with)d
(identical)150 4994 y(conditions,)i(we)d(only)h(k)o(eep)h(one)f(of)f
(them.)p 150 5080 1440 4 v 195 5166 a Fn(4.)h(This)19
b(simpli\002cation)h(is)g(closely)g(related)g(to)g(Knoblock')l(s)i
(criterion)e(for)g(the)g Fl(pr)m(oblem-speci\002c)h Fn(ordered)g
(monotonicity)h(property)275 5257 y(\(Knoblock,)d(1994\).)1888
5506 y Fy(213)p eop end
%%Page: 214 24
TeXDict begin 214 23 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)987
791 y @beginspecial 71 @llx 645 @lly 302 @urx 721 @ury
2310 @rwi @setspecial
%%BeginDocument: figures/causal-graph-logistics.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.92b Copyright 2002 Radical Eye Software
%%Title: causal-graph-logistics.dvi
%%BoundingBox: 71 645 302 721
%%DocumentFonts: CMMI10 CMR7
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o causal-graph-logistics.eps
%+ causal-graph-logistics.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2006.07.12:1710
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: aae443f0.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmmi10 cmmi12 cmmi5 cmmi6 cmmi7 cmmi8 cmmi9 cmmib10
%
/TeXaae443f0Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/alpha /beta /gamma /delta /epsilon1 /zeta /eta /theta /iota /kappa
/lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon /phi /chi /psi
/omega /epsilon /theta1 /pi1 /rho1 /sigma1 /phi1 /arrowlefttophalf
/arrowleftbothalf /arrowrighttophalf /arrowrightbothalf /arrowhookleft
/arrowhookright /triangleright /triangleleft /zerooldstyle /oneoldstyle
/twooldstyle /threeoldstyle /fouroldstyle /fiveoldstyle /sixoldstyle
/sevenoldstyle /eightoldstyle /nineoldstyle /period /comma /less /slash
/greater /star /partialdiff /A /B /C /D /E /F /G /H /I /J /K /L /M /N
/O /P /Q /R /S /T /U /V /W /X /Y /Z /flat /natural /sharp /slurbelow
/slurabove /lscript /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p
/q /r /s /t /u /v /w /x /y /z /dotlessi /dotlessj /weierstrass /vector
/tie /psi /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi
/.notdef /.notdef /Omega /alpha /beta /gamma /delta /epsilon1 /zeta /eta
/theta /iota /kappa /lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon
/phi /chi /psi /tie /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: f7b6d320.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmb10 cmbx10 cmbx12 cmbx5 cmbx6 cmbx7 cmbx8 cmbx9 cmbxsl10
%     cmdunh10 cmr10 cmr12 cmr17cmr6 cmr7 cmr8 cmr9 cmsl10 cmsl12 cmsl8
%     cmsl9 cmss10cmss12 cmss17 cmss8 cmss9 cmssbx10 cmssdc10 cmssi10
%     cmssi12 cmssi17 cmssi8cmssi9 cmssq8 cmssqi8 cmvtt10
%
/TeXf7b6d320Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute /caron /breve
/macron /ring /cedilla /germandbls /ae /oe /oslash /AE /OE /Oslash
/suppress /exclam /quotedblright /numbersign /dollar /percent /ampersand
/quoteright /parenleft /parenright /asterisk /plus /comma /hyphen
/period /slash /zero /one /two /three /four /five /six /seven /eight
/nine /colon /semicolon /exclamdown /equal /questiondown /question /at
/A /B /C /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X
/Y /Z /bracketleft /quotedblleft /bracketright /circumflex /dotaccent
/quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u
/v /w /x /y /z /endash /emdash /hungarumlaut /tilde /dieresis /suppress
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /space
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /.notdef
/.notdef /Omega /ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute
/caron /breve /macron /ring /cedilla /germandbls /ae /oe /oslash /AE
/OE /Oslash /suppress /dieresis /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMR7
%!PS-AdobeFont-1.1: CMR7 1.0
%%CreationDate: 1991 Aug 20 16:39:21
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-27 -250 1122 750}readonly def
/UniqueID 5000790 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CABB9FFC6CC3F1E9AE32F234EB60FE7D
E34995B1ACFF52428EA20C8ED4FD73E3935CEBD40E0EAD70C0887A451E1B1AC8
47AEDE4191CCDB8B61345FD070FD30C4F375D8418DDD454729A251B3F61DAE7C
8882384282FDD6102AE8EEFEDE6447576AFA181F27A48216A9CAD730561469E4
78B286F22328F2AE84EF183DE4119C402771A249AAC1FA5435690A28D1B47486
1060C8000D3FE1BF45133CF847A24B4F8464A63CEA01EC84AA22FD005E74847E
01426B6890951A7DD1F50A5F3285E1F958F11FC7F00EE26FEE7C63998EA1328B
C9841C57C80946D2C2FC81346249A664ECFB08A2CE075036CEA7359FCA1E90C0
F686C3BB27EEFA45D548F7BD074CE60E626A4F83C69FE93A5324133A78362F30
8E8DCC80DD0C49E137CDC9AC08BAE39282E26A7A4D8C159B95F227BDA2A281AF
A9DAEBF31F504380B20812A211CF9FEB112EC29A3FB3BD3E81809FC6293487A7
455EB3B879D2B4BD46942BB1243896264722CB59146C3F65BD59B96A74B12BB2
9A1354AF174932210C6E19FE584B1B14C00E746089CBB17E68845D7B3EA05105
EEE461E3697FCF835CBE6D46C75523478E766832751CF6D96EC338BDAD57D53B
52F5340FAC9FE0456AD13101824234B262AC0CABA43B62EBDA39795BAE6CFE97
563A50AAE1F195888739F2676086A9811E5C9A4A7E0BF34F3E25568930ADF80F
0BDDAC3B634AD4BA6A59720EA4749236CF0F79ABA4716C340F98517F6F06D9AB
7ED8F46FC1868B5F3D3678DF71AA772CF1F7DD222C6BF19D8EF0CFB7A76FC6D1
0AD323C176134907AB375F20CFCD667AB094E2C7CB2179C4283329C9E435E7A4
1E042AD0BAA059B3F862236180B34D3FCED833472577BACD472A4CD5C7347D2E
1D0D6630F446F3708FCB29A85F40B4DAB4D60AA8F5B2DBD67F2E45D80C7A7E86
144669F75F8FA14609F8E4246FEC475ED262E03D30393C78C7828206842B565A
DBE20EA52EE9C4C3862B2F5F12CF89D935B89B84A45CEFCEAEE8EC8806339364
56FF1FE2E5112803E3E40162D5188D2210A54816AA9960611721C23A292AE80A
8F8C0FB114D71C111700B0FEA8804F37C5D31ECD7006603C53F4BDF7208286AF
3A25CEE58E88BF81A4800B68C2A19EBDADF9B1074702E779A7DD915EFE09D35E
BD176D7346D859D0944520171C4E97696AE0502C43C391FCE5E8FB1789065E18
BE3AF62200D57912360411CE848B4550D1B0A3BA576F9B41CED3A23E753631A7
25375ABE8A4B55BC65AE2EAFAE452766961965093084D218637FB447795CC991
EB1EF26BF82B7A81FA847ABD3B559D35828AD7DDC5FC7B43C6C14E6ADEDD7663
F272AA9A121630C5263D58773BCB1437EC2FC54C4AF90E677A8E7D1738D003D4
18998C03CC9AE182E7758767FEB5E1B03C6CC32AD30D0ABAE6552290771E2CB1
A23F469A8447C1868C6DEC2C3C2BCFC691867E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
/UniqueID 5087385 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
AFC0E2F840512D321166547B306C592B8A01E1FA2564B9A26DAC14256414E4C8
42616728D918C74D13C349F4186EC7B9708B86467425A6FDB3A396562F7EE4D8
40B43621744CF8A23A6E532649B66C2A0002DD04F8F39618E4F572819DD34837
B5A08E643FDCA1505AF6A1FA3DDFD1FA758013CAED8ACDDBBB334D664DFF5B53
956017667094CD8DC214A666D7D12CB23EC030318B42DAC7C5B55D30D323720D
18B508F25EC90F4BB39F01A9B5D9FDADCB3F6BF98CBAE558EB843CCBAA498263
B83BF30467B3249E244947C6FD053CED99A226B8C32894FB029DD305F1374857
C11C401F455A46F61DF097D8B43AA61FFFF8E9FB7D8BC3C4A3AE7F30EB7A90AA
6D8D7637BB8661D971A06517AD0AEC7BC3ECDA20C75B5D8527BF8154C308BF5F
064B1EC3440E75F0DAB199514994A0E46DDF7F59DEAB0B3DB11CF017A4FDB6CE
FC1BA9BF7B8D27E8A48F437DD7DC3955CFFF805BA63ED962D7281641FF587038
5DF251D9C0DBCB730A82AAE3DF96A0DAAB76AE9E1A2557D31F2B9D2517B961C9
137F00A9C0C4FA9BD3F1BAF2919CF3AD7515BEB3506FA26B62454F915555DCC9
0D496C32AF1F5E05FDE0FF0E2D66AE027096DE4A97D4119AE6CC1784A0454D24
587B1DFA42DD6EBA09D41EB32A640C1D88D258E33D42B05BE4A029ACF823573D
2942889A55794AE435BF1EDC636FF44FBBC2B07C1D053BB6F516C47193F0B608
E703460DCEBF876BB353E351F1D0B4131D87F93828F22441F26CD2ED3A48E6AC
ADCF9B17695D3314C82CB4157B516DBA4C4CD1678B259110E3FB69B58F13B2F9
0A1706F135148BEFE1D958D9CD6474DD5B557ABE8C98C3815552BA0D26071038
34365D1B90FAC45295FA7B4A2E54ABBCF9A5FDC2CA06E562484CE4F8FE354805
8627655379835C224FCAC03FEF254D4A4E3E15811049C60C47C9FEB79169B068
9974075E7BC8CD8CA44E90393E6409DA4E5BD365CB9C74E8E606689276B0A7E2
B2D49DA55160054369093B6E4712F74563A49D86F6E727FD91F6D1DFE5A47932
0C6F0877F2697F76AF236C49D81E7C4FEB0000644D02F00428E130041D3D0A53
6BD9007DF8EE7C018B7805E7E870400CD96EE678BE454E912E74903E7D771BD1
E97971962010BDC79A29FA16456094AA70FF5369E4A7FC3612AF4B77E29F8954
6319B4723756E576E2529473F501F568ACE0D07893D64B42A0F5C7894AAB48E7
3AD4D8802074E0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600
(causal-graph-logistics.dvi) @start /Fa 205[33 33 49[{
 TeXf7b6d320Encoding ReEncodeFont }2 58.1154 /CMR7 rf
/Fb 139[30 3[42 14[44 97[{ TeXaae443f0Encoding ReEncodeFont }3
83.022 /CMMI10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 614 a
 tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 614 a 0 614 1911 615
v 1911 614 a
 currentpoint grestore moveto
 1911 614 a 945 71 a
 tx@Dict begin tx@NodeDict begin {} false /N@T1 14 {-85.35823 0.0 /Y
ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 945 71 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def -85.35823 0.0 2 copy y2 sub /y1
ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 203 90 a Fb(t)233 102 y Fa(1)945
71 y
 tx@Dict begin tx@NodeDict begin {} false /N@T2 14 {-28.45274 0.0 /Y
ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 945 71 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def -28.45274 0.0 2 copy y2 sub /y1
ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial
675 90 a Fb(t)705 102 y Fa(2)945 71 y
 tx@Dict begin tx@NodeDict begin {} false /N@A1 14 {28.45274 0.0 /Y
ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 945 71 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 28.45274 0.0 2 copy y2 sub /y1
ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 1141 83 a Fb(a)1185 95 y Fa(1)945
71 y
 tx@Dict begin tx@NodeDict begin {} false /N@A2 14 {85.35823 0.0 /Y
ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 945 71 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 85.35823 0.0 2 copy y2 sub /y1
ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial
1613 83 a Fb(a)1657 95 y Fa(2)945 71 y
 tx@Dict begin tx@NodeDict begin {} false /N@P1 14 {-28.45274 -56.90549
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 945 71 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def -28.45274 -56.90549 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 669 553 a Fb(p)711 565 y Fa(1)945
71 y
 tx@Dict begin tx@NodeDict begin {} false /N@P2 14 {28.45274 -56.90549
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 945 71 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 28.45274 -56.90549 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial
1142 553 a Fb(p)1184 565 y Fa(2)945 71 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@T1 /N@P1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 945 71 a 945
71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@T2 /N@P1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 945 71 a 945 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@A1 /N@P1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 945 71 a 945 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@A2 /N@P1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 945 71 a 945
71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@T1 /N@P2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 945 71 a 945 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@T2 /N@P2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 945 71 a 945 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@A1 /N@P2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 945 71 a 945
71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@A2 /N@P2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 945 71 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 150 1103 a Fv(Figure)24 b(13:)47 b(Causal)33
b(graph)g(of)g(a)h(L)t Fr(O)t(G)t(I)t(S)t(T)t(I)t(C)t(S)k
Fv(task.)56 b(State)32 b(v)n(ariables)j Ft(t)2552 1117
y Fk(i)2612 1103 y Fv(and)e Ft(a)2823 1117 y Fk(i)2882
1103 y Fv(encode)i(the)d(locations)j(of)572 1216 y(trucks)25
b(and)f(airplanes,)h(state)g(v)n(ariables)g Ft(p)1928
1230 y Fk(i)1979 1216 y Fv(the)f(locations)i(of)d(packages.)396
3022 y @beginspecial 71 @llx 532 @lly 444 @urx 721 @ury
3730 @rwi @setspecial
%%BeginDocument: figures/causal-graph-mystery.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.92b Copyright 2002 Radical Eye Software
%%Title: causal-graph-mystery.dvi
%%BoundingBox: 71 532 444 721
%%DocumentFonts: CMMI10 CMR7
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o causal-graph-mystery.eps
%+ causal-graph-mystery.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2006.07.12:1710
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: aae443f0.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmmi10 cmmi12 cmmi5 cmmi6 cmmi7 cmmi8 cmmi9 cmmib10
%
/TeXaae443f0Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/alpha /beta /gamma /delta /epsilon1 /zeta /eta /theta /iota /kappa
/lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon /phi /chi /psi
/omega /epsilon /theta1 /pi1 /rho1 /sigma1 /phi1 /arrowlefttophalf
/arrowleftbothalf /arrowrighttophalf /arrowrightbothalf /arrowhookleft
/arrowhookright /triangleright /triangleleft /zerooldstyle /oneoldstyle
/twooldstyle /threeoldstyle /fouroldstyle /fiveoldstyle /sixoldstyle
/sevenoldstyle /eightoldstyle /nineoldstyle /period /comma /less /slash
/greater /star /partialdiff /A /B /C /D /E /F /G /H /I /J /K /L /M /N
/O /P /Q /R /S /T /U /V /W /X /Y /Z /flat /natural /sharp /slurbelow
/slurabove /lscript /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p
/q /r /s /t /u /v /w /x /y /z /dotlessi /dotlessj /weierstrass /vector
/tie /psi /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi
/.notdef /.notdef /Omega /alpha /beta /gamma /delta /epsilon1 /zeta /eta
/theta /iota /kappa /lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon
/phi /chi /psi /tie /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: f7b6d320.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmb10 cmbx10 cmbx12 cmbx5 cmbx6 cmbx7 cmbx8 cmbx9 cmbxsl10
%     cmdunh10 cmr10 cmr12 cmr17cmr6 cmr7 cmr8 cmr9 cmsl10 cmsl12 cmsl8
%     cmsl9 cmss10cmss12 cmss17 cmss8 cmss9 cmssbx10 cmssdc10 cmssi10
%     cmssi12 cmssi17 cmssi8cmssi9 cmssq8 cmssqi8 cmvtt10
%
/TeXf7b6d320Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute /caron /breve
/macron /ring /cedilla /germandbls /ae /oe /oslash /AE /OE /Oslash
/suppress /exclam /quotedblright /numbersign /dollar /percent /ampersand
/quoteright /parenleft /parenright /asterisk /plus /comma /hyphen
/period /slash /zero /one /two /three /four /five /six /seven /eight
/nine /colon /semicolon /exclamdown /equal /questiondown /question /at
/A /B /C /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X
/Y /Z /bracketleft /quotedblleft /bracketright /circumflex /dotaccent
/quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u
/v /w /x /y /z /endash /emdash /hungarumlaut /tilde /dieresis /suppress
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /space
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /.notdef
/.notdef /Omega /ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute
/caron /breve /macron /ring /cedilla /germandbls /ae /oe /oslash /AE
/OE /Oslash /suppress /dieresis /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMR7
%!PS-AdobeFont-1.1: CMR7 1.0
%%CreationDate: 1991 Aug 20 16:39:21
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-27 -250 1122 750}readonly def
/UniqueID 5000790 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CABB9FFC6CC3F1E9AE32F234EB60FE7D
E34995B1ACFF52428EA20C8ED4FD73E3935CEBD40E0EAD70C0887A451E1B1AC8
47AEDE4191CCDB8B61345FD070FD30C4F375D8418DDD454729A251B3F61DAE7C
8882384282FDD6102AE8EEFEDE6447576AFA181F27A48216A9CAD730561469E4
78B286F22328F2AE84EF183DE4119C402771A249AAC1FA5435690A28D1B47486
1060C8000D3FE1BF45133CF847A24B4F8464A63CEA01EC84AA22FD005E74847E
01426B6890951A7DD1F50A5F3285E1F958F11FC7F00EE26FEE7C63998EA1328B
C9841C57C80946D2C2FC81346249A664ECFB08A2CE075036CEA7359FCA1E90C0
F686C3BB27EEFA45D548F7BD074CE60E626A4F83C69FE93A5324133A78362F30
8E8DCC80DD0C49E137CDC9AC08BAE39282E26A7A4D8C159B95F227BDA2A281AF
A9DAEBF31F504380B20812A211CF9FEB112EC29A3FB3BD3E81809FC6293487A7
455EB3B879D2B4BD46942BB1243896264722CB59146C3F65BD59B96A74B12BB2
9A1354AF174932210C6E19FE584B1B14C00E746089CBB17E68845D7B3EA05105
EEE461E3697FCF835CBE6D46C75523478E766832751CF6D96EC338BDAD57D53B
52F5340FAC9FE0456AD13101824234B262AC0CABA43B62EBDA39795BAE6CFE97
563A50AAE1F195888739F2676086A9811E5C9A4A7E0BF34F3E25568930ADF80F
0BDDAC3B634AD4BA6A59720EA4749236CF0F79ABA4716C340F98517F6F06D9AB
7ED8F46FC1868B5F3D3678DF71AA772CF1F7DD222C6BF19D8EF0CFB7A76FC6D1
0AD323C176134907AB375F20CFCD667AB094E2C7CB2179C4283329C9E435E7A4
1E042AD0BAA059B3F862236180B34D3FCED833472577BACD472A4B067A46F8EE
2AFACDE591ADF7304939394F221B5B9B316BC47DC7772711A35B466E1790D4F5
C02C57DE57A0498128C6041CB7E702F4D8500433633B8358C438237BBA39C647
F659FACF75574B1AAD3FE61FB97D6C5D0B19E4AC762321891092E73D192C4816
2F14A6FFAA1B22AABB65E8F611F1E9AF66DF68DA1B2B64B4CA8870261F8663FA
28953254FA64F0AD6EFBFAB15830AF856A65835C803B70963595060F91F4079B
F8BF5396F04C070254AC5DCACB20C0B1FADD38825886322366927C97E3C5AA1B
EA858D5974EBC14D17D4ADDCB3C7EA74A8A2B75293747CFCE0B484713D631F95
43BD5A359229F1276D2F652078ADA5000D1E060CE5CDF2E57401E487F3C10975
09AACD27CEE8581EBADC25D0FC9CEA533B99DCEDC0F28E782F4FE22AE097CCF3
F73338DA748C535291B4E8AF84546FE4B910107B6FFC5439C5B966DE6C905D86
460A69D6031EC3F7261FCB6D932F722BC1F550574EBD6F676AC9770969657422
4C8212F9FC9A49C9F0E813A2ACD16D1131A73D3001E698C63F76FE6D6143D310
155256BE90530489736CF35CA2D7E4A1FAEAE2423ABB52E55DD7314097DF7C09
F39C3E3A29F9BAA3AEBA89CC3E7B134E79A2DA39D449D98FE4ADE1A0ACDA79C4
1E2C78CDCC5BDD192DAA27F17DC4368EBC54CC009802018E50519F69025DE7E8
FB61694AEA672E59D00F6BA0CA9509FB8DC6544CB92B70BA0AE393A43959C90E
8857B0DA53A8D26426CAE0DCF2F3033BAC62502E08447B09CC18B2525AB65EC2
C63074FF725168D115137ECDAB1EEB083711F647F757C9806056811466D59087
B93D6B71594046B3B60A7D5789D6B99FC14764428A251F0A54ED
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
/UniqueID 5087385 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
AFC0E2F840512D321166547B306C592B8A01E1FA2564B9A26DAC14256414E4C8
42616728D918C74D13C349F4186EC7B9708B86467425A6FDB3A396562F7EE4D8
40B43621744CF8A23A6E532649B66C2A0002DD04F8F39618E4F572819DD34837
B5A08E643FDCA1505AF6A1FA3DDFD1FA758013CAED8ACDDBBB334D664DFF5B53
9560176671A33FC55340CD04C2DE46FD812FC2711A85F5A953D685CABBB06F2D
F557BD117E68DD3D4E750ED26CB6D0F3F72A12DB65FA6E5417051FCD28C76725
2EAE15CC89A160E27219DFE41AA012672CB342CBA124B223217EEBAFED7AD95A
993EE052F7C3A0EFC08DDD6DA5B6A56077454FB79AC97FD82108B4FA980FF743
5F35751C22A67E75E19AB2DC0656B587B316D0CA3B1134E3576A1086C48FF575
9CCCC1FFBBA3E0B0D5D782F81131078C8AEAE9AA35F2CB195E06691DB1CE5896
574ABDCF2A2A9E21BA86340244F4A11D6524597B25C44909DE6D09E827DC8831
42B59C8CF1FAC28C6EAEA28B4BD6968C3F8C4641D03AF3946C22B4715DF55FD8
D0CCDCB0A3B871D3DC2216F383B8FD97F02B570F20C17269A262245DE0C40FB2
9A03C76F69B47B9B422AA1CF99D21B957948F677BB35EC29CD771469B9CC44E9
1C790A45D10FEE2F00F8349A8819D4708C08E9BC5EDA8BBEBC66D647D9F415B3
08D857EFE4833A4B34B7B51950CAFC74CAD4CDCAC74CB73B597495688664D092
55D1622C47FB12DA81112760E9F781C828DABF9CBDF3CE1025DB68F791347ADA
A118A72CEB7CFDE1A56A13503BF0D9FB44A2345B7E8DEB3D408DE72691103CB1
369C2B72AEEEA8D9BE9A68C91E5C2449BFD52C8C113239B7D169CEE39C877642
04D5DABC1CC673E0DDB33C579F0F702DF98073E45257B6E73C1E89B37B338B26
E1C54E7C349A61D00CF49A3C8DC00DE70407F35C442CDD77787CCA1D94ED07E4
9E6ECCCD3B5329AD3D0E6965E954D03BED020143CF1CC652344ECAC7DF2FDE7B
653D3CFB966F38330787FA464F9F6A54FD2FBA20B398B7B861A695FC67A64097
E764141AA8083D5BEBC446F88D23C1D543353241648BF0105F0E2A803A8E83DB
0E468A03010C93008C886342DF826E9A75C901D499737C285ACF5DD19158E615
07E9354A72D596E5766705A9A28E3F9F97AA91110DD3E8E659A696C13BEB12A2
564A3FD708ACC95B8F061C2A01964F316F80E427EC14DBE149966830F60B149E
AFE0589AE9BA5728317EE9E823921031892ADDEA386BA95E5F5FE53663427BF1
F802E363C9989E4ACAC3FBF18587EBD3F6251FE189F4CD0B0BB00A3B3D68CCE0
9CF45B38B49C40B589BFEDEE251635F85DC40CD27B7FBC77440452DCA9716CC6
75BADB1053412F6D924BD4CE2F56BE68DF0E92D18BE6435B0006A5895E2B840D
F77DBEA1D536B8A65C115351BDBCC9EF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (causal-graph-mystery.dvi)
@start /Fa 204[33 33 33 49[{ TeXf7b6d320Encoding ReEncodeFont }3
58.1154 /CMR7 rf /Fb 143[42 3[25 5[41 2[36 99[{
 TeXaae443f0Encoding ReEncodeFont }4 83.022 /CMMI10 rf
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 1559 a
 tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 1559 a 0 1559 3092 1560
v 3092 1559 a
 currentpoint grestore moveto
 3092 1559 a 591 71 a
 tx@Dict begin tx@NodeDict begin {} false /N@F1 14 {-56.90549 0.0 /Y
ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def -56.90549 0.0 2 copy y2 sub /y1
ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 79 92 a Fb(f)120 104 y Fa(1)591
71 y
 tx@Dict begin tx@NodeDict begin {} false /N@F2 14 {0.0 0.0 /Y ED /X
ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg def /u
8.5359 d add def /d u neg def /NodePos { GetRnodePos } def} NewNode
end end
 591 71 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 0.0 0.0 2 copy y2 sub /y1 ED
x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0 eq { pop
pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial
552 92 a Fb(f)593 104 y Fa(2)591 71 y
 tx@Dict begin tx@NodeDict begin {} false /N@F3 14 {56.90549 0.0 /Y
ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 56.90549 0.0 2 copy y2 sub /y1
ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 1024 92 a Fb(f)1065 104 y Fa(3)591
71 y
 tx@Dict begin tx@NodeDict begin {} false /N@L1 14 {-28.45274 -56.90549
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def -28.45274 -56.90549 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial
323 566 a Fb(l)348 578 y Fa(1)591 71 y
 tx@Dict begin tx@NodeDict begin {} false /N@L2 14 {28.45274 -56.90549
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 28.45274 -56.90549 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 796 566 a Fb(l)821 578 y Fa(2)591
71 y
 tx@Dict begin tx@NodeDict begin {} false /N@C1 14 {-28.45274 -113.81097
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def -28.45274 -113.81097 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial
318 1028 a Fb(c)354 1040 y Fa(1)591 71 y
 tx@Dict begin tx@NodeDict begin {} false /N@C2 14 {28.45274 -113.81097
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 28.45274 -113.81097 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 790 1028 a Fb(c)826 1040 y Fa(2)591
71 y
 tx@Dict begin tx@NodeDict begin {} false /N@P1 14 {-56.90549 -170.71646
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def -56.90549 -170.71646 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial
79 1498 a Fb(p)121 1510 y Fa(1)591 71 y
 tx@Dict begin tx@NodeDict begin {} false /N@P2 14 {56.90549 -170.71646
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 56.90549 -170.71646 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 1023 1498 a Fb(p)1065 1510 y
Fa(2)591 71 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@F1 /N@L1
InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@F2 /N@L1
InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@F3 /N@L1
InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 591
71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@F1 /N@L2
InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@F2 /N@L2
InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@F3 /N@L2
InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 591
71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@L1 /N@C1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@L2 /N@C2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@L1 /N@P1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591
71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@L1 /N@P2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@L2 /N@P1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@L2 /N@P2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591
71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@C1 /N@P1
InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@C1 /N@P2
InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@C2 /N@P1
InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 591
71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@C2 /N@P2
InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin tx@NodeDict begin {} false /N@F1 14 {170.71646 0.0 /Y
ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 170.71646 0.0 2 copy y2 sub /y1
ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 1969 92 a Fb(f)2010 104 y Fa(1)591
71 y
 tx@Dict begin tx@NodeDict begin {} false /N@F2 14 {227.62195 0.0 /Y
ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 227.62195 0.0 2 copy y2 sub /y1
ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial
2441 92 a Fb(f)2482 104 y Fa(2)591 71 y
 tx@Dict begin tx@NodeDict begin {} false /N@F3 14 {284.52744 0.0 /Y
ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 284.52744 0.0 2 copy y2 sub /y1
ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2914 92 a Fb(f)2955 104 y Fa(3)591
71 y
 tx@Dict begin tx@NodeDict begin {} false /N@L1 14 {199.1692 -56.90549
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 199.1692 -56.90549 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial
2213 566 a Fb(l)2238 578 y Fa(1)591 71 y
 tx@Dict begin tx@NodeDict begin {} false /N@L2 14 {256.07469 -56.90549
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 256.07469 -56.90549 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 2686 566 a Fb(l)2711 578 y Fa(2)591
71 y
 tx@Dict begin tx@NodeDict begin {} false /N@C1 14 {199.1692 -113.81097
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 199.1692 -113.81097 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial
2208 1028 a Fb(c)2244 1040 y Fa(1)591 71 y
 tx@Dict begin tx@NodeDict begin {} false /N@C2 14 {256.07469 -113.81097
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 256.07469 -113.81097 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 2680 1028 a Fb(c)2716 1040 y
Fa(2)591 71 y
 tx@Dict begin tx@NodeDict begin {} false /N@P1 14 {170.71646 -170.71646
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 170.71646 -170.71646 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial
1968 1498 a Fb(p)2010 1510 y Fa(1)591 71 y
 tx@Dict begin tx@NodeDict begin {} false /N@P2 14 {284.52744 -170.71646
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 284.52744 -170.71646 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 2913 1498 a Fb(p)2955 1510 y
Fa(2)591 71 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@F1 /N@L1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@F2 /N@L1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@F3 /N@L1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591
71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@F1 /N@L2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@F2 /N@L2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@F3 /N@L2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591
71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@L1 /N@C1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@L2 /N@C2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@L1 /N@P1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591
71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@L1 /N@P2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@L2 /N@P1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@L2 /N@P2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591
71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@C1 /N@P1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@C1 /N@P2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@C2 /N@P1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591
71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@C2 /N@P2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591 71 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 150 3334 a(Figure)h(14:)47 b(Causal)22 b(graph)h(of)e(a)i
(M)t Fr(Y)t(S)t(T)t(E)t(R)o(Y)k Fv(task)22 b(\(left\))g(and)g(of)g(a)f
(relax)o(ed)i(v)o(ersion)g(of)f(the)f(task)i(\(right\).)29
b(State)572 3447 y(v)n(ariables)h Ft(f)970 3461 y Fk(i)1024
3447 y Fv(encode)f(the)f(fuel)h(at)e(a)h(location,)i(state)f(v)n
(ariables)h Ft(l)2692 3461 y Fk(i)2747 3447 y Fv(and)e
Ft(c)2944 3461 y Fk(i)2999 3447 y Fv(encode)i(the)e(locations)572
3560 y(and)e(remaining)i(capacities)g(of)e(trucks,)i(and)e(state)h(v)n
(ariables)h Ft(p)2622 3574 y Fk(i)2675 3560 y Fv(encode)g(the)e
(locations)i(of)e(pack-)572 3673 y(ages.)152 4062 y(5)t(.)t(2)t(.)t(3)
53 b(C)t Fr(AU)t(S)t(A)t(L)29 b Fv(G)t Fr(R)t(A)t(P)t(H)f
Fv(E)t Fr(X)t(A)t(M)t(P)t(L)t(E)t(S)150 4229 y Fv(T)-7
b(o)25 b(gi)n(v)o(e)h(some)g(impression)j(of)d(the)g(types)h(of)f
(causal)i(graphs)f(typically)i(found)e(in)f(the)g(standard)j
(benchmarks)150 4342 y(and)24 b(the)g(ef)n(fects)h(of)e(pruning,)i(we)e
(sho)n(w)g(some)h(e)o(xamples)h(of)e(increasing)k(graph)d(comple)o
(xity)-6 b(.)291 4461 y(As)21 b(our)h(\002rst)f(and)h(simplest)h(e)o
(xample,)f(Fig.)f(13)h(sho)n(ws)f(the)h(causal)h(graph)g(of)e(a)g(task)
h(from)g(the)i(L)t Fr(O)t(G)t(I)t(S)t(T)t(I)t(C)t(S)150
4574 y Fv(domain,)f(featuring)i(tw)o(o)e(trucks,)g(tw)o(o)g(airplanes)i
(and)e(tw)o(o)f(packages.)31 b(As)21 b(can)i(be)g(seen,)g(the)g(graph)h
(is)e(ac)o(yclic,)150 4686 y(so)f(it)g(requires)i(no)e(pruning)i(for)f
(the)f(causal)h(graph)h(heuristic.)30 b(Since)23 b(L)t
Fr(O)t(G)t(I)t(S)t(T)t(I)t(C)t(S)k Fv(tasks)22 b(also)f(feature)i
(strongly)150 4799 y(connected)34 b(domain)f(transition)h(graphs,)h
(the)o(y)d(can)g(e)n(v)o(en)g(be)g(solv)o(ed)h(by)e(the)h(polynomial)i
Fq(solve-easy-MPT)150 4912 y Fv(algorithm.)291 5031 y(As)25
b(a)h(slightly)i(more)e(complicated)i(e)o(xample,)f(the)f(ne)o(xt)h
(\002gure,)f(Fig.)f(14,)i(sho)n(ws)f(a)f(task)i(from)f(the)i(M)t
Fr(Y)t(S)t Fv(-)152 5144 y Fr(T)t(E)t(R)o(Y)40 b Fv(domain)d(with)f
(three)h(locations,)42 b(tw)o(o)36 b(trucks)h(and)g(tw)o(o)f(packages.)
69 b(The)36 b(causal)i(graph)f(contains)i(a)150 5257
y(number)27 b(of)f(c)o(ycles,)h(b)n(ut)g(these)g(are)f(mostly)h(local.)
37 b(By)26 b(pruning)i(arcs)e(from)g(v)o(ertices)i Ft(l)2971
5271 y Fk(i)3025 5257 y Fv(to)d Ft(f)3165 5271 y Fk(j)3202
5257 y Fv(,)g(we)g(ignore)j(the)1888 5506 y Fy(214)p
eop end
%%Page: 215 25
TeXDict begin 215 24 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)396
1257 y @beginspecial 71 @llx 589 @lly 444 @urx 721 @ury
3730 @rwi @setspecial
%%BeginDocument: figures/causal-graph-grid.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.92b Copyright 2002 Radical Eye Software
%%Title: causal-graph-grid.dvi
%%BoundingBox: 71 589 444 721
%%DocumentFonts: CMMI10 CMR7
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o causal-graph-grid.eps
%+ causal-graph-grid.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2006.07.12:1710
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: aae443f0.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmmi10 cmmi12 cmmi5 cmmi6 cmmi7 cmmi8 cmmi9 cmmib10
%
/TeXaae443f0Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/alpha /beta /gamma /delta /epsilon1 /zeta /eta /theta /iota /kappa
/lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon /phi /chi /psi
/omega /epsilon /theta1 /pi1 /rho1 /sigma1 /phi1 /arrowlefttophalf
/arrowleftbothalf /arrowrighttophalf /arrowrightbothalf /arrowhookleft
/arrowhookright /triangleright /triangleleft /zerooldstyle /oneoldstyle
/twooldstyle /threeoldstyle /fouroldstyle /fiveoldstyle /sixoldstyle
/sevenoldstyle /eightoldstyle /nineoldstyle /period /comma /less /slash
/greater /star /partialdiff /A /B /C /D /E /F /G /H /I /J /K /L /M /N
/O /P /Q /R /S /T /U /V /W /X /Y /Z /flat /natural /sharp /slurbelow
/slurabove /lscript /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p
/q /r /s /t /u /v /w /x /y /z /dotlessi /dotlessj /weierstrass /vector
/tie /psi /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi
/.notdef /.notdef /Omega /alpha /beta /gamma /delta /epsilon1 /zeta /eta
/theta /iota /kappa /lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon
/phi /chi /psi /tie /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: f7b6d320.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmb10 cmbx10 cmbx12 cmbx5 cmbx6 cmbx7 cmbx8 cmbx9 cmbxsl10
%     cmdunh10 cmr10 cmr12 cmr17cmr6 cmr7 cmr8 cmr9 cmsl10 cmsl12 cmsl8
%     cmsl9 cmss10cmss12 cmss17 cmss8 cmss9 cmssbx10 cmssdc10 cmssi10
%     cmssi12 cmssi17 cmssi8cmssi9 cmssq8 cmssqi8 cmvtt10
%
/TeXf7b6d320Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute /caron /breve
/macron /ring /cedilla /germandbls /ae /oe /oslash /AE /OE /Oslash
/suppress /exclam /quotedblright /numbersign /dollar /percent /ampersand
/quoteright /parenleft /parenright /asterisk /plus /comma /hyphen
/period /slash /zero /one /two /three /four /five /six /seven /eight
/nine /colon /semicolon /exclamdown /equal /questiondown /question /at
/A /B /C /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X
/Y /Z /bracketleft /quotedblleft /bracketright /circumflex /dotaccent
/quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u
/v /w /x /y /z /endash /emdash /hungarumlaut /tilde /dieresis /suppress
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /space
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /.notdef
/.notdef /Omega /ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute
/caron /breve /macron /ring /cedilla /germandbls /ae /oe /oslash /AE
/OE /Oslash /suppress /dieresis /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMR7
%!PS-AdobeFont-1.1: CMR7 1.0
%%CreationDate: 1991 Aug 20 16:39:21
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-27 -250 1122 750}readonly def
/UniqueID 5000790 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CABB9FFC6CC3F1E9AE32F234EB60FE7D
E34995B1ACFF52428EA20C8ED4FD73E3935CEBD40E0EAD70C0887A451E1B1AC8
47AEDE4191CCDB8B61345FD070FD30C4F375D8418DDD454729A251B3F61DAE7C
8882384282FDD6102AE8EEFEDE6447576AFA181F27A48216A9CAD730561469E4
78B286F22328F2AE84EF183DE4119C402771A249AAC1FA5435690A28D1B47486
1060C8000D3FE1BF45133CF847A24B4F8464A63CEA01EC84AA22FD005E74847E
01426B6890951A7DD1F50A5F3285E1F958F11FC7F00EE26FEE7C63998EA1328B
C9841C57C80946D2C2FC81346249A664ECFB08A2CE075036CEA7359FCA1E90C0
F686C3BB27EEFA45D548F7BD074CE60E626A4F83C69FE93A5324133A78362F30
8E8DCC80DD0C49E137CDC9AC08BAE39282E26A7A4D8C159B95F227BDA2A281AF
A9DAEBF31F504380B20812A211CF9FEB112EC29A3FB3BD3E81809FC6293487A7
455EB3B879D2B4BD46942BB1243896264722CB59146C3F65BD59B96A74B12BB2
9A1354AF174932210C6E19FE584B1B14C00E746089CBB17E68845D7B3EA05105
EEE461E3697FCF835CBE6D46C75523478E766832751CF6D96EC338BDAD57D53B
52F5340FAC9FE0456AD13101824234B262AC0CABA43B62EBDA39795BAE6CFE97
563A50AAE1F195888739F2676086A9811E5C9A4A7E0BF34F3E25568930ADF80F
0BDDAC3B634AD4BA6A59720EA4749236CF0F79ABA4716C340F98517F6F06D9AB
7ED8F46FC1868B5F3D3678DF71AA772CF1F7DD222C6BF19D8EF0CFB7A76FC6D1
0AD323C176134907AB375F20CFCD667AB094E2C7CB2179C4283329C9E435E7A4
1E042AD0BAA059B3F862236180B34D3FCED833472577BACD472A4CD5C7347D2E
1D0D6630F446F3708FCB29A85F40B4DAB4D60AA8F5B2DBD67F2E45D80C7A7E86
144669F75F8FA14609F8E4246FEC475ED262E03D30393C78C7828206842B565A
DBE20EA52EE9C4C3862B2F5F12CF89D935B89B84A45CEFCEAEE8EC8806339364
56FF1FE2E5112803E3E40162D5188D2210A54816AA9960611721C23A292AE80A
8F8C0FB114D71C111700B0FEA8804F37C5D31ECD7006603C53F4BDF7208286AF
3A25CEE58E88BF81A4800B68C2A19EBDADF9B1074702E779A7DD915EFE09D35E
BD176D7346D859D0944520171C4E97696AE0502C43C391FCE5E8FB1789065E18
BE3AF62200D57912360411CE848B4550D1B0A3BA576F9B41CED3A23E753631A7
25375ABE8A4B55BC65AE2EAFAE452766961965093084D218637FB447795CC991
EB1EF26BF82B7A81FA847ABD3B559D35828AD7DDC5FC7B43C6C14E6ADEDD7663
F272AA9A121630C5263D58773BCB1437EC2FC54C4AF90E677A8E7D1738D003D4
18998C03CC9AE182E7758767FEB5E1B03C6CC32AD30D0ABAE6552290771E2CB1
A23F469A8447C1868C6DEC2C3C2BCFC691867E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
/UniqueID 5087385 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
AFC0E2F840512D321166547B306C592B8A01E1FA2564B9A26DAC14256414E4C8
42616728D918C74D13C349F4186EC7B9708B86467425A6FDB3A396562F7EE4D8
40B43621744CF8A23A6E532649B66C2A0002DD04F8F39618E4F572819DD34837
B5A08E643FDCA1505AF6A1FA3DDFD1FA758013CAED8ACDDBBB334D664DFF5B53
9560176671A33FC55340CD04C2DE46FD812FC2711A85F70616E4B2F7C0EFA18D
28C25F2510A63A3C55C2EEC5CAD04051CCE773EC997373A7B72E99B1C581B9D6
F945B833780834A8A81AC913CD0390BE72A97E66AA9DBBCC4547C3E48FB55E97
0FCD36A15C764735DCC35D6AFE72FA07AC862F705D3836DEFE836EBB286E0B5E
DB9AD3E936F8850A7A0726CE409780A458A3269A7647BF7D4F3A207F2228BD5E
856D37106F4FBAFB0BAE752A491EF3B250840A2CC66035A1E8DFB435F0525F3B
13C37EA9D2C9BDE25A0C0E03252CFFDFBBC06B239255218247AE43B1CAF3EA34
7972BA332161354EE041402058B7FF160A71E3C765FCE6195E0242DE9F102C22
ABB8ACD21C6E3BACE649506C9349ECE3B3CBEEF5399D047967B8D2DDA8E8A7BA
4AB8143438E5AB2A3E500B3F600C041DC106024E477A15C658B2C41728426CD7
1361C790C593804BF7D44804BAC1339F31A662DE50350BD77FD103AADC42DC94
40B7786313941DD87A3579E9FDDC9032475EB76242DBB2EFE167CD0C3B70CDA7
C1AB0CF54F4427DA5F59EFDF8F10A32207BA16A160136B382C1E867F2F48D205
04EC7E90A8968245062B309A26DE9AB876001586BBF8B1FBDF15101158EC801D
70791B20309CA11EFB55F470E73D7C221FAAE0E7827961FD58BBD128FC1E9C57
DA97320BA2B74F54C02E78B14F3DA9F8B7B6AE6A4003BEB07598DEEBF3852CDA
A2DE80DB56E2FACAAB66D51954B01EA7BE520B060ADA0BCBF27BBCF8ACAD228C
CA2042885220FE82291580AE50B7044D5C636CE3A055B6227975221B82BFEC6D
0729051CA618D58CBE78B3C898FC96C77C88735DF3703320576D75642A362EB9
C2D729D760D66F10E67573E16AC6AB2BDA8A9AC1E04109BD43B2B27B4DA35898
31BACB4E910B545B951B8455D38BF7A4DAAD9A0466DAB41DDC37EADEA67A62B0
8B1D66C7287FABE6B9C5EAB4B087B831B236F96C197A5FD80607A59FBD6CA496
2FFBF1F543DE0900F767D9ED4B85EA39CA1246DFC3B1776ED64B5C4D2462F436
3F8D4BB402BA9624FFF416893DA98F96234A2F0097F2E1B6E5BC593BABD0D5F2
F96E46CA831E950A754779A7B680784A9B97E27620CEC35E6EF754AB2BCE52F1
2E52BACDBC677B6E4C92CF04C7C04505B9B93C71C83618D2214BA073DDC02A97
CC414CE7E64F4B94631428CCB4CE670948224E4A132216B131BCCBB4B5768620
993EEB26C0135E745541238239458DEF7714A3E08B9CB3ADCB1825B074F4239D
0C1EB4CC6183D37014EA9A3107BFF033A1477C44284C77C376C72132F9F44506
92F4AA58F920DCC449423CB5F67E8C7EF84E4D6DBC3104B92C67935097B0FEA0

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (causal-graph-grid.dvi)
@start /Fa 205[33 33 49[{ TeXf7b6d320Encoding ReEncodeFont }2
58.1154 /CMR7 rf /Fb 141[37 5[25 43 9[44 97[{
 TeXaae443f0Encoding ReEncodeFont }4 83.022 /CMMI10 rf
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 1087 a
 tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 1087 a 0 1087 3092 1087
v 3092 1087 a
 currentpoint grestore moveto
 3092 1087 a 591 71 a
 tx@Dict begin tx@NodeDict begin {} false /N@R 14 {0.0 0.0 /Y ED /X
ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg def /u
8.5359 d add def /d u neg def /NodePos { GetRnodePos } def} NewNode
end end
 591 71 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 0.0 0.0 2 copy y2 sub /y1 ED
x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0 eq { pop
pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 571 89 a Fb(r)591 71 y
 tx@Dict begin tx@NodeDict begin {} false /N@A 14 {-56.90549 -56.90549
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def -56.90549 -56.90549 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 96 561 a Fb(a)591
71 y
 tx@Dict begin tx@NodeDict begin {} false /N@L 14 {-56.90549 -113.81097
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def -56.90549 -113.81097 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial
105 1045 a Fb(l)591 71 y
 tx@Dict begin tx@NodeDict begin {} false /N@K1 14 {0.0 -113.81097
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 0.0 -113.81097 2 copy y2 sub
/y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0
eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore end


@endspecial 550 1038 a Fb(k)593 1050 y Fa(1)591 71 y
 tx@Dict begin tx@NodeDict begin {} false /N@K2 14 {56.90549 -113.81097
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end

591 71 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 56.90549 -113.81097 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 1023
1038 a Fb(k)1066 1050 y Fa(2)591 71 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@R /N@L
InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 591 71 a 591 71
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@R /N@A InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@R /N@K1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@R /N@K2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore  grestore end
 591 71 a 591 71
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@A /N@K1
InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@A /N@K2
InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@K1 /N@K2
InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 591 71 a 591 71
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@K1 /N@L InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin tx@NodeDict begin {} false /N@R 14 {227.62195 0.0 /Y
ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 227.62195 0.0 2 copy y2 sub /y1
ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end


@endspecial 2460 89 a Fb(r)591 71 y
 tx@Dict begin tx@NodeDict begin {} false /N@A 14 {170.71646 -56.90549
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 170.71646 -56.90549 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 1986 561 a Fb(a)591 71 y
 tx@Dict begin tx@NodeDict begin {} false /N@L 14 {170.71646 -113.81097
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591
71 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 170.71646 -113.81097 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 1995 1045
a Fb(l)591 71 y
 tx@Dict begin tx@NodeDict begin {} false /N@K1 14 {227.62195 -113.81097
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 227.62195 -113.81097 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial
2440 1038 a Fb(k)2483 1050 y Fa(1)591 71 y
 tx@Dict begin tx@NodeDict begin {} false /N@K2 14 {284.52744 -113.81097
/Y ED /X ED /d .5 .5 sub CLW mul neg def /r 8.5359 d add def /l r neg
def /u 8.5359 d add def /d u neg def /NodePos { GetRnodePos } def}
NewNode end end
 591 71 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /x2 8.5359 CLW .5 mul
sub def /y2 8.5359 CLW .5 mul sub def 284.52744 -113.81097 2 copy y2
sub /y1 ED x2 sub /x1 ED y2 add /y2 ED x2 add /x2 ED 0. true 1 index
0 eq { pop pop Rect } { OvalFrame } ifelse gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore end
 
@endspecial 2913 1038 a Fb(k)2956 1050 y
Fa(2)591 71 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@R /N@L InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@R /N@A InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@R /N@K1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore  grestore end
 591
71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@R /N@K2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@A /N@K1 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@A /N@K2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore  grestore end
 591
71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@K1 /N@K2 InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 591 71 a 591 71 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@K1 /N@L InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0
setlinecap stroke  grestore  grestore end
 591 71 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 150 1569 a Fv(Figure)f(15:)47 b(Causal)32
b(graph)h(of)f(a)i(G)t Fr(R)t(I)t(D)g Fv(task)f(\(left\))f(and)h(of)f
(a)f(relax)o(ed)j(v)o(ersion)f(of)f(the)g(task)h(\(right\).)55
b(State)572 1682 y(v)n(ariable)22 b Ft(r)f Fv(encodes)h(the)f(location)
h(of)e(the)g(robot,)i Ft(a)d Fv(encodes)j(the)f(status)g(of)f(the)h
(robot)g(arm)e(\(empty)572 1795 y(or)27 b(carrying)i(a)d(k)o(e)o(y\),)i
Ft(l)h Fv(encodes)g(the)e(status)h(of)f(the)g(lock)o(ed)i(location)g
(\(lock)o(ed)g(or)e(open\),)i(and)e Ft(k)3710 1809 y
Fs(1)572 1908 y Fv(and)d Ft(k)773 1922 y Fs(2)835 1908
y Fv(encode)h(the)f(locations)i(of)e(the)f(tw)o(o)h(k)o(e)o(ys.)150
2303 y(f)o(act)32 b(that)f(we)g(must)g(mo)o(v)o(e)g(trucks)h(to)f
(certain)i(locations)h(if)c(we)h(w)o(ant)g(to)g(use)h(up)f(fuel)h(at)f
(that)g(location.)54 b(As)150 2416 y(using)27 b(up)f(fuel)g(is)g(not)g
(a)f(v)o(ery)i(useful)g(thing)g(to)f(do,)g(this)g(is)g(not)g(a)f(big)i
(loss)f(in)g(information.)38 b(By)25 b(pruning)j(arcs)150
2529 y(from)h(v)o(ertices)i Ft(p)711 2543 y Fk(i)767
2529 y Fv(to)e Ft(c)905 2543 y Fk(j)942 2529 y Fv(,)g(we)g(ignore)h
(the)g(f)o(act)f(that)h(v)o(ehicles)h(can)e(only)h(increase)h(or)e
(decrease)j(their)e(current)150 2642 y(capacity)j(by)f(unloading)i(or)d
(loading)i(packages.)54 b(Compared)32 b(to)f(heuristics)j(based)f(on)e
(ignoring)j(delete)e(ef-)150 2755 y(fects,)c(this)f(is)g(not)f(a)h
(great)g(loss)g(in)g(information,)j(since)d(ignoring)i(delete)f(ef)n
(fects)g(in)e(the)j(M)t Fr(Y)t(S)t(T)t(E)t(R)o(Y)i Fv(domain)150
2868 y(almost)j(amounts)g(to)f(ignoring)i(capacity)h(and)d(fuel)h
(constraints)i(altogether)-5 b(.)60 b(By)32 b(pruning)j(just)f(these)g
(arcs,)150 2981 y(we)26 b(can)h(eliminate)i(all)e(c)o(ycles)g(in)g(the)
g(causal)h(graph,)h(so)e(the)i(M)t Fr(Y)t(S)t(T)t(E)t(R)o(Y)i
Fv(domain)d(can)f(be)g(considered)j(f)o(airly)150 3094
y(well-beha)n(v)o(ed.)291 3216 y(A)h(w)o(orse)i(case)g(is)g(sho)n(wn)f
(in)h(Fig.)e(15,)k(which)e(sho)n(ws)f(an)h(e)o(xample)g(from)f(the)j(G)
t Fr(R)t(I)t(D)g Fv(domain)e(with)f(an)150 3329 y(arbitrary)f(number)f
(of)f(locations,)j(of)d(which)g(a)g(single)h(one)f(is)g(lock)o(ed.)46
b(There)30 b(are)f(tw)o(o)f(k)o(e)o(ys,)j(one)e(of)g(which)150
3441 y(can)c(unlock)h(the)f(lock)o(ed)h(location.)34
b(Eliminating)26 b(c)o(ycles)g(here)f(requires)i(a)d(fe)n(w)g(minor)h
(relaxations)i(re)o(garding)150 3554 y(the)33 b(status)g(of)f(the)h
(robot)g(arm)f(\(empty)h(or)f(non-empty\),)37 b(b)n(ut)32
b(also)h(one)g(major)f(simpli\002cation,)37 b(namely)c(the)150
3667 y(elimination)k(of)e(the)g(arc)g(from)f Ft(l)i Fv(to)f
Ft(r)h Fv(representing)j(the)c(f)o(act)g(that)g(the)g(robot)h(can)f
(only)h(enter)g(the)f(lock)o(ed)150 3780 y(location)26
b(if)d(it)g(has)h(been)g(unlock)o(ed.)291 3902 y(As)d(a)g(\(nearly\))i
(w)o(orst-case)h(e)o(xample,)e(consider)i(a)d(task)h(in)g(the)h(B)t
Fr(L)t(O)t(C)t(K)t(S)t(W)s(O)t(R)t(L)t(D)j Fv(domain)d(\(no)f
(\002gure\).)28 b(A)150 4015 y(typical)e(MPT)d(encoding)k(uses)e(one)g
(state)h(v)n(ariable)g Ft(h)e Fv(for)h(encoding)i(whether)f(or)e(not)h
(the)g(hand)g(is)g(empty)g(and)150 4128 y(tw)o(o)h(state)h(v)n
(ariables)i(per)d(block)i(in)e(the)h(task:)36 b(F)o(or)25
b(the)i Ft(i)p Fv(-th)g(block,)h Ft(t)2392 4142 y Fk(i)2445
4128 y Fv(encodes)h(whether)e(or)f(not)h(the)g(block)g(is)150
4241 y(lying)f(on)e(the)h(table,)h(and)f Ft(b)1028 4255
y Fk(i)1080 4241 y Fv(encodes)i(which)e(block)g(is)g(lying)h(on)e(top)h
(of)g(it,)f(or)h(if)f(it)g(is)h(clear)g(or)g(being)h(held)f(by)150
4354 y(the)d(arm.)28 b(In)21 b(the)h(causal)h(graph)g(of)f(such)g(a)f
(task,)i(v)n(ariable)g Ft(h)e Fv(has)h(ingoing)i(arcs)e(from)g(and)g
(outgoing)i(arcs)f(to)e(all)150 4467 y(other)27 b(state)g(v)n
(ariables,)i(and)d(all)h(state)g(v)n(ariables)h Ft(b)1784
4481 y Fk(i)1837 4467 y Fv(are)f(connected)i(to)d(each)h(other)g(in)f
(both)h(directions.)39 b(Only)150 4580 y(the)31 b(state)h(v)n(ariables)
h Ft(t)877 4594 y Fk(i)935 4580 y Fv(ha)n(v)o(e)f(a)f(slightly)i
(simpler)f(connection)i(structure,)g(being)f(only)f(connected)h(to)e
Ft(h)g Fv(and)150 4693 y(to)26 b Ft(b)285 4707 y Fk(i)339
4693 y Fv(for)h(the)g(same)f(v)n(alue)i(of)e Ft(i)p Fv(.)37
b(An)o(y)26 b(relaxation)k(of)c(the)h(problem)h(that)f(eliminates)h(c)o
(ycles)g(from)e(the)h(causal)150 4806 y(graph)i(loses)g(a)f(lar)n(ge)h
(amount)g(of)e(information,)32 b(and)c(it)g(is)f(not)i(surprising)h
(that)f(the)h(D)t Fr(E)t(P)t(O)q(T)i Fv(domain,)e(which)150
4918 y(includes)24 b(a)f(B)t Fr(L)t(O)t(C)t(K)t(S)t(W)s(O)t(R)t(L)t(D)j
Fv(subproblem,)e(is)e(the)g(one)g(for)g(which)g(the)g(precursor)i(of)e
(F)o(ast)f(Do)n(wnw)o(ard)g(f)o(ared)150 5031 y(w)o(orst)29
b(\(Helmert,)h(2004\).)44 b(Still,)30 b(it)e(should)i(be)e(pointed)j
(out)e(that)g(planners)h(that)f(ignore)h(delete)g(ef)n(fects)g(ha)n(v)o
(e)150 5144 y(similar)23 b(problems)g(with)g(B)t Fr(L)t(O)t(C)t(K)t(S)t
(W)s(O)t(R)t(L)t(D)r Fv(-lik)o(e)k(domains,)c(as)e(the)h(comparison)j
(between)d(the)h(FF)d(and)i(causal)150 5257 y(graph)j(heuristics)h(in)d
(the)h(same)g(article)h(sho)n(ws.)1888 5506 y Fy(215)p
eop end
%%Page: 216 26
TeXDict begin 216 25 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)150
249 y Fz(5.3)46 b(Successor)25 b(Generators)g(and)d(Axiom)h(Ev)o
(aluators)150 416 y Fv(In)d(addition)j(to)d(good)h(heuristic)h
(guidance,)h(a)d(forw)o(ard)h(searching)i(planning)g(system)d(needs)i
(ef)n(\002cient)f(methods)150 528 y(for)30 b(generating)j(successor)f
(states)f(if)f(it)f(is)h(to)g(be)f(applied)j(to)e(the)g(benchmark)i
(suite)f(from)e(the)h(international)150 641 y(planning)36
b(competitions.)63 b(F)o(or)33 b(some)h(domains,)j(our)d(causal)h
(graph)g(heuristic)i(or)c(other)i(popular)h(methods)150
754 y(lik)o(e)25 b(the)g(FF)e(heuristic)k(pro)o(vide)f(e)o(xcellent)h
(goal)e(estimates,)h(yet)f(still)g(planning)i(can)e(be)g(too)g
(time-consuming)150 867 y(because)g(of)f(v)o(ery)g(long)g(plans)h(and)f
(v)n(ast)g(branching)i(f)o(actors.)291 986 y(The)f(v)n(ariant)j(of)d
(best-\002rst)j(search)f(implemented)g(in)f(F)o(ast)f(Do)n(wnw)o(ard)h
(does)h(not)f(compute)h(the)f(heuristic)150 1099 y(estimate)32
b(for)f(each)g(state)g(that)h(is)e(generated.)53 b(Essentially)-6
b(,)34 b(heuristic)f(e)n(v)n(aluations)g(are)e(only)h(computed)g(for)
150 1212 y(closed)i(nodes,)j(while)c(computation)i(is)e(deferred)i(for)
e(nodes)h(on)f(the)g(search)i(frontier)-5 b(.)58 b(F)o(or)32
b(domains)i(with)150 1325 y(strong)c(heuristic)h(guidance)g(and)e(lar)n
(ge)h(branching)i(f)o(actors,)f(the)e(number)g(of)g(nodes)h(on)f(the)g
(frontier)h(can)f(by)150 1438 y(f)o(ar)20 b(dominate)h(the)f(number)h
(of)e(nodes)i(in)f(the)g(closed)h(set.)28 b(As)19 b(a)g(case)h(in)g
(point,)h(consider)h(the)e(problem)h(instance)152 1551
y(S)t Fr(A)l(T)t(E)t(L)t(L)t(I)t(T)t(E)33 b Fv(#29.)k(F)o(or)25
b(solving)j(this)e(task,)h(the)f(def)o(ault)i(con\002guration)h(of)d(F)
o(ast)f(Do)n(wnw)o(ard)h(only)h(computes)150 1664 y(heuristic)h
(estimates)g(for)e(67)16 b(597)27 b(w)o(orld)g(states)g(while)f(adding)
i(107)16 b(233)h(381)27 b(states)g(to)f(the)g(frontier)-5
b(.)39 b(Clearly)-6 b(,)150 1777 y(determining)26 b(the)e(set)g(of)f
(applicable)j(operators)g(quickly)g(is)d(of)h(critical)h(importance)h
(in)d(such)h(a)g(scenario.)291 1896 y(In)33 b(some)i(S)t
Fr(A)l(T)t(E)t(L)t(L)t(I)t(T)t(E)41 b Fv(tasks,)36 b(there)e(are)g
(almost)f(1)16 b(000)g(000)34 b(ground)h(operators,)j(so)33
b(we)f(should)j(try)e(to)150 2009 y(a)n(v)n(oid)h(indi)n(vidually)i
(checking)g(each)d(operator)i(for)e(applicability)-6
b(.)60 b(Similarly)-6 b(,)36 b(in)c(the)i(biggest)i(P)t(S)t(R)e(tasks,)
150 2121 y(more)f(than)h(100)16 b(000)34 b(axioms)g(must)f(be)g(e)n(v)n
(aluated)i(in)e(each)g(state)h(to)f(compute)h(the)g(v)n(alues)g(of)f
(the)g(deri)n(v)o(ed)150 2234 y(v)n(ariables,)24 b(so)e(this)h
(computation)i(must)d(be)h(made)f(ef)n(\002cient.)29
b(F)o(or)21 b(these)i(purposes,)i(F)o(ast)d(Do)n(wnw)o(ard)g(uses)h(tw)
o(o)150 2347 y(data)h(structures)i(called)f Fq(successor)h(g)o(ener)o
(ator)o(s)h Fv(and)d Fq(axiom)g(e)o(valuator)o(s)p Fv(.)152
2574 y(5)t(.)t(3)t(.)t(1)53 b(S)t Fr(U)t(C)t(C)t(E)t(S)t(S)t(O)t(R)30
b Fv(G)t Fr(E)t(N)t(E)t(R)t(A)l(T)s(O)t(R)t(S)150 2741
y Fv(Successor)25 b(generators)i(are)c(recursi)n(v)o(e)i(data)g
(structures)h(v)o(ery)e(similar)g(to)f(decision)j(trees.)j(The)24
b(internal)h(nodes)150 2854 y(ha)n(v)o(e)h(associated)i(conditions,)h
(which)d(can)g(be)f(lik)o(ened)j(to)d(the)h(decisions)i(in)d(a)g
(decision)j(tree,)e(and)g(the)g(lea)n(v)o(es)150 2967
y(ha)n(v)o(e)h(associated)j(operator)e(lists)g(which)f(can)g(be)f(lik)o
(ened)j(to)d(a)g(set)h(of)g(classi\002ed)h(samples)f(in)g(a)f(decision)
j(tree)150 3080 y(leaf.)g(The)o(y)23 b(are)h(formally)h(de\002ned)f(as)
g(follo)n(ws.)150 3329 y Fz(De\002nition)f(8)46 b Fj(Successor)24
b(generators)150 3442 y Fq(A)e Fj(successor)k(generator)g
Fq(for)e(an)f(MPT)f Fm(\005)k(=)f Fo(hV)7 b Ft(;)15 b(s)1815
3456 y Fs(0)1855 3442 y Ft(;)g(s)1938 3456 y Fk(?)1978
3442 y Ft(;)g Fo(A)p Ft(;)g Fo(O)s(i)23 b Fq(is)h(a)f(tr)m(ee)h
(consisting)j(of)d Fj(selector)i(nodes)e Fq(and)150 3555
y Fj(generator)h(nodes)p Fq(.)291 3674 y(A)h(selector)j(node)e(is)g(an)
g(internal)i(node)f(of)e(the)i(tr)m(ee)o(.)38 b(It)27
b(has)g(an)g(associated)j(variable)f Ft(v)34 b Fo(2)d(V)j
Fq(called)28 b(the)150 3787 y Fj(selection)22 b(variable)p
Fq(.)29 b(Mor)m(eo)o(ver)-10 b(,)22 b(it)e(has)h Fo(jD)1548
3801 y Fk(v)1589 3787 y Fo(j)8 b Fm(+)g(1)19 b Fq(c)o(hildr)m(en)j
(accessed)g(via)e(labelled)j(edg)o(es,)e(one)g(edg)o(e)g(labelled)150
3900 y Ft(v)39 b Fm(=)c Ft(d)29 b Fq(for)g(eac)o(h)h(value)g
Ft(d)36 b Fo(2)f(D)1222 3914 y Fk(v)1263 3900 y Fq(,)30
b(and)f(one)h(edg)o(e)g(labelled)h Fo(>)p Fq(.)45 b(The)28
b(latter)j(edg)o(e)f(is)f(called)h(the)g Fj(don')m(t)e(care)150
4013 y(edge)c Fq(of)g(the)g(selector)-10 b(.)291 4132
y(A)24 b(g)o(ener)o(ator)j(node)f(is)f(a)f(leaf)i(node)f(of)g(the)g(tr)
m(ee)o(.)33 b(It)25 b(has)g(an)g(associated)j(set)d(of)g(oper)o(ator)o
(s)i(fr)l(om)e Fo(O)i Fq(called)150 4245 y(the)d(set)g(of)f
Fj(generated)i(operators)p Fq(.)291 4364 y(Eac)o(h)33
b(oper)o(ator)j Ft(o)43 b Fo(2)g(O)36 b Fq(must)d(occur)i(in)e(e)n
(xactly)i(one)f(g)o(ener)o(ator)i(node)o(,)h(and)d(the)g(set)f(of)g
(edg)o(e)i(labels)150 4477 y(leading)25 b(fr)l(om)f(the)g(r)l(oot)g(to)
f(this)h(node)h(\(e)n(xcluding)h(don')m(t)f(car)m(e)f(edg)o(es\))h
(must)f(equal)h(the)e(pr)m(econdition)k(of)d Ft(o)p Fq(.)291
4720 y Fv(Gi)n(v)o(en)36 b(a)g(successor)j(generator)g(for)e(an)f(MPT)f
Fm(\005)h Fv(and)h(a)f(state)h Ft(s)e Fv(of)i Fm(\005)p
Fv(,)i(we)c(can)i(compute)h(the)f(set)f(of)150 4833 y(applicable)26
b(operators)g(in)e Ft(s)e Fv(by)i(tra)n(v)o(ersing)i(the)e(successor)i
(generator)g(as)d(follo)n(ws,)h(starting)i(from)d(the)h(root:)286
5045 y Fo(\017)46 b Fv(At)20 b(a)f(selector)k(node)e(with)f(selection)i
(v)n(ariable)g Ft(v)s Fv(,)e(follo)n(w)h(the)f(edge)h
Ft(v)29 b Fm(=)c Ft(s)p Fm(\()p Ft(v)s Fm(\))20 b Fv(and)h(the)f(don')n
(t)i(care)f(edge.)286 5257 y Fo(\017)46 b Fv(At)23 b(a)g(generator)j
(node,)e(report)h(the)f(generated)i(operators)g(as)d(applicable.)1888
5506 y Fy(216)p eop end
%%Page: 217 27
TeXDict begin 217 26 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)p
151 161 3598 4 v 151 1523 4 1363 v 202 248 a Fz(algorithm)g
Fv(e)n(v)n(aluate-axiom-layer\()p Ft(s)p Fv(,)j Fo(A)1568
262 y Fk(i)1596 248 y Fv(\):)438 361 y Fz(f)n(or)c(each)f
Fv(axiom)h Ft(a)h Fo(2)g(A)1256 375 y Fk(i)1284 361 y
Fv(:)674 474 y Ft(a)p Fv(.counter)j Fm(:=)d Fo(j)p Ft(a)p
Fv(.cond)r Fo(j)438 587 y Fz(f)n(or)f(each)f Fv(v)n(ariable)i
Ft(v)s Fv(:)674 700 y Fz(f)n(or)f(each)f Fv(axiom)h Ft(a)i
Fo(2)f(A)1493 714 y Fk(i)1543 700 y Fv(with)e(a)h(condition)i
Ft(v)i Fm(=)d Ft(s)p Fm(\()p Ft(v)s Fm(\))f Fv(in)f(the)h(body:)911
813 y Ft(a)p Fv(.counter)j Fm(:=)f Ft(a)p Fv(.counter)c
Fo(\000)e Fm(1)438 926 y Fz(while)j Fv(there)h(e)o(xists)h(an)e(axiom)h
Ft(a)i Fo(2)f(A)1692 940 y Fk(i)1742 926 y Fv(with)e
Ft(a)p Fv(.counter)28 b Fm(=)d(0)e Fv(that)h(w)o(as)g(not)f(yet)h
(considered:)674 1038 y(Let)f Fo(h)p Ft(v)s(;)15 b(d)p
Fo(i)25 b Fv(be)e(the)h(head)h(of)e(such)h(an)g(axiom.)674
1151 y Fz(if)g Ft(s)p Fm(\()p Ft(v)s Fm(\))i Fo(6)p Fm(=)f
Ft(d)p Fv(:)911 1264 y Ft(s)p Fm(\()p Ft(v)s Fm(\))h(:=)f
Ft(d)911 1377 y Fz(f)n(or)e(each)h Fv(axiom)g Ft(a)h
Fo(2)g(A)1729 1391 y Fk(i)1779 1377 y Fv(with)f(a)f(condition)j
Ft(v)i Fm(=)d Ft(d)e Fv(in)h(the)g(body:)1147 1490 y
Ft(a)p Fv(.counter)k Fm(:=)d Ft(a)p Fv(.counter)d Fo(\000)e
Fm(1)p 3746 1523 V 151 1526 3598 4 v 448 1779 a Fv(Figure)k(16:)30
b(Computing)25 b(the)e(v)n(alues)i(of)f(the)f(deri)n(v)o(ed)i(v)n
(ariables)h(in)d(a)g(gi)n(v)o(en)h(planning)i(state.)291
2087 y(T)-7 b(o)25 b(b)n(uild)j(a)d(successor)k(generator)f(for)f
Fm(\005)p Fv(,)f(we)f(apply)i(a)f(top-do)n(wn)h(algorithm)h(which)f
(considers)h(the)f(task)150 2200 y(v)n(ariables)c(in)d(an)h(arbitrary)h
(order)g Ft(v)1280 2214 y Fs(1)1345 2200 y Fo(\036)j
Ft(v)1485 2214 y Fs(2)1549 2200 y Fo(\036)g(\001)15 b(\001)g(\001)27
b(\036)e Ft(v)1917 2214 y Fk(n)1964 2200 y Fv(.)i(At)19
b(the)i(root)g(node,)h(we)e(choose)i Ft(v)3083 2214 y
Fs(1)3142 2200 y Fv(as)f(selection)i(v)n(ari-)150 2313
y(able)i(and)h(classify)g(the)g(set)f(of)f(operators)k(according)f(to)e
(their)g(preconditions)k(with)c(respect)i(to)d Ft(v)3297
2327 y Fs(1)3337 2313 y Fv(.)32 b(Operators)150 2426
y(with)22 b(a)f(precondition)26 b Ft(v)919 2440 y Fs(1)983
2426 y Fm(=)f Ft(d)d Fv(will)f(be)h(represented)j(in)d(the)g(child)h
(of)f(the)g(root)g(accessed)i(by)e(the)h(edge)f(with)g(the)150
2539 y(corresponding)34 b(label,)f(while)d(operators)j(without)e
(preconditions)j(on)d Ft(v)2525 2553 y Fs(1)2593 2539
y Fv(will)f(be)g(represented)k(in)c(the)g(child)150 2652
y(of)e(the)g(root)g(accessed)i(by)e(the)h(don')n(t)g(care)f(edge.)43
b(In)28 b(the)g(children)i(of)d(the)i(root,)g(we)e(choose)i
Ft(v)3257 2666 y Fs(2)3324 2652 y Fv(as)f(selection)150
2765 y(v)n(ariable,)d(in)e(the)h(grandchildren)k Ft(v)1285
2779 y Fs(3)1324 2765 y Fv(,)23 b(and)h(so)f(on.)291
2893 y(There)g(is)g(one)h(e)o(xception)h(to)e(this)g(rule)h(to)f(a)n(v)
n(oid)h(creating)h(unnecessary)i(selection)e(nodes:)30
b(If)23 b(no)g(operator)150 3006 y(in)g(a)g(certain)i(branch)g(of)e
(the)h(tree)g(has)f(a)g(condition)j(on)e Ft(v)1967 3020
y Fk(i)1995 3006 y Fv(,)e(then)i Ft(v)2263 3020 y Fk(i)2314
3006 y Fv(is)f(not)h(considered)j(as)c(a)g(selection)i(v)n(ariable)150
3119 y(in)d(this)h(branch.)30 b(The)21 b(construction)26
b(of)c(a)g(branch)i(ends)f(when)f(all)g(v)n(ariables)j(ha)n(v)o(e)e
(been)g(considered,)i(at)d(which)150 3232 y(stage)j(a)e(generator)j
(node)e(is)f(created)j(for)d(the)h(operators)i(associated)h(with)c
(that)h(branch.)152 3469 y(5)t(.)t(3)t(.)t(2)53 b(A)t
Fr(X)t(I)t(O)t(M)28 b Fv(E)t Fr(V)-6 b(A)t(L)t(U)q(A)l(T)s(O)t(R)t(S)
150 3645 y Fv(Axiom)36 b(e)n(v)n(aluators)j(are)e(a)f(simple)h(data)g
(structure)i(used)e(for)g(ef)n(\002ciently)h(implementing)g(the)f
(well-kno)n(wn)150 3758 y Fq(marking)25 b(algorithm)h
Fv(for)e(propositional)k(Horn)d(logic)g(\(Do)n(wling)f(&)f(Gallier)l(,)
i(1984\),)g(e)o(xtended)h(and)f(modi\002ed)150 3871 y(for)f(the)g
(layered)i(logic)f(programs)g(that)g(correspond)i(to)c(the)i(axioms)f
(of)g(an)g(MPT)-7 b(.)22 b(The)o(y)i(consist)h(of)f(tw)o(o)g(parts.)150
3984 y(Firstly)-6 b(,)31 b(an)e(inde)o(xing)i(data)f(structure)h(maps)e
(a)g(gi)n(v)o(en)h(v)n(ariable/v)n(alue)i(pairing)f(and)f(a)e(gi)n(v)o
(en)i(axiom)f(layer)h(to)150 4097 y(the)25 b(set)f(of)g(axioms)i(in)e
(the)g(gi)n(v)o(en)h(layer)h(in)e(whose)h(body)g(the)g(pairing)h
(appears.)33 b(Secondly)-6 b(,)26 b(a)d(set)i(of)f(counters,)150
4210 y(one)g(for)g(each)g(axiom,)g(counts)h(the)f(number)g(of)g
(conditions)i(of)e(the)f(axiom)h(that)g(ha)n(v)o(e)h(not)f(yet)f(been)i
(deri)n(v)o(ed.)291 4338 y(W)l(ithin)g(F)o(ast)e(Do)n(wnw)o(ard,)h
(axioms)g(are)g(e)n(v)n(aluated)i(in)e(tw)o(o)f(steps.)30
b(First,)24 b(all)g(deri)n(v)o(ed)h(v)n(ariables)g(are)f(set)g(to)150
4451 y(their)g(def)o(ault)h(v)n(alue)f Fo(?)p Fv(.)j(Second,)d
(algorithm)h Fq(e)o(valuate-axiom-layer)30 b Fv(\(Fig.)23
b(16\))g(is)g(e)o(x)o(ecuted)i(for)e(each)h(axiom)150
4564 y(layer)g(in)g(sequence)i(to)d(determine)j(the)d(\002nal)h(v)n
(alues)g(of)g(the)g(deri)n(v)o(ed)g(v)n(ariables.)291
4693 y(W)-7 b(e)27 b(assume)i(that)f(the)h(reader)g(is)f(f)o(amiliar)h
(enough)g(with)f(the)g(marking)i(algorithm)f(not)g(to)e(require)j(much)
150 4806 y(e)o(xplanation,)e(so)d(we)f(only)i(point)g(out)f(that)g(the)
g(test)h(whether)g(or)f(not)g(an)g(axiom)g(is)g(ready)h(to)e(trigger)j
(is)e(imple-)150 4918 y(mented)f(by)f(means)h(of)f(a)g(queue)i(in)e
(which)g(axioms)h(are)g(put)f(as)g(soon)i(as)e(their)h(counter)h
(reaches)g(0.)j(The)23 b(actual)150 5031 y(implementation)29
b(of)e Fq(e)o(valuate-axiom-layer)34 b Fv(within)26 b(F)o(ast)g(Do)n
(wnw)o(ard)h(initializes)i(axiom)e(counters)h(slightly)150
5144 y(more)23 b(ef)n(\002ciently)h(than)g(indicated)h(by)e(the)g
(pseudo-code.)33 b(Ho)n(we)n(v)o(er)l(,)22 b(this)i(is)e(a)h(minor)g
(technical)i(detail,)f(so)f(we)150 5257 y(turn)h(to)g(the)f(remaining)j
(piece)e(of)g(F)o(ast)f(Do)n(wnw)o(ard')-5 b(s)24 b(architecture,)i
(the)e(search)h(component.)1888 5506 y Fy(217)p eop end
%%Page: 218 28
TeXDict begin 218 27 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)150
249 y Fw(6.)35 b(Sear)n(ch)150 421 y Fv(Unlik)o(e)h(the)f(translation)i
(and)f(kno)n(wledge)g(compilation)i(components,)h(for)c(which)h(there)f
(is)g(only)g(a)g(single)150 534 y(mode)25 b(of)f(e)o(x)o(ecution,)j
(the)e(search)h(component)h(of)d(F)o(ast)g(Do)n(wnw)o(ard)h(can)g
(perform)h(its)e(w)o(ork)h(in)g(v)n(arious)h(alter)n(-)150
647 y(nati)n(v)o(e)e(w)o(ays.)29 b(There)24 b(are)g(three)g(basic)h
(search)f(algorithms)i(to)e(choose)h(from:)264 835 y(1.)45
b Fq(Gr)m(eedy)28 b(best-\002r)o(st)i(sear)m(c)o(h:)37
b Fv(This)27 b(is)g(the)h(standard)i(te)o(xtbook)f(algorithm)g
(\(Russell)f(&)e(Norvig,)j(2003\),)377 948 y(modi\002ed)d(with)f(a)g
(technique)j(called)e Fq(deferr)m(ed)h(heuristic)h(e)o(valuation)g
Fv(to)d(mitigate)h(the)f(ne)o(gati)n(v)o(e)h(in\003u-)377
1061 y(ence)i(of)f(wide)g(branching.)42 b(W)-7 b(e)27
b(ha)n(v)o(e)g(also)h(e)o(xtended)h(the)f(algorithm)g(to)f(deal)h(with)
f Fq(pr)m(eferr)m(ed)i(oper)o(a-)377 1174 y(tor)o(s)p
Fv(,)c(similar)h(to)e(FF')-5 b(s)23 b(helpful)k(actions)f(\(Hof)n
(fmann)f(&)e(Nebel,)i(2001\).)33 b(W)-7 b(e)24 b(discuss)i(greedy)g
(best-\002rst)377 1287 y(search)36 b(in)e(Section)i(6.3.)61
b(F)o(ast)33 b(Do)n(wnw)o(ard)i(uses)g(this)g(algorithm)h(together)g
(with)f(the)f(causal)i(graph)377 1400 y(heuristic,)26
b(discussed)g(in)d(Section)i(6.1.)264 1579 y(2.)45 b
Fq(Multi-heuristic)23 b(best-\002r)o(st)f(sear)m(c)o(h:)28
b Fv(This)19 b(is)g(a)g(v)n(ariation)i(of)f(greedy)g(best-\002rst)h
(search)g(which)e(e)n(v)n(aluates)377 1692 y(search)37
b(states)f(using)g(multiple)g(heuristic)h(estimators,)j(maintaining)d
(separate)g(open)f(lists)g(for)f(each.)377 1805 y(Lik)o(e)24
b(our)g(v)n(ariant)i(of)e(greedy)h(best-\002rst)g(search,)g(it)f
(supports)i(the)e(use)h(of)f Fq(pr)m(eferr)m(ed)h(oper)o(ator)o(s)p
Fv(.)33 b(Multi-)377 1918 y(heuristic)k(best-\002rst)e(search)h(is)e
(discussed)j(in)d(Section)h(6.4.)61 b(F)o(ast)34 b(Do)n(wnw)o(ard)g
(uses)h(this)f(algorithm)377 2031 y(together)26 b(with)d(the)h(causal)h
(graph)g(and)f(FF)e(heuristics,)j(discussed)i(in)c(Sections)i(6.1)e
(and)h(6.2.)264 2210 y(3.)45 b Fq(F)-10 b(ocused)37 b(iter)o(ative-br)l
(oadenin)q(g)j(sear)m(c)o(h:)53 b Fv(This)35 b(is)g(a)g(simple)h
(search)g(algorithm)h(that)e(does)h(not)g(use)377 2323
y(heuristic)e(estimators,)i(and)c(instead)h(reduces)h(the)e(v)n(ast)g
(set)f(of)h(search)h(possibilities)i(by)d(focusing)i(on)377
2436 y(a)28 b(limited)g(operator)i(set)e(deri)n(v)o(ed)h(from)f(the)g
(causal)h(graph.)43 b(It)27 b(is)h(an)g(e)o(xperimental)i(algorithm;)i
(in)c(the)377 2549 y(future,)c(we)e(hope)h(to)g(further)h(de)n(v)o
(elop)g(the)f(basic)g(idea)g(of)g(this)g(algorithm)h(into)g(a)e(more)g
(rob)n(ust)j(method.)377 2662 y(F)o(ocused)g(iterati)n(v)o
(e-broadening)k(search)c(is)e(discussed)j(in)e(Section)g(6.5.)291
2850 y(F)o(or)32 b(the)i(tw)o(o)e(heuristic)k(search)e(algorithms,)j(a)
c(second)i(choice)f(must)f(be)g(made)h(re)o(garding)g(the)g(use)f(of)
150 2963 y Fq(pr)m(eferr)m(ed)25 b(oper)o(ator)o(s)p
Fv(.)32 b(There)23 b(are)h(\002)n(v)o(e)e(options)k(supported)g(by)e
(the)g(planner:)264 3130 y(1.)45 b(Do)23 b(not)h(use)g(preferred)i
(operators.)264 3310 y(2.)45 b(Use)23 b(the)h Fq(helpful)h(tr)o
(ansitions)i Fv(of)c(the)h(causal)h(graph)g(heuristic)h(as)d(preferred)
j(operators.)264 3489 y(3.)45 b(Use)23 b(the)h Fq(helpful)h(actions)h
Fv(of)d(the)h(FF)e(heuristic)k(as)d(preferred)j(operators.)264
3669 y(4.)45 b(Use)29 b(helpful)h(transitions)i(as)c(preferred)j
(operators,)i(f)o(alling)d(back)g(to)e(helpful)j(actions)f(if)f(there)g
(are)g(no)377 3781 y(helpful)d(transitions)g(in)e(the)f(current)j
(search)e(state.)264 3961 y(5.)45 b(Use)23 b(both)i(helpful)g
(transitions)i(and)d(helpful)h(actions)g(as)f(preferred)h(operators.)
291 4128 y(Each)32 b(of)h(these)g(\002)n(v)o(e)e(options)j(can)f(be)g
(combined)h(with)e(an)o(y)g(of)g(the)h(tw)o(o)f(heuristic)j(search)e
(algorithms,)150 4241 y(so)e(that)h(there)g(is)g(a)e(total)j(of)e(ele)n
(v)o(en)h(possible)h(settings)h(for)d(the)h(search)h(component,)i(ten)c
(using)i(one)f(of)f(the)150 4354 y(heuristic)26 b(algorithms)f(and)f
(one)g(using)h(focused)h(iterati)n(v)o(e-broadening)j(search.)291
4467 y(In)g(addition)i(to)d(these)i(basic)g(settings,)i(the)d(search)h
(component)h(can)e(be)g(con\002gured)i(to)d(e)o(x)o(ecute)i(se)n(v)o
(eral)150 4580 y(alternati)n(v)o(e)25 b(con\002gurations)i(in)22
b(parallel)j(by)e(making)h(use)f(of)g(an)g(internal)i(scheduler)-5
b(.)31 b(Both)23 b(con\002gurations)j(of)150 4693 y(F)o(ast)g(Do)n(wnw)
o(ard)g(that)h(participated)j(in)c(IPC4)f(made)i(use)f(of)h(this)f
(feature)i(by)f(running)h(one)f(con\002guration)i(of)150
4806 y(the)24 b(heuristic)i(search)f(algorithms)g(in)f(parallel)h(with)
f(focused)h(iterati)n(v)o(e-broadening)k(search.)h(As)23
b(its)h(heuristic)150 4918 y(search)i(algorithm,)h(the)e
(con\002guration)i Fq(F)-7 b(ast)25 b(Downwar)m(d)i Fv(emplo)o(yed)g
(greedy)f(best-\002rst)g(search)g(with)e(helpful)150
5031 y(transitions,)32 b(f)o(alling)d(back)g(to)f(helpful)i(actions)f
(when)f(necessary)j(\(option)f(4.\).)41 b(The)28 b(con\002guration)j
Fq(F)-7 b(ast)28 b(Di-)150 5144 y(a)o(gonally)d(Downwar)m(d)f
Fv(emplo)o(yed)g(multi-heuristic)i(best-\002rst)e(search)f(using)h
(helpful)g(transitions)h(and)d(helpful)150 5257 y(actions)j(as)f
(preferred)i(operators)g(\(option)f(5.\).)1888 5506 y
Fy(218)p eop end
%%Page: 219 29
TeXDict begin 219 28 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)291
249 y Fv(T)-7 b(o)29 b(a)n(v)n(oid)i(confusion)i(between)e(the)f
(complete)h(F)o(ast)f(Do)n(wnw)o(ard)f(planning)k(system)d(and)h(the)f
(particular)150 361 y(con\002guration)e(called)e(\223F)o(ast)e(Do)n
(wnw)o(ard\224,)h(we)f(will)g(refer)i(to)f(the)g(IPC4)e(planner)k
(con\002gurations)h(as)d Fq(FD)e Fv(and)150 474 y Fq(FDD)f
Fv(for)h(the)h(rest)g(of)g(this)g(paper)-5 b(.)29 b(The)24
b(name)f(of)h(the)f(planning)j(system)f(as)e(a)g(whole)h(is)f(ne)n(v)o
(er)h(abbre)n(viated.)150 714 y Fz(6.1)46 b(The)22 b(Causal)i(Graph)e
(Heuristic)150 882 y Fv(The)27 b Fq(causal)j(gr)o(aph)f(heuristic)h
Fv(is)d(the)h(centrepiece)j(of)d(F)o(ast)f(Do)n(wnw)o(ard')-5
b(s)29 b(heuristic)h(search)f(engine.)43 b(It)27 b(esti-)150
995 y(mates)21 b(the)h(cost)g(of)f(reaching)i(the)f(goal)g(from)f(a)g
(gi)n(v)o(en)g(search)i(state)f(by)f(solving)i(a)e(number)h(of)f
(subproblems)j(of)150 1108 y(the)19 b(planning)j(task)e(which)f(are)h
(deri)n(v)o(ed)g(by)f(looking)j(at)d(small)g(\223windo)n(ws\224)h(of)f
(the)h(\(pruned\))h(causal)g(graph.)28 b(F)o(or)150 1221
y(some)e(additional)j(intuitions)g(about)f(the)e(design)i(of)e(the)g
(heuristic)j(and)e(a)e(discussion)30 b(of)c(theoretical)j(aspects,)150
1334 y(we)23 b(refer)h(to)f(the)h(article)h(in)f(which)g(the)f
(heuristic)j(w)o(as)d(\002rst)h(introduced)i(\(Helmert,)e(2004\).)152
1561 y(6)t(.)t(1)t(.)t(1)53 b(C)t Fr(O)t(N)t(C)t(E)t(P)t(T)t(U)q(A)t(L)
31 b Fv(V)t Fr(I)t(E)t(W)d(O)t(F)g(T)t(H)t(E)h Fv(C)t
Fr(AU)t(S)t(A)t(L)f Fv(G)t Fr(R)t(A)t(P)t(H)g Fv(H)t
Fr(E)t(U)t(R)t(I)t(S)t(T)t(I)t(C)150 1729 y Fv(F)o(or)g(each)i(state)g
(v)n(ariable)h Ft(v)h Fv(and)e(each)g(pair)g(of)f(v)n(alues)h
Ft(d;)15 b(d)2109 1696 y Fu(0)2169 1729 y Fo(2)36 b(D)2336
1743 y Fk(v)2377 1729 y Fv(,)29 b(the)h(causal)h(graph)f(heuristic)i
(computes)150 1842 y(a)26 b(heuristic)i(estimate)g Fq(cost)1029
1856 y Fk(v)1070 1842 y Fm(\()p Ft(d;)15 b(d)1239 1809
y Fu(0)1264 1842 y Fm(\))25 b Fv(for)i(the)f(cost)h(of)f(changing)j
(the)d(v)n(alue)i(of)e Ft(v)i Fv(from)f Ft(d)e Fv(to)h
Ft(d)3172 1809 y Fu(0)3196 1842 y Fv(,)g(assuming)i(that)150
1955 y(all)d(other)h(state)g(v)n(ariables)h(carry)f(the)f(same)g(v)n
(alues)i(as)d(in)h(the)h(current)g(state.)34 b(\(This)25
b(is)g(a)g(simpli\002cation.)35 b(Cost)150 2068 y(estimates)28
b(are)e(not)g(computed)i(for)e(state)h(v)n(ariables)h
Ft(v)h Fv(or)d(v)n(alues)h Ft(d)f Fv(for)g(which)g(the)o(y)h(are)f(ne)n
(v)o(er)h(required.)38 b(W)-7 b(e)150 2181 y(ignore)33
b(this)e(f)o(act)h(when)f(discussing)k(the)c(heuristic)j(on)d(the)g
(conceptual)j(le)n(v)o(el.\))53 b(The)30 b(heuristic)k(estimate)e(of)
150 2294 y(a)j(gi)n(v)o(en)h(state)g Ft(s)e Fv(is)i(the)f(sum)g(o)o(v)o
(er)h(the)f(costs)i Fq(cost)1865 2308 y Fk(v)1906 2294
y Fm(\()p Ft(s)p Fm(\()p Ft(v)s Fm(\))p Ft(;)15 b(s)2184
2308 y Fk(?)2225 2294 y Fm(\()p Ft(v)s Fm(\)\))36 b Fv(for)f(all)h(v)n
(ariables)h Ft(v)h Fv(for)e(which)g(a)e(goal)150 2407
y(condition)26 b Ft(s)559 2421 y Fk(?)598 2407 y Fm(\()p
Ft(v)s Fm(\))e Fv(is)f(de\002ned.)291 2527 y(Conceptually)-6
b(,)31 b(cost)c(estimates)h(are)f(computed)i(one)e(v)n(ariable)h(after)
g(the)f(other)l(,)i(tra)n(v)o(ersing)g(the)e(\(pruned\))150
2639 y(causal)i(graph)g(in)e(a)g(bottom-up)j(f)o(ashion.)42
b(By)27 b(bottom-up,)j(we)d(mean)h(that)g(we)f(start)h(with)f(the)h(v)n
(ariables)i(that)150 2752 y(ha)n(v)o(e)d(no)g(predecessors)j(in)c(the)h
(causal)h(graphs;)i(we)c(call)h(this)g(order)g(of)g(computation)i
(\223bottom-up\224)g(because)150 2865 y(we)34 b(consider)k(v)n
(ariables)f(that)f(can)g(change)h(their)f(state)g(of)f(their)h(o)n(wn)f
(accord)i Fq(low-le)o(vel)p Fv(,)i(while)c(v)n(ariables)150
2978 y(whose)27 b(state)h(transitions)i(require)f(the)e(help)h(of)e
(other)i(v)n(ariables)h(ha)n(v)o(e)f(more)f(comple)o(x)h(transition)h
(semantics)150 3091 y(and)36 b(are)g(thus)g(considered)i
Fq(high-le)o(vel)p Fv(.)67 b(Note)35 b(that)h(in)g(our)f(\002gures)h
(depicting)i(causal)f(graphs,)j Fq(high-le)o(vel)150
3204 y Fv(v)n(ariables)26 b(are)d(typically)j(displayed)g(near)f(the)e
Fq(bottom)p Fv(.)291 3324 y(F)o(or)30 b(v)n(ariables)k(without)e
(predecessors)j(in)c(the)h(causal)g(graph,)i Fq(cost)2515
3338 y Fk(v)2556 3324 y Fm(\()p Ft(d;)15 b(d)2725 3291
y Fu(0)2749 3324 y Fm(\))31 b Fv(simply)h(equals)h(the)e(cost)h(of)150
3437 y(a)c(shortest)i(path)f(from)f Ft(d)g Fv(to)g Ft(d)1136
3404 y Fu(0)1187 3437 y Fv(in)g(the)h(\(pruned\))h(domain)g(transition)
g(graph)g Fq(DTG)o Fm(\()p Ft(v)s Fm(\))p Fv(.)43 b(F)o(or)27
b(other)i(v)n(ariables,)150 3550 y(cost)34 b(estimates)h(are)f(also)g
(computed)h(by)e(graph)i(search)g(in)e(the)h(domain)g(transition)i
(graph.)59 b(Ho)n(we)n(v)o(er)l(,)36 b(the)150 3663 y(conditions)g(of)e
(transitions)i(must)e(be)f(tak)o(en)i(into)f(account)h(during)g(path)g
(planning,)j(so)33 b(that)h(in)g(addition)h(to)150 3776
y(counting)22 b(the)e(number)h(of)f(transitions)j(required)f(to)e
(reach)h(the)f(destination)j(v)n(alue,)e(we)e(also)i(consider)h(the)e
(costs)150 3888 y(for)k(achie)n(ving)i(the)d(v)n(alue)i(changes)g(of)f
(the)g(other)g(v)n(ariables)i(necessary)g(to)d(set)h(up)g(the)g
(transition)i(conditions.)291 4008 y(The)j(important)h(point)g(here)g
(is)e(that)i(in)e(computing)j(the)e(v)n(alues)h Fq(cost)2554
4022 y Fk(v)2595 4008 y Fm(\()p Ft(d;)15 b(d)2764 3975
y Fu(0)2788 4008 y Fm(\))p Fv(,)30 b(we)e(completely)j(consider)150
4121 y(all)i(interactions)j(of)d(the)g(state)h(v)n(ariable)h
Ft(v)g Fv(with)e(its)g(predecessors)j(in)d(the)h(causal)g(graph.)58
b(If)33 b(changing)i(the)150 4234 y(v)n(alue)30 b(from)f
Ft(d)g Fv(to)h Ft(d)801 4201 y Fu(0)853 4234 y Fv(requires)h(se)n(v)o
(eral)g(steps)f(and)g(each)g(of)f(these)h(steps)h(has)f(an)f
(associated)j(condition)g(on)e(a)150 4347 y(v)n(ariable)23
b Ft(v)508 4314 y Fu(0)532 4347 y Fv(,)d(then)i(we)f(realize)h(that)g
Ft(v)1345 4314 y Fu(0)1389 4347 y Fv(must)g(assume)g(the)f(v)n(alues)i
(required)g(by)e(those)i(conditions)h Fq(in)d(sequence)p
Fv(.)150 4460 y(F)o(or)j(e)o(xample,)h(if)f Ft(v)j Fv(represents)g(a)d
(package)j(in)d(a)g(transportation)29 b(task)c(that)g(must)f(be)h(mo)o
(v)o(ed)f(from)h Ft(A)f Fv(to)g Ft(B)k Fv(by)150 4573
y(means)i(of)f(a)f(v)o(ehicle)j(located)g(at)d Ft(C)7
b Fv(,)29 b(then)h(we)e(recognize)k(that)e(the)f(v)o(ehicle)i(must)e
(\002rst)f(mo)o(v)o(e)h(from)g Ft(C)35 b Fv(to)29 b Ft(A)150
4686 y Fv(and)h(then)h(from)f Ft(A)f Fv(to)h Ft(B)k Fv(in)c(order)g(to)
g(drop)h(the)f(package)i(at)e Ft(B)5 b Fv(.)47 b(This)29
b(is)h(v)o(ery)g(dif)n(ferent)i(to)e(the)g(w)o(ay)g(HSP-)150
4799 y(or)h(FF-based)g(heuristics)i(w)o(ork)e(on)g(such)g(e)o(xamples.)
52 b(Ho)n(we)n(v)o(er)l(,)32 b(we)e(only)h(consider)i(interactions)h
(with)d(the)150 4912 y Fq(immediate)23 b Fv(predecessors)j(of)c
Ft(v)j Fv(in)d(the)h(causal)g(graph.)30 b(Interactions)25
b(that)e(occur)g(via)g(se)n(v)o(eral)g(graph)g(layers)h(are)150
5024 y(not)g(captured)i(by)d(the)h(heuristic)i(estimator)-5
b(.)291 5144 y(In)22 b(essence,)j(we)c(compute)j Fq(cost)1319
5158 y Fk(v)1360 5144 y Fm(\()p Ft(d;)15 b(d)1529 5111
y Fu(0)1554 5144 y Fm(\))22 b Fv(by)g(solving)j(a)c(particular)k
(subproblem)g(of)e(the)f(MPT)-7 b(,)21 b(induced)j(by)150
5257 y(the)f(v)n(ariable)i Ft(v)g Fv(and)f(its)f(predecessors)j(in)d
(the)g(pruned)i(causal)f(graph.)30 b(F)o(or)22 b(this)i(subproblem,)h
(we)d(assume)i(that)1888 5506 y Fy(219)p eop end
%%Page: 220 30
TeXDict begin 220 29 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)p
151 161 3598 4 v 151 1882 4 1722 v 202 248 a Fz(algorithm)25
b Fv(compute-costs-bottom-up)q(\()p Fm(\005)p Fv(,)k
Ft(s)p Fv(\):)438 361 y Fz(f)n(or)24 b(each)f Fv(v)n(ariable)i
Ft(v)i Fv(of)c Fm(\005)p Fv(,)g(tra)n(v)o(ersing)j(the)e(pruned)h
(causal)g(graph)f(in)g(bottom-up)h(order:)674 474 y(Let)e
Fo(V)881 441 y Fu(0)928 474 y Fv(be)g(the)h(set)g(of)f(immediate)i
(predecessors)i(of)c Ft(v)j Fv(in)e(the)g(pruned)h(causal)g(graph.)674
587 y Fz(f)n(or)f(each)f Fv(pair)h(of)g(v)n(alues)h Fm(\()p
Ft(d;)15 b(d)1695 554 y Fu(0)1719 587 y Fm(\))26 b Fo(2)f(D)1936
601 y Fk(v)1997 587 y Fo(\002)20 b(D)2158 601 y Fk(v)2199
587 y Fv(:)911 700 y(Generate)k(a)g(planning)h(task)g
Fm(\005)1903 715 y Fk(v)r(;d;d)2051 696 y Fh(0)2101 700
y Fv(with)e(the)h(follo)n(wing)h(components:)1002 813
y(\227)d Fq(V)-10 b(ariables:)31 b Fo(V)1580 780 y Fu(0)1624
813 y Fo([)20 b(f)p Ft(v)s Fo(g)p Fv(.)1002 926 y(\227)i
Fq(Initial)j(state:)30 b Ft(v)f Fm(=)c Ft(d)e Fv(and)h
Ft(v)2030 893 y Fu(0)2079 926 y Fm(=)h Ft(s)p Fm(\()p
Ft(v)2300 893 y Fu(0)2323 926 y Fm(\))e Fv(for)h(all)g
Ft(v)2671 893 y Fu(0)2720 926 y Fo(2)h(V)2869 893 y Fu(0)2892
926 y Fv(.)1002 1038 y(\227)d Fq(Goal:)29 b Ft(v)g Fm(=)c
Ft(d)1571 1005 y Fu(0)1595 1038 y Fv(.)1002 1151 y(\227)d
Fq(Axioms)i(and)g(oper)o(ator)o(s:)1115 1264 y Fv(1.)29
b(Those)23 b(corresponding)28 b(to)c(transitions)i(in)e(the)g(pruned)h
(DTG)c(of)j Ft(v)s Fv(.)1115 1377 y(2.)29 b(F)o(or)22
b(all)i(v)n(ariables)h Ft(v)1868 1344 y Fu(0)1917 1377
y Fo(2)g(V)2066 1344 y Fu(0)2112 1377 y Fv(and)f(v)n(alues)h
Ft(e;)15 b(e)2643 1344 y Fu(0)2693 1377 y Fo(2)25 b(D)2849
1392 y Fk(v)2885 1374 y Fh(0)2912 1377 y Fv(,)d(an)i(operator)1206
1490 y(with)f(precondition)28 b Ft(v)1920 1457 y Fu(0)1969
1490 y Fm(=)d Ft(e)p Fv(,)d(ef)n(fect)j Ft(v)2427 1457
y Fu(0)2476 1490 y Fm(=)g Ft(e)2614 1457 y Fu(0)2660
1490 y Fv(and)f(cost)g Fq(cost)3129 1457 y Fu(0)3129
1513 y Fk(v)3170 1490 y Fm(\()p Ft(e;)15 b(e)3329 1457
y Fu(0)3354 1490 y Fm(\))p Fv(.)1206 1603 y Fo(f)23 b
Fv(Note)h(that)g(all)f(v)n(ariables)j Ft(v)2142 1570
y Fu(0)2191 1603 y Fo(2)f(V)2340 1570 y Fu(0)2386 1603
y Fv(ha)n(v)o(e)f(been)h(considered)h(pre)n(viously)-6
b(,)1280 1716 y(so)23 b(that)h(their)h(cost)f(v)n(alues)h(are)e(kno)n
(wn.)29 b Fo(g)911 1829 y Fv(Set)23 b Fq(cost)1196 1843
y Fk(v)1237 1829 y Fm(\()p Ft(d;)15 b(d)1406 1796 y Fu(0)1431
1829 y Fm(\))23 b Fv(to)g(the)h(cost)g(of)g(a)f(plan)h
Ft(\031)i Fv(that)e(solv)o(es)g Fm(\005)2779 1844 y Fk(v)r(;d;d)2927
1825 y Fh(0)2955 1829 y Fv(.)p 3746 1882 V 151 1885 3598
4 v 150 2155 a(Figure)g(17:)47 b(The)34 b Fq(compute-costs-bottom-up)41
b Fv(algorithm,)d(a)c(high-le)n(v)o(el)j(description)h(of)c(the)h
(causal)h(graph)572 2268 y(heuristic.)150 2656 y Ft(v)28
b Fv(is)d(initially)i(set)f(to)f Ft(d)p Fv(,)g(we)f(w)o(ant)i
Ft(v)h Fv(to)f(assume)g(the)f(v)n(alue)h Ft(d)2121 2623
y Fu(0)2145 2656 y Fv(,)f(and)g(all)h(other)g(state)g(v)n(ariables)h
(carry)g(the)e(same)150 2769 y(v)n(alue)g(as)f(in)g(the)h(current)h
(state.)31 b(W)-7 b(e)23 b(call)i(this)g(planning)h(problem)g(the)e
Fq(local)h(subpr)l(oblem)i(for)d Ft(v)s Fq(,)g Ft(d)g
Fq(and)g Ft(d)3604 2736 y Fu(0)3628 2769 y Fv(,)f(or)150
2882 y(the)h Fq(local)g(subpr)l(oblem)i(for)e Ft(v)i
Fq(and)e Ft(d)f Fv(if)h(we)e(lea)n(v)o(e)j(the)e(tar)n(get)j(v)n(alue)e
Ft(d)2409 2849 y Fu(0)2455 2882 y Fv(open.)291 3009 y(F)o(or)h(a)h
(formalization)i(of)e(these)h(intuiti)n(v)o(e)h(notions)f(of)f(ho)n(w)f
(the)i Fq(cost)h Fv(estimates)f(are)f(generated,)j(consider)150
3122 y(the)g(pseudo-code)j(in)d(Fig.)f(17.)44 b(It)29
b(does)g(not)g(re\003ect)g(the)g(w)o(ay)g(the)g(heuristic)i(v)n(alues)f
(are)f(actually)h(computed)150 3235 y(within)d(F)o(ast)e(Do)n(wnw)o
(ard;)i(the)g(algorithm)g(in)f(the)h(\002gure)f(w)o(ould)g(be)g(f)o(ar)
h(too)f(e)o(xpensi)n(v)o(e)i(to)e(e)n(v)n(aluate)h(for)f(each)150
3348 y(search)g(state.)35 b(Ho)n(we)n(v)o(er)l(,)25 b(it)f(computes)j
(the)f(same)f(cost)g(v)n(alues)i(as)e(F)o(ast)f(Do)n(wnw)o(ard)h(does,)
h(pro)o(vided)h(that)f(the)150 3461 y(algorithm)f(generating)g(the)e
(plans)h Ft(\031)h Fv(in)e(the)g(last)g(line)g(of)g(the)g(algorithm)i
(is)d(the)h(same)g(one)g(as)g(the)g(one)g(used)h(for)150
3574 y(the)g(\223real\224)h(cost)f(estimator)-5 b(.)152
3810 y(6)t(.)t(1)t(.)t(2)53 b(C)t Fr(O)t(M)t(P)t(U)t(T)m(A)l(T)t(I)t(O)
t(N)31 b(O)t(F)c(T)t(H)t(E)i Fv(C)t Fr(AU)t(S)t(A)t(L)g
Fv(G)t Fr(R)t(A)t(P)t(H)e Fv(H)t Fr(E)t(U)t(R)t(I)t(S)t(T)t(I)t(C)150
3985 y Fv(The)22 b(actual)h(computation)i(of)d(the)g(causal)h(graph)h
(heuristic)g(tra)n(v)o(erses)g(the)e(causal)i(graph)f(in)f(a)g(top-do)n
(wn)h(direc-)150 4098 y(tion)29 b(starting)i(from)e(the)g(goal)g(v)n
(ariables,)j(rather)e(than)g(bottom-up)h(starting)f(from)f(v)n
(ariables)i(without)f(causal)150 4211 y(predecessors.)i(In)24
b(f)o(act,)f(this)h(top-do)n(wn)h(tra)n(v)o(ersal)g(of)f(the)f(causal)i
(graph)g(is)e(the)g(reason)i(for)f(F)o(ast)f(Do)n(wnw)o(ard')-5
b(s)150 4324 y(name.)291 4452 y(Computing)24 b(cost)e(estimates)i(in)e
(a)g(top-do)n(wn)h(tra)n(v)o(ersal)i(implies)e(that)f(while)h(the)f
(algorithm)i(is)e(computing)150 4565 y(plans)g(for)f(local)g
(subproblems)j(of)c(a)h(gi)n(v)o(en)g(v)n(ariable,)i(it)d(typically)j
(does)f(not)f(yet)g(kno)n(w)f(the)h(costs)h(for)f(changing)150
4678 y(the)29 b(state)g(of)g(its)f(causal)i(predecessors.)47
b(The)28 b(algorithm)j Fq(compute-costs)g Fv(addresses)g(this)e(by)g(e)
n(v)n(aluating)i(the)150 4791 y(cost)24 b(v)n(alues)h(of)e(dependent)k
(v)n(ariables)e(through)h(recursi)n(v)o(e)f(in)l(v)n(ocations)j(of)23
b(itself.)291 4918 y(F)o(or)d(a)g(gi)n(v)o(en)h(v)n(ariable-v)n(alue)j
(pairing)f Ft(v)28 b Fm(=)d Ft(d)p Fv(,)c(we)f(al)o(w)o(ays)h(compute)h
(the)f(costs)g Fq(cost)2994 4932 y Fk(v)3035 4918 y Fm(\()p
Ft(d;)15 b(d)3204 4885 y Fu(0)3228 4918 y Fm(\))21 b
Fv(for)f(all)h(v)n(alues)150 5031 y(of)j Ft(d)296 4998
y Fu(0)346 5031 y Fo(2)i(D)503 5045 y Fk(v)568 5031 y
Fv(at)e(the)g(same)g(time,)g(similar)h(to)f(the)h(w)o(ay)f(Dijkstra')-5
b(s)26 b(algorithm)f(computes)h(the)f(shortest)h(path)f(not)150
5144 y(from)19 b(a)f(single)j(source)f(to)f(a)g(single)h(destination)i
(v)o(erte)o(x,)e(b)n(ut)g(from)f(a)f(single)j(source)f(to)f(all)g
(possible)i(destination)150 5257 y(v)o(ertices.)29 b(Computing)23
b(the)e(costs)h(for)f(all)g(v)n(alues)h(of)f Ft(d)1874
5224 y Fu(0)1918 5257 y Fv(is)f(not)i(\(much\))f(more)g(e)o(xpensi)n(v)
o(e)i(than)e(computing)i(only)1888 5506 y Fy(220)p eop
end
%%Page: 221 31
TeXDict begin 221 30 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)150
249 y Fv(one)i(of)f(these)i(v)n(alues,)g(and)f(once)g(all)f(cost)i(v)n
(alues)f(ha)n(v)o(e)g(been)h(determined,)h(we)c(can)i(cache)h(them)e
(and)h(re-use)150 361 y(them)g(if)f(the)o(y)h(are)g(needed)h(again)f
(later)g(during)i(other)e(parts)h(of)e(the)h(computation)i(of)e(the)g
(heuristic)i(v)n(alue)e(for)150 474 y(the)d(current)h(state.)291
603 y(In)30 b(f)o(act,)h(the)g(similarity)g(to)f(shortest)h(path)g
(problems)g(is)f(not)g(super\002cial)i(b)n(ut)e(runs)h(quite)f(deeply)
-6 b(.)49 b(If)30 b(we)150 716 y(ignore)i(the)g(recursi)n(v)o(e)g
(calls)g(for)f(computing)j(cost)d(v)n(alues)h(of)f(dependent)j(v)n
(ariables,)h Fq(compute-costs)f Fv(is)d(ba-)150 829 y(sically)k(an)e
(implementation)j(of)d(Dijkstra')-5 b(s)35 b(algorithm)g(for)e(the)h
(single-source)j(shortest)e(path)f(problem)g(on)150 942
y(domain)26 b(transition)i(graphs.)36 b(The)25 b(only)h(dif)n(ference)h
(to)f(the)f(\223re)o(gular\224)i(algorithm)g(lies)f(in)f(the)h(f)o(act)
g(that)g(we)e(do)150 1055 y(not)32 b(kno)n(w)f(the)h(cost)g(for)g
(using)h(an)f(arc)f(in)h(adv)n(ance.)54 b(T)m(ransitions)34
b(of)d(deri)n(v)o(ed)i(v)n(ariables)h(ha)n(v)o(e)e(a)f(base)i(cost)150
1168 y(of)28 b(0)g(and)h(transitions)i(of)e(\003uents)g(ha)n(v)o(e)f(a)
g(base)h(cost)g(of)g(1,)f(b)n(ut)h(in)g(addition)h(to)e(the)h(base)g
(cost,)h(we)d(must)i(pay)150 1280 y(the)24 b(cost)h(for)f(achie)n(ving)
i(the)e(conditions)j(associated)g(with)c(a)h(transition.)32
b(Ho)n(we)n(v)o(er)l(,)24 b(the)g(cost)g(for)g(achie)n(ving)j(a)150
1393 y(gi)n(v)o(en)22 b(condition)h Ft(v)779 1360 y Fu(0)828
1393 y Fm(=)i Ft(e)966 1360 y Fu(0)1010 1393 y Fv(depends)e(on)e(the)h
(current)g(v)n(alue)g Ft(e)f Fv(of)g(that)g(state)h(v)n(ariable)h(at)e
(the)g(time)g(the)h(transition)150 1506 y(is)27 b(tak)o(en.)42
b(Thus,)28 b(we)f(can)h(only)g(compute)g(the)g(real)g(cost)g(for)g(a)f
(transition)j(once)e(we)f(kno)n(w)g(the)h(v)n(alues)h(of)e(the)150
1619 y(dependent)f(state)f(v)n(ariables)g(in)f(the)g(rele)n(v)n(ant)h
(situation.)291 1748 y(Of)c(course,)i(there)f(are)f(man)o(y)g(dif)n
(ferent)j(w)o(ays)d(of)g(taking)i(transitions)h(through)g(domain)e
(transition)i(graphs,)150 1861 y(all)c(potentially)k(leading)e(to)f
(dif)n(ferent)h(v)n(alues)f(for)g(the)g(dependent)i(state)e(v)n
(ariables.)30 b(When)21 b(we)e(\002rst)h(introduced)150
1974 y(the)j(causal)g(graph)h(heuristic,)h(we)c(sho)n(wed)i(that)g
(deciding)i(plan)e(e)o(xistence)i(for)d(the)h(local)g(subproblems)i(is)
e Fz(NP)p Fv(-)150 2087 y(complete)34 b(\(Helmert,)i(2004\),)g(so)d(we)
g(are)g(content)i(with)d(an)h(approach)j(that)d(does)h(not)g(lead)f(to)
g(a)g(complete)150 2200 y(planning)26 b(algorithm,)f(as)e(long)i(as)e
(it)g(w)o(orks)h(well)g(for)f(the)h(subproblems)j(we)22
b(f)o(ace)j(in)e(practice.)291 2328 y(The)c(approach)k(we)c(ha)n(v)o(e)
h(chosen)i(is)d(to)h(achie)n(v)o(e)h(each)f(v)n(alue)h(of)f(state)g(v)n
(ariable)i Ft(v)g Fv(in)e(the)g(local)h(subproblem)150
2441 y(for)e Ft(v)i Fv(and)e Ft(d)g Fv(as)f(quickly)j(as)e(possible,)i
(follo)n(wing)f(a)f(greedy)h(polic)o(y)-6 b(.)28 b(In)19
b(the)g(conte)o(xt)h(of)f(the)g(Dijkstra)h(algorithm,)150
2554 y(this)28 b(means)f(that)h(we)e(start)i(by)f(\002nding)h(the)f
(cheapest)j(possible)f(plan)f(to)f(mak)o(e)g(a)g(transition)i(from)e
Ft(d)g Fv(to)g(some)150 2667 y(other)e(v)n(alue)h Ft(d)626
2634 y Fu(0)649 2667 y Fv(.)31 b(Once)24 b(we)g(ha)n(v)o(e)h(found)g
(the)g(cheapest)h(possible)h(plan)e Ft(\031)2500 2682
y Fk(d)2536 2663 y Fh(0)2563 2667 y Fv(,)e(we)h(commit)g(to)g(it,)h
(annotating)i(the)150 2780 y(v)o(erte)o(x)k Ft(d)451
2747 y Fu(0)504 2780 y Fv(of)g(the)f(domain)i(transition)h(graph)e
(with)g(the)f(local)i(state)f(obtained)i(by)d(applying)j(plan)e
Ft(\031)3446 2795 y Fk(d)3482 2776 y Fh(0)3539 2780 y
Fv(to)f(the)150 2893 y(current)f(state.)41 b(In)27 b(the)h(ne)o(xt)g
(step,)g(we)f(look)h(for)g(the)f(cheapest)j(possible)f(plan)f(to)g
(achie)n(v)o(e)g(another)h(v)n(alue)g Ft(d)3685 2860
y Fu(00)3727 2893 y Fv(,)150 3006 y(by)23 b(either)i(considering)h
(transitions)g(that)e(start)g(from)f(the)h(initial)g(v)n(alue)g
Ft(d)p Fv(,)f(or)g(by)g(considering)j(transitions)h(that)150
3119 y(continue)j(the)f(plan)g Ft(\031)865 3134 y Fk(d)901
3115 y Fh(0)955 3119 y Fv(by)f(mo)o(ving)h(to)f(a)f(neighbour)k(of)d
Ft(d)2088 3086 y Fu(0)2112 3119 y Fv(.)42 b(This)28 b(process)h(is)f
(iterated)i(until)f(all)g(v)o(ertices)g(of)150 3232 y(the)24
b(domain)g(transition)i(graph)f(ha)n(v)o(e)f(been)h(reached)g(or)f(no)f
(further)i(progress)h(is)d(possible.)291 3360 y(Our)32
b(implementation)k(follo)n(ws)d(Dijkstra')-5 b(s)34 b(algorithm)g
(\(Fig.)f(18\).)56 b(W)-7 b(e)31 b(ha)n(v)o(e)j(implemented)g(the)f
(prior)n(-)150 3473 y(ity)c(queue)i(as)e(a)g(v)o(ector)h(of)g(b)n(uck)o
(ets)h(for)f(maximal)f(speed)i(and)e(use)h(a)f(cache)h(to)g(a)n(v)n
(oid)g(generating)j(the)c(same)150 3586 y Fq(cost)296
3600 y Fk(v)337 3586 y Fm(\()p Ft(d;)15 b(d)506 3553
y Fu(0)531 3586 y Fm(\))26 b Fv(v)n(alue)g(twice)g(for)h(the)f(same)g
(state.)37 b(In)26 b(addition)i(to)e(this,)h(we)e(use)h(a)g(global)h
(cache)g(that)g(is)f(shared)150 3699 y(throughout)i(the)e(whole)f
(planning)j(process)f(so)e(that)h(we)e(need)i(to)f(compute)i(the)e(v)n
(alues)i Fq(cost)3156 3713 y Fk(v)3197 3699 y Fm(\()p
Ft(d;)15 b(d)3366 3666 y Fu(0)3391 3699 y Fm(\))24 b
Fv(for)i(v)n(ari-)150 3812 y(ables)19 b Ft(v)i Fv(with)d(fe)n(w)g
(ancestors)i(in)e(the)h(pruned)h(causal)g(graph)f(only)g(once.)28
b(\(Note)18 b(that)h Fq(cost)2986 3826 y Fk(v)3027 3812
y Fm(\()p Ft(d;)c(d)3196 3779 y Fu(0)3220 3812 y Fm(\))j
Fv(only)h(depends)150 3925 y(on)24 b(the)f(current)j(v)n(alues)e(of)g
(the)g(ancestors)i(of)d Ft(v)s Fv(.\))291 4053 y(Apart)32
b(from)g(these)h(and)g(some)f(other)h(technical)h(considerations,)k
(Fig.)32 b(18)g(gi)n(v)o(es)g(an)g(accurate)i(account)150
4166 y(of)j(F)o(ast)f(Do)n(wnw)o(ard')-5 b(s)38 b(implementation)i(of)d
(the)g(causal)h(graph)g(heuristic.)72 b(F)o(or)36 b(more)h(details,)42
b(including)150 4279 y(comple)o(xity)35 b(considerations)i(and)c(a)f(w)
o(ork)o(ed-out)j(e)o(xample,)g(we)d(refer)h(to)g(the)g(original)i
(description)g(of)e(the)150 4392 y(algorithm)25 b(\(Helmert,)f(2004\).)
152 4629 y(6)t(.)t(1)t(.)t(3)53 b(S)t Fr(T)m(A)l(T)t(E)t(S)31
b(W)t(I)t(T)t(H)d Fv(I)t Fr(N)t(FI)t(N)t(I)t(T)t(E)j
Fv(H)t Fr(E)t(U)t(R)t(I)t(S)t(T)t(I)t(C)g Fv(V)-7 b Fr(A)t(L)t(U)t(E)
150 4806 y Fv(W)g(e)25 b(noted)j(that)e(F)o(ast)g(Do)n(wnw)o(ard)g
(uses)h(an)f(incomplete)i(planning)h(algorithm)f(for)e(determining)j
(solutions)f(to)150 4918 y(local)c(planning)h(problems.)30
b(Therefore,)24 b(there)g(can)g(be)e(states)j Ft(s)c
Fv(with)i Fq(cost)2560 4932 y Fk(v)2601 4918 y Fm(\()p
Ft(s)p Fm(\()p Ft(v)s Fm(\))p Ft(;)15 b(s)2879 4932 y
Fk(?)2920 4918 y Fm(\()p Ft(v)s Fm(\)\))26 b(=)f Fo(1)d
Fv(e)n(v)o(en)h(though)150 5031 y(the)28 b(goal)h(condition)i
Ft(v)36 b Fm(=)e Ft(s)1071 5045 y Fk(?)1110 5031 y Fm(\()p
Ft(v)s Fm(\))28 b Fv(can)g(still)h(be)f(reached.)44 b(This)28
b(means)g(that)h(we)e(cannot)i(trust)g(in\002nite)g(v)n(alues)150
5144 y(returned)j(by)f(the)f(causal)i(graph)g(heuristic.)51
b(In)30 b(our)h(e)o(xperience,)j(states)e(with)e(in\002nite)h
(heuristic)i(e)n(v)n(aluation)150 5257 y(from)23 b(which)g(it)g(is)g
(still)h(possible)h(to)e(reach)h(the)f(goal)h(are)f(rare,)g(so)g(we)f
(indeed)j(treat)f(such)g(states)g(as)f Fq(dead)h(ends)p
Fv(.)1888 5506 y Fy(221)p eop end
%%Page: 222 32
TeXDict begin 222 31 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)p
151 1212 3598 4 v 151 3606 4 2394 v 202 1300 a Fz(algorithm)25
b Fv(compute-costs\()p Fm(\005)p Fv(,)i Ft(s)p Fv(,)22
b Ft(v)s Fv(,)g Ft(d)p Fv(\):)438 1413 y(Let)h Fo(V)645
1380 y Fu(0)691 1413 y Fv(be)h(the)g(set)f(of)h(immediate)g
(predecessors)k(of)23 b Ft(v)j Fv(in)e(the)f(pruned)j(causal)e(graph)h
(of)f Fm(\005)p Fv(.)438 1526 y(Let)f Fg(DTG)31 b Fv(be)23
b(the)h(pruned)h(domain)g(transition)h(graph)f(of)e Ft(v)s
Fv(.)438 1639 y Fq(cost)585 1653 y Fk(v)626 1639 y Fm(\()p
Ft(d;)15 b(d)p Fm(\))27 b(:=)e(0)438 1752 y Fq(cost)585
1766 y Fk(v)626 1752 y Fm(\()p Ft(d;)15 b(d)795 1719
y Fu(0)819 1752 y Fm(\))26 b(:=)f Fo(1)e Fv(for)g(all)h
Ft(d)1404 1719 y Fu(0)1453 1752 y Fo(2)h(D)1609 1766
y Fk(v)1670 1752 y Fo(n)c(f)p Ft(d)p Fo(g)438 1865 y
Fq(local-state)822 1880 y Fk(d)888 1865 y Fm(:=)k Ft(s)d
Fv(restricted)k(to)e Fo(V)1592 1832 y Fu(0)438 1978 y
Fq(unr)m(eac)o(hed)k Fm(:=)e Fo(D)1034 1992 y Fk(v)438
2091 y Fz(while)d Fq(unr)m(eac)o(hed)28 b Fv(contains)e(a)d(v)n(alue)h
Ft(d)1725 2058 y Fu(0)1774 2091 y Fo(2)h(D)1930 2105
y Fk(v)1994 2091 y Fv(with)e Fq(cost)2325 2105 y Fk(v)2366
2091 y Fm(\()p Ft(d;)15 b(d)2535 2058 y Fu(0)2559 2091
y Fm(\))26 b Ft(<)f Fo(1)p Fv(:)674 2204 y(Choose)g(such)f(a)f(v)n
(alue)i Ft(d)1487 2171 y Fu(0)1536 2204 y Fo(2)f Fq(unr)m(eac)o(hed)i
Fv(minimizing)f Fq(cost)2612 2218 y Fk(v)2652 2204 y
Fm(\()p Ft(d;)15 b(d)2821 2171 y Fu(0)2846 2204 y Fm(\))p
Fv(.)674 2316 y Fq(unr)m(eac)o(hed)29 b Fm(:=)c Fq(unr)m(eac)o(hed)e
Fo(n)e(f)p Ft(d)1757 2283 y Fu(0)1781 2316 y Fo(g)674
2429 y Fz(f)n(or)j(each)f Fv(transition)k Ft(t)22 b Fv(in)i
Fq(DTG)d Fv(leading)k(from)f Ft(d)2267 2396 y Fu(0)2313
2429 y Fv(to)g(some)f Ft(d)2668 2396 y Fu(00)2736 2429
y Fo(2)i Fq(unr)m(eac)o(hed)s Fv(:)911 2542 y Fq(tr)o(ansition-cost)30
b Fm(:=)25 b(0)e Fv(if)h Ft(v)i Fv(is)d(a)g(deri)n(v)o(ed)i(v)n
(ariable;)g Fm(1)e Fv(if)h Ft(v)i Fv(is)d(a)g(\003uent)911
2655 y Fz(f)n(or)g(each)h Fv(pair)g Ft(v)1458 2622 y
Fu(0)1507 2655 y Fm(=)h Ft(e)1645 2622 y Fu(0)1691 2655
y Fv(in)e(the)h(condition)i(of)e Ft(t)p Fv(:)1147 2768
y Ft(e)h Fm(:=)h Fq(local-state)1719 2783 y Fk(d)1755
2764 y Fh(0)1782 2768 y Fm(\()p Ft(v)1864 2735 y Fu(0)1888
2768 y Fm(\))1147 2881 y Fz(call)e Fv(compute-costs)t
Fm(\(\005)p Ft(;)15 b(s;)g(v)2104 2848 y Fu(0)2129 2881
y Ft(;)g(e)p Fm(\))p Fv(.)1147 2994 y Fq(tr)o(ansition-cost)30
b Fm(:=)25 b Fq(tr)o(ansition-cost)g Fm(+)20 b Fq(cost)2609
3009 y Fk(v)2645 2990 y Fh(0)2672 2994 y Fm(\()p Ft(e;)15
b(e)2831 2961 y Fu(0)2856 2994 y Fm(\))911 3107 y Fz(if)23
b Fq(cost)1135 3121 y Fk(v)1176 3107 y Fm(\()p Ft(d;)15
b(d)1345 3074 y Fu(0)1370 3107 y Fm(\))20 b(+)g Fq(tr)o(ansition-cost)
31 b Ft(<)25 b Fq(cost)2313 3121 y Fk(v)2354 3107 y Fm(\()p
Ft(d;)15 b(d)2523 3074 y Fu(00)2567 3107 y Fm(\))p Fv(:)1147
3220 y Fq(cost)1293 3234 y Fk(v)1334 3220 y Fm(\()p Ft(d;)g(d)1503
3187 y Fu(00)1547 3220 y Fm(\))26 b(:=)f Fq(cost)1875
3234 y Fk(v)1916 3220 y Fm(\()p Ft(d;)15 b(d)2085 3187
y Fu(0)2110 3220 y Fm(\))20 b(+)g Fq(tr)o(ansition-cost)1147
3333 y(local-state)1531 3348 y Fk(d)1567 3329 y Fh(00)1637
3333 y Fm(:=)25 b Fq(local-state)2142 3348 y Fk(d)2178
3329 y Fh(0)1147 3446 y Fz(f)n(or)e(each)h Fv(pair)g
Ft(v)1694 3413 y Fu(0)1743 3446 y Fm(=)h Ft(e)1881 3413
y Fu(0)1927 3446 y Fv(in)f(the)f(condition)k(of)c Ft(t)p
Fv(:)1383 3558 y Fq(local-state)1767 3574 y Fk(d)1803
3555 y Fh(00)1848 3558 y Fm(\()p Ft(v)1930 3525 y Fu(0)1954
3558 y Fm(\))j(:=)f Ft(e)2178 3525 y Fu(0)p 3746 3606
V 151 3609 3598 4 v 150 3879 a Fv(Figure)f(18:)47 b(F)o(ast)21
b(Do)n(wnw)o(ard')-5 b(s)23 b(implementation)i(of)d(the)g(causal)h
(graph)h(heuristic:)31 b(the)22 b Fq(compute-costs)j
Fv(algo-)572 3992 y(rithm)i(for)g(computing)i(the)f(estimates)g
Ft(cost)2003 4006 y Fk(v)2044 3992 y Fm(\()p Ft(d;)15
b(d)2213 3959 y Fu(0)2238 3992 y Fm(\))26 b Fv(for)i(all)f(v)n(alues)h
Ft(d)2852 3959 y Fu(0)2907 3992 y Fo(2)k(D)3070 4006
y Fk(v)3137 3992 y Fv(in)27 b(a)f(state)i Ft(s)e Fv(of)h(an)572
4105 y(MPT)21 b Fm(\005)p Fv(.)1888 5506 y Fy(222)p eop
end
%%Page: 223 33
TeXDict begin 223 32 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)291
249 y Fv(If)c(it)f(turns)i(out)g(that)f Fq(all)g Fv(states)h(at)f(the)g
(search)h(frontier)h(are)e(dead)h(ends,)g(we)e(cannot)i(mak)o(e)g
(further)g(progress)150 361 y(with)g(the)g(causal)h(graph)g(heuristic.)
31 b(In)21 b(this)i(case,)f(we)f(use)i(a)e(sound)i(dead-end)h
(detection)h(routine)e(to)f(v)o(erify)h(the)150 474 y(heuristic)29
b(assessment.)39 b(If)26 b(it)g(turns)h(out)f(that)h(all)g(frontier)h
(states)f(are)g(indeed)g(dead)g(ends,)h(then)f(we)e(report)j(the)150
587 y(problem)d(as)f(unsolv)n(able.)33 b(Otherwise,)25
b(search)h(is)e(restarted)i(with)e(the)g(FF)f(heuristic)j(\(cf.)e
(Section)h(6.2\),)f(which)150 700 y(is)f(sound)i(for)f(purposes)i(of)d
(dead-end)j(detection.)1755 667 y FB(5)291 817 y Fv(The)d(dead-end)j
(detection)g(routine)g(has)e(been)g(originally)i(de)n(v)o(eloped)g(for)
e(STRIPS-lik)o(e)f(tasks.)30 b(Ho)n(we)n(v)o(er)l(,)150
930 y(e)o(xtending)c(it)e(to)f(full)i(MPTs)d(is)i(easy;)g(in)g(f)o
(act,)g(no)g(changes)i(to)e(the)g(core)g(algorithm)i(are)e(required,)h
(as)f(it)g(w)o(orks)150 1043 y(at)31 b(the)g(le)n(v)o(el)g(of)g(domain)
h(transition)i(graphs)e(and)g(is)e(still)i(sound)g(when)f(applied)i(to)
e(tasks)h(with)f(conditional)150 1156 y(ef)n(fects)g(and)g(axioms.)48
b(Since)30 b(it)g(is)g(not)g(a)g(central)h(aspect)h(of)d(F)o(ast)h(Do)n
(wnw)o(ard,)h(we)e(do)h(not)g(discuss)i(it)e(here,)150
1268 y(referring)c(to)d(our)h(earlier)h(w)o(ork)f(instead)h(\(Helmert,)
f(2004\).)152 1493 y(6)t(.)t(1)t(.)t(4)53 b(H)t Fr(E)t(L)t(P)t(F)t(U)t
(L)31 b Fv(T)t Fr(R)t(A)t(N)t(S)t(I)t(T)t(I)t(O)t(N)t(S)150
1658 y Fv(Inspired)c(by)f(Hof)n(fmann')-5 b(s)26 b(v)o(ery)g
(successful)i(use)e(of)f Fq(helpful)j(actions)f Fv(within)f(the)f(FF)f
(planner)j(\(Hof)n(fmann)f(&)150 1771 y(Nebel,)j(2001\),)h(we)d(ha)n(v)
o(e)i(e)o(xtended)g(our)g(algorithm)g(for)f(computing)i(the)e(causal)i
(graph)f(heuristic)h(so)e(that)g(in)150 1884 y(addition)j(to)e(the)g
(heuristic)j(estimate,)f(it)e(also)g(generates)j(a)c(set)i(of)f
(applicable)i(operators)h(considered)g(useful)150 1996
y(for)24 b(steering)h(search)g(to)n(w)o(ards)g(the)e(goal.)291
2113 y(T)-7 b(o)25 b(compute)j(helpful)f(actions)h(in)e(FF)-7
b(,)24 b(Hof)n(fmann')-5 b(s)27 b(algorithm)h(generates)h(a)c(plan)i
(for)f(the)h(relax)o(ed)g(plan-)150 2226 y(ning)f(task)g(de\002ned)g
(by)g(the)f(current)i(search)g(state)f(and)g(considers)i(those)f
(operators)g Fq(helpful)h Fv(which)d(belong)i(to)150
2339 y(the)d(relax)o(ed)h(plan)f(and)g(are)g(applicable)i(in)e(the)f
(current)j(state.)291 2456 y(Our)f(approach)j(follo)n(ws)e(a)f(similar)
h(idea.)35 b(After)25 b(computing)j(the)e(heuristic)h(estimate)g
Fq(cost)3237 2470 y Fk(v)3278 2456 y Fm(\()p Ft(s)p Fm(\()p
Ft(v)s Fm(\))p Ft(;)15 b(s)3556 2470 y Fk(?)3597 2456
y Fm(\()p Ft(v)s Fm(\)\))150 2568 y Fv(for)27 b(a)g(v)n(ariable)i
Ft(v)h Fv(for)e(which)f(a)g(goal)h(condition)i(is)d(de\002ned,)i(we)d
(look)i(into)g(the)g(domain)g(transition)i(graph)e(of)150
2681 y Ft(v)j Fv(to)d(trace)i(the)f(path)g(of)f(transitions)k(leading)e
(from)f Ft(s)p Fm(\()p Ft(v)s Fm(\))f Fv(to)g Ft(s)2190
2695 y Fk(?)2229 2681 y Fm(\()p Ft(v)s Fm(\))h Fv(that)g(ga)n(v)o(e)g
(rise)g(to)f(the)h(cost)g(estimate.)45 b(In)150 2794
y(particular)l(,)25 b(we)c(consider)j(the)f(\002rst)e(transition)k(on)d
(this)g(path,)h(starting)h(at)e Ft(s)p Fm(\()p Ft(v)s
Fm(\))p Fv(.)28 b(If)22 b(this)g(transition)j(corresponds)150
2907 y(to)j(an)g(applicable)j(operator)l(,)h(we)27 b(consider)j(that)f
(operator)h(a)e Fq(helpful)i(tr)o(ansition)g Fv(and)f(continue)i(to)d
(check)h(the)150 3020 y(ne)o(xt)e(goal.)38 b(If)27 b(the)g(transition)i
(does)e(not)g(correspond)j(to)c(an)h(applicable)i(operator)g(because)f
(it)e(has)h(associated)150 3133 y(conditions)i(of)d(the)g(form)f
Ft(v)1039 3100 y Fu(0)1093 3133 y Fm(=)k Ft(e)1235 3100
y Fu(0)1284 3133 y Fv(which)d(are)g(not)g(currently)i(satis\002ed,)g
(then)e(we)f(recursi)n(v)o(ely)j(look)f(for)f(help-)150
3246 y(ful)j(transitions)j(in)d(the)g(domain)g(transition)j(graph)e(of)
f(each)g(such)h(v)n(ariable)h Ft(v)2690 3213 y Fu(0)2713
3246 y Fv(,)e(checking)i(the)f(path)f(that)h(w)o(as)150
3359 y(generated)c(during)f(the)f(computation)i(of)e
Fq(cost)1642 3374 y Fk(v)1678 3355 y Fh(0)1705 3359 y
Fm(\()p Ft(s)p Fm(\()p Ft(v)1865 3326 y Fu(0)1889 3359
y Fm(\))p Ft(;)15 b(e)2006 3326 y Fu(0)2031 3359 y Fm(\))p
Fv(.)291 3475 y(The)33 b(recursi)n(v)o(e)i(process)h(continues)g(until)
e(we)f(ha)n(v)o(e)h(found)g(all)g(helpful)h(transitions.)62
b(Unlik)o(e)34 b(the)g(case)150 3588 y(for)d(FF)-7 b(,)28
b(where)j(helpful)h(actions)h(can)e(be)f(found)i(for)f(all)g(non-goal)i
(states,)g(we)d(might)h(not)g(\002nd)f(an)o(y)g(helpful)150
3701 y(transition)g(at)e(all.)41 b(It)28 b(may)f(be)h(the)g(case)h
(that)f(a)f(transition)k(does)d(not)g(correspond)j(to)d(an)g
(applicable)i(operator)150 3814 y(e)n(v)o(en)24 b(though)h(it)f(has)g
(no)g(associated)j(conditions;)g(this)d(can)g(happen)i(when)d(some)h
(operator)i(preconditions)i(are)150 3927 y(not)h(represented)i(in)d
(the)g(pruned)i(domain)f(transition)i(graph)e(due)g(to)f(c)o(ycles)h
(in)f(the)g(causal)i(graph.)44 b(Ev)o(en)27 b(so,)150
4040 y(we)c(ha)n(v)o(e)h(found)h(helpful)g(transitions)i(to)c(be)h(a)f
(useful)i(tool)f(in)f(guiding)j(our)e(best-\002rst)h(search)f
(algorithms.)150 4277 y Fz(6.2)46 b(The)22 b(FF)g(Heuristic)150
4441 y Fv(The)28 b Fq(FF)f(heuristic)j Fv(is)f(named)f(after)i(Hof)n
(fmann')-5 b(s)29 b(planning)i(algorithm)f(of)e(the)h(same)f(name,)i
(in)e(the)h(conte)o(xt)150 4554 y(of)35 b(which)h(it)g(w)o(as)f
(originally)j(introduced)h(\(Hof)n(fmann)d(&)f(Nebel,)j(2001\).)66
b(It)36 b(is)f(based)i(on)e(the)h(notion)h(of)150 4667
y Fq(r)m(elaxed)26 b(planning)h(tasks)e Fv(that)g(ignore)g
Fq(ne)l(gative)i(inter)o(actions)p Fv(.)34 b(In)25 b(the)f(conte)o(xt)i
(of)e(MPTs,)f(ignoring)j(ne)o(gati)n(v)o(e)150 4780 y(interactions)k
(means)d(that)g(we)f(assume)h(that)g(each)g(state)h(v)n(ariable)g(can)f
(hold)g(se)n(v)o(eral)h(v)n(alues)g(simultaneously)-6
b(.)150 4893 y(An)29 b(operator)j(ef)n(fect)f(or)f(axiom)g(that)h(sets)
f(a)g(v)n(ariable)h Ft(v)i Fv(to)d(a)f(v)n(alue)i Ft(d)e
Fv(in)h(the)g(original)i(task)f(corresponds)i(to)p 150
4989 1440 4 v 195 5075 a Fn(5.)24 b(In)i(practice,)j(we)d(ha)o(v)o(e)h
(ne)n(v)o(er)h(observ)o(ed)g(the)e(causal)i(graph)f(heuristic)g(to)g(f)
o(ail)f(on)h(a)g(solv)n(able)g(task.)47 b(Therefore,)28
b(the)f(f)o(allback)275 5166 y(mechanism)19 b(is)f(only)h(used)g(for)f
(some)h(unsolv)n(able)h(tasks)f(in)f(the)i(M)t Ff(I)t(C)t(O)t(N)t(I)t
(C)t Fn(-)t(F)t Ff(U)t(L)t(L)t Fn(A)t(D)t(L)14 b(domain)20
b(which)e(are)h(not)f(recognized)i(by)275 5257 y(our)f(dead-end)h
(detection)g(technique.)1888 5506 y Fy(223)p eop end
%%Page: 224 34
TeXDict begin 224 33 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)150
249 y Fv(an)25 b(ef)n(fect)h(or)f(axiom)h(that)g Fq(adds)g
Fv(the)g(v)n(alue)g Ft(d)e Fv(to)i(the)f(range)h(of)g(v)n(alues)g
(assumed)h(by)e Ft(v)j Fv(in)d(the)g(relax)o(ed)i(task.)34
b(A)150 361 y(condition)29 b Ft(v)k Fm(=)c Ft(d)d Fv(in)g(the)g
(original)i(task)f(corresponds)j(to)c(a)f(condition)k(requiring)f
Ft(d)e Fv(to)g(be)g(an)g(element)h(of)f(the)150 474 y(set)e(of)f(v)n
(alues)i(currently)h(assumed)f(by)e Ft(v)j Fv(in)e(the)g(relax)o(ed)g
(task.)291 593 y(It)d(is)g(easy)h(to)f(see)g(that)h(applying)i(some)d
(operator)i(in)e(a)g(solv)n(able)i(relax)o(ed)f(planning)i(task)e(can)f
(ne)n(v)o(er)h(render)150 706 y(it)e(unsolv)n(able.)31
b(It)20 b(can)h(only)h(lead)f(to)g(more)g(operators)i(being)f
(applicable)h(and)e(more)g(goals)h(being)f(true,)h(if)e(it)h(has)150
819 y(an)o(y)28 b(signi\002cant)i(ef)n(fect)f(at)f(all.)42
b(F)o(or)28 b(this)g(reason,)j(relax)o(ed)e(planning)i(tasks)e(can)f
(be)g(solv)o(ed)h(ef)n(\002ciently)-6 b(,)31 b(e)n(v)o(en)150
932 y(though)e(optimal)e(solutions)j(are)d(still)g Fz(NP)p
Fv(-hard)g(to)g(compute)h(\(Bylander)l(,)h(1994\).)40
b(A)26 b(plan)h(for)g(the)g(relaxation)150 1044 y(of)c(a)h(planning)h
(task)g(is)e(called)i(a)e Fq(r)m(elaxed)i(plan)f Fv(for)g(that)g(task.)
291 1163 y(The)29 b(FF)f(heuristic)k(estimates)f(the)f(goal)h(distance)
h(of)d(a)g(w)o(orld)h(state)h(by)f(generating)i(a)e(relax)o(ed)h(plan)f
(for)150 1276 y(the)d(task)g(of)g(reaching)i(the)e(goal)g(from)g(this)g
(w)o(orld)h(state.)39 b(The)26 b(number)i(of)e(operators)j(in)e(the)g
(generated)i(plan)150 1389 y(is)d(then)h(used)g(as)f(the)g(heuristic)j
(estimate.)37 b(Our)26 b(implementation)j(of)d(the)h(FF)d(heuristic)29
b(does)e(not)f(necessarily)150 1502 y(generate)f(the)f(same,)f(or)g(e)n
(v)o(en)g(an)g(equally)i(long,)f(relax)o(ed)g(plan)g(as)f(FF)-7
b(.)21 b(In)i(our)h(e)o(xperiments,)h(this)f(did)f(not)h(turn)150
1614 y(out)g(to)f(be)h(problematic,)i(as)d(both)h(implementations)j
(appear)e(to)f(be)f(equally)j(informati)n(v)o(e.)291
1733 y(While)c(the)f(FF)f(heuristic)k(w)o(as)d(originally)j(introduced)
g(for)d(ADL)f(domains,)j(e)o(xtending)g(it)e(to)g(tasks)i(in)l(v)n
(olv-)150 1846 y(ing)32 b(deri)n(v)o(ed)h(predicates)i(is)d
(straight-forw)o(ard.)58 b(One)31 b(possible)k(e)o(xtension)f(is)e(to)f
(simply)i(assume)g(that)f(each)150 1959 y(deri)n(v)o(ed)27
b(predicate)h(is)d(initially)j(set)e(to)f(its)h(def)o(ault)h(v)n(alue)g
Fo(?)d Fv(and)j(treat)f(axioms)g(as)g(relax)o(ed)h(operators)h(of)e
(cost)150 2072 y(0.)i(In)23 b(a)f(slightly)j(more)d(complicated,)k(b)n
(ut)d(also)g(more)g(accurate)i(approach,)g(deri)n(v)o(ed)f(v)n
(ariables)g(are)f(initialized)150 2185 y(to)33 b(their)h(actual)h(v)n
(alue)f(in)f(a)g(gi)n(v)o(en)h(w)o(orld)f(state,)j(allo)n(wing)f(the)e
(relax)o(ed)i(planner)g(to)e(achie)n(v)o(e)i(the)e(v)n(alue)h
Fo(?)150 2297 y Fv(\(or)25 b(other)g(v)n(alues\))h(by)f(applying)i(the)
d(transitions)k(of)c(the)h(e)o(xtended)i(domain)e(transition)i(graph)f
(of)e(the)h(deri)n(v)o(ed)150 2410 y(v)n(ariable.)30
b(W)-7 b(e)23 b(ha)n(v)o(e)h(follo)n(wed)h(the)f(second)h(approach.)291
2529 y(In)c(addition)j(to)d(heuristic)i(estimates,)g(the)f(FF)d
(heuristic)24 b(can)d(also)h(be)f(e)o(xploited)j(for)d(restricting)j
(or)d(biasing)150 2642 y(the)26 b(choice)g(of)f(operators)j(to)d(apply)
i(in)e(a)f(gi)n(v)o(en)i(w)o(orld)g(state)g Ft(s)p Fv(.)32
b(The)25 b(set)h(of)f Fq(helpful)i(actions)g Fv(of)e
Ft(s)f Fv(consists)j(of)150 2755 y(all)22 b(those)g(operators)i(of)e
(the)g(relax)o(ed)h(plan)f(computed)h(for)f Ft(s)f Fv(that)h(are)f
(applicable)k(in)c(that)i(state.)28 b(As)21 b(mentioned)150
2868 y(in)35 b(the)g(introduction)k(to)c(this)h(section,)j(F)o(ast)34
b(Do)n(wnw)o(ard)h(can)h(be)f(con\002gured)i(to)e(treat)h(helpful)g
(actions)h(as)150 2980 y(preferred)26 b(operators.)291
3099 y(There)i(is)g(a)g(wealth)h(of)f(w)o(ork)g(on)g(the)h(FF)d
(heuristic)31 b(in)d(the)g(literature,)k(so)c(we)f(do)i(not)f(discuss)i
(it)e(further)-5 b(.)150 3212 y(F)o(or)28 b(a)g(more)g(thorough)j
(treatment,)g(we)d(point)h(to)g(the)f(references)j(\(Hof)n(fmann)f(&)d
(Nebel,)j(2001;)i(Hof)n(fmann,)150 3325 y(2001,)24 b(2002,)h(2005\).)
150 3563 y Fz(6.3)46 b(Gr)n(eedy)24 b(Best-First)g(Sear)n(ch)g(in)f(F)n
(ast)g(Do)o(wnward)150 3730 y Fv(F)o(ast)j(Do)n(wnw)o(ard)h(uses)h
Fq(gr)m(eedy)g(best-\002r)o(st)i(sear)m(c)o(h)e(with)f(a)f(closed)j
(list)g Fv(as)e(its)g(def)o(ault)i(search)f(algorithm.)41
b(W)-7 b(e)150 3843 y(assume)23 b(that)f(the)g(reader)i(is)d(f)o
(amiliar)i(with)f(the)g(algorithm)i(and)f(refer)f(to)g(the)g
(literature)j(for)d(details)h(\(Russell)g(&)150 3955
y(Norvig,)h(2003\).)291 4074 y(Our)d(implementation)j(of)d(greedy)i
(best-\002rst)g(search)f(dif)n(fers)h(from)e(the)g(te)o(xtbook)i
(algorithm)g(in)f(tw)o(o)e(w)o(ays.)150 4187 y(First,)k(it)g(can)g
(treat)h(helpful)h(transitions)h(computed)f(by)f(the)f(causal)i(graph)f
(heuristic)h(or)e(helpful)i(actions)g(com-)150 4300 y(puted)g(by)f(the)
g(FF)e(heuristic)k(as)e Fq(pr)m(eferr)m(ed)i(oper)o(ator)o(s)p
Fv(.)35 b(Second,)26 b(it)e(performs)j Fq(deferr)m(ed)f(heuristic)i(e)o
(valuation)150 4413 y Fv(to)34 b(reduce)i(the)f(in\003uence)h(of)e(lar)
n(ge)i(branching)h(f)o(actors.)63 b(W)-7 b(e)33 b(no)n(w)h(turn)h(to)f
(describing)j(these)f(tw)o(o)e(search)150 4526 y(enhancements.)152
4752 y(6)t(.)t(3)t(.)t(1)53 b(P)t Fr(R)t(E)t(F)t(E)t(R)t(R)t(E)t(D)30
b Fv(O)t Fr(P)t(E)t(R)t(A)l(T)s(O)t(R)t(S)150 4918 y
Fv(T)-7 b(o)26 b(mak)o(e)h(use)g(of)g(helpful)i(transitions)h(computed)
e(by)f(the)g(causal)i(graph)f(heuristic)h(or)e(helpful)i(actions)f
(com-)150 5031 y(puted)g(by)g(the)f(FF)e(heuristic,)30
b(our)e(v)n(ariant)g(of)f(greedy)i(best-\002rst)g(search)f(supports)h
(the)f(use)f(of)g(so-called)j Fq(pr)m(e-)150 5144 y(ferr)m(ed)d(oper)o
(ator)o(s)p Fv(.)40 b(The)26 b(set)h(of)f(preferred)i(operators)h(of)e
(a)f(gi)n(v)o(en)g(state)i(is)e(a)g(subset)i(of)e(the)h(set)f(of)g
(applicable)150 5257 y(operators)32 b(for)e(this)g(state.)48
b(Which)30 b(operators)i(are)e(considered)j(preferred)f(depends)g(on)d
(the)h(settings)i(for)e(the)1888 5506 y Fy(224)p eop
end
%%Page: 225 35
TeXDict begin 225 34 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)150
249 y Fv(search)h(component,)g(as)e(discussed)j(earlier)-5
b(.)33 b(The)24 b(intuition)i(behind)g(preferred)h(operators)g(is)d
(that)h(a)f(randomly)150 361 y(pick)o(ed)j(successor)g(state)f(is)f
(more)g(lik)o(ely)i(to)e(be)g(closer)h(to)f(the)h(goal)f(if)g(it)g(is)g
(generated)j(by)d(a)f(preferred)k(opera-)150 474 y(tor)l(,)22
b(in)f(which)h(case)f(we)g(call)h(it)e(a)h Fq(pr)m(eferr)m(ed)i
(successor)p Fv(.)31 b(Preferred)22 b(successors)j(should)d(be)g
(considered)i(before)150 587 y(non-preferred)j(ones)e(on)e(a)n(v)o
(erage.)291 716 y(Our)30 b(search)i(algorithm)g(implements)g(this)f
(preference)i(by)d(maintaining)j(tw)o(o)d(separate)j(open)e(lists,)i
(one)150 829 y(containing)g Fq(all)c Fv(successors)k(of)c(e)o(xpanded)j
(states)f(and)f(one)g(containing)j Fq(pr)m(eferr)m(ed)h
Fv(successors)e(e)o(xclusi)n(v)o(ely)-6 b(.)150 942 y(The)28
b(search)h(algorithm)h(alternates)h(between)e(e)o(xpanding)i(a)d(re)o
(gular)h(successor)i(and)e(a)e(preferred)k(successor)-5
b(.)150 1055 y(On)28 b(e)n(v)o(en)g(iterations)j(it)d(will)g(consider)i
(the)f(one)f(open)i(list,)f(on)f(odd)h(iterations)i(the)e(other)-5
b(.)44 b(No)27 b(matter)i(which)150 1168 y(open)h(list)f(a)f(state)h
(is)g(tak)o(en)g(from,)h(all)f(its)f(successors)k(are)d(placed)h(in)e
(the)h(\002rst)f(open)i(list,)g(and)f(the)g(preferred)150
1280 y(successors)g(are)d(additionally)k(placed)e(in)e(the)g(second)i
(open)f(list.)37 b(\(Of)26 b(course)h(we)f(could)h(limit)f(the)g
(\002rst)g(open)150 1393 y(list)j(to)g(only)g(contain)h(non-preferred)j
(successors;)h(ho)n(we)n(v)o(er)l(,)c(typically)h(the)e(total)h(number)
f(of)g(successors)i(is)150 1506 y(v)n(ast)f(and)f(the)h(number)g(of)f
(preferred)j(successors)g(is)d(tin)o(y)-6 b(.)47 b(Therefore,)32
b(it)d(is)g(cheaper)i(to)e(add)h(all)f(successors)150
1619 y(to)f(the)h(\002rst)f(open)h(list)g(and)f(detect)i(duplicates)h
(upon)f(e)o(xpansion)g(than)f(scan)g(through)i(the)d(list)h(of)f
(successors)150 1732 y(determining)e(for)e(each)g(element)h(whether)f
(or)g(not)g(it)f(is)g(preferred.\))291 1861 y(Since)31
b(the)h(number)g(of)f(preferred)i(successors)i(is)c(smaller)h(than)f
(the)h(total)g(number)g(of)f(successors,)36 b(this)150
1974 y(means)25 b(that)g(preferred)i(successors)h(are)c(typically)j(e)o
(xpanded)g(much)e(earlier)h(than)f(others.)34 b(This)24
b(is)g(especially)150 2087 y(important)f(in)e(domains)i(where)e
(heuristic)j(guidance)f(is)e(weak)g(and)h(a)f(lot)g(of)g(time)h(is)f
(spent)h(e)o(xploring)h(plateaus.)150 2200 y(When)33
b(f)o(aced)g(with)f(plateaus,)37 b(F)o(ast)31 b(Do)n(wnw)o(ard')-5
b(s)33 b(open)g(lists)h(operate)g(in)e(a)g(\002rst-in-\002rst-out)j(f)o
(ashion.)57 b(\(In)150 2312 y(other)40 b(w)o(ords:)61
b(F)o(or)38 b(a)g(constant)k(heuristic)f(function,)k(our)39
b(search)h(algorithm)h(beha)n(v)o(es)g(lik)o(e)f(breadth-\002rst)150
2425 y(search.\))55 b(Preferred)33 b(operators)i(typically)f(of)n(fer)e
(much)g(better)h(chances)h(of)d(escaping)k(from)c(plateaus)j(since)150
2538 y(the)o(y)24 b(lead)g(to)g(signi\002cantly)i(lo)n(wer)d(ef)n
(fecti)n(v)o(e)i(branching)h(f)o(actors.)152 2775 y(6)t(.)t(3)t(.)t(2)
53 b(D)t Fr(E)t(F)t(E)t(R)t(R)t(E)t(D)31 b Fv(H)t Fr(E)t(U)t(R)t(I)t(S)
t(T)t(I)t(C)g Fv(E)t Fr(V)-6 b(A)t(L)t(U)q(A)l(T)t(I)t(O)t(N)150
2952 y Fv(Upon)30 b(e)o(xpanding)i(a)e(state)g Ft(s)p
Fv(,)g(the)h(te)o(xtbook)g(v)o(ersion)h(of)d(greedy)j(best-\002rst)f
(search)g(computes)h(the)e(heuristic)150 3065 y(e)n(v)n(aluation)k(of)e
(all)f(successor)j(states)f(of)f Ft(s)e Fv(and)i(sorts)h(them)f(into)g
(the)g(open)g(list)g(accordingly)-6 b(.)57 b(This)31
b(can)h(be)150 3177 y(w)o(asteful)25 b(if)e Ft(s)g Fv(has)h(man)o(y)f
(successors)k(and)d(heuristic)h(e)n(v)n(aluations)i(are)d(costly)-6
b(,)24 b(tw)o(o)g(conditions)i(that)e(are)g(often)150
3290 y(true)g(for)g(heuristic)i(search)f(approaches)h(to)e(planning.)
291 3419 y(This)30 b(is)h(where)f(our)h(second)h(modi\002cation)g
(comes)f(into)g(play)-6 b(.)50 b(If)30 b(a)g(successor)j(with)d(a)g
(better)i(heuristic)150 3532 y(estimate)g(than)f Ft(s)e
Fv(is)h(generated)j(early)e(and)g(leads)h(to)e(a)g(promising)i(path)f
(to)n(w)o(ards)h(the)e(goal,)j(we)d(w)o(ould)h(lik)o(e)150
3645 y(to)h(a)n(v)n(oid)i(generating)h(the)e(other)g(successors.)58
b(Let)32 b(us)g(assume)h(that)g Ft(s)e Fv(has)h(1000)i(successors,)j
(and)c(that)f Ft(s)3704 3612 y Fu(0)3727 3645 y Fv(,)150
3758 y(the)27 b(10th)g(successor)j(of)c Ft(s)g Fv(being)i(generated,)h
(has)e(a)g(better)g(heuristic)i(estimate)f(than)g Ft(s)p
Fv(.)37 b(Furthermore,)28 b(let)f(us)150 3871 y(assume)22
b(that)h(the)f(goal)g(can)g(be)g(reached)h(from)f Ft(s)1703
3838 y Fu(0)1747 3871 y Fv(on)f(a)h(path)g(with)f(non-increasing)27
b(heuristic)d(estimates.)29 b(Then)150 3984 y(we)23 b(w)o(ould)h(lik)o
(e)g(to)f(a)n(v)n(oid)j(computing)f(heuristic)h(v)n(alues)f(for)e(the)h
(990)g(later)h(successors)h(of)e Ft(s)e Fv(altogether)-5
b(.)291 4112 y(Deferred)25 b(heuristic)h(e)n(v)n(aluation)g(achie)n(v)o
(es)f(this)f(by)g Fq(not)i Fv(computing)g(heuristic)f(estimates)h(for)e
(the)f(succes-)150 4225 y(sors)32 b(of)g(an)g(e)o(xpanded)h(state)g
Ft(s)d Fv(immediately)-6 b(.)55 b(Instead,)35 b(the)d(successors)j(of)c
Ft(s)g Fv(are)h(placed)h(in)e(the)h(open)h(list)150 4338
y(together)28 b(with)d(the)h(heuristic)h(estimate)g Fq(of)f(state)g
Ft(s)p Fv(,)e(and)i(their)h(o)n(wn)e(heuristic)i(estimates)g(are)f
(only)g(computed)150 4451 y(when)j(and)g(if)g(the)o(y)g(are)h(e)o
(xpanded,)i(at)d(which)g(time)g(it)f(is)h(used)h(for)f(sorting)i
Fq(their)h Fv(successors)f(into)f(the)f(open)150 4564
y(list,)22 b(and)h(so)f(on.)29 b(In)22 b(general,)h(each)g(state)g(is)f
(sorted)i(into)e(the)h(open)g(list)f(according)j(to)d(the)g(heuristic)j
(e)n(v)n(aluation)150 4677 y(of)i(its)g(parent,)i(with)d(the)i(initial)
g(state)f(being)i(an)d(e)o(xception.)42 b(In)26 b(f)o(act,)i(we)e(do)h
(not)h(need)f(to)g(put)g(the)h(successor)150 4790 y(state)g(itself)g
(into)g(the)f(open)h(list,)g(since)g(we)e(do)h(not)h(require)h(its)e
(representation)k(before)d(we)f(w)o(ant)g(to)g(e)n(v)n(aluate)150
4903 y(its)g(heuristic)i(estimate.)41 b(Instead,)29 b(we)d(sa)n(v)o(e)i
(memory)f(by)g(storing)i(only)f(a)e(reference)j(to)e(the)h(parent)g
(state)g(and)150 5016 y(the)c(operator)h(transforming)i(the)d(parent)h
(state)f(into)g(the)g(successor)i(state)e(in)g(the)g(open)g(list.)291
5144 y(It)29 b(might)g(not)g(be)g(clear)h(ho)n(w)e(this)i(approach)h
(can)e(lead)h(to)f(signi\002cant)i(sa)n(vings)g(in)d(time,)i(since)g
(deferred)150 5257 y(e)n(v)n(aluation)g(also)f(means)f(that)g
(information)j(is)d(only)g(a)n(v)n(ailable)i(later)-5
b(.)43 b(The)27 b(potential)j(sa)n(vings)g(become)f(most)1888
5506 y Fy(225)p eop end
%%Page: 226 36
TeXDict begin 226 35 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)150
249 y Fv(apparent)21 b(when)d(considering)k(deferred)e(heuristic)h(e)n
(v)n(aluation)g(together)g(with)d(the)h(use)f(of)h(preferred)h
(operators:)150 361 y(If)j(an)h(impro)o(ving)h(successor)h
Ft(s)1156 328 y Fu(0)1201 361 y Fv(of)e(a)f(state)h Ft(s)e
Fv(is)h(reached)j(by)d(a)g(preferred)j(operator)l(,)g(it)d(is)g(lik)o
(ely)i(that)f(it)f(will)g(be)150 474 y(e)o(xpanded)28
b(\(via)f(the)f(second)i(open)f(list\))f(long)h(before)h(most)e(other)h
(successors)i(\227)c(or)h(e)n(v)o(en)g(most)g(siblings)i(\227)150
587 y(of)d Ft(s)p Fv(.)32 b(In)26 b(the)f(situation)j(described)f(abo)o
(v)o(e,)f(where)g(there)g(e)o(xists)g(a)e(non-increasing)30
b(path)c(from)f Ft(s)3293 554 y Fu(0)3340 587 y Fv(to)g(the)h(goal,)150
700 y(heuristic)33 b(e)n(v)n(aluations)g(will)d(ne)n(v)o(er)h(be)f
(computed)j(for)d(most)h(successors)i(of)d Ft(s)p Fv(.)49
b(In)30 b(f)o(act,)i(deferred)h(heuristic)150 813 y(e)n(v)n(aluation)39
b(can)e(signi\002cantly)j(impro)o(v)o(e)d(search)h(performance)h(e)n(v)
o(en)e(when)g(preferred)i(operators)g(are)e(not)150 926
y(used,)24 b(especially)h(in)e(tasks)h(where)f(branching)j(f)o(actors)e
(are)f(lar)n(ge)h(and)g(the)f(heuristic)i(estimate)f(is)f(informati)n
(v)o(e.)291 1055 y(At)28 b(\002rst)h(glance,)j(deferred)f(heuristic)h
(e)n(v)n(aluation)g(might)d(appear)i(related)g(to)e(another)i
(technique)h(for)d(re-)150 1168 y(ducing)g(the)f(ef)n(fort)g(of)g(e)o
(xpanding)i(a)d(node)h(within)h(a)e(best-\002rst)i(search)f(algorithm,)
i(namely)f(A)3260 1135 y Fu(\003)3326 1168 y Fv(with)e(P)o(artial)150
1281 y(Expansion)j(\(Y)-10 b(oshizumi,)30 b(Miura,)d(&)g(Ishida,)j
(2000\).)42 b(Ho)n(we)n(v)o(er)l(,)29 b(this)f(algorithm)h(is)f
(designed)i(for)e(reducing)150 1394 y(the)c Fq(space)i
Fv(requirements)h(of)d(best-\002rst)h(search)g(at)f(the)h(e)o(xpense)h
(of)e(additional)i(heuristic)h(e)n(v)n(aluations:)33
b(When)150 1507 y(e)o(xpanding)h(a)d(node,)k(A)928 1474
y Fu(\003)998 1507 y Fv(with)c(P)o(artial)h(Expansion)i(computes)f(the)
f(heuristic)i(v)n(alue)f(of)e Fq(all)h Fv(successors,)37
b(b)n(ut)150 1620 y(only)25 b(stores)g(those)f(in)g(the)g(open)h(queue)
g(whose)f(heuristic)i(v)n(alues)f(f)o(all)f(belo)n(w)g(a)f(certain)j
Fq(r)m(ele)o(vance)f(thr)m(eshold)p Fv(.)150 1733 y(In)j(later)h
(iterations,)i(it)d(might)h(turn)f(out)h(that)f(the)h(threshold)h(w)o
(as)e(chosen)i(too)e(lo)n(w)-6 b(,)29 b(in)f(which)g(case)h(the)f(node)
150 1846 y(needs)d(to)f(be)h(re-e)o(xpanded)i(and)e(the)f(heuristic)j
(v)n(alues)e(of)f(its)g(successors)j(re-e)n(v)n(aluated.)34
b(In)24 b(general,)i(A)3526 1813 y Fu(\003)3588 1846
y Fv(with)150 1959 y(P)o(artial)d(Expansion)i(will)e(ne)n(v)o(er)g
(compute)h(fe)n(wer)f(heuristic)i(estimates)g(than)e(standard)j(A)3031
1926 y Fu(\003)3070 1959 y Fv(,)c(b)n(ut)h(it)g(will)f(usually)150
2071 y(require)j(less)f(memory)-6 b(.)291 2201 y(Ho)n(we)n(v)o(er)l(,)
20 b(for)f(heuristic)i(search)g(approaches)h(to)d(planning)j(\(and)d
(certainly)j(for)d(F)o(ast)g(Do)n(wnw)o(ard\),)h(heuris-)150
2314 y(tic)28 b(e)n(v)n(aluations)j(are)e(usually)h(so)e(costly)i(in)e
(time)g(that)h(memory)f(for)g(storing)i(open)g(and)e(closed)i(lists)f
(is)f(not)h(a)150 2427 y(limiting)h(f)o(actor)-5 b(.)45
b(W)-7 b(e)28 b(are)h(thus)h(willing)f(to)g(trade)g(of)n(f)g(memory)g
(with)f(time)h(in)g(the)g(opposite)i(w)o(ay:)39 b(Deferred)150
2540 y(heuristic)33 b(e)n(v)n(aluation)h(normally)f(leads)f(to)f(more)g
(node)h(e)o(xpansions)i(and)e(higher)g(space)g(requirements)i(than)150
2652 y(standard)27 b(best-\002rst)g(search)f(because)h(the)f(heuristic)
h(v)n(alues)g(used)f(for)f(guiding)i(the)e(search)i(are)e(less)h
(informa-)150 2765 y(ti)n(v)o(e)f(\(the)o(y)g(e)n(v)n(aluate)h(the)f
(predecessor)k(of)24 b(a)h(search)h(node)f(rather)h(than)g(the)f(node)h
(itself\).)33 b(Ho)n(we)n(v)o(er)l(,)25 b(heuristic)150
2878 y(computations)g(are)d(only)h(required)h(for)e(nodes)h(that)f(are)
g(actually)i(remo)o(v)o(ed)f(from)e(the)h(open)h(queue)g(rather)g(than)
150 2991 y(for)h(all)f(nodes)i(on)f(the)g(fringe,)g(and)g(the)g(latter)
h(are)e(usually)j(signi\002cantly)g(more)d(numerous.)150
3240 y Fz(6.4)46 b(Multi-Heuristic)25 b(Best-First)f(Sear)n(ch)150
3418 y Fv(As)f(an)h(alternati)n(v)o(e)i(to)e(greedy)h(best-\002rst)g
(search,)g(F)o(ast)f(Do)n(wnw)o(ard)f(supports)k(an)c(e)o(xtended)j
(algorithm)g(called)150 3531 y Fq(multi-heuristic)34
b(best-\002r)o(st)f(sear)m(c)o(h)p Fv(.)52 b(This)30
b(algorithm)j(dif)n(fers)f(from)e(greedy)i(best-\002rst)h(search)f(in)e
(its)h(use)g(of)150 3644 y(multiple)d(heuristic)h(estimators,)g(based)f
(on)f(our)h(observ)n(ation)h(that)f(dif)n(ferent)g(heuristic)i
(estimators)e(ha)n(v)o(e)g(dif-)150 3757 y(ferent)33
b(weaknesses.)56 b(It)31 b(may)h(be)g(the)g(case)g(that)h(a)e(gi)n(v)o
(en)i(heuristic)h(is)d(suf)n(\002cient)i(for)g(directing)h(the)e
(search)150 3869 y(to)n(w)o(ards)25 b(the)g(goal)g(e)o(xcept)g(for)f
(one)h(part)g(of)f(the)g(plan,)h(where)g(it)f(gets)h(stuck)g(on)f(a)g
(plateau.)33 b(Another)25 b(heuristic)150 3982 y(might)f(ha)n(v)o(e)g
(similar)g(characteristics,)k(b)n(ut)c(get)g(stuck)g(in)g(another)h
(part)f(of)g(the)g(search)g(space.)291 4112 y(V)-10 b(arious)36
b(w)o(ays)f(of)f(combining)j(heuristics)h(ha)n(v)o(e)d(been)h(proposed)
h(in)e(the)g(literature,)k(typically)f(adding)150 4225
y(together)33 b(or)f(taking)h(the)e(maximum)h(of)f(the)h(indi)n(vidual)
i(heuristic)f(estimates.)54 b(W)-7 b(e)30 b(belie)n(v)o(e)j(that)f(it)f
(is)g(often)150 4337 y(bene\002cial)h Fq(not)h Fv(to)d(combine)i(the)f
(dif)n(ferent)h(heuristic)h(estimates)f(into)g(a)e(single)i(numerical)g
(v)n(alue.)51 b(Instead,)150 4450 y(we)23 b(propose)j(maintaining)h(a)c
Fq(separ)o(ate)j Fv(open)f(list)g(for)f(each)h(heuristic)h(estimator)l
(,)g(which)e(is)g(sorted)i(according)150 4563 y(to)31
b(the)g(respecti)n(v)o(e)i(heuristic.)53 b(The)31 b(search)h(algorithm)
h(alternates)g(between)f(e)o(xpanding)h(a)e(state)h(from)e(each)150
4676 y(open)f(list.)42 b(Whene)n(v)o(er)30 b(a)d(state)i(is)f(e)o
(xpanded,)j(estimates)f(are)e(calculated)i(according)h(to)d
Fq(eac)o(h)h Fv(heuristic,)i(and)150 4789 y(the)24 b(successors)i(are)e
(put)g(into)g(each)g(open)h(list.)291 4918 y(When)33
b(F)o(ast)f(Do)n(wnw)o(ard)h(is)g(con\002gured)h(to)f(use)g
(multi-heuristic)j(best-\002rst)e(search,)j(it)32 b(computes)i(esti-)
150 5031 y(mates)28 b(both)h(for)f(the)g(causal)i(graph)f(heuristic)h
(and)e(FF)e(heuristic,)31 b(maintaining)g(tw)o(o)d(open)g(lists.)43
b(Of)27 b(course,)150 5144 y(the)22 b(approach)j(can)d(be)g(combined)i
(with)e(the)g(use)h(of)f(preferred)i(operators;)h(in)d(this)h(case,)g
(the)f(search)h(algorithm)150 5257 y(maintains)i(four)f(open)h(lists,)f
(as)f(each)i(heuristic)g(distinguishes)j(between)d(normal)f(and)g
(preferred)i(successors.)1888 5506 y Fy(226)p eop end
%%Page: 227 37
TeXDict begin 227 36 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)p
151 161 3598 4 v 151 1196 4 1036 v 202 249 a Fz(algorithm)g
Fv(reach-one-goal\()p Fm(\005)p Fv(,)j Ft(v)s Fv(,)22
b Ft(d)p Fv(,)h Fq(cond)r Fv(\):)438 361 y Fz(f)n(or)h(each)f
Ft(#)i Fo(2)g(f)p Fm(0)p Ft(;)15 b Fm(1)p Ft(;)g(:)g(:)g(:)j(;)d
Fq(max-thr)m(eshold)5 b Fo(g)p Fv(:)674 474 y(Let)23
b Fo(O)890 489 y Fk(#)960 474 y Fv(be)g(the)h(set)g(of)f(operators)j
(of)e Fm(\005)e Fv(whose)i(modi\002cation)i(distance)f(with)f(respect)h
(to)e Ft(v)765 587 y Fv(is)h(at)f(most)h Ft(#)p Fv(.)674
700 y(Assign)h(the)e(cost)i Ft(c)e Fv(to)g(each)h(operator)i
Ft(o)f Fo(2)g(O)2150 715 y Fk(#)2220 700 y Fv(with)e(modi\002cation)i
(distance)h Ft(c)d Fv(with)765 813 y(respect)i(to)f Ft(v)s
Fv(.)674 926 y(Call)e(the)h Fq(uniform-cost-sear)m(c)o(h)k
Fv(algorithm)d(with)e(a)f(closed)j(list,)e(using)i(the)e(operator)i
(set)f Ft(O)3629 941 y Fk(#)3675 926 y Fv(,)765 1039
y(to)h(\002nd)f(a)g(state)h(satisfying)j Fo(f)p Ft(v)i
Fm(=)c Ft(d)p Fo(g)c([)e Fq(cond)r Fv(.)674 1152 y Fz(r)n(etur)o(n)24
b Fv(the)f(plan)i(if)e(uniform-cost-search)29 b(succeeded.)p
3746 1196 V 151 1199 3598 4 v 150 1470 a(Figure)24 b(19:)47
b(The)21 b Fq(r)m(eac)o(h-one-goal)k Fv(procedure)f(for)e(reaching)h(a)
e(state)i(with)e Ft(v)28 b Fm(=)d Ft(d)p Fv(.)j(The)21
b(v)n(alue)h Fq(max-thr)m(eshold)572 1583 y Fv(is)h(equal)i(to)e(the)h
(maximal)g(modi\002cation)h(distance)h(of)d(an)o(y)h(operator)i(with)d
(respect)i(to)f Ft(v)s Fv(.)150 1960 y Fz(6.5)46 b(F)n(ocused)23
b(Iterati)o(v)o(e-Br)n(oadening)k(Sear)n(ch)150 2121
y Fv(The)j Fq(focused)i(iter)o(ative-br)l(oadening)k(sear)m(c)o(h)31
b Fv(algorithm)h(is)e(the)h(most)f(e)o(xperimental)j(piece)e(of)f(F)o
(ast)g(Do)n(wn-)150 2234 y(w)o(ard')-5 b(s)27 b(search)h(arsenal.)38
b(In)26 b(its)h(present)h(form,)e(the)h(algorithm)h(is)e(unsuitable)j
(for)d(man)o(y)h(planning)h(domains,)150 2347 y(especially)c(those)e
(containing)i(comparati)n(v)o(ely)g(fe)n(w)c(dif)n(ferent)k(goals.)29
b(Y)-9 b(et)20 b(we)g(think)j(that)e(it)g(might)h(contain)h(the)150
2460 y(nucleus)28 b(for)f(a)f(successful)j(approach)f(to)f
(domain-independent)32 b(planning)c(which)f(is)f(v)o(ery)h(dif)n
(ferent)h(to)e(most)150 2573 y(current)f(methods,)g(so)e(we)g(include)i
(it)f(for)f(completeness)k(and)d(as)f(a)g(source)i(of)f(inspiration.)
291 2686 y(The)18 b(algorithm)j(is)d(intended)j(as)d(a)h(\002rst)f
(step)h(to)n(w)o(ards)h(de)n(v)o(eloping)h(search)f(techniques)h(that)e
(emphasize)i(the)150 2799 y(idea)i(of)g(using)g(heuristic)i(criteria)f
(locally)-6 b(,)25 b(for)d(limiting)i(the)f(set)g(of)f(operators)j(to)d
(apply)-6 b(,)24 b(rather)g(than)f(globally)-6 b(,)150
2912 y(for)25 b(choosing)i(which)e(states)h(to)f(e)o(xpand)h(from)f(a)f
(global)j(set)e(of)g(open)g(states.)34 b(W)-7 b(e)24
b(made)h(\002rst)f(e)o(xperiments)j(in)150 3024 y(this)c(direction)h
(after)f(observing)i(the)d(lar)n(ge)i(boost)f(in)f(performance)j(that)d
(can)h(be)f(obtained)i(by)f(using)g(preferred)150 3137
y(operators)33 b(in)d(heuristic)i(search.)50 b(The)30
b(algorithm)i(performed)g(surprisingly)i(well)c(in)g(some)g(of)h(the)f
(standard)150 3250 y(benchmark)c(domains,)e(while)g(performing)i(badly)
e(in)g(most)f(others.)291 3363 y(As)h(the)i(name)f(suggests,)i(the)f
(algorithm)h Fq(focuses)f Fv(the)g(search)g(by)f(concentrating)30
b(on)25 b(one)g(goal)h(at)f(a)g(time,)150 3476 y(and)f(by)g
(restricting)i(its)e(attention)i(to)d(operators)j(which)e(are)g
(supposedly)i(important)g(for)d(reaching)j(that)e(goal:)150
3689 y Fz(De\002nition)f(9)46 b Fj(Modi\002cation)24
b(distances)150 3802 y Fq(Let)f Fm(\005)g Fq(be)g(an)h(MPT)-7
b(,)22 b(let)h Ft(o)g Fq(be)h(an)f(oper)o(ator)j(of)d
Fm(\005)p Fq(,)g(and)h(let)g Ft(v)i Fq(be)d(a)g(variable)j(of)d
Fm(\005)p Fq(.)291 3915 y(The)k Fj(modi\002cation)h(distance)h
Fq(of)e Ft(o)g Fq(with)g(r)m(espect)h(to)g Ft(v)h Fq(is)f(de\002ned)h
(as)e(the)h(minimum,)f(o)o(ver)h(all)g(variables)150
4028 y Ft(v)197 3995 y Fu(0)243 4028 y Fq(that)d(occur)f(as)g(af)n
(fected)i(variables)g(in)d(the)h(ef)n(fect)h(list)f(of)f
Ft(o)p Fq(,)g(of)g(the)h(distance)i(fr)l(om)d Ft(v)2963
3995 y Fu(0)3010 4028 y Fq(to)g Ft(v)j Fq(in)e(CG)o Fm(\(\005\))p
Fq(.)291 4241 y Fv(F)o(or)g(e)o(xample,)i(operators)i(that)e(modify)g
Ft(v)h Fv(directly)g(ha)n(v)o(e)f(a)f(modi\002cation)i(distance)g(of)e
(0)g(with)g(respect)h(to)150 4354 y Ft(v)s Fv(,)32 b(operators)i(that)e
(modify)g(v)n(ariables)h(which)f(occur)g(in)f(preconditions)36
b(of)31 b(operators)j(modifying)f Ft(v)h Fv(ha)n(v)o(e)e(a)150
4467 y(modi\002cation)f(distance)g(of)e(1,)g(and)h(so)f(on.)45
b(W)-7 b(e)28 b(assume)i(that)f(in)g(order)h(to)f(change)h(the)g(v)n
(alue)f(of)g(a)g(v)n(ariable,)150 4580 y(operators)d(with)d(a)g(lo)n(w)
g(modi\002cation)j(distance)f(with)f(respect)h(to)e(this)h(v)n(ariable)
i(are)d(most)h(useful.)291 4693 y(Fig.)d(19)h(sho)n(ws)g(the)g
Fq(r)m(eac)o(h-one-goal)k Fv(procedure)e(for)e(achie)n(ving)i(a)e
(single)h(goal)f(of)g(an)g(MPT)-7 b(.)19 b(F)o(or)i(the)h(time)150
4806 y(being,)34 b(assume)f(that)e(the)h Fq(cond)h Fv(parameter)g(is)e
(al)o(w)o(ays)h Fo(;)p Fv(.)52 b(The)31 b(procedure)j(mak)o(es)e(use)g
(of)f(the)h(assumption)150 4918 y(that)37 b(high)g(modi\002cation)i
(distance)f(implies)g(lo)n(w)d(usefulness)40 b(in)c(tw)o(o)g(w)o(ays.)
68 b(First,)39 b(operators)g(with)d(high)150 5031 y(modi\002cation)c
(distance)f(with)f(respect)h(to)f(the)g(goal)g(v)n(ariable)i(are)d
(considered)k(to)d(ha)n(v)o(e)g(a)f(higher)i(associated)150
5144 y(cost,)20 b(and)e(are)h(hence)g(applied)h(less)f(frequently)-6
b(.)29 b(Second,)20 b(operators)h(whose)e(modi\002cation)g(distance)i
(is)d(be)o(yond)150 5257 y(a)k(certain)j(threshold)g(are)e(forbidden)i
(completely)-6 b(.)31 b(Instead)25 b(of)d(choosing)k(a)c(threshold)j(a)
e(priori,)g(the)g(algorithm)1888 5506 y Fy(227)p eop
end
%%Page: 228 38
TeXDict begin 228 37 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)150
249 y Fv(\002rst)30 b(tries)i(to)e(\002nd)h(a)f(solution)j(with)d(the)h
(lo)n(west)g(possible)i(threshold)g(of)d(0,)i(increasing)i(the)d
(threshold)i(by)e(1)150 361 y(whene)n(v)o(er)d(the)g(pre)n(vious)h
(search)f(has)g(f)o(ailed.)41 b(The)27 b Fq(uniform-cost-sear)m(c)o(h)k
Fv(algorithm)e(mentioned)h(in)d(Fig.)f(19)150 474 y(is)d(the)h
(standard)i(te)o(xtbook)f(method)g(\(Russell)g(&)d(Norvig,)i(2003\).)
291 591 y(Although)f(we)e(were)g(ignorant)j(of)d(this)h(f)o(act)g(at)f
(the)h(time)g(our)f(algorithm)j(w)o(as)d(concei)n(v)o(ed,)i(the)f(core)
g(idea)g(of)150 703 y Fq(r)m(eac)o(h-one-goal)29 b Fv(is)24
b(not)h(ne)n(w:)31 b(Ginsber)n(g)26 b(and)f(Harv)o(e)o(y)g(\(1992\))h
(present)g(a)e(search)i(technique)i(called)d Fq(iter)o(ative)150
816 y(br)l(oadening)p Fv(,)h(which)d(is)g(also)g(based)h(on)f(the)g
(idea)g(of)g(repeatedly)j(doing)e(a)e(sequence)j(of)e(uninformed)i
(searches)150 929 y(with)i(an)h(e)n(v)o(er)n(-gro)n(wing)h(set)f(of)f
(operators.)42 b(Their)28 b(w)o(ork)f(demonstrates)k(the)c(superiority)
k(of)c(iterati)n(v)o(e)i(broad-)150 1042 y(ening)i(o)o(v)o(er)e
(standard)j(depth-bounded)i(search)d(both)f(empirically)i(and)e
(analytically)j(under)d(the)g(reasonable)150 1155 y(assumption)g(that)e
(the)g(choices)h(made)f(at)g(each)g(branching)i(point)f(are)f(equally)h
(important.)3111 1122 y FB(6)3191 1155 y Fv(The)f(original)h(it-)150
1268 y(erati)n(v)o(e)h(broadening)i(algorithm)f(applies)f(to)f
(scenarios)j(without)e(an)o(y)f(kno)n(wledge)h(of)f(the)g(problem)i
(domain,)150 1381 y(so)25 b(it)g(chooses)j(the)d(set)g(of)h(operators)h
(which)f(may)f(be)g(applied)i(at)e(e)n(v)o(ery)h(search)h(node)f
(randomly)-6 b(,)27 b(rather)f(than)150 1494 y(using)31
b(heuristic)g(information)h(from)d(the)h(causal)g(graph)h(as)e(in)g
(our)h(case.)47 b(Ho)n(we)n(v)o(er)l(,)30 b(Ginsber)n(g)h(and)f(Harv)o
(e)o(y)150 1607 y(already)g(discuss)h(the)e(potential)i(incorporation)i
(of)28 b(heuristics)k(into)d(the)g(operator)i(selection.)46
b(The)29 b(introduc-)150 1720 y(tion)23 b(of)f(operator)i(costs)f(\(in)
f(the)h(form)f(of)g(modi\002cation)i(distances\))h(is)c(ne)n(w)-6
b(,)22 b(b)n(ut)h(it)f(is)g(a)f(f)o(airly)i(straightforw)o(ard)150
1833 y(e)o(xtension)j(where)e(heuristic)h(information)h(is)e(a)n(v)n
(ailable.)291 1949 y(The)i(focused)i(iterati)n(v)o(e-broadening)k
(search)c(algorithm)g(is)e(based)h(on)f(the)h Fq(r)m(eac)o(h-one-goal)j
Fv(method;)f(the)150 2062 y(idea)j(is)f(to)g(achie)n(v)o(e)i(the)e
(goals)h(of)g(the)f(planning)j(task)e(one)f(after)h(the)g(other)l(,)i
(by)d(using)i(the)e Fq(r)m(eac)o(h-one-goal)150 2175
y Fv(algorithm)25 b(as)e(the)h(core)f(subroutine)k(for)c(satisfying)j
(indi)n(vidual)g(goals.)j(Since)24 b(it)f(is)g(not)g(ob)o(vious)i(what)
e(a)g(good)150 2288 y(order)k(of)e(achie)n(ving)k(the)d(goals)g(w)o
(ould)h(be,)f(one)g(in)l(v)n(ocation)j(of)d Fq(r)m(eac)o(h-one-goal)k
Fv(is)25 b(started)i(for)f(each)h(goal)f(in)150 2400
y(parallel.)55 b(As)31 b(each)h(one-goal)i(solv)o(er)f(focuses)g(on)f
(the)g(\(supposedly\))j(rele)n(v)n(ant)e(operators)h(for)e(reaching)i
(its)150 2513 y(particular)27 b(goal,)e(there)h(is)e(hope)i(that)f(the)
g(number)g(of)g(states)g(considered)j(before)e(a)e(goal)h(is)g(reached)
h(is)e(small.)150 2626 y(Once)e(one)h(of)f(the)g(one-goal)j(solv)o(ers)
e(reaches)h(its)f(goal,)f(the)h(resulting)h(plan)f(is)f(reported)j(and)
d(all)h(sub-searches)150 2739 y(are)29 b(stopped.)46
b(The)28 b(o)o(v)o(erall)i(search)g(algorithm)g(commits)f(to)g(this)g
(part)g(of)g(the)g(plan;)j(the)d(situation)i(in)e(which)150
2852 y(the)24 b(\002rst)f(goal)h(has)g(been)h(reached)g(is)e
(considered)k(a)c(ne)n(w)g(initial)i(state.)291 2968
y(From)d(this)h(situation,)i(we)d(try)h(to)f(satisfy)j(the)e(second)h
(goal,)f(by)g(once)h(more)e(starting)j(parallel)f(in)l(v)n(ocations)150
3081 y(of)k Fq(r)m(eac)o(h-one-goal)j Fv(for)d(each)g(possible)i
(second)f(goal.)42 b(Of)27 b(course,)j(this)e(can)g(lead)g(to)g(a)f
(situation)j(where)e(the)150 3194 y(search)20 b(algorithm)h(oscillates)
g(between)f(goals,)g(\002rst)f(achie)n(ving)i(goal)e
Ft(a)p Fv(,)g(then)h(abandoning)i(it)c(in)h(f)o(a)n(v)n(our)i(of)d
(goal)150 3307 y Ft(b)p Fv(,)29 b(without)i(an)o(y)e(sign)h(of)f
(making)h(real)f(progress.)48 b(Therefore,)31 b(we)e(demand)h(that)g
Fq(r)m(eac)o(h-one-goal)j Fv(achie)n(v)o(es)150 3420
y(the)28 b(second)h(goal)g Fq(in)e(addition)j Fv(to)e(the)g(one)g(we)f
(reached)j(\002rst,)e(by)f(setting)j(the)e Fq(cond)g
Fv(ar)n(gument)i(accordingly)-6 b(.)150 3533 y(Once)29
b(tw)o(o)f(goals)i(ha)n(v)o(e)f(been)h(reached,)h(the)f(sub-searches)i
(are)d(again)g(stopped,)j(sub-searches)g(for)d(the)g(third)150
3646 y(goal)24 b(are)g(started,)h(and)f(so)f(on,)h(until)g(all)g(goals)
g(ha)n(v)o(e)h(been)f(reached.)291 3762 y(In)f(some)g(sense,)h(our)g
(focusing)h(technique)h(is)d(similar)h(to)f(the)h(beam)f(search)h
(algorithm)h(\(Lo)n(werre,)e(1976\),)150 3875 y(which)g(also)g
(performs)h(a)f(\002x)o(ed)f(number)i(of)e(concurrent)k(searches)e(to)f
(a)n(v)n(oid)h(committing)g(to)f(a)f(particular)j(path)150
3988 y(in)h(the)h(search)h(space)g(too)e(early)-6 b(.)39
b(Beam)26 b(search)i(uses)f(a)f(heuristic)j(function)f(to)f(e)n(v)n
(aluate)h(which)f(branches)h(of)150 4101 y(search)e(should)h(be)e
(abandoned)j(and)e(where)f(ne)n(w)f(branches)j(should)g(be)e(spa)o
(wned.)34 b(While)26 b(focused)g(iterati)n(v)o(e-)150
4214 y(broadening)d(search)f(does)f(not)f(appear)i(to)e(use)g
(heuristic)i(e)n(v)n(aluations)h(at)d(\002rst)g(glance,)i(the)e(number)
h(of)f(satis\002ed)150 4327 y(goals)25 b(of)f(a)g(state)h(is)e(used)i
(as)f(an)g(e)n(v)n(aluation)j(criterion)f(in)e(essentially)j(the)d
(same)g(w)o(ay)-6 b(.)30 b(One)24 b(important)i(dif)n(fer)n(-)150
4440 y(ence)g(to)g(beam)g(search)h(is)f(our)g(use)g(of)g
(modi\002cation)h(distances)i(relati)n(v)o(e)d(to)g(a)f(particular)k
(goal,)e(which)f(means)150 4552 y(that)e(the)g(dif)n(ferent)h
(\223beams\224)g(e)o(xplore)g(the)f(state)g(space)h(in)e(qualitati)n(v)
o(ely)k(dif)n(ferent)e(w)o(ays.)291 4669 y(There)k(is)f(one)h(\002nal)f
(twist:)40 b(T)-7 b(o)27 b(moti)n(v)n(ate)i Fq(r)m(eac)o(h-one-goal)k
Fv(not)c(to)f(needlessly)k(w)o(ander)d(a)o(w)o(ay)f(from)h(sat-)150
4782 y(is\002ed)f(goals,)i(we)d(forbid)i(applying)h(operators)g(that)f
(undo)f(an)o(y)g(of)g(the)g(pre)n(viously)j(achie)n(v)o(ed)e(goals)g
(in)f Fq(cond)q Fv(.)150 4895 y(This)e(is)g(an)h(old)f(idea)h(called)h
Fq(goal)f(pr)l(otection)i Fv(\(Joslin)f(&)d(Roach,)i(1989\).)39
b(It)26 b(is)g(well-kno)n(wn)i(that)e(protecting)p 150
4989 1440 4 v 195 5075 a Fn(6.)e(See)18 b(the)i(original)f(analysis)h
(for)f(a)h(precise)f(de\002nition)h(of)f(\223equally)h(important\224)g
(\(Ginsber)o(g)g(&)f(Harv)o(e)o(y)-5 b(,)19 b(1992\).)26
b(While)18 b(Ginsber)o(g)275 5166 y(and)e(Harv)o(e)o(y')l(s)g
(assumption)g(is)f(certainly)h(not)g(v)n(alid)g(in)f(practice,)h(we)g
(\002nd)f(it)g(much)i(more)e(con)m(vincing)j(than)e(the)f(competing)i
(model)275 5257 y(where)i(goal)g(states)g(are)g(uniformly)g(distrib)o
(uted)g(across)h(the)e(search)i(fringe.)1888 5506 y Fy(228)p
eop end
%%Page: 229 39
TeXDict begin 229 38 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)p
151 161 3598 4 v 151 2100 4 1940 v 202 249 a Fz(algorithm)g
Fv(reach-one-goal\()p Fm(\005)p Fv(,)j Ft(v)s Fv(,)22
b Ft(d)p Fv(,)h Fq(cond)r Fv(\):)438 361 y Fz(f)n(or)h(each)f
Ft(#)i Fo(2)g(f)p Fm(0)p Ft(;)15 b Fm(1)p Ft(;)g(:)g(:)g(:)j(;)d
Fq(max-thr)m(eshold)5 b Fo(g)p Fv(:)674 474 y(Let)23
b Fo(O)890 489 y Fk(#)960 474 y Fv(be)g(the)h(set)g(of)f(operators)j
(of)e Fm(\005)e Fv(whose)i(modi\002cation)i(distance)f(with)f(respect)h
(to)e Ft(v)765 587 y Fv(is)h(at)f(most)h Ft(#)e Fv(and)i(which)g(do)g
(not)g(af)n(fect)g(an)o(y)g(state)g(v)n(ariable)h(occurring)h(in)e
Fq(cond)q Fv(.)674 700 y(Assign)h(the)e(cost)i Ft(c)e
Fv(to)g(each)h(operator)i Ft(o)f Fo(2)g(O)2150 715 y
Fk(#)2220 700 y Fv(with)e(modi\002cation)i(distance)h
Ft(c)d Fv(with)765 813 y(respect)i(to)f Ft(v)s Fv(.)674
926 y(Call)e(the)h Fq(uniform-cost-sear)m(c)o(h)k Fv(algorithm)d(with)e
(a)f(closed)j(list,)e(using)i(the)e(operator)i(set)f
Ft(O)3629 941 y Fk(#)3675 926 y Fv(,)765 1039 y(to)h(\002nd)f(a)g
(state)h(satisfying)j Fo(f)p Ft(v)i Fm(=)c Ft(d)p Fo(g)c([)e
Fq(cond)r Fv(.)674 1152 y Fz(r)n(etur)o(n)24 b Fv(the)f(plan)i(if)e
(uniform-cost-search)29 b(succeeded.)438 1265 y Fz(f)n(or)24
b(each)f Ft(#)i Fo(2)g(f)p Fm(0)p Ft(;)15 b Fm(1)p Ft(;)g(:)g(:)g(:)j
(;)d Fq(max-thr)m(eshold)5 b Fo(g)p Fv(:)674 1378 y(Let)23
b Fo(O)890 1393 y Fk(#)960 1378 y Fv(be)g(the)h(set)g(of)f(operators)j
(of)e Fm(\005)e Fv(whose)i(modi\002cation)i(distance)f(with)f(respect)h
(to)e Ft(v)765 1491 y Fv(is)h(at)f(most)h Ft(#)p Fv(.)674
1603 y(Assign)h(the)e(cost)i Ft(c)e Fv(to)g(each)h(operator)i
Ft(o)f Fo(2)g(O)2150 1618 y Fk(#)2220 1603 y Fv(with)e(modi\002cation)i
(distance)h Ft(c)d Fv(with)765 1716 y(respect)i(to)f
Ft(v)s Fv(.)674 1829 y(Call)e(the)h Fq(uniform-cost-sear)m(c)o(h)k
Fv(algorithm)d(with)e(a)f(closed)j(list,)e(using)i(the)e(operator)i
(set)f Ft(O)3629 1844 y Fk(#)3675 1829 y Fv(,)765 1942
y(to)h(\002nd)f(a)g(state)h(satisfying)j Fo(f)p Ft(v)i
Fm(=)c Ft(d)p Fo(g)c([)e Fq(cond)r Fv(.)674 2055 y Fz(r)n(etur)o(n)24
b Fv(the)f(plan)i(if)e(uniform-cost-search)29 b(succeeded.)p
3746 2100 V 151 2103 3598 4 v 403 2357 a(Figure)24 b(20:)29
b(The)23 b Fq(r)m(eac)o(h-one-goal)28 b Fv(procedure)e(for)e(reaching)h
(a)f(state)g(with)f Ft(v)29 b Fm(=)c Ft(d)e Fv(\(corrected\).)150
2653 y(goals)i(renders)h(a)e(search)i(algorithm)g(incomplete,)g(e)n(v)o
(en)e(in)h(state)g(spaces)g(where)g(all)f(operators)j(are)d(re)n(v)o
(ersible)150 2765 y(and)g(local)g(search)g(approaches)i(lik)o(e)e
(focused)h(iterati)n(v)o(e-broadening)k(search)24 b(w)o(ould)g(be)f
(otherwise)i(complete.)150 2878 y(In)g(particular)l(,)j(search)e(must)f
(f)o(ail)g(in)g(planning)i(tasks)f(which)f(are)g(not)h
Fq(serializable)i Fv(\(K)m(orf,)d(1987\).)34 b(Therefore,)150
2991 y(if)29 b(the)g(\002rst)f(solution)j(attempt)f(f)o(ails,)g(the)g
(algorithm)g(is)f(restarted)i(without)e(goal)h(protection.)47
b(The)29 b(complete)150 3104 y(procedure)e(is)d(sho)n(wn)h(in)f(Fig.)g
(20,)g(which)h(concludes)i(our)d(discussion)k(of)c(F)o(ast)g(Do)n(wnw)o
(ard')-5 b(s)25 b(search)g(compo-)150 3217 y(nent.)150
3487 y Fw(7.)35 b(Experiments)150 3669 y Fv(T)-7 b(o)19
b(e)n(v)n(aluate)j(the)e(performance)i(of)e(F)o(ast)g(Do)n(wnw)o(ard,)g
(and)h(speci\002cally)h(the)e(dif)n(ferences)j(between)e(the)g(v)n
(arious)150 3782 y(con\002gurations)29 b(of)c(the)g(search)i
(component,)g(we)d(ha)n(v)o(e)i(performed)h(a)e(number)h(of)f(e)o
(xperiments)i(on)f(the)f(set)g(of)150 3894 y(benchmarks)33
b(from)d(the)h(pre)n(vious)h(international)i(planning)f(competitions.)
52 b(The)30 b(purpose)i(of)f(these)g(e)o(xperi-)150 4007
y(ments)e(is)g(to)g(compare)h(F)o(ast)e(Do)n(wnw)o(ard)h(to)g(the)g
(state)g(of)g(the)g(art)g(in)g(PDDL)e(planning,)32 b(and)d(to)g
(contrast)i(the)150 4120 y(performance)24 b(of)e(the)h(dif)n(ferent)g
(search)h(algorithms)g(of)e(F)o(ast)f(Do)n(wnw)o(ard)h(\(greedy)h
(best-\002rst)h(search)f(with)f(and)150 4233 y(without)29
b(preferred)i(operators,)h(multi-heuristic)g(best-\002rst)e(search)g
(with)e(and)h(without)g(preferred)i(operators,)150 4346
y(and)24 b(focused)h(iterati)n(v)o(e-broadenin)q(g)k(search\).)291
4468 y(T)-7 b(o)24 b(clearly)j(state)f(the)g(purpose)h(of)f(our)f(e)o
(xperiments,)j(let)d(us)h(also)g(point)g(out)g(tw)o(o)f(areas)h(w)o
(orthy)g(of)f(study)150 4581 y(that)f(we)f(do)g Fq(not)j
Fv(choose)f(to)f(in)l(v)o(estigate)i(here:)286 4806 y
Fo(\017)46 b Fv(W)-7 b(e)34 b(do)h(not)h(compare)g(the)f(causal)i
(graph)f(heuristic)h(to)e(other)h(heuristics,)k(such)c(as)f(the)g(FF)e
(or)i(HSP)377 4918 y(heuristics.)53 b(Such)31 b(a)f(comparison)j(w)o
(ould)e(require)h(e)n(v)n(aluating)i(the)c(dif)n(ferent)j(heuristics)g
(within)f(oth-)377 5031 y(erwise)26 b(identical)j(planning)f(systems.)
36 b(W)-7 b(e)25 b(ha)n(v)o(e)h(performed)i(such)f(an)e(e)o(xperiment)j
(before)f(\(Helmert,)377 5144 y(2004\))22 b(and)f(thus)g(prefer)h(to)f
(dedicate)h(this)g(section)g(to)e(an)h(e)n(v)n(aluation)i(of)d(the)h
(complete)h(F)o(ast)e(Do)n(wnw)o(ard)377 5257 y(planning)26
b(system,)e(rather)h(than)f(just)g(its)g(heuristic)i(function.)1888
5506 y Fy(229)p eop end
%%Page: 230 40
TeXDict begin 230 39 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)286
249 y Fo(\017)46 b Fv(W)-7 b(e)25 b(do)g(not)g(gi)n(v)o(e)h(a)e
(\002nal)h(answer)h(to)f(the)h(question)h Fq(why)e Fv(F)o(ast)f(Do)n
(wnw)o(ard)h(performs)i(well)e(or)g(badly)h(in)377 361
y(the)i(domains)h(we)e(analyse.)43 b(Where)29 b(we)e(do)g(observ)o(e)j
(bad)e(performance,)j(we)c(try)h(to)g(gi)n(v)o(e)f(a)h(plausible)377
474 y(e)o(xplanation)e(for)c(this,)h(b)n(ut)g(we)f(do)g(not)h(conduct)h
(a)e(full-blo)n(wn)i(study)g(of)e(heuristic)j(quality)f(in)e(the)h
(spirit)377 587 y(of)e(Hof)n(fmann')-5 b(s)22 b(w)o(ork)g(on)f(the)g
(FF)e(and)j Ft(h)1699 554 y Fs(+)1779 587 y Fv(heuristics)h(\(Hof)n
(fmann,)f(2005\).)30 b(While)21 b(we)f(do)h(belie)n(v)o(e)i(that)377
700 y(much)31 b(could)h(be)e(learned)j(from)d(such)h(an)g(in)l(v)o
(estigation,)k(it)c(is)f(a)g(major)h(undertaking)j(that)d(w)o(ould)g
(go)377 813 y(be)o(yond)25 b(the)f(scope)h(of)e(this)h(article.)291
997 y(Our)33 b(aim)f(in)h(this)h(section)h(is)d(to)h(e)n(v)n(aluate)i
(the)e(F)o(ast)g(Do)n(wnw)o(ard)g(planner)h(as)f(a)g(whole,)i(so)e
(there)h(are)g(a)150 1110 y(number)23 b(of)e(algorithmic)j(questions)h
(which)d(we)f(do)h(not)g(address.)30 b(F)o(or)21 b(e)o(xample,)h(one)h
(might)f(w)o(onder)h(what)e(\(if)150 1223 y(an)o(y\))j(speed-up)i(can)d
(be)h(obtained)i(by)d(using)i(successor)h(generators)g(o)o(v)o(er)e
(simpler)g(methods)h(which)f(test)f(each)150 1335 y(operator)33
b(for)e(applicability)j(whene)n(v)o(er)e(a)e(node)h(is)g(e)o(xpanded.)
52 b(Another)32 b(question)h(concerns)g(the)e(e)o(xtent)g(to)150
1448 y(which)23 b(deferred)h(heuristic)g(e)n(v)n(aluation)h(af)n(fects)
f(search)f(performance.)31 b(T)-7 b(o)21 b(k)o(eep)i(this)g(section)h
(at)e(a)g(reasonable)150 1561 y(length,)k(we)e(do)h(not)g(discuss)i
(either)f(of)f(these)h(questions)h(here.)33 b(Ho)n(we)n(v)o(er)l(,)25
b(we)f(ha)n(v)o(e)h(conducted)j(e)o(xperiments)150 1674
y(addressing)f(them,)c(and)h(include)h(their)g(results)g(in)e(an)h
(electronic)i(appendix)g(to)d(this)h(paper)-5 b(.)3087
1641 y FB(7)150 1907 y Fz(7.1)46 b(Benchmark)22 b(Set)150
2068 y Fv(The)33 b(benchmark)i(set)f(we)e(use)i(consists)h(of)e(all)g
(propositional)38 b(planning)d(tasks)f(from)g(the)f(fully)h(automated)
150 2181 y(tracks)27 b(of)f(the)g(\002rst)g(four)g(international)k
(planning)e(competitions)h(hosted)f(at)d(AIPS)f(1998,)k(AIPS)c(2000,)j
(AIPS)150 2294 y(2002)f(and)f(ICAPS)e(2004.)34 b(The)25
b(set)g(of)g(benchmark)i(domains)f(is)f(sho)n(wn)h(in)e(Fig.)h(21.)33
b(Altogether)l(,)27 b(the)f(bench-)150 2407 y(mark)h(suite)h(comprises)
g(1442)g(tasks.)40 b(\(The)27 b(numbers)h(in)f(Fig.)f(21)h(add)g(up)g
(to)g(1462,)h(b)n(ut)g(the)f(20)i(S)t Fr(A)l(T)t(E)t(L)t(L)t(I)t(T)t(E)
150 2520 y Fv(instances)j(that)d(were)g(introduced)j(for)d(IPC3)g(were)
g(also)g(part)h(of)f(the)g(benchmark)i(set)f(of)f(IPC4,)g(so)g(we)f
(only)150 2633 y(count)d(them)e(once.\))291 2745 y(W)-7
b(e)23 b(distinguish)k(between)d(three)h(classes)g(of)e(domains:)286
2929 y Fo(\017)46 b Fq(STRIPS)20 b(domains:)30 b Fv(These)21
b(domains)h(do)g(not)f(feature)i(deri)n(v)o(ed)f(predicates)i(or)d
(conditional)j(ef)n(fects,)f(and)377 3042 y(all)h(conditions)i
(appearing)h(in)c(goal)h(and)g(operators)i(are)e(conjunctions)j(of)d
(positi)n(v)o(e)h(literals.)286 3228 y Fo(\017)46 b Fq(ADL)18
b(domains:)29 b Fv(These)20 b(domains)h(mak)o(e)f(use)g(of)g
(conditional)j(ef)n(fects)f(in)d(their)i(operator)h(and/or)f(contain)
377 3341 y(more)h(general)h(conditions)h(than)e(simple)g(conjunctions)j
(in)c(their)h(goals)g(and)g(operators.)31 b(Ho)n(we)n(v)o(er)l(,)21
b(the)o(y)377 3454 y(do)j(not)g(require)h(axioms.)286
3640 y Fo(\017)46 b Fq(PDDL2.2)28 b(domains:)42 b Fv(These)29
b(domains)i(use)e(the)h(full)f(range)i(of)e(propositional)k(PDDL2.2,)c
(including)377 3753 y(those)c(features)g(present)h(in)d(ADL)f(domains)i
(and)g(axioms.)291 3936 y(At)j(IPC4,)g(some)h(domains)h(were)e
(presented)k(in)c(dif)n(ferent)j Fq(formulations)p Fv(,)h(meaning)e
(that)f(the)g(same)f(real-)150 4049 y(w)o(orld)33 b(task)h(w)o(as)e
(encoded)j(in)e(se)n(v)o(eral)h(dif)n(ferent)g(w)o(ays.)57
b(P)o(articipants)35 b(were)d(ask)o(ed)j(to)d(only)i(w)o(ork)f(on)g
(one)150 4162 y(formulation)25 b(per)e(domain,)h(being)g(able)f(to)g
(choose)h(their)g(preferred)h(formulation)g(for)e(a)f(gi)n(v)o(en)i
(domain)f(freely)-6 b(.)150 4275 y(F)o(or)18 b(e)o(xample,)i(the)h(A)t
Fr(I)t(R)t(P)t(O)t(RT)h Fv(domain)e(w)o(as)e(a)n(v)n(ailable)j(in)e(a)f
(STRIPS)e(formulation)21 b(and)f(an)e(ADL)f(formulation.)291
4388 y(Ho)n(we)n(v)o(er)l(,)33 b(the)e(or)n(ganizers)j(did)e(not)g
(strictly)h(follo)n(w)e(the)h(rule)f(of)g(considering)k(dif)n(ferent)e
(encodings)h(of)150 4501 y(the)27 b(same)g(real-w)o(orld)i(task)e(dif)n
(ferent)i Fq(formulations)p Fv(,)i(rather)d(than)f(dif)n(ferent)i
(domains)f(proper)-5 b(.)40 b(Namely)-6 b(,)28 b(for)150
4614 y(the)c(P)t(S)t(R)t(-)t(M)t Fr(I)t(D)t(D)t(L)t(E)i
Fv(and)e(P)t Fr(R)q(O)t(M)t(E)t(L)t(A)h Fv(domains,)e(encodings)h(with)
d(and)h(without)g(axioms)h(were)e(a)n(v)n(ailable,)j(and)150
4727 y(these)h(were)e(considered)k(as)c(dif)n(ferent)j(domains)f(on)f
(the)g(grounds)i(that)e(the)g(encodings)i(without)f(axioms)f(were)p
150 4806 1440 4 v 195 4892 a Fn(7.)g(See)h Fe(http://www.jair.org/)p
Fn(.)38 b(The)26 b(short)f(summary)i(is)e(that)g(successor)h
(generators)h(speed)f(up)g(search)g(by)g(up)f(to)h(tw)o(o)275
4983 y(orders)17 b(of)g(magnitude)i(in)e(e)o(xtreme)g(cases)h(lik)o(e)f
(the)g(lar)o(gest)i(S)t Ff(A)m(T)t(E)t(L)t(L)t(I)t(T)t(E)13
b Fn(tasks,)k(b)o(ut)g(ha)o(v)o(e)g(little)f(impact)i(on)f(performance)
i(most)e(of)275 5075 y(the)h(time.)23 b(Deferred)c(heuristic)g(e)n(v)n
(aluation)h(is)e(v)o(ery)i(bene\002cial)f(in)f(some)i(domains,)f(with)g
(speed-ups)h(of)f(more)g(than)g(one)h(order)f(of)275
5166 y(magnitude)i(being)h(common,)f(is)g(some)n(what)g(bene\002cial)g
(in)f(the)h(majority)f(of)h(domains,)g(with)f(speed-ups)i(between)g(2)e
(and)h(4,)g(and)275 5257 y(is)d(v)o(ery)h(rarely)g(detrimental)g(to)g
(performance.)1888 5506 y Fy(230)p eop end
%%Page: 231 41
TeXDict begin 231 40 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)442
857 y Fz(Competition)690 b(Domain)638 b(Class)173 b(Number)22
b(of)h(tasks)318 1019 y Fv(IPC1)f(\(AIPS)g(1998\))165
b(A)t Fr(S)t(S)t(E)t(M)t(B)t(L)m(Y)998 b Fv(ADL)731 b(30)1152
1132 y(G)t Fr(R)t(I)t(D)1161 b Fv(STRIPS)720 b(5)1152
1245 y(G)t Fr(R)t(I)t(P)t(P)t(E)t(R)1029 b Fv(STRIPS)674
b(20)1152 1358 y(L)t Fr(O)t(G)t(I)t(S)t(T)t(I)t(C)t(S)950
b Fv(STRIPS)674 b(35)1152 1471 y(M)t Fr(OV)t(I)t(E)1098
b Fv(STRIPS)674 b(30)1152 1584 y(M)t Fr(Y)t(S)t(T)t(E)t(R)o(Y)982
b Fv(STRIPS)674 b(30)1152 1697 y(M)t(P)t Fr(R)t(I)t(M)t(E)1031
b Fv(STRIPS)674 b(35)318 1860 y(IPC2)22 b(\(AIPS)g(2000\))165
b(B)t Fr(L)t(O)t(C)t(K)t(S)t(W)s(O)t(R)t(L)t(D)758 b
Fv(STRIPS)674 b(35)1152 1972 y(F)t Fr(R)t(E)t(E)t(C)t(E)t(L)t(L)968
b Fv(STRIPS)674 b(60)1152 2085 y(L)t Fr(O)t(G)t(I)t(S)t(T)t(I)t(C)t(S)
950 b Fv(STRIPS)674 b(28)1152 2198 y(M)t Fr(I)t(C)t(O)t(N)t(I)t(C)t
Fv(-)t(S)t(T)t(R)t(I)t(P)t(S)650 b(STRIPS)629 b(150)1152
2311 y(M)t Fr(I)t(C)t(O)t(N)t(I)t(C)t Fv(-)t(S)t Fr(I)t(M)t(P)t(L)t(E)t
Fv(A)5 b(D)t(L)536 b(ADL)686 b(150)1152 2424 y(M)t Fr(I)t(C)t(O)t(N)t
(I)t(C)t Fv(-)t(F)t Fr(U)t(L)t(L)t Fv(A)t(D)t(L)621 b(ADL)686
b(150)1152 2537 y(S)t Fr(C)t(H)t(E)t(D)t(U)t(L)t(E)1001
b Fv(ADL)686 b(150)318 2700 y(IPC3)22 b(\(AIPS)g(2002\))165
b(D)t Fr(E)t(P)t(O)q(T)1105 b Fv(STRIPS)674 b(22)1152
2813 y(D)t Fr(R)t(I)t(V)t(E)t(R)t(L)t(O)t(G)898 b Fv(STRIPS)674
b(20)1152 2926 y(F)t Fr(R)t(E)t(E)t(C)t(E)t(L)t(L)968
b Fv(STRIPS)674 b(20)1152 3038 y(R)q Fr(OV)t(E)t(R)t(S)1052
b Fv(STRIPS)674 b(20)1152 3151 y(S)t Fr(A)l(T)t(E)t(L)t(L)t(I)t(T)t(E)
949 b Fv(STRIPS)674 b(20)1152 3264 y(Z)t Fr(E)t(N)t(O)q(T)t(R)t(A)-6
b(V)t(E)t(L)849 b Fv(STRIPS)674 b(20)318 3427 y(IPC4)22
b(\(ICAPS)g(2004\))104 b(A)t Fr(I)t(R)t(P)t(O)t(RT)1020
b Fv(STRIPS)674 b(50)1152 3540 y(P)t Fr(R)q(O)t(M)t(E)t(L)t(A)t
Fv(-)t(O)t Fr(P)t(T)t(I)t(C)t(A)t(L)m Fv(T)t Fr(E)5 b(L)g(E)g(G)t(R)t
(A)t(P)g(H)107 b Fv(PDDL2.2)649 b(48)1152 3653 y(P)t
Fr(R)q(O)t(M)t(E)t(L)t(A)t Fv(-)t(P)t Fr(H)t(I)t(L)t(O)t(S)t(O)t(P)5
b(H)t(E)t(R)t(S)331 b Fv(PDDL2.2)649 b(48)1152 3766 y(P)t
Fr(I)t(P)t(E)t(S)t(W)s(O)t(R)t(L)t(D)t Fv(-)t(N)t Fr(O)q
Fv(T)l Fr(A)t(N)t(K)t(A)q(G)t(E)323 b Fv(STRIPS)674 b(50)1152
3879 y(P)t Fr(I)t(P)t(E)t(S)t(W)s(O)t(R)t(L)t(D)t Fv(-)t(T)l
Fr(A)t(N)t(K)t(A)q(G)t(E)447 b Fv(STRIPS)674 b(50)1152
3992 y(P)t(S)t(R)t(-)t(S)t Fr(M)t(A)t(L)t(L)883 b Fv(STRIPS)674
b(50)1152 4104 y(P)t(S)t(R)t(-)t(M)t Fr(I)t(D)t(D)t(L)t(E)810
b Fv(PDDL2.2)649 b(50)1152 4217 y(P)t(S)t(R)t(-)t(L)t
Fr(A)t(R)t(G)t(E)858 b Fv(PDDL2.2)649 b(50)1152 4330
y(S)t Fr(A)l(T)t(E)t(L)t(L)t(I)t(T)t(E)949 b Fv(STRIPS)674
b(36)466 4617 y(Figure)24 b(21:)30 b(Planning)25 b(domains)g(of)e(the)h
(\002rst)f(four)h(international)j(planning)f(competitions.)1888
5506 y Fy(231)p eop end
%%Page: 232 42
TeXDict begin 232 41 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)150
249 y Fv(much)27 b(lar)n(ger)i(and)f(hence)g(lik)o(ely)h(more)e(dif)n
(\002cult)h(to)f(solv)o(e.)41 b(W)-7 b(e)26 b(apply)j(the)e
(formulation)j(vs.)d(encoding)j(vie)n(w)150 361 y(more)22
b(strictly)i(and)e(thus)h(only)f(consider)j(one)f(P)t(S)t(R)t(-)t(M)t
Fr(I)t(D)t(D)t(L)t(E)j Fv(domain)c(and)f(one)h(domain)g(for)f(each)g
(of)g(the)h(tw)o(o)152 474 y(P)t Fr(R)q(O)t(M)t(E)t(L)t(A)k
Fv(v)n(ariants,)g(P)t Fr(R)q(O)t(M)t(E)t(L)t(A)t Fv(-)t(P)t
Fr(H)t(I)t(L)t(O)t(S)t(O)t(P)5 b(H)t(E)g(R)t(S)31 b Fv(and)26
b(P)t Fr(R)q(O)t(M)t(E)t(L)t(A)t Fv(-)t(O)t Fr(P)t(T)t(I)t(C)t(A)t(L)n
Fv(T)t Fr(E)t(L)5 b(E)g(G)t(R)t(A)t(P)g(H)r Fv(.)291
591 y(Of)30 b(the)h(IPC1)e(benchmark)k(set,)f(all)f(tasks)g(are)g(solv)
n(able)h(e)o(xcept)g(for)f(11)h(M)t Fr(Y)t(S)t(T)t(E)t(R)o(Y)j
Fv(instances.)52 b(Of)30 b(the)150 704 y(IPC2)37 b(benchmark)k(set,)h
(all)c(tasks)h(are)g(solv)n(able)h(e)o(xcept)f(for)g(11)h(M)t
Fr(I)t(C)t(O)t(N)t(I)t(C)t Fv(-)t(F)t Fr(U)t(L)t(L)t
Fv(A)t(D)t(L)k(instances.)76 b(All)150 817 y(IPC3)25
b(benchmarks)j(are)e(solv)n(able.)38 b(F)o(or)25 b(IPC4,)g(we)g(ha)n(v)
o(e)h(not)g(check)o(ed)i(all)e(instances)i(of)e(the)i(P)t
Fr(I)t(P)t(E)t(S)t(W)s(O)t(R)t(L)t(D)t Fv(-)152 930 y(T)l
Fr(A)t(N)t(K)t(A)q(G)t(E)e Fv(domain,)e(b)n(ut)h(we)d(assume)j(that)f
(all)f(are)h(tasks)h(are)e(solv)n(able.)291 1047 y(If)35
b(run)h(in)g(an)o(y)f(of)h(the)f(heuristic)j(search)f(modes,)i(F)o(ast)
c(Do)n(wnw)o(ard)g(pro)o(v)o(es)h(the)g(unsolv)n(ability)j(of)d(the)150
1160 y(unsolv)n(able)29 b(M)t Fr(Y)t(S)t(T)t(E)t(R)o(Y)g
Fv(and)e(M)t Fr(I)t(C)t(O)t(N)t(I)t(C)t Fv(-)t(F)t Fr(U)t(L)t(L)t
Fv(A)t(D)t(L)j(tasks)25 b(by)g(using)g(the)g(dead-end)h(detection)h
(routine)f(de-)150 1273 y(scribed)i(in)f(our)g(earlier)h(article)g(on)e
(the)h(causal)h(graph)g(heuristic)h(\(Helmert,)e(2004\),)h(or)f(in)f
(some)h(cases)g(in)g(the)152 1386 y(M)t Fr(I)t(C)t(O)t(N)t(I)t(C)t
Fv(-)t(F)t Fr(U)t(L)t(L)t Fv(A)t(D)t(L)39 b(domain)34
b(by)f(e)o(xhausti)n(v)o(ely)j(searching)g(all)d(states)h(with)f(a)f
(\002nite)h(FF)f(heuristic.)59 b(Of)150 1499 y(course,)28
b(if)e(an)h(unsolv)n(able)i(task)e(is)f(pro)o(v)o(ed)h(unsolv)n(able)i
(by)e(the)f(planner)l(,)j(we)d(report)h(this)g(as)f(a)g
(\223successfully)150 1612 y(solv)o(ed\224)f(instance)h(in)d(the)h(e)o
(xperimental)i(results.)150 1849 y Fz(7.2)46 b(Experimental)24
b(Setup)150 2014 y Fv(As)36 b(discussed)k(in)d(Section)h(6,)i(there)e
(are)f(ele)n(v)o(en)h(possible)h(con\002gurations)i(of)c(F)o(ast)f(Do)n
(wnw)o(ard')-5 b(s)38 b(search)150 2127 y(component.)j(Ho)n(we)n(v)o
(er)l(,)27 b(not)g(all)g(of)g(them)g(are)g(equally)h(reasonable.)42
b(F)o(or)26 b(e)o(xample,)i(if)f(we)f(use)h(FF')-5 b(s)25
b(helpful)150 2240 y(actions,)j(it)d(w)o(ould)i(seem)f(w)o(asteful)h
(not)f(to)g(use)g(the)g(FF)e(heuristic)k(estimate,)f(since)g(these)g
(tw)o(o)e(are)h(calculated)150 2353 y(together)-5 b(.)65
b(Therefore,)39 b(for)c(the)g(greedy)i(best-\002rst)f(search)g(setup,)j
(we)34 b(e)o(xclude)i(con\002gurations)j(where)c(FF)150
2466 y(helpful)g(actions)g(are)f(al)o(w)o(ays)g(computed.)60
b(F)o(or)32 b(the)i(multi-heuristic)j(best-\002rst)e(search)f(setup,)j
(we)c(e)o(xclude)150 2579 y(con\002gurations)25 b(where)e(only)f(one)h
(type)g(of)f(preferred)i(operators)g(is)e(considered,)j(b)n(ut)e(not)f
(the)g(other)l(,)i(since)f(this)150 2692 y(w)o(ould)32
b(seem)f(to)g(be)g(a)f(v)o(ery)i(arbitrary)h(choice.)53
b(This)31 b(lea)n(v)o(es)h(us)f(with)g(six)g(dif)n(ferent)i
(con\002gurations)i(of)c(the)150 2805 y(planner:)264
3009 y(1.)45 b Fz(G)p Fv(:)23 b(Use)g(greedy)i(best-\002rst)g(search)g
(without)g(preferred)g(operators.)264 3214 y(2.)45 b
Fz(G)23 b(+)f(P)p Fv(:)h(Use)g(greedy)i(best-\002rst)g(search)g(with)e
(helpful)i(transitions)i(as)c(preferred)j(operators.)264
3418 y(3.)45 b Fz(G)32 b(+)h(P)621 3385 y Fs(+)679 3418
y Fv(:)48 b(Use)33 b(greedy)i(best-\002rst)g(search)f(with)f(helpful)i
(transitions)i(as)c(preferred)i(operators.)61 b(Use)377
3531 y(helpful)26 b(actions)f(as)e(preferred)j(operators)g(in)e(states)
g(with)g(no)f(helpful)j(transitions.)264 3736 y(4.)45
b Fz(M)p Fv(:)23 b(Use)g(multi-heuristic)k(best-\002rst)e(search)g
(without)g(preferred)g(operators.)264 3940 y(5.)45 b
Fz(M)31 b(+)h(P)p Fv(:)f(Use)g(multi-heuristic)36 b(best-\002rst)e
(search)f(with)f(helpful)i(transitions)h(and)e(helpful)g(actions)h(as)
377 4053 y(preferred)26 b(operators.)264 4258 y(6.)45
b Fz(F)p Fv(:)23 b(Use)g(focused)i(iterati)n(v)o(e-broadening)30
b(search.)291 4463 y(W)-7 b(e)31 b(apply)i(each)f(of)g(these)g(planner)
i(con\002gurations)h(to)c(each)i(of)e(the)h(1442)h(benchmark)g(tasks,)i
(using)e(a)150 4575 y(computer)25 b(with)d(a)h(3.066)h(GHz)e(Intel)h
(Xeon)h(CPU)d(\227)h(the)h(same)g(machine)h(that)g(w)o(as)f(used)g(at)g
(IPC4)f(\227)h(and)g(set)150 4688 y(a)g(memory)h(limit)f(of)h(1)f(GB)f
(and)i(a)f(timeout)i(of)e(300)h(seconds.)291 4806 y(T)-7
b(o)31 b(compare)j(F)o(ast)d(Do)n(wnw)o(ard)h(to)g(the)h(state)g(of)f
(the)h(art,)h(we)d(try)i(to)f(solv)o(e)h(each)g(benchmark)h(with)e(the)
150 4918 y(best-performing)i(planners)e(from)e(the)h(literature.)51
b(Unfortunately)-6 b(,)34 b(this)d(in)l(v)n(olv)o(es)i(some)d
(intricacies:)45 b(some)150 5031 y(planners)30 b(are)d(not)h(publicly)i
(a)n(v)n(ailable,)g(and)e(others)h(only)f(co)o(v)o(er)g(a)f(restricted)
j(subset)f(of)f(PDDL2.2.)38 b(F)o(or)27 b(the)150 5144
y(main)35 b(e)o(xperiment,)k(we)c(thus)g(partition)j(the)d(benchmark)i
(domains)g(into)e(three)h(sets)g(depending)i(on)d(which)150
5257 y(planners)26 b(are)d(a)n(v)n(ailable)j(for)e(comparison.)1888
5506 y Fy(232)p eop end
%%Page: 233 43
TeXDict begin 233 42 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)402
236 y Fz(Domain)695 b(T)-8 b(ask)526 b(Con\002guration)100
b(Pr)n(epr)n(ocessing)j(Sear)n(ch)185 374 y Fv(F)t Fr(R)t(E)t(E)t(C)t
(E)t(L)t(L)29 b Fv(\(IPC2\))121 b Fp(probfreecell-1)o(0-)o(1)203
b Fz(M)22 b(+)h(P)738 b Fv(9.30)17 b(s)115 b(298.64)17
b(s)185 487 y(G)t Fr(R)t(I)t(D)590 b Fp(prob05)806 b
Fz(M)846 b Fv(10.04)17 b(s)115 b(291.01)17 b(s)185 600
y(M)t(P)t Fr(R)t(I)t(M)t(E)460 b Fp(prob14)806 b Fz(M)846
b Fv(22.38)17 b(s)115 b(291.67)17 b(s)185 713 y(P)t(S)t(R)t(-)t(L)t
Fr(A)t(R)t(G)t(E)314 b Fp(p30-s179-n30-l)o(3-)o(f3)o(0)94
b Fz(G)22 b(+)h(P)708 b Fv(43.43)17 b(s)115 b(265.29)17
b(s)185 826 y(S)t Fr(A)l(T)t(E)t(L)t(L)t(I)t(T)t(E)31
b Fv(\(IPC4\))100 b Fp(p33-HC-pfile13)366 b Fz(M)22 b(+)h(P)647
b Fv(180.74)18 b(s)115 b(169.09)17 b(s)150 1129 y(Figure)24
b(22:)47 b(T)-7 b(asks)31 b(which)h(could)h(be)e(solv)o(ed)i(by)f(some)
f(con\002guration)k(of)c(F)o(ast)g(Do)n(wnw)o(ard)g(with)h(a)f(search)
572 1242 y(timeout)h(of)g(300)g(seconds,)j(b)n(ut)d(not)g(with)f(a)g
(total)i(processing)h(timeout)f(of)e(300)h(seconds.)55
b(The)572 1355 y(column)20 b(\223preprocessing\224)k(sho)n(ws)c(the)f
(total)i(time)e(for)g(translation)k(and)d(kno)n(wledge)h(compilation.)
150 1728 y Fz(7.3)46 b(T)-7 b(ranslation)25 b(and)d(Kno)o(wledge)h
(Compilation)h(vs.)f(Sear)n(ch)150 1889 y Fv(Of)i(course,)i(the)g
(results)g(we)e(report)i(for)f(F)o(ast)f(Do)n(wnw)o(ard)h(include)i
(the)e(time)f(spent)i(in)f(all)g(three)h(components)150
2002 y(of)d(the)g(planner:)31 b(translation,)c(kno)n(wledge)e
(compilation,)h(and)f(search.)30 b(Therefore,)c(in)d(the)h(follo)n
(wing)h(presen-)150 2115 y(tation)j(of)f(results,)j(we)c(only)i
(consider)h(a)e(task)g(solv)o(ed)i(if)d(the)i Fq(total)g
Fv(processing)i(time)d(is)g(belo)n(w)g(300)g(seconds.)150
2227 y(Ho)n(we)n(v)o(er)l(,)21 b(we)g(ha)n(v)o(e)h(also)g(in)l(v)o
(estigated)i(which)e(tasks)h(can)e(be)h(solv)o(ed)g(with)f(a)g(timeout)
i(of)e(300)h(seconds)h(for)f(the)150 2340 y Fq(sear)m(c)o(h)i
Fv(component)i(alone,)f(allo)n(wing)f(the)g(other)h(components)h(to)e
(use)g(an)f(arbitrary)j(amount)f(of)e(resources.)31 b(It)150
2453 y(turns)26 b(out)f(that)g(this)g(only)g(mak)o(es)h(a)e(dif)n
(ference)j(in)d(\002)n(v)o(e)g(cases,)i(most)e(of)h(which)g(could)h(ha)
n(v)o(e)f(been)g(solv)o(ed)h(in)f(a)150 2566 y(total)k(time)f(belo)n(w)
g(310)h(seconds)h(\(Fig.)e(22\).)43 b(Only)28 b(in)g(one)g(of)h(these)g
(\002)n(v)o(e)e(cases,)j(a)g(S)t Fr(A)l(T)t(E)t(L)t(L)t(I)t(T)t(E)35
b Fv(instance)30 b(of)150 2679 y(e)o(xorbitant)g(size,)f(did)e(search)i
(tak)o(e)g(less)f(time)f(than)h(the)g(other)g(tw)o(o)f(phases)i
(combined.)43 b(These)27 b(results)i(sho)n(w)150 2792
y(that)g(the)h(search)g(component)h(is)d(the)i(only)f(time-critical)j
(part)d(of)g(F)o(ast)f(Do)n(wnw)o(ard)h(in)f(practice.)47
b(Therefore,)150 2905 y(we)23 b(do)g(not)h(report)h(separate)h
(performance)g(results)f(for)f(the)f(indi)n(vidual)k(components.)150
3138 y Fz(7.4)46 b(STRIPS)21 b(Domains)i(fr)n(om)h(IPC1\2263)150
3299 y Fv(Let)d(us)h(no)n(w)f(present)j(the)e(results)i(of)d(the)h
(main)g(e)o(xperiment.)30 b(W)-7 b(e)21 b(abstain)j(from)e(listing)h
(runtimes)g(for)f(indi)n(vid-)150 3412 y(ual)g(planning)h(tasks)g(due)e
(to)h(the)f(prohibiti)n(v)o(ely)k(lar)n(ge)d(amount)h(of)e(data.)28
b(These)22 b(are)f(a)n(v)n(ailable)j(as)d(an)h(electronic)150
3525 y(appendix)k(to)d(this)i(article.)1002 3492 y FB(8)1069
3525 y Fv(Instead,)g(we)e(report)i(the)e(follo)n(wing)i(information:)
286 3708 y Fo(\017)46 b Fv(T)-7 b(ables)19 b(sho)n(wing)h(the)g(number)
f(of)g(tasks)h Fq(not)f(solved)k Fv(by)c(each)h(planner)h(within)e(the)
g(300)h(second)g(timeout.)377 3820 y(Here,)j(we)g(present)i(indi)n
(vidual)i(results)e(for)e(each)i(domain.)286 4006 y Fo(\017)46
b Fv(Graphs)24 b(sho)n(wing)h(the)f(number)g(of)f(tasks)i(solv)o(ed)g
(in)e(a)g(gi)n(v)o(en)h(time)f(by)h(each)g(planner)-5
b(.)31 b(Here,)23 b(we)f(do)i(not)377 4119 y(present)i(separate)f
(results)g(for)f(each)g(domain,)g(as)g(this)g(w)o(ould)g(require)h(too)
f(man)o(y)f(graphs.)291 4302 y(W)-7 b(e)22 b(do)h(not)g(discuss)i(plan)
e(lengths;)j(our)d(observ)n(ations)j(in)d(this)g(re)o(gard)h(are)f
(similar)g(to)g(those)h(made)f(for)g(the)150 4415 y(original)j
(implementation)g(of)d(the)h(causal)h(graph)g(heuristic)h(\(Helmert,)d
(2004\).)291 4528 y(Fig.)32 b(23)h(sho)n(ws)h(the)f(number)h(of)f
(unsolv)o(ed)i(tasks)f(for)f(each)h(of)f(the)g(STRIPS)d(domains)35
b(from)d(IPC1\2263.)150 4641 y(Figs.)19 b(24)h(and)h(25)f(sho)n(w)f
(the)h(number)h(of)f(tasks)h(solv)o(ed)g(by)f(each)g(planner)i(within)e
(a)g(gi)n(v)o(en)g(time)g(bound)h(between)150 4754 y(0)i(and)g(300)g
(seconds.)31 b(In)23 b(addition)i(to)e(the)g(six)g(con\002gurations)j
(of)d(F)o(ast)f(Do)n(wnw)o(ard)h(under)h(consideration,)j(the)150
4867 y(table)d(includes)i(four)e(other)h(columns.)291
4980 y(Under)30 b(the)f(heading)i(\223)-7 b(An)o(y\224,)30
b(we)f(include)i(results)g(for)e(a)g(hypothetical)j(meta-planner)g
(that)e(guesses)h(the)150 5092 y(best)20 b(of)f(the)g(six)h
(con\002guration)i(of)d(F)o(ast)g(Do)n(wnw)o(ard)g(for)g(each)h(input)h
(task)e(and)h(then)g(e)o(x)o(ecutes)h(F)o(ast)d(Do)n(wnw)o(ard)p
150 5172 1440 4 v 195 5257 a Fn(8.)24 b Fe(http://www.jair.org/)1888
5506 y Fy(233)p eop end
%%Page: 234 44
TeXDict begin 234 43 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)407
318 y Fz(Domain)307 b(#T)-8 b(asks)p 1335 401 4 163 v
136 w(G)117 b(G+P)33 b(G+P)2001 285 y Fs(+)2139 318 y
Fz(M)101 b(M+P)116 b(F)p 2783 401 V 133 w(Any)p 3025
401 V 92 w(CG)h(FF)91 b(LPG)202 480 y Fv(B)t Fr(L)t(O)t(C)t(K)t(S)t(W)s
(O)t(R)t(L)t(D)387 b Fv(35)p 1335 514 4 113 v 149 w(0)196
b(0)g(0)h(0)f(0)174 b(17)p 2783 514 V 174 w(0)p 3025
514 V 196 w(0)197 b(4)f(0)202 593 y(D)t Fr(E)t(P)t(O)q(T)734
b Fv(22)p 1335 627 V 126 w(12)151 b(13)h(13)f(12)174
b(8)g(11)p 2783 627 V 174 w(7)p 3025 627 V 173 w(14)h(3)196
b(0)202 706 y(D)t Fr(R)t(I)t(V)t(E)t(R)t(L)t(O)t(G)527
b Fv(20)p 1335 740 V 149 w(2)196 b(0)g(0)h(1)f(0)g(1)p
2783 740 V 197 w(0)p 3025 740 V 196 w(3)h(5)f(0)202 819
y(F)t Fr(R)t(E)t(E)t(C)t(E)t(L)t(L)29 b Fv(\(IPC2\))321
b(60)p 1335 853 V 149 w(4)196 b(4)174 b(12)151 b(11)g(12)h(40)p
2783 853 V 174 w(3)p 3025 853 V 196 w(2)197 b(3)173 b(55)202
932 y(F)t Fr(R)t(E)t(E)t(C)t(E)t(L)t(L)29 b Fv(\(IPC3\))321
b(20)p 1335 966 V 149 w(0)196 b(0)g(5)h(1)f(2)174 b(14)p
2783 966 V 174 w(0)p 3025 966 V 196 w(0)197 b(2)173 b(19)202
1045 y(G)t Fr(R)t(I)t(D)835 b Fv(5)p 1335 1079 V 149
w(1)196 b(2)g(1)h(1)f(0)g(4)p 2783 1079 V 197 w(0)p 3025
1079 V 196 w(1)h(0)f(1)202 1158 y(G)t Fr(R)t(I)t(P)t(P)t(E)t(R)658
b Fv(20)p 1335 1192 V 149 w(0)196 b(0)g(0)h(0)f(0)g(0)p
2783 1192 V 197 w(0)p 3025 1192 V 196 w(0)h(0)f(0)202
1271 y(L)t Fr(O)t(G)t(I)t(S)t(T)t(I)t(C)t(S)29 b Fv(\(IPC1\))303
b(35)p 1335 1305 V 149 w(1)196 b(0)g(0)h(4)f(0)174 b(26)p
2783 1305 V 174 w(0)p 3025 1305 V 196 w(0)197 b(0)f(4)202
1384 y(L)t Fr(O)t(G)t(I)t(S)t(T)t(I)t(C)t(S)29 b Fv(\(IPC2\))303
b(28)p 1335 1418 V 149 w(0)196 b(0)g(0)h(0)f(0)g(0)p
2783 1418 V 197 w(0)p 3025 1418 V 196 w(0)h(0)f(0)202
1497 y(M)t Fr(I)t(C)t(O)t(N)t(I)t(C)t Fv(-)t(S)t(T)t(R)t(I)t(P)t(S)234
b(150)p 1335 1531 V 149 w(0)196 b(0)g(0)h(0)f(0)g(0)p
2783 1531 V 197 w(0)p 3025 1531 V 196 w(0)h(0)f(0)202
1610 y(M)t Fr(OV)t(I)t(E)727 b Fv(30)p 1335 1643 V 149
w(0)196 b(0)g(0)h(0)f(0)g(0)p 2783 1643 V 197 w(0)p 3025
1643 V 196 w(0)h(0)f(0)202 1722 y(M)t Fr(Y)t(S)t(T)t(E)t(R)o(Y)611
b Fv(30)p 1335 1756 V 149 w(1)196 b(2)g(1)h(0)f(0)174
b(13)p 2783 1756 V 174 w(0)p 3025 1756 V 196 w(1)g(12)151
b(15)202 1835 y(M)t(P)t Fr(R)t(I)t(M)t(E)660 b Fv(35)p
1335 1869 V 149 w(0)196 b(0)g(0)h(2)f(0)174 b(14)p 2783
1869 V 174 w(0)p 3025 1869 V 196 w(1)197 b(3)f(7)202
1948 y(R)q Fr(OV)t(E)t(R)t(S)681 b Fv(20)p 1335 1982
V 149 w(2)196 b(0)g(0)h(0)f(0)g(2)p 2783 1982 V 197 w(0)p
3025 1982 V 196 w(3)h(0)f(0)202 2061 y(S)t Fr(A)l(T)t(E)t(L)t(L)t(I)t
(T)t(E)31 b Fv(\(IPC3\))300 b(20)p 1335 2095 V 149 w(1)196
b(0)g(0)h(0)f(0)g(6)p 2783 2095 V 197 w(0)p 3025 2095
V 196 w(0)h(0)f(0)202 2174 y(Z)t Fr(E)t(N)t(O)q(T)t(R)t(A)-6
b(V)t(E)t(L)478 b Fv(20)p 1335 2258 4 163 v 149 w(0)196
b(0)g(0)h(0)f(0)g(0)p 2783 2258 V 197 w(0)p 3025 2258
V 196 w(0)h(0)f(0)200 2337 y Fz(T)-8 b(otal)753 b Fv(550)p
1335 2371 4 113 v 126 w(24)151 b(21)h(32)f(32)g(22)129
b(148)p 2783 2371 V 129 w(10)p 3025 2371 V 151 w(25)152
b(32)128 b(101)290 2624 y(Figure)24 b(23:)30 b(Number)23
b(of)h(unsolv)o(ed)h(tasks)g(for)f(the)f(STRIPS)e(domains)k(from)e
(IPC1,)g(IPC2,)f(and)i(IPC3.)450 4640 y
 /PSfrag where{pop(diagonallydownward)[[0(r)1 0]](downward)[[1(r)1
0]](yahsp)[[2(r)1 0]](macro-ff)[[3(r)1 0]](sgplan)[[4(r)1 0]](lpg-td)[[5(r)1
0]](CG)[[6(r)1 0]](FF)[[7(r)1 0]](LPG)[[8(r)1 0]](Any)[[9(r)1 0]](G+P+)[[10(r)1
0]](G+P)[[11(r)1 0]](G)[[12(r)1 0]](M+P)[[13(r)1 0]](M)[[14(r)1 0]](F)[[15(r)1
0]]16 0 -1/Begin PSfrag}{userdict /PSfrag{pop}put}ifelse
 450 4640 a @beginspecial
50 @llx 50 @lly 410 @urx 264 @ury 3600 @rwi @setspecial
%%BeginDocument: figures/experiment1a-graph.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: experiment1a-graph.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Fri Dec 30 17:13:52 2005
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 264
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -46 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 140 scalefont setfont
1.000 UL
LTb
1218 4116 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(550 \(100%\)) Rshow
grestore
1.000 UL
LTb
1218 3100 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(495 \(90%\)) Rshow
grestore
1.000 UL
LTb
1218 2083 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(440 \(80%\)) Rshow
grestore
1.000 UL
LTb
1218 1067 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(385 \(70%\)) Rshow
grestore
1.000 UL
LTb
1218 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(0s) Cshow
grestore
1.000 UL
LTb
2175 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(50s) Cshow
grestore
1.000 UL
LTb
3133 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(100s) Cshow
grestore
1.000 UL
LTb
4090 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(150s) Cshow
grestore
1.000 UL
LTb
5047 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(200s) Cshow
grestore
1.000 UL
LTb
6005 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(250s) Cshow
grestore
1.000 UL
LTb
6962 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(300s) Cshow
grestore
1.000 UL
LTb
1.000 UL
LTb
1218 420 M
5744 0 V
0 3696 V
-5744 0 V
0 -3696 V
LTb
140 2268 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 M
(Solved Tasks) Cshow
grestore
grestore
LTb
4090 70 M
gsave 0 setgray
(Search Time) Cshow
grestore
1.000 UP
1.000 UL
LT0
LTb
6311 1253 M
gsave 0 setgray
(G+P) Rshow
grestore
LT0
6395 1253 M
399 0 V
1237 420 M
0 18 V
2 19 V
1 18 V
0 19 V
0 18 V
1 19 V
0 18 V
0 19 V
1 18 V
0 19 V
1 18 V
0 19 V
3 18 V
0 19 V
0 18 V
1 19 V
0 18 V
0 19 V
1 18 V
1 19 V
0 18 V
2 19 V
2 18 V
1 19 V
2 18 V
0 18 V
1 19 V
0 18 V
2 19 V
0 18 V
0 19 V
2 18 V
1 19 V
0 18 V
0 19 V
1 18 V
1 19 V
1 18 V
1 19 V
2 18 V
1 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
1 19 V
2 18 V
2 19 V
0 18 V
1 18 V
3 19 V
3 18 V
1 19 V
4 18 V
1 19 V
0 18 V
5 19 V
2 18 V
1 19 V
1 18 V
1 19 V
1 18 V
0 19 V
1 18 V
0 19 V
1 18 V
0 19 V
3 18 V
8 19 V
2 18 V
7 19 V
6 18 V
3 19 V
0 18 V
0 18 V
1 19 V
0 18 V
1 19 V
0 18 V
3 19 V
8 18 V
0 19 V
4 18 V
7 19 V
8 18 V
2 19 V
0 18 V
1 19 V
0 18 V
1 19 V
2 18 V
4 19 V
2 18 V
7 19 V
4 18 V
0 19 V
8 18 V
1 19 V
1 18 V
3 18 V
2 19 V
stroke
1399 2305 M
0 18 V
4 19 V
5 18 V
4 19 V
19 18 V
0 19 V
2 18 V
2 19 V
4 18 V
1 19 V
3 18 V
8 19 V
1 18 V
8 19 V
6 18 V
0 19 V
6 18 V
1 19 V
3 18 V
7 19 V
4 18 V
12 19 V
4 18 V
4 18 V
0 19 V
8 18 V
1 19 V
17 18 V
3 19 V
8 18 V
10 19 V
28 18 V
4 19 V
3 18 V
0 19 V
15 18 V
12 19 V
10 18 V
3 19 V
0 18 V
4 19 V
3 18 V
8 19 V
24 18 V
12 19 V
4 18 V
12 19 V
7 18 V
14 18 V
25 19 V
8 18 V
5 19 V
43 18 V
24 19 V
38 18 V
41 19 V
54 18 V
55 19 V
81 18 V
4 19 V
59 18 V
12 19 V
116 18 V
27 19 V
42 18 V
7 19 V
69 18 V
103 19 V
303 18 V
288 19 V
116 18 V
83 19 V
25 18 V
66 18 V
901 19 V
376 18 V
772 19 V
1502 0 V
1.000 UL
LT1
LTb
6311 1113 M
gsave 0 setgray
(M+P) Rshow
grestore
LT1
6395 1113 M
399 0 V
1236 420 M
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
1 18 V
0 19 V
0 18 V
0 19 V
1 18 V
1 19 V
1 18 V
0 19 V
0 18 V
0 19 V
1 18 V
0 19 V
1 18 V
0 19 V
0 18 V
1 19 V
0 18 V
1 19 V
1 18 V
2 18 V
0 19 V
1 18 V
1 19 V
0 18 V
1 19 V
0 18 V
1 19 V
2 18 V
2 19 V
0 18 V
1 19 V
1 18 V
1 19 V
1 18 V
0 19 V
2 18 V
1 19 V
0 18 V
0 19 V
1 18 V
0 19 V
1 18 V
6 19 V
0 18 V
0 18 V
0 19 V
1 18 V
2 19 V
1 18 V
2 19 V
0 18 V
2 19 V
3 18 V
2 19 V
4 18 V
0 19 V
0 18 V
8 19 V
2 18 V
0 19 V
4 18 V
0 19 V
0 18 V
0 19 V
0 18 V
1 19 V
1 18 V
0 19 V
7 18 V
2 18 V
4 19 V
16 18 V
3 19 V
0 18 V
1 19 V
0 18 V
1 19 V
14 18 V
1 19 V
5 18 V
5 19 V
4 18 V
2 19 V
1 18 V
2 19 V
1 18 V
4 19 V
1 18 V
5 19 V
3 18 V
3 19 V
5 18 V
3 19 V
0 18 V
7 18 V
1 19 V
stroke
1404 2305 M
2 18 V
3 19 V
0 18 V
2 19 V
4 18 V
4 19 V
11 18 V
3 19 V
3 18 V
6 19 V
3 18 V
6 19 V
2 18 V
1 19 V
2 18 V
1 19 V
6 18 V
2 19 V
4 18 V
10 19 V
0 18 V
4 19 V
7 18 V
2 18 V
2 19 V
6 18 V
8 19 V
8 18 V
8 19 V
3 18 V
47 19 V
5 18 V
49 19 V
4 18 V
1 19 V
2 18 V
3 19 V
6 18 V
2 19 V
15 18 V
31 19 V
15 18 V
3 19 V
38 18 V
2 19 V
2 18 V
10 19 V
0 18 V
2 18 V
3 19 V
27 18 V
9 19 V
10 18 V
4 19 V
2 18 V
16 19 V
40 18 V
80 19 V
6 18 V
0 19 V
25 18 V
40 19 V
71 18 V
85 19 V
219 18 V
112 19 V
104 18 V
368 19 V
199 18 V
27 19 V
212 18 V
384 19 V
632 18 V
371 18 V
370 19 V
1370 18 V
412 0 V
1.000 UL
LT2
LTb
6311 973 M
gsave 0 setgray
(G) Rshow
grestore
LT2
6395 973 M
399 0 V
1241 420 M
0 18 V
1 19 V
1 18 V
1 19 V
1 18 V
0 19 V
0 18 V
1 19 V
1 18 V
0 19 V
0 18 V
0 19 V
1 18 V
0 19 V
2 18 V
0 19 V
2 18 V
2 19 V
1 18 V
2 19 V
1 18 V
1 19 V
0 18 V
1 19 V
1 18 V
1 18 V
2 19 V
0 18 V
1 19 V
2 18 V
0 19 V
1 18 V
0 19 V
1 18 V
0 19 V
0 18 V
0 19 V
1 18 V
4 19 V
1 18 V
0 19 V
2 18 V
1 19 V
2 18 V
5 19 V
2 18 V
0 19 V
1 18 V
3 19 V
2 18 V
1 18 V
0 19 V
1 18 V
2 19 V
0 18 V
1 19 V
0 18 V
1 19 V
0 18 V
3 19 V
2 18 V
8 19 V
6 18 V
7 19 V
2 18 V
1 19 V
0 18 V
1 19 V
0 18 V
1 19 V
0 18 V
2 19 V
4 18 V
3 19 V
20 18 V
4 18 V
1 19 V
0 18 V
1 19 V
1 18 V
4 19 V
2 18 V
9 19 V
2 18 V
4 19 V
4 18 V
2 19 V
5 18 V
4 19 V
0 18 V
1 19 V
7 18 V
1 19 V
0 18 V
19 19 V
3 18 V
0 19 V
4 18 V
2 19 V
10 18 V
4 18 V
6 19 V
stroke
1459 2305 M
1 18 V
5 19 V
9 18 V
1 19 V
1 18 V
0 19 V
1 18 V
5 19 V
3 18 V
2 19 V
13 18 V
0 19 V
4 18 V
12 19 V
2 18 V
0 19 V
5 18 V
15 19 V
1 18 V
1 19 V
12 18 V
21 19 V
17 18 V
12 18 V
3 19 V
18 18 V
1 19 V
4 18 V
4 19 V
56 18 V
0 19 V
13 18 V
32 19 V
2 18 V
7 19 V
12 18 V
50 19 V
2 18 V
36 19 V
24 18 V
20 19 V
13 18 V
45 19 V
20 18 V
19 19 V
9 18 V
48 19 V
2 18 V
101 18 V
35 19 V
50 18 V
47 19 V
1 18 V
12 19 V
64 18 V
102 19 V
89 18 V
135 19 V
12 18 V
58 19 V
2 18 V
7 19 V
286 18 V
76 19 V
200 18 V
147 19 V
115 18 V
72 19 V
85 18 V
37 19 V
90 18 V
373 19 V
1528 18 V
865 18 V
331 0 V
1.000 UL
LT3
LTb
6311 833 M
gsave 0 setgray
(G+P+) Rshow
grestore
LT3
6395 833 M
399 0 V
1236 420 M
1 18 V
0 19 V
1 18 V
0 19 V
1 18 V
1 19 V
0 18 V
0 19 V
1 18 V
0 19 V
0 18 V
1 19 V
0 18 V
0 19 V
1 18 V
0 19 V
2 18 V
0 19 V
1 18 V
1 19 V
0 18 V
1 19 V
1 18 V
0 19 V
4 18 V
1 18 V
1 19 V
0 18 V
1 19 V
2 18 V
1 19 V
1 18 V
0 19 V
0 18 V
1 19 V
1 18 V
0 19 V
0 18 V
1 19 V
0 18 V
4 19 V
3 18 V
0 19 V
0 18 V
0 19 V
0 18 V
1 19 V
4 18 V
0 19 V
1 18 V
0 18 V
2 19 V
3 18 V
4 19 V
2 18 V
0 19 V
1 18 V
0 19 V
7 18 V
2 19 V
4 18 V
0 19 V
0 18 V
1 19 V
1 18 V
2 19 V
1 18 V
6 19 V
0 18 V
3 19 V
3 18 V
1 19 V
6 18 V
1 19 V
11 18 V
1 18 V
0 19 V
2 18 V
0 19 V
1 18 V
1 19 V
6 18 V
1 19 V
0 18 V
2 19 V
0 18 V
13 19 V
12 18 V
4 19 V
3 18 V
0 19 V
1 18 V
1 19 V
0 18 V
6 19 V
4 18 V
1 19 V
1 18 V
4 19 V
9 18 V
5 18 V
7 19 V
stroke
1422 2305 M
2 18 V
0 19 V
14 18 V
5 19 V
1 18 V
9 19 V
10 18 V
2 19 V
0 18 V
0 19 V
3 18 V
3 19 V
18 18 V
1 19 V
0 18 V
4 19 V
31 18 V
9 19 V
7 18 V
29 19 V
19 18 V
4 19 V
18 18 V
2 18 V
20 19 V
42 18 V
7 19 V
4 18 V
6 19 V
56 18 V
0 19 V
8 18 V
0 19 V
3 18 V
8 19 V
23 18 V
9 19 V
30 18 V
36 19 V
42 18 V
5 19 V
50 18 V
15 19 V
52 18 V
24 19 V
54 18 V
18 19 V
63 18 V
0 18 V
41 19 V
62 18 V
74 19 V
200 18 V
144 19 V
1 18 V
700 19 V
414 18 V
161 19 V
22 18 V
4 19 V
799 18 V
119 19 V
972 18 V
223 19 V
9 18 V
178 19 V
651 0 V
1.000 UL
LT4
LTb
6311 693 M
gsave 0 setgray
(M) Rshow
grestore
LT4
6395 693 M
399 0 V
1240 420 M
0 18 V
1 19 V
0 18 V
1 19 V
0 18 V
1 19 V
0 18 V
0 19 V
1 18 V
2 19 V
1 18 V
2 19 V
0 18 V
4 19 V
0 18 V
0 19 V
1 18 V
1 19 V
1 18 V
1 19 V
0 18 V
1 19 V
0 18 V
0 19 V
0 18 V
1 18 V
1 19 V
2 18 V
1 19 V
7 18 V
1 19 V
0 18 V
1 19 V
0 18 V
0 19 V
0 18 V
0 19 V
2 18 V
0 19 V
0 18 V
2 19 V
0 18 V
2 19 V
3 18 V
0 19 V
2 18 V
1 19 V
3 18 V
1 19 V
3 18 V
1 18 V
0 19 V
3 18 V
4 19 V
5 18 V
4 19 V
1 18 V
1 19 V
0 18 V
0 19 V
0 18 V
4 19 V
4 18 V
1 19 V
3 18 V
1 19 V
3 18 V
12 19 V
14 18 V
2 19 V
0 18 V
1 19 V
1 18 V
4 19 V
10 18 V
7 18 V
1 19 V
10 18 V
9 19 V
1 18 V
1 19 V
4 18 V
1 19 V
0 18 V
6 19 V
2 18 V
2 19 V
1 18 V
0 19 V
20 18 V
1 19 V
7 18 V
30 19 V
3 18 V
1 19 V
2 18 V
18 19 V
5 18 V
14 19 V
2 18 V
1 18 V
3 19 V
stroke
1522 2305 M
10 18 V
1 19 V
14 18 V
9 19 V
6 18 V
3 19 V
11 18 V
8 19 V
14 18 V
16 19 V
18 18 V
11 19 V
6 18 V
26 19 V
50 18 V
4 19 V
25 18 V
1 19 V
8 18 V
19 19 V
21 18 V
10 19 V
58 18 V
8 18 V
3 19 V
13 18 V
12 19 V
10 18 V
8 19 V
8 18 V
48 19 V
1 18 V
13 19 V
64 18 V
13 19 V
41 18 V
3 19 V
0 18 V
20 19 V
128 18 V
96 19 V
6 18 V
124 19 V
56 18 V
302 19 V
40 18 V
59 19 V
75 18 V
59 18 V
68 19 V
28 18 V
90 19 V
22 18 V
9 19 V
190 18 V
82 19 V
96 18 V
576 19 V
60 18 V
32 19 V
64 18 V
317 19 V
67 18 V
710 19 V
783 18 V
374 19 V
313 0 V
1.000 UL
LT5
LTb
6311 553 M
gsave 0 setgray
(F) Rshow
grestore
LT5
6395 553 M
399 0 V
1307 420 M
1 18 V
22 19 V
0 18 V
11 19 V
9 18 V
4 19 V
10 18 V
6 19 V
12 18 V
3 19 V
8 18 V
11 19 V
8 18 V
8 19 V
29 18 V
5 19 V
6 18 V
13 19 V
10 18 V
29 19 V
1 18 V
5 19 V
3 18 V
8 19 V
7 18 V
7 18 V
8 19 V
118 18 V
131 19 V
101 18 V
65 19 V
71 18 V
37 19 V
4 18 V
72 19 V
86 18 V
9 19 V
15 18 V
17 19 V
25 18 V
92 19 V
293 18 V
177 19 V
240 18 V
37 19 V
5 18 V
118 19 V
36 18 V
704 19 V
726 18 V
259 18 V
910 19 V
1063 0 V
1.000 UL
LTb
1218 420 M
5744 0 V
0 3696 V
-5744 0 V
0 -3696 V
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica

%%EndDocument
 @endspecial 450 4640 a
 /End PSfrag
 450 4640 a 450 2733 a
 /Hide PSfrag
 450 2733
a -300 2795 a Fv(PSfrag)f(replacements)p -300 2829 750
4 v 450 2833 a
 /Unhide PSfrag
 450 2833 a 450 2923 a
  {
 450 2923 a -41 2936
a Fd(FDD)14 b Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 2923
y
  } 0/Place PSfrag
 450 2923 a 450 3035 a
  {
 450 3035 a -5 3048 a Fd(FD)h
Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 3035 y
  } 1/Place PSfrag
 450 3035 a
450 3153 a
  {
 450 3153 a 287 3171 a Fc(Y)-5 b(AHSP)450 3153
y
  } 2/Place PSfrag
 450 3153 a 450 3266 a
  {
 450 3266 a 234 3284 a Fc(Macro-FF)450
3266 y
  } 3/Place PSfrag
 450 3266 a 450 3379 a
  {
 450 3379 a 278 3397 a Fc(SGPlan)450
3379 y
  } 4/Place PSfrag
 450 3379 a 450 3492 a
  {
 450 3492 a 267 3510 a Fc(LPG-TD)450
3492 y
  } 5/Place PSfrag
 450 3492 a 450 3605 a
  {
 450 3605 a 375 3623 a Fc(CG)450
3605 y
  } 6/Place PSfrag
 450 3605 a 450 3718 a
  {
 450 3718 a 389 3736 a Fc(FF)450
3718 y
  } 7/Place PSfrag
 450 3718 a 450 3830 a
  {
 450 3830 a 350 3848 a Fc(LPG)450
3830 y
  } 8/Place PSfrag
 450 3830 a 450 3939 a
  {
 450 3939 a -32 3952 a Fd(An)o(y)14
b Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 3939 y
  } 9/Place PSfrag
 450 3939
a 450 4046 a
  {
 450 4046 a -115 4065 a Fd(G)h(+)g(P)14 4044
y Fb(+)75 4065 y Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450
4046 y
  } 10/Place PSfrag
 450 4046 a 450 4164 a
  {
 450 4164 a -68 4177 a Fd(G)h(+)g(P)g
Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 4164 y
  } 11/Place PSfrag
 450 4164 a
450 4277 a
  {
 450 4277 a 22 4290 a Fd(G)h Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))
450 4277 y
  } 12/Place PSfrag
 450 4277 a 450 4390 a
  {
 450 4390 a -71 4403
a Fd(M)i(+)f(P)g Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450
4390 y
  } 13/Place PSfrag
 450 4390 a 450 4503 a
  {
 450 4503 a 19 4516 a Fd(M)i
Fc(\(F)n(ast)e(Do)o(wnw)o(ard\))450 4503 y
  } 14/Place PSfrag
 450 4503 a
450 4616 a
  {
 450 4616 a 31 4629 a Fd(F)h Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))
450 4616 y
  } 15/Place PSfrag
 450 4616 a 150 4952 a Fv(Figure)24 b(24:)47
b(Number)19 b(of)h(tasks)g(solv)o(ed)h(vs.)e(runtime)i(for)f(the)f
(STRIPS)e(domains)k(from)f(IPC1,)f(IPC2)f(and)i(IPC3.)572
5065 y(This)j(graph)i(sho)n(ws)f(the)f(results)i(for)f(the)g(v)n
(arious)h(con\002gurations)i(of)c(F)o(ast)g(Do)n(wnw)o(ard.)1888
5506 y Fy(234)p eop end
%%Page: 235 45
TeXDict begin 235 44 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)450
3214 y
 /PSfrag where{pop(diagonallydownward)[[0(r)1 0]](downward)[[1(r)1
0]](yahsp)[[2(r)1 0]](macro-ff)[[3(r)1 0]](sgplan)[[4(r)1 0]](lpg-td)[[5(r)1
0]](CG)[[6(r)1 0]](FF)[[7(r)1 0]](LPG)[[8(r)1 0]](Any)[[9(r)1 0]](G+P+)[[10(r)1
0]](G+P)[[11(r)1 0]](G)[[12(r)1 0]](M+P)[[13(r)1 0]](M)[[14(r)1 0]](F)[[15(r)1
0]]16 0 -1/Begin PSfrag}{userdict /PSfrag{pop}put}ifelse
 450 3214 a @beginspecial 50 @llx 50 @lly 410 @urx
264 @ury 3600 @rwi @setspecial
%%BeginDocument: figures/experiment1b-graph.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: experiment1b-graph.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Fri Dec 30 17:13:52 2005
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 264
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -46 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 140 scalefont setfont
1.000 UL
LTb
1218 4116 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(550 \(100%\)) Rshow
grestore
1.000 UL
LTb
1218 3100 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(495 \(90%\)) Rshow
grestore
1.000 UL
LTb
1218 2083 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(440 \(80%\)) Rshow
grestore
1.000 UL
LTb
1218 1067 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(385 \(70%\)) Rshow
grestore
1.000 UL
LTb
1218 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(0s) Cshow
grestore
1.000 UL
LTb
2175 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(50s) Cshow
grestore
1.000 UL
LTb
3133 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(100s) Cshow
grestore
1.000 UL
LTb
4090 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(150s) Cshow
grestore
1.000 UL
LTb
5047 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(200s) Cshow
grestore
1.000 UL
LTb
6005 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(250s) Cshow
grestore
1.000 UL
LTb
6962 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(300s) Cshow
grestore
1.000 UL
LTb
1.000 UL
LTb
1218 420 M
5744 0 V
0 3696 V
-5744 0 V
0 -3696 V
LTb
140 2268 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 M
(Solved Tasks) Cshow
grestore
grestore
LTb
4090 70 M
gsave 0 setgray
(Search Time) Cshow
grestore
1.000 UP
1.000 UL
LT0
LTb
6311 1113 M
gsave 0 setgray
(Any) Rshow
grestore
LT0
6395 1113 M
399 0 V
1235 420 M
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
1 19 V
0 18 V
1 19 V
0 18 V
0 19 V
1 18 V
0 19 V
2 18 V
0 19 V
0 18 V
0 19 V
0 18 V
1 19 V
0 18 V
0 19 V
1 18 V
0 19 V
1 18 V
1 19 V
1 18 V
2 18 V
0 19 V
0 18 V
1 19 V
0 18 V
2 19 V
0 18 V
0 19 V
3 18 V
1 19 V
0 18 V
2 19 V
1 18 V
1 19 V
0 18 V
1 19 V
2 18 V
0 19 V
1 18 V
0 19 V
0 18 V
1 19 V
0 18 V
5 19 V
0 18 V
1 18 V
0 19 V
0 18 V
0 19 V
1 18 V
4 19 V
0 18 V
1 19 V
2 18 V
3 19 V
5 18 V
2 19 V
0 18 V
0 19 V
7 18 V
1 19 V
0 18 V
2 19 V
0 18 V
0 19 V
1 18 V
0 19 V
1 18 V
0 19 V
0 18 V
3 18 V
9 19 V
5 18 V
11 19 V
1 18 V
1 19 V
0 18 V
1 19 V
0 18 V
0 19 V
1 18 V
3 19 V
8 18 V
0 19 V
4 18 V
3 19 V
2 18 V
10 19 V
2 18 V
0 19 V
0 18 V
1 19 V
1 18 V
5 19 V
0 18 V
2 18 V
8 19 V
stroke
1380 2305 M
1 18 V
1 19 V
6 18 V
3 19 V
2 18 V
0 19 V
1 18 V
3 19 V
2 18 V
0 19 V
4 18 V
5 19 V
3 18 V
1 19 V
18 18 V
1 19 V
0 18 V
2 19 V
0 18 V
0 19 V
2 18 V
4 19 V
4 18 V
9 18 V
2 19 V
6 18 V
3 19 V
2 18 V
1 19 V
3 18 V
3 19 V
3 18 V
7 19 V
5 18 V
12 19 V
1 18 V
8 19 V
7 18 V
1 19 V
2 18 V
18 19 V
16 18 V
21 19 V
13 18 V
3 19 V
0 18 V
13 19 V
22 18 V
4 18 V
1 19 V
3 18 V
0 19 V
1 18 V
11 19 V
36 18 V
4 19 V
4 18 V
0 19 V
15 18 V
39 19 V
8 18 V
0 19 V
4 18 V
8 19 V
2 18 V
3 19 V
27 18 V
4 19 V
6 18 V
2 19 V
11 18 V
65 19 V
19 18 V
85 18 V
40 19 V
69 18 V
48 19 V
39 18 V
109 19 V
60 18 V
406 19 V
228 18 V
335 19 V
90 18 V
828 19 V
450 18 V
492 19 V
719 18 V
1063 0 V
1.000 UL
LT1
LTb
6311 973 M
gsave 0 setgray
(G+P) Rshow
grestore
LT1
6395 973 M
399 0 V
1236 420 M
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
1 18 V
0 19 V
0 18 V
0 19 V
1 18 V
1 19 V
1 18 V
0 19 V
0 18 V
0 19 V
1 18 V
0 19 V
1 18 V
0 19 V
0 18 V
1 19 V
0 18 V
1 19 V
1 18 V
2 18 V
0 19 V
1 18 V
1 19 V
0 18 V
1 19 V
0 18 V
1 19 V
2 18 V
2 19 V
0 18 V
1 19 V
1 18 V
1 19 V
1 18 V
0 19 V
2 18 V
1 19 V
0 18 V
0 19 V
1 18 V
0 19 V
1 18 V
6 19 V
0 18 V
0 18 V
0 19 V
1 18 V
2 19 V
1 18 V
2 19 V
0 18 V
2 19 V
3 18 V
2 19 V
4 18 V
0 19 V
0 18 V
8 19 V
2 18 V
0 19 V
4 18 V
0 19 V
0 18 V
0 19 V
0 18 V
1 19 V
1 18 V
0 19 V
7 18 V
2 18 V
4 19 V
16 18 V
3 19 V
0 18 V
1 19 V
0 18 V
1 19 V
14 18 V
1 19 V
5 18 V
5 19 V
4 18 V
2 19 V
1 18 V
2 19 V
1 18 V
4 19 V
1 18 V
5 19 V
3 18 V
3 19 V
5 18 V
3 19 V
0 18 V
7 18 V
1 19 V
stroke
1404 2305 M
2 18 V
3 19 V
0 18 V
2 19 V
4 18 V
4 19 V
11 18 V
3 19 V
3 18 V
6 19 V
3 18 V
6 19 V
2 18 V
1 19 V
2 18 V
1 19 V
6 18 V
2 19 V
4 18 V
10 19 V
0 18 V
4 19 V
7 18 V
2 18 V
2 19 V
6 18 V
8 19 V
8 18 V
8 19 V
3 18 V
47 19 V
5 18 V
49 19 V
4 18 V
1 19 V
2 18 V
3 19 V
6 18 V
2 19 V
15 18 V
31 19 V
15 18 V
3 19 V
38 18 V
2 19 V
2 18 V
10 19 V
0 18 V
2 18 V
3 19 V
27 18 V
9 19 V
10 18 V
4 19 V
2 18 V
16 19 V
40 18 V
80 19 V
6 18 V
0 19 V
25 18 V
40 19 V
71 18 V
85 19 V
219 18 V
112 19 V
104 18 V
368 19 V
199 18 V
27 19 V
212 18 V
384 19 V
632 18 V
371 18 V
370 19 V
1370 18 V
412 0 V
1.000 UL
LT2
LTb
6311 833 M
gsave 0 setgray
(CG) Rshow
grestore
LT2
6395 833 M
399 0 V
1241 420 M
2 18 V
0 19 V
0 18 V
1 19 V
0 18 V
1 19 V
2 18 V
0 19 V
0 18 V
0 19 V
0 18 V
1 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
1 19 V
0 18 V
0 19 V
0 18 V
2 19 V
2 18 V
0 19 V
0 18 V
1 18 V
1 19 V
1 18 V
1 19 V
2 18 V
1 19 V
1 18 V
0 19 V
1 18 V
0 19 V
1 18 V
0 19 V
1 18 V
0 19 V
0 18 V
0 19 V
1 18 V
1 19 V
1 18 V
1 19 V
1 18 V
0 19 V
2 18 V
3 19 V
3 18 V
1 18 V
0 19 V
1 18 V
2 19 V
0 18 V
0 19 V
0 18 V
1 19 V
0 18 V
2 19 V
2 18 V
0 19 V
3 18 V
2 19 V
1 18 V
6 19 V
2 18 V
1 19 V
0 18 V
1 19 V
0 18 V
1 19 V
2 18 V
2 19 V
4 18 V
0 18 V
1 19 V
1 18 V
8 19 V
0 18 V
1 19 V
0 18 V
1 19 V
0 18 V
2 19 V
1 18 V
6 19 V
2 18 V
2 19 V
1 18 V
5 19 V
0 18 V
2 19 V
1 18 V
2 19 V
0 18 V
2 19 V
0 18 V
6 19 V
2 18 V
2 18 V
0 19 V
stroke
1359 2305 M
0 18 V
3 19 V
1 18 V
0 19 V
1 18 V
2 19 V
6 18 V
1 19 V
7 18 V
0 19 V
5 18 V
1 19 V
0 18 V
3 19 V
0 18 V
9 19 V
4 18 V
8 19 V
1 18 V
3 19 V
2 18 V
9 19 V
2 18 V
23 18 V
3 19 V
11 18 V
8 19 V
13 18 V
1 19 V
0 18 V
3 19 V
17 18 V
10 19 V
1 18 V
3 19 V
4 18 V
1 19 V
6 18 V
15 19 V
10 18 V
0 19 V
8 18 V
3 19 V
3 18 V
1 19 V
26 18 V
0 19 V
7 18 V
1 18 V
7 19 V
66 18 V
26 19 V
23 18 V
27 19 V
79 18 V
16 19 V
30 18 V
46 19 V
22 18 V
11 19 V
19 18 V
60 19 V
142 18 V
8 19 V
124 18 V
0 19 V
38 18 V
328 19 V
669 18 V
39 19 V
1167 18 V
564 19 V
220 18 V
1626 0 V
1.000 UL
LT3
LTb
6311 693 M
gsave 0 setgray
(FF) Rshow
grestore
LT3
6395 693 M
399 0 V
1220 420 M
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 18 V
1 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
1 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
1 19 V
0 18 V
0 19 V
0 18 V
0 19 V
1 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
1 19 V
0 18 V
0 18 V
1 19 V
0 18 V
0 19 V
0 18 V
1 19 V
0 18 V
0 19 V
0 18 V
0 19 V
1 18 V
0 19 V
0 18 V
0 19 V
1 18 V
0 19 V
0 18 V
0 19 V
0 18 V
1 19 V
0 18 V
1 19 V
1 18 V
0 19 V
0 18 V
2 18 V
0 19 V
stroke
1234 2305 M
1 18 V
2 19 V
1 18 V
3 19 V
3 18 V
3 19 V
2 18 V
1 19 V
2 18 V
0 19 V
1 18 V
4 19 V
3 18 V
4 19 V
2 18 V
1 19 V
1 18 V
7 19 V
0 18 V
5 19 V
2 18 V
7 19 V
4 18 V
2 18 V
2 19 V
4 18 V
2 19 V
11 18 V
0 19 V
1 18 V
17 19 V
15 18 V
13 19 V
24 18 V
38 19 V
14 18 V
2 19 V
3 18 V
23 19 V
24 18 V
14 19 V
1 18 V
1 19 V
95 18 V
5 19 V
124 18 V
36 19 V
8 18 V
98 18 V
77 19 V
122 18 V
149 19 V
138 18 V
190 19 V
110 18 V
38 19 V
581 18 V
330 19 V
576 18 V
241 19 V
36 18 V
654 19 V
280 18 V
68 19 V
388 18 V
556 19 V
558 0 V
1.000 UL
LT4
LTb
6311 553 M
gsave 0 setgray
(LPG) Rshow
grestore
LT4
6395 553 M
399 0 V
1224 420 M
1 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
1 18 V
0 19 V
0 18 V
0 19 V
0 18 V
0 19 V
0 18 V
1 19 V
0 18 V
0 19 V
1 18 V
0 19 V
0 18 V
1 18 V
0 19 V
0 18 V
2 19 V
0 18 V
1 19 V
0 18 V
1 19 V
0 18 V
1 19 V
1 18 V
5 19 V
0 18 V
1 19 V
3 18 V
7 19 V
0 18 V
2 19 V
3 18 V
5 19 V
0 18 V
3 19 V
2 18 V
3 19 V
0 18 V
6 18 V
1 19 V
3 18 V
14 19 V
9 18 V
14 19 V
0 18 V
2 19 V
7 18 V
0 19 V
5 18 V
4 19 V
4 18 V
1 19 V
1 18 V
15 19 V
15 18 V
5 19 V
41 18 V
23 19 V
2 18 V
8 19 V
2 18 V
36 19 V
36 18 V
9 18 V
37 19 V
2 18 V
95 19 V
26 18 V
25 19 V
20 18 V
11 19 V
133 18 V
235 19 V
81 18 V
40 19 V
257 18 V
46 19 V
167 18 V
71 19 V
138 18 V
273 19 V
145 18 V
129 19 V
224 18 V
265 19 V
263 18 V
1712 19 V
1035 0 V
1.000 UL
LTb
1218 420 M
5744 0 V
0 3696 V
-5744 0 V
0 -3696 V
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica

%%EndDocument
 @endspecial 450 3214 a
 /End PSfrag
 450 3214 a 450 1307 a
 /Hide PSfrag
 450 1307
a -300 1369 a Fv(PSfrag)e(replacements)p -300 1404 750
4 v 450 1407 a
 /Unhide PSfrag
 450 1407 a 450 1497 a
  {
 450 1497 a -41 1510
a Fd(FDD)14 b Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 1497
y
  } 0/Place PSfrag
 450 1497 a 450 1610 a
  {
 450 1610 a -5 1623 a Fd(FD)h
Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 1610 y
  } 1/Place PSfrag
 450 1610 a
450 1727 a
  {
 450 1727 a 287 1745 a Fc(Y)-5 b(AHSP)450 1727
y
  } 2/Place PSfrag
 450 1727 a 450 1840 a
  {
 450 1840 a 234 1858 a Fc(Macro-FF)450
1840 y
  } 3/Place PSfrag
 450 1840 a 450 1953 a
  {
 450 1953 a 278 1971 a Fc(SGPlan)450
1953 y
  } 4/Place PSfrag
 450 1953 a 450 2066 a
  {
 450 2066 a 267 2084 a Fc(LPG-TD)450
2066 y
  } 5/Place PSfrag
 450 2066 a 450 2179 a
  {
 450 2179 a 375 2197 a Fc(CG)450
2179 y
  } 6/Place PSfrag
 450 2179 a 450 2292 a
  {
 450 2292 a 389 2310 a Fc(FF)450
2292 y
  } 7/Place PSfrag
 450 2292 a 450 2405 a
  {
 450 2405 a 350 2423 a Fc(LPG)450
2405 y
  } 8/Place PSfrag
 450 2405 a 450 2513 a
  {
 450 2513 a -32 2526 a Fd(An)o(y)14
b Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 2513 y
  } 9/Place PSfrag
 450 2513
a 450 2620 a
  {
 450 2620 a -115 2639 a Fd(G)h(+)g(P)14 2618
y Fb(+)75 2639 y Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450
2620 y
  } 10/Place PSfrag
 450 2620 a 450 2738 a
  {
 450 2738 a -68 2751 a Fd(G)h(+)g(P)g
Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 2738 y
  } 11/Place PSfrag
 450 2738 a
450 2851 a
  {
 450 2851 a 22 2864 a Fd(G)h Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))
450 2851 y
  } 12/Place PSfrag
 450 2851 a 450 2965 a
  {
 450 2965 a -71 2978
a Fd(M)i(+)f(P)g Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450
2965 y
  } 13/Place PSfrag
 450 2965 a 450 3077 a
  {
 450 3077 a 19 3090 a Fd(M)i
Fc(\(F)n(ast)e(Do)o(wnw)o(ard\))450 3077 y
  } 14/Place PSfrag
 450 3077 a
450 3190 a
  {
 450 3190 a 31 3203 a Fd(F)h Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))
450 3190 y
  } 15/Place PSfrag
 450 3190 a 150 3526 a Fv(Figure)24 b(25:)47
b(Number)19 b(of)h(tasks)g(solv)o(ed)h(vs.)e(runtime)i(for)f(the)f
(STRIPS)e(domains)k(from)f(IPC1,)f(IPC2)f(and)i(IPC3.)572
3639 y(This)28 b(graph)h(sho)n(ws)g(the)f(results)i(for)f(CG,)d(FF)h
(and)h(LPG)f(and)h(the)h(hypothetical)i(\223)-7 b(An)o(y\224)28
b(planner)572 3752 y(which)f(al)o(w)o(ays)h(chooses)h(the)f(best)g
(con\002guration)i(of)d(F)o(ast)g(Do)n(wnw)o(ard.)39
b(The)27 b(result)h(for)g(greedy)572 3865 y(best-\002rst)23
b(search)h(with)e(helpful)i(transitions)i(is)c(repeated)i(for)f(ease)g
(of)f(comparison)j(with)d(Fig.)f(24.)1888 5506 y Fy(235)p
eop end
%%Page: 236 46
TeXDict begin 236 45 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)150
249 y Fv(with)24 b(this)i(setting.)33 b(Under)25 b(the)g(heading)i
(\223CG\224,)c(we)h(report)i(the)f(results)h(for)f(our)g(\002rst)f
(implementation)j(of)e(the)150 361 y(causal)g(graph)f(heuristic)h
(\(Helmert,)f(2004\).)1571 328 y FB(9)1638 361 y Fv(Finally)-6
b(,)24 b(\223FF\224)e(and)h(\223LPG\224)f(refer)i(to)f(the)h(well-kno)n
(wn)g(planners)150 474 y(\(Hof)n(fmann)32 b(&)d(Nebel,)k(2001;)j(Gere)n
(vini)31 b(et)g(al.,)h(2003\))g(which)f(w)o(on)g(the)g(fully-automated)
j(tracks)e(of)f(IPC2)150 587 y(and)d(IPC3.)39 b(The)o(y)27
b(were)g(chosen)i(for)f(comparison)i(on)d(this)h(benchmark)h(set)f
(because)h(the)o(y)f(sho)n(wed)g(the)g(best)150 700 y(performance)d(by)
e(f)o(ar)f(of)h(all)f(publicly)j(a)n(v)n(ailable)f(planners)h(we)d(e)o
(xperimented)j(with.)j(F)o(or)22 b(LPG,)e(which)i(uses)i(a)150
813 y(randomized)g(search)f(strate)o(gy)-6 b(,)24 b(we)d(attempted)i
(to)f(solv)o(e)h(each)f(task)h(\002)n(v)o(e)d(times)i(and)h(report)g
(the)f(median)g(result.)291 926 y(The)30 b(results)j(sho)n(w)d(e)o
(xcellent)j(performance)h(of)c(F)o(ast)g(Do)n(wnw)o(ard)h(on)g(this)g
(set)g(of)g(benchmarks.)53 b(Com-)150 1039 y(pared)24
b(to)f(CG,)e(which)i(w)o(as)f(already)j(sho)n(wn)e(to)f(solv)o(e)i
(more)f(tasks)g(than)h(FF)d(and)i(LPG)e(on)i(this)g(benchmark)i(set)150
1152 y(\(Helmert,)i(2004\),)g(we)e(get)i(another)g(slight)h(impro)o(v)o
(ement)f(for)f(half)g(of)g(the)h(planner)g(con\002gurations.)40
b(One)25 b(of)150 1265 y(the)d(con\002gurations,)k(multi-heuristic)f
(best-\002rst)f(search)f(using)h(preferred)g(operators,)g(solv)o(es)g
(all)e(benchmarks)150 1378 y(in)34 b(all)g(domains)h(e)o(xcept)i(D)t
Fr(E)t(P)t(O)q(T)h Fv(and)e(F)t Fr(R)t(E)t(E)t(C)t(E)t(L)t(L)r
Fv(.)64 b(Ev)o(en)33 b(more)h(importantly)-6 b(,)39 b(the)34
b(number)h(of)f(tasks)h(not)150 1491 y(solv)o(ed)27 b(by)f(an)o(y)g(of)
f(the)h(F)o(ast)f(Do)n(wnw)o(ard)h(con\002gurations)j(is)d(as)f(small)h
(as)g(10.)35 b(Note)26 b(that)g(the)g(planning)i(com-)150
1603 y(petitions)c(typically)f(allo)n(wed)f(a)f(planner)i(to)e(spend)i
(30)e(minutes)h(on)g(each)g(task;)h(under)f(these)g(time)f
(constraints,)150 1716 y(we)27 b(could)h(allocate)h(\002)n(v)o(e)e
(minutes)h(to)f(each)h(of)g(the)f(six)h(con\002gurations)j(of)c(F)o
(ast)g(Do)n(wnw)o(ard,)h(getting)h(results)150 1829 y(which)i(are)g(at)
g(least)g(as)g(good)h(as)f(those)g(reported)i(for)e(the)g(\223)-7
b(An)o(y\224)31 b(planner)-5 b(.)52 b(Results)32 b(might)f(e)n(v)o(en)g
(be)g(better)150 1942 y(under)25 b(a)e(cle)n(v)o(erer)i(allocation)h
(scheme.)291 2055 y(Ev)o(en)g(the)h(con\002guration)i(using)f(focused)g
(iterati)n(v)o(e-broadenin)q(g)k(search)c(performs)f(comparati)n(v)o
(ely)i(well)150 2168 y(on)j(these)h(benchmarks,)j(although)f(it)c
(cannot)j(compete)f(with)f(the)g(other)h(planners.)57
b(Not)31 b(surprisingly)-6 b(,)38 b(this)150 2281 y(v)o(ersion)c(of)f
(the)f(planner)j(has)e(dif)n(\002culties)h(in)f(domains)h(with)e(man)o
(y)g(dead)i(ends)f(\()r(F)t Fr(R)t(E)t(E)t(C)t(E)t(L)t(L)r
Fv(,)41 b(M)t Fr(Y)t(S)t(T)t(E)t(R)o(Y)r Fv(,)152 2394
y(M)t(P)t Fr(R)t(I)t(M)t(E)r Fv(\))28 b(or)e(where)g(goal)h(ordering)i
(is)d(v)o(ery)g(important)i(\()r(B)t Fr(L)t(O)t(C)t(K)t(S)t(W)s(O)t(R)t
(L)t(D)r Fv(,)j(D)t Fr(E)t(P)t(O)q(T)r Fv(\).)39 b(It)26
b(also)h(f)o(ares)g(com-)150 2507 y(parati)n(v)o(ely)f(badly)g(in)e
(domains)i(with)e(v)o(ery)h(lar)n(ge)h(instances,)g(namely)h(L)t
Fr(O)t(G)t(I)t(S)t(T)t(I)t(C)t(S)j Fv(\(IPC1\))24 b(and)j(S)t
Fr(A)l(T)t(E)t(L)t(L)t(I)t(T)t(E)r Fv(.)150 2620 y(The)i(reader)h
(should)h(k)o(eep)f(in)g(mind)f(that)h(FF)d(and)j(LPG)d(are)j(e)o
(xcellent)h(planning)h(systems;)h(of)c(all)h(the)f(other)150
2733 y(planners)e(we)d(e)o(xperimented)j(with,)e(including)i(all)e
(those)h(that)f(were)g(a)o(w)o(arded)g(prizes)h(at)f(the)g(\002rst)g
(three)g(plan-)150 2845 y(ning)c(competitions,)j(none)d(solv)o(ed)g
(more)f(benchmarks)j(from)d(this)h(group)g(than)g(focused)h(iterati)n
(v)o(e-broadenin)q(g)150 2958 y(search.)291 3071 y(The)h(one)g(domain)h
(that)g(pro)o(v)o(es)g(quite)g(resistant)h(to)e(F)o(ast)f(Do)n(wnw)o
(ard')-5 b(s)24 b(solution)h(attempts)f(in)f(an)o(y)g(con\002g-)150
3184 y(uration)h(is)h(D)t Fr(E)t(P)t(O)q(T)r Fv(.)30
b(As)22 b(we)g(already)j(observ)o(ed)f(in)f(the)g(initial)h(e)o
(xperiments)h(with)d(the)h(causal)h(graph)g(heuristic)150
3297 y(\(Helmert,)i(2004\),)h(we)e(belie)n(v)o(e)h(that)h(one)f(k)o(e)o
(y)f(problem)i(here)f(is)f(that)i(F)o(ast)d(Do)n(wnw)o(ard,)i(unlik)o
(e)h(FF)-7 b(,)23 b(does)k(not)150 3410 y(use)21 b(an)o(y)h(goal)f
(ordering)j(techniques,)g(which)d(are)h(v)o(ery)f(important)i(in)e
(this)g(domain.)29 b(The)21 b(f)o(act)g(that)h(the)f(domain)150
3523 y(includes)h(a)g(B)t Fr(L)t(O)t(C)t(K)t(S)t(W)s(O)t(R)t(L)t(D)r
Fv(-lik)o(e)j(subproblem)d(is)e(also)h(problematic,)i(as)d(it)g(gi)n(v)
o(es)h(rise)g(to)f(v)o(ery)g(dense)i(causal)150 3636
y(graphs)j(as)f(we)e(demonstrated)27 b(in)c(Section)i(5.2.3.)150
3869 y Fz(7.5)46 b(ADL)22 b(Domains)h(fr)n(om)h(IPC1\2263)150
4030 y Fv(Second,)j(we)e(present)i(results)g(for)f(the)g(ADL)e(domains)
j(of)e(the)h(\002rst)g(three)g(planning)i(competitions.)39
b(This)25 b(is)h(a)150 4143 y(much)e(smaller)h(group)g(than)f(the)g
(pre)n(vious,)i(including)g(only)f(four)f(domains.)31
b(This)23 b(time,)h(we)f(cannot)i(consider)150 4255 y(CG)k(or)h(LPG,)e
(since)k(neither)g(CG)d(nor)h(the)h(publicly)i(a)n(v)n(ailable)f(v)o
(ersion)g(of)f(LPG)d(supports)33 b(ADL)28 b(domains.)150
4368 y(Therefore,)i(we)e(compare)h(to)f(FF)e(e)o(xclusi)n(v)o(ely)-6
b(.)44 b(Again,)29 b(we)e(report)i(the)g(number)g(of)e(unsolv)o(ed)k
(tasks)e(in)e(each)150 4481 y(domain)d(\(Fig.)f(26\))h(and)g(present)i
(graphs)f(sho)n(wing)f(ho)n(w)f(quickly)j(the)e(tasks)g(are)g(solv)o
(ed)h(\(Figs.)e(27)h(and)g(28\).)291 4594 y(These)k(results)g(do)g(not)
f(look)i(as)e(good)h(as)f(for)h(the)f(\002rst)g(group)h(of)g(domains.)
41 b(Results)28 b(in)f(both)j(M)t Fr(I)t(C)t(O)t(N)t(I)t(C)150
4707 y Fv(domains)25 b(are)f(good,)h(e)n(v)o(en)f(impro)o(ving)i(on)e
(those)h(of)e(FF)-7 b(.)22 b(Ho)n(we)n(v)o(er)l(,)i(greedy)h
(best-\002rst)g(search)h(performs)f(v)o(ery)150 4820
y(badly)k(in)f(the)i(A)t Fr(S)t(S)t(E)t(M)t(B)t(L)m(Y)i
Fv(domain,)d(and)g(all)e(con\002gurations)32 b(perform)c(badly)h(in)f
(the)i(S)t Fr(C)t(H)t(E)t(D)t(U)t(L)t(E)i Fv(domain.)p
150 4898 1440 4 v 195 4983 a Fn(9.)24 b(Apart)16 b(from)h(missing)g
(support)h(for)f(ADL)f(and)h(axioms,)h(CG)e(is)h(v)o(ery)g(similar)f
(to)h(F)o(ast)f(Do)n(wnw)o(ard)i(using)f(greedy)h(best-\002rst)e
(search)275 5075 y(and)i(no)g(preferred)g(operators)g
(\(con\002guration)h Fa(G)p Fn(\).)e(The)h(translation)g(and)g(kno)n
(wledge)h(compilation)f(components)i(are)e(essentially)275
5166 y(identical.)28 b(The)21 b(older)g(search)h(component)g(mainly)f
(dif)n(fers)g(from)g(F)o(ast)f(Do)n(wnw)o(ard)i(in)f(that)f(it)g(does)i
(not)f(use)g(deferred)h(heuristic)275 5257 y(e)n(v)n(aluation.)1888
5506 y Fy(236)p eop end
%%Page: 237 47
TeXDict begin 237 46 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)648
663 y Fz(Domain)393 b(#T)-8 b(asks)p 1662 746 4 163 v
136 w(G)116 b(G+P)33 b(G+P)2327 630 y Fs(+)2465 663 y
Fz(M)102 b(M+P)116 b(F)p 3110 746 V 132 w(Any)p 3351
746 V 105 w(FF)358 825 y Fv(A)t Fr(S)t(S)t(E)t(M)t(B)t(L)m(Y)743
b Fv(30)p 1662 859 4 113 v 126 w(28)151 b(27)g(25)174
b(3)197 b(0)173 b(30)p 3110 859 V 174 w(0)p 3351 859
V 197 w(0)358 938 y(M)t Fr(I)t(C)t(O)t(N)t(I)t(C)t Fv(-)t(S)t
Fr(I)t(M)t(P)t(L)t(E)t Fv(A)t(D)5 b(L)235 b(150)p 1662
972 V 149 w(0)197 b(0)f(0)g(0)h(0)f(0)p 3110 972 V 196
w(0)p 3351 972 V 197 w(0)358 1051 y(M)t Fr(I)t(C)t(O)t(N)t(I)t(C)t
Fv(-)t(F)t Fr(U)t(L)t(L)t Fv(A)t(D)t(L)320 b(150)p 1662
1085 V 149 w(9)197 b(8)f(9)g(9)h(8)173 b(90)p 3110 1085
V 174 w(6)p 3351 1085 V 174 w(12)358 1164 y(S)t Fr(C)t(H)t(E)t(D)t(U)t
(L)t(E)700 b Fv(150)p 1662 1198 V 104 w(134)129 b(93)151
b(93)129 b(132)g(28)g(113)p 3110 1198 V 129 w(25)p 3351
1198 V 174 w(0)356 1277 y Fz(T)-8 b(otal)923 b Fv(480)p
1662 1311 V 104 w(171)106 b(128)h(127)f(144)129 b(36)g(233)p
3110 1311 V 129 w(31)p 3351 1311 V 151 w(12)357 1564
y(Figure)24 b(26:)30 b(Number)23 b(of)h(unsolv)o(ed)h(tasks)g(for)f
(the)f(ADL)f(domains)j(from)e(IPC1,)g(IPC2)f(and)i(IPC3.)450
4286 y
 /PSfrag where{pop(diagonallydownward)[[0(r)1 0]](downward)[[1(r)1
0]](yahsp)[[2(r)1 0]](macro-ff)[[3(r)1 0]](sgplan)[[4(r)1 0]](lpg-td)[[5(r)1
0]](CG)[[6(r)1 0]](FF)[[7(r)1 0]](LPG)[[8(r)1 0]](Any)[[9(r)1 0]](G+P+)[[10(r)1
0]](G+P)[[11(r)1 0]](G)[[12(r)1 0]](M+P)[[13(r)1 0]](M)[[14(r)1 0]](F)[[15(r)1
0]]16 0 -1/Begin PSfrag}{userdict /PSfrag{pop}put}ifelse
 450 4286 a @beginspecial 50 @llx 50 @lly 410 @urx
264 @ury 3600 @rwi @setspecial
%%BeginDocument: figures/experiment2a-graph.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: experiment2a-graph.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Fri Dec 30 17:13:52 2005
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 264
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -46 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 140 scalefont setfont
1.000 UL
LTb
1218 4116 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(480 \(100%\)) Rshow
grestore
1.000 UL
LTb
1218 3594 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(432 \(90%\)) Rshow
grestore
1.000 UL
LTb
1218 3072 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(384 \(80%\)) Rshow
grestore
1.000 UL
LTb
1218 2551 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(336 \(70%\)) Rshow
grestore
1.000 UL
LTb
1218 2029 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(288 \(60%\)) Rshow
grestore
1.000 UL
LTb
1218 1507 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(240 \(50%\)) Rshow
grestore
1.000 UL
LTb
1218 985 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(192 \(40%\)) Rshow
grestore
1.000 UL
LTb
1218 463 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(144 \(30%\)) Rshow
grestore
1.000 UL
LTb
1218 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(0s) Cshow
grestore
1.000 UL
LTb
2175 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(50s) Cshow
grestore
1.000 UL
LTb
3133 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(100s) Cshow
grestore
1.000 UL
LTb
4090 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(150s) Cshow
grestore
1.000 UL
LTb
5047 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(200s) Cshow
grestore
1.000 UL
LTb
6005 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(250s) Cshow
grestore
1.000 UL
LTb
6962 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(300s) Cshow
grestore
1.000 UL
LTb
1.000 UL
LTb
1218 420 M
5744 0 V
0 3696 V
-5744 0 V
0 -3696 V
LTb
140 2268 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 M
(Solved Tasks) Cshow
grestore
grestore
LTb
4090 70 M
gsave 0 setgray
(Search Time) Cshow
grestore
1.000 UP
1.000 UL
LT0
LTb
6311 1253 M
gsave 0 setgray
(M+P) Rshow
grestore
LT0
6395 1253 M
399 0 V
1232 420 M
0 11 V
0 11 V
0 11 V
1 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
1 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
1 11 V
0 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
1 11 V
0 11 V
1 11 V
0 11 V
0 11 V
1 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
stroke
1250 1529 M
0 11 V
0 11 V
0 10 V
1 11 V
0 11 V
1 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
1 11 V
1 11 V
0 11 V
1 10 V
0 11 V
0 11 V
0 11 V
1 11 V
1 11 V
0 11 V
1 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
1 11 V
0 10 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
0 11 V
0 10 V
1 11 V
1 11 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
1 11 V
1 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 10 V
0 11 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 10 V
0 11 V
2 11 V
2 11 V
1 11 V
0 11 V
1 11 V
0 10 V
1 11 V
2 11 V
0 11 V
0 11 V
2 11 V
1 11 V
0 11 V
0 10 V
2 11 V
2 11 V
0 11 V
1 11 V
0 11 V
1 11 V
1 11 V
0 10 V
1 11 V
0 11 V
1 11 V
1 11 V
0 11 V
8 11 V
1 11 V
0 10 V
1 11 V
1 11 V
1 11 V
1 11 V
1 11 V
1 11 V
1 10 V
1 11 V
stroke
1309 2659 M
1 11 V
10 11 V
1 11 V
2 11 V
1 11 V
0 11 V
1 10 V
3 11 V
1 11 V
5 11 V
2 11 V
2 11 V
0 11 V
14 11 V
4 10 V
2 11 V
2 11 V
0 11 V
10 11 V
3 11 V
3 11 V
8 10 V
12 11 V
3 11 V
1 11 V
1 11 V
0 11 V
3 11 V
0 11 V
11 10 V
5 11 V
4 11 V
13 11 V
14 11 V
1 11 V
2 11 V
7 11 V
12 10 V
1 11 V
2 11 V
3 11 V
4 11 V
33 11 V
1 11 V
3 11 V
9 10 V
1 11 V
1 11 V
1 11 V
8 11 V
2 11 V
1 11 V
3 10 V
8 11 V
8 11 V
12 11 V
18 11 V
6 11 V
6 11 V
0 11 V
5 10 V
6 11 V
18 11 V
1 11 V
17 11 V
7 11 V
8 11 V
0 11 V
0 10 V
22 11 V
5 11 V
13 11 V
0 11 V
13 11 V
10 11 V
14 11 V
25 10 V
5 11 V
0 11 V
8 11 V
7 11 V
7 11 V
1 11 V
8 10 V
32 11 V
27 11 V
10 11 V
20 11 V
1 11 V
2 11 V
81 11 V
16 10 V
13 11 V
46 11 V
95 11 V
65 11 V
112 11 V
156 11 V
4482 0 V
1.000 UL
LT1
LTb
6311 1113 M
gsave 0 setgray
(G+P+) Rshow
grestore
LT1
6395 1113 M
399 0 V
1233 420 M
0 11 V
0 11 V
1 11 V
0 10 V
0 11 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
2 11 V
0 10 V
0 11 V
0 11 V
0 11 V
1 11 V
1 11 V
1 11 V
0 11 V
0 10 V
0 11 V
2 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
2 10 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
1 10 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
2 11 V
0 10 V
0 11 V
0 11 V
0 11 V
2 11 V
0 11 V
1 11 V
0 11 V
0 10 V
1 11 V
1 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
2 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
1 11 V
2 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
1 11 V
0 10 V
1 11 V
0 11 V
0 11 V
1 11 V
1 11 V
stroke
1269 1529 M
0 11 V
0 11 V
1 10 V
2 11 V
9 11 V
0 11 V
1 11 V
6 11 V
1 11 V
0 11 V
1 10 V
0 11 V
0 11 V
1 11 V
0 11 V
2 11 V
7 11 V
4 10 V
2 11 V
0 11 V
1 11 V
0 11 V
0 11 V
13 11 V
2 11 V
1 10 V
4 11 V
4 11 V
1 11 V
2 11 V
2 11 V
3 11 V
0 11 V
8 10 V
7 11 V
1 11 V
3 11 V
5 11 V
1 11 V
0 11 V
5 10 V
1 11 V
2 11 V
2 11 V
0 11 V
10 11 V
0 11 V
8 11 V
6 10 V
39 11 V
9 11 V
2 11 V
5 11 V
11 11 V
6 11 V
10 11 V
14 10 V
8 11 V
2 11 V
2 11 V
3 11 V
0 11 V
15 11 V
10 11 V
4 10 V
7 11 V
1 11 V
7 11 V
14 11 V
7 11 V
7 11 V
16 10 V
29 11 V
6 11 V
3 11 V
4 11 V
0 11 V
26 11 V
2 11 V
7 10 V
16 11 V
7 11 V
11 11 V
1 11 V
11 11 V
11 11 V
1 11 V
3 10 V
23 11 V
13 11 V
21 11 V
15 11 V
9 11 V
11 11 V
3 11 V
23 10 V
19 11 V
5 11 V
1 11 V
18 11 V
36 11 V
15 11 V
45 10 V
67 11 V
stroke
2059 2659 M
208 11 V
100 11 V
12 11 V
136 11 V
345 11 V
295 11 V
560 10 V
3247 0 V
1.000 UL
LT2
LTb
6311 973 M
gsave 0 setgray
(G+P) Rshow
grestore
LT2
6395 973 M
399 0 V
1233 420 M
0 11 V
0 11 V
1 11 V
0 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
2 11 V
0 10 V
0 11 V
0 11 V
0 11 V
1 11 V
1 11 V
1 11 V
0 11 V
0 10 V
0 11 V
1 11 V
1 11 V
0 11 V
0 11 V
0 11 V
1 11 V
1 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
1 10 V
0 11 V
0 11 V
1 11 V
0 11 V
0 11 V
1 11 V
1 11 V
0 10 V
0 11 V
0 11 V
0 11 V
2 11 V
1 11 V
0 11 V
0 11 V
0 10 V
1 11 V
1 11 V
1 11 V
0 11 V
0 11 V
0 11 V
1 11 V
1 10 V
0 11 V
0 11 V
1 11 V
0 11 V
0 11 V
1 11 V
1 10 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
1 11 V
0 10 V
1 11 V
0 11 V
1 11 V
0 11 V
1 11 V
stroke
1269 1529 M
0 11 V
0 11 V
1 10 V
2 11 V
10 11 V
0 11 V
7 11 V
0 11 V
1 11 V
0 11 V
0 10 V
0 11 V
1 11 V
2 11 V
4 11 V
4 11 V
3 11 V
1 10 V
1 11 V
2 11 V
0 11 V
4 11 V
8 11 V
3 11 V
0 11 V
1 10 V
7 11 V
2 11 V
1 11 V
0 11 V
1 11 V
3 11 V
14 11 V
1 10 V
1 11 V
0 11 V
3 11 V
1 11 V
4 11 V
7 11 V
2 10 V
4 11 V
3 11 V
4 11 V
6 11 V
2 11 V
6 11 V
0 11 V
5 10 V
44 11 V
3 11 V
5 11 V
12 11 V
0 11 V
6 11 V
15 11 V
2 10 V
24 11 V
0 11 V
1 11 V
2 11 V
20 11 V
0 11 V
0 11 V
2 10 V
0 11 V
16 11 V
15 11 V
2 11 V
23 11 V
3 11 V
1 10 V
28 11 V
18 11 V
11 11 V
6 11 V
1 11 V
5 11 V
23 11 V
12 10 V
2 11 V
4 11 V
8 11 V
9 11 V
5 11 V
1 11 V
2 11 V
3 10 V
8 11 V
31 11 V
32 11 V
18 11 V
34 11 V
7 11 V
3 11 V
17 10 V
5 11 V
4 11 V
11 11 V
15 11 V
74 11 V
116 11 V
47 10 V
116 11 V
stroke
2273 2659 M
82 11 V
712 11 V
128 11 V
679 11 V
569 11 V
432 11 V
2087 0 V
1.000 UL
LT3
LTb
6311 833 M
gsave 0 setgray
(M) Rshow
grestore
LT3
6395 833 M
399 0 V
1236 420 M
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 10 V
0 11 V
0 11 V
0 11 V
1 11 V
1 11 V
0 11 V
0 11 V
0 10 V
0 11 V
2 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
2 10 V
0 11 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
1 10 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
0 11 V
1 11 V
1 10 V
0 11 V
0 11 V
0 11 V
0 11 V
2 11 V
0 11 V
0 11 V
1 10 V
0 11 V
2 11 V
0 11 V
0 11 V
1 11 V
0 11 V
0 10 V
1 11 V
1 11 V
0 11 V
1 11 V
0 11 V
0 11 V
2 11 V
0 10 V
0 11 V
0 11 V
1 11 V
0 11 V
1 11 V
1 11 V
1 11 V
0 10 V
0 11 V
0 11 V
2 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 10 V
2 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 10 V
0 11 V
3 11 V
3 11 V
3 11 V
1 11 V
1 11 V
1 11 V
0 10 V
1 11 V
5 11 V
2 11 V
0 11 V
1 11 V
stroke
1292 1529 M
1 11 V
3 11 V
7 10 V
4 11 V
1 11 V
1 11 V
0 11 V
1 11 V
2 11 V
4 11 V
8 10 V
3 11 V
1 11 V
1 11 V
2 11 V
1 11 V
4 11 V
7 10 V
0 11 V
1 11 V
2 11 V
1 11 V
12 11 V
1 11 V
4 11 V
1 10 V
4 11 V
4 11 V
6 11 V
2 11 V
5 11 V
12 11 V
5 11 V
10 10 V
9 11 V
8 11 V
5 11 V
2 11 V
15 11 V
16 11 V
8 10 V
13 11 V
5 11 V
0 11 V
14 11 V
6 11 V
26 11 V
1 11 V
12 10 V
7 11 V
6 11 V
15 11 V
1 11 V
14 11 V
1 11 V
0 11 V
1 10 V
30 11 V
8 11 V
0 11 V
20 11 V
9 11 V
43 11 V
3 11 V
8 10 V
8 11 V
7 11 V
25 11 V
7 11 V
28 11 V
10 11 V
2 10 V
4 11 V
23 11 V
8 11 V
24 11 V
49 11 V
31 11 V
6 11 V
14 10 V
27 11 V
65 11 V
61 11 V
8 11 V
22 11 V
5 11 V
32 11 V
248 10 V
224 11 V
122 11 V
79 11 V
597 11 V
280 11 V
1195 11 V
2032 0 V
1.000 UL
LT4
LTb
6311 693 M
gsave 0 setgray
(G) Rshow
grestore
LT4
6395 693 M
399 0 V
1236 420 M
0 11 V
1 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 10 V
1 11 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
1 11 V
1 10 V
0 11 V
0 11 V
1 11 V
0 11 V
2 11 V
0 11 V
0 11 V
0 10 V
0 11 V
2 11 V
0 11 V
0 11 V
0 11 V
0 11 V
2 10 V
0 11 V
1 11 V
0 11 V
0 11 V
2 11 V
0 11 V
0 11 V
0 10 V
0 11 V
2 11 V
0 11 V
1 11 V
0 11 V
0 11 V
1 11 V
1 10 V
1 11 V
0 11 V
0 11 V
0 11 V
2 11 V
0 11 V
1 10 V
0 11 V
1 11 V
0 11 V
0 11 V
2 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
1 11 V
1 11 V
0 11 V
0 11 V
1 11 V
0 10 V
2 11 V
1 11 V
0 11 V
0 11 V
0 11 V
10 11 V
2 11 V
0 10 V
6 11 V
1 11 V
1 11 V
0 11 V
1 11 V
15 11 V
0 10 V
1 11 V
2 11 V
2 11 V
2 11 V
10 11 V
2 11 V
1 11 V
1 10 V
5 11 V
3 11 V
2 11 V
2 11 V
0 11 V
stroke
1339 1529 M
1 11 V
14 11 V
1 10 V
3 11 V
0 11 V
12 11 V
6 11 V
0 11 V
1 11 V
4 11 V
16 10 V
1 11 V
52 11 V
2 11 V
1 11 V
2 11 V
17 11 V
4 10 V
38 11 V
2 11 V
0 11 V
8 11 V
1 11 V
4 11 V
18 11 V
6 10 V
0 11 V
5 11 V
3 11 V
19 11 V
17 11 V
33 11 V
18 11 V
4 10 V
4 11 V
9 11 V
8 11 V
9 11 V
8 11 V
5 11 V
2 10 V
11 11 V
18 11 V
34 11 V
6 11 V
0 11 V
5 11 V
19 11 V
5 10 V
7 11 V
4 11 V
44 11 V
18 11 V
18 11 V
6 11 V
27 11 V
11 10 V
14 11 V
41 11 V
0 11 V
20 11 V
388 11 V
462 11 V
433 11 V
855 10 V
109 11 V
1403 11 V
1307 0 V
1.000 UL
LT5
LTb
6311 553 M
gsave 0 setgray
(F) Rshow
grestore
LT5
6395 553 M
399 0 V
1238 420 M
0 11 V
1 11 V
0 11 V
0 10 V
0 11 V
1 11 V
0 11 V
0 11 V
1 11 V
0 11 V
0 11 V
1 10 V
1 11 V
0 11 V
0 11 V
1 11 V
0 11 V
1 11 V
0 11 V
0 10 V
1 11 V
0 11 V
1 11 V
1 11 V
0 11 V
1 11 V
0 11 V
1 10 V
1 11 V
0 11 V
1 11 V
0 11 V
1 11 V
0 11 V
1 10 V
1 11 V
1 11 V
0 11 V
1 11 V
1 11 V
0 11 V
0 11 V
1 10 V
1 11 V
0 11 V
1 11 V
0 11 V
1 11 V
0 11 V
2 11 V
1 10 V
1 11 V
1 11 V
0 11 V
3 11 V
1 11 V
0 11 V
2 10 V
2 11 V
0 11 V
1 11 V
1 11 V
0 11 V
1 11 V
4 11 V
1 10 V
0 11 V
0 11 V
1 11 V
1 11 V
2 11 V
5 11 V
0 11 V
1 10 V
0 11 V
1 11 V
0 11 V
1 11 V
0 11 V
4 11 V
5 11 V
1 10 V
1 11 V
6 11 V
1 11 V
0 11 V
0 11 V
6 11 V
4 10 V
3 11 V
22 11 V
67 11 V
24 11 V
10 11 V
45 11 V
53 11 V
57 10 V
354 11 V
119 11 V
5 11 V
62 11 V
45 11 V
stroke
2189 1529 M
844 11 V
1481 11 V
281 10 V
204 11 V
197 11 V
1766 0 V
1.000 UL
LTb
1218 420 M
5744 0 V
0 3696 V
-5744 0 V
0 -3696 V
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica

%%EndDocument
 @endspecial 450 4286 a
 /End PSfrag
 450 4286 a 450 2380 a
 /Hide PSfrag
 450 2380
a -300 2442 a Fv(PSfrag)f(replacements)p -300 2476 750
4 v 450 2480 a
 /Unhide PSfrag
 450 2480 a 450 2569 a
  {
 450 2569 a -41 2582
a Fd(FDD)14 b Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 2569
y
  } 0/Place PSfrag
 450 2569 a 450 2682 a
  {
 450 2682 a -5 2695 a Fd(FD)h
Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 2682 y
  } 1/Place PSfrag
 450 2682 a
450 2800 a
  {
 450 2800 a 287 2818 a Fc(Y)-5 b(AHSP)450 2800
y
  } 2/Place PSfrag
 450 2800 a 450 2913 a
  {
 450 2913 a 234 2931 a Fc(Macro-FF)450
2913 y
  } 3/Place PSfrag
 450 2913 a 450 3026 a
  {
 450 3026 a 278 3043 a Fc(SGPlan)450
3026 y
  } 4/Place PSfrag
 450 3026 a 450 3138 a
  {
 450 3138 a 267 3156 a Fc(LPG-TD)450
3138 y
  } 5/Place PSfrag
 450 3138 a 450 3251 a
  {
 450 3251 a 375 3269 a Fc(CG)450
3251 y
  } 6/Place PSfrag
 450 3251 a 450 3365 a
  {
 450 3365 a 389 3383 a Fc(FF)450
3365 y
  } 7/Place PSfrag
 450 3365 a 450 3477 a
  {
 450 3477 a 350 3495 a Fc(LPG)450
3477 y
  } 8/Place PSfrag
 450 3477 a 450 3585 a
  {
 450 3585 a -32 3598 a Fd(An)o(y)14
b Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 3585 y
  } 9/Place PSfrag
 450 3585
a 450 3692 a
  {
 450 3692 a -115 3711 a Fd(G)h(+)g(P)14 3690
y Fb(+)75 3711 y Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450
3692 y
  } 10/Place PSfrag
 450 3692 a 450 3811 a
  {
 450 3811 a -68 3824 a Fd(G)h(+)g(P)g
Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 3811 y
  } 11/Place PSfrag
 450 3811 a
450 3924 a
  {
 450 3924 a 22 3937 a Fd(G)h Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))
450 3924 y
  } 12/Place PSfrag
 450 3924 a 450 4037 a
  {
 450 4037 a -71 4050
a Fd(M)i(+)f(P)g Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450
4037 y
  } 13/Place PSfrag
 450 4037 a 450 4150 a
  {
 450 4150 a 19 4163 a Fd(M)i
Fc(\(F)n(ast)e(Do)o(wnw)o(ard\))450 4150 y
  } 14/Place PSfrag
 450 4150 a
450 4263 a
  {
 450 4263 a 31 4276 a Fd(F)h Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))
450 4263 y
  } 15/Place PSfrag
 450 4263 a 150 4598 a Fv(Figure)24 b(27:)47
b(Number)27 b(of)h(tasks)g(solv)o(ed)h(vs.)e(runtime)i(for)e(the)h(ADL)
d(domains)k(from)f(IPC1,)f(IPC2)f(and)i(IPC3.)572 4711
y(This)23 b(graph)i(sho)n(ws)f(the)f(results)i(for)f(the)g(v)n(arious)h
(con\002gurations)i(of)c(F)o(ast)g(Do)n(wnw)o(ard.)1888
5506 y Fy(237)p eop end
%%Page: 238 48
TeXDict begin 238 47 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)450
3214 y
 /PSfrag where{pop(diagonallydownward)[[0(r)1 0]](downward)[[1(r)1
0]](yahsp)[[2(r)1 0]](macro-ff)[[3(r)1 0]](sgplan)[[4(r)1 0]](lpg-td)[[5(r)1
0]](CG)[[6(r)1 0]](FF)[[7(r)1 0]](LPG)[[8(r)1 0]](Any)[[9(r)1 0]](G+P+)[[10(r)1
0]](G+P)[[11(r)1 0]](G)[[12(r)1 0]](M+P)[[13(r)1 0]](M)[[14(r)1 0]](F)[[15(r)1
0]]16 0 -1/Begin PSfrag}{userdict /PSfrag{pop}put}ifelse
 450 3214 a @beginspecial 50 @llx 50 @lly 410 @urx
264 @ury 3600 @rwi @setspecial
%%BeginDocument: figures/experiment2b-graph.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: experiment2b-graph.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Fri Dec 30 17:13:52 2005
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 264
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -46 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 140 scalefont setfont
1.000 UL
LTb
1218 4116 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(480 \(100%\)) Rshow
grestore
1.000 UL
LTb
1218 3594 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(432 \(90%\)) Rshow
grestore
1.000 UL
LTb
1218 3072 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(384 \(80%\)) Rshow
grestore
1.000 UL
LTb
1218 2551 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(336 \(70%\)) Rshow
grestore
1.000 UL
LTb
1218 2029 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(288 \(60%\)) Rshow
grestore
1.000 UL
LTb
1218 1507 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(240 \(50%\)) Rshow
grestore
1.000 UL
LTb
1218 985 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(192 \(40%\)) Rshow
grestore
1.000 UL
LTb
1218 463 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(144 \(30%\)) Rshow
grestore
1.000 UL
LTb
1218 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(0s) Cshow
grestore
1.000 UL
LTb
2175 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(50s) Cshow
grestore
1.000 UL
LTb
3133 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(100s) Cshow
grestore
1.000 UL
LTb
4090 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(150s) Cshow
grestore
1.000 UL
LTb
5047 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(200s) Cshow
grestore
1.000 UL
LTb
6005 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(250s) Cshow
grestore
1.000 UL
LTb
6962 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(300s) Cshow
grestore
1.000 UL
LTb
1.000 UL
LTb
1218 420 M
5744 0 V
0 3696 V
-5744 0 V
0 -3696 V
LTb
140 2268 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 M
(Solved Tasks) Cshow
grestore
grestore
LTb
4090 70 M
gsave 0 setgray
(Search Time) Cshow
grestore
1.000 UP
1.000 UL
LT0
LTb
6311 833 M
gsave 0 setgray
(FF) Rshow
grestore
LT0
6395 833 M
399 0 V
1218 420 M
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
stroke
1220 1529 M
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
stroke
1223 2659 M
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
0 10 V
0 11 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
1 11 V
0 11 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
1 11 V
1 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
1 11 V
1 10 V
0 11 V
1 11 V
1 11 V
0 11 V
1 11 V
0 11 V
1 11 V
0 10 V
1 11 V
0 11 V
1 11 V
0 11 V
1 11 V
1 11 V
1 10 V
0 11 V
1 11 V
1 11 V
7 11 V
2 11 V
0 11 V
0 11 V
1 10 V
6 11 V
1 11 V
0 11 V
0 11 V
2 11 V
7 11 V
2 11 V
2 10 V
2 11 V
26 11 V
16 11 V
1 11 V
stroke
1324 3790 M
2 11 V
0 11 V
13 10 V
3 11 V
0 11 V
12 11 V
19 11 V
0 11 V
7 11 V
13 11 V
14 10 V
26 11 V
26 11 V
3 11 V
21 11 V
49 11 V
34 11 V
23 11 V
5373 0 V
1.000 UL
LT1
LTb
6311 693 M
gsave 0 setgray
(Any) Rshow
grestore
LT1
6395 693 M
399 0 V
1232 420 M
0 11 V
0 11 V
0 11 V
0 10 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
1 11 V
0 11 V
0 11 V
1 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
0 10 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
1 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 10 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
stroke
1249 1529 M
0 11 V
0 11 V
1 10 V
0 11 V
0 11 V
0 11 V
1 11 V
1 11 V
0 11 V
0 11 V
0 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
1 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
1 10 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
0 10 V
0 11 V
1 11 V
0 11 V
1 11 V
0 11 V
1 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
1 10 V
0 11 V
0 11 V
1 11 V
0 11 V
0 11 V
1 11 V
1 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
4 11 V
1 10 V
0 11 V
1 11 V
0 11 V
1 11 V
0 11 V
2 11 V
0 11 V
1 10 V
1 11 V
0 11 V
1 11 V
2 11 V
2 11 V
0 11 V
1 11 V
0 10 V
1 11 V
0 11 V
1 11 V
0 11 V
0 11 V
1 11 V
0 11 V
1 10 V
1 11 V
8 11 V
1 11 V
1 11 V
1 11 V
1 11 V
0 10 V
2 11 V
stroke
1306 2659 M
1 11 V
0 11 V
2 11 V
1 11 V
10 11 V
0 11 V
2 10 V
1 11 V
1 11 V
0 11 V
0 11 V
4 11 V
3 11 V
3 11 V
1 10 V
3 11 V
14 11 V
2 11 V
0 11 V
3 11 V
1 11 V
11 10 V
0 11 V
2 11 V
3 11 V
0 11 V
18 11 V
6 11 V
0 11 V
1 10 V
2 11 V
3 11 V
11 11 V
5 11 V
4 11 V
13 11 V
8 11 V
3 10 V
4 11 V
3 11 V
6 11 V
3 11 V
1 11 V
7 11 V
2 11 V
2 10 V
0 11 V
3 11 V
23 11 V
2 11 V
2 11 V
3 11 V
5 10 V
1 11 V
5 11 V
9 11 V
5 11 V
1 11 V
0 11 V
2 11 V
5 10 V
11 11 V
14 11 V
1 11 V
25 11 V
4 11 V
7 11 V
5 11 V
16 10 V
5 11 V
2 11 V
1 11 V
2 11 V
4 11 V
0 11 V
22 11 V
4 10 V
2 11 V
7 11 V
14 11 V
9 11 V
10 11 V
1 11 V
1 10 V
15 11 V
5 11 V
1 11 V
5 11 V
8 11 V
52 11 V
9 11 V
12 10 V
11 11 V
3 11 V
35 11 V
7 11 V
24 11 V
9 11 V
15 11 V
65 10 V
227 11 V
112 11 V
156 11 V
4482 0 V
stroke
1.000 UL
LT2
LTb
6311 553 M
gsave 0 setgray
(M+P) Rshow
grestore
LT2
6395 553 M
399 0 V
1232 420 M
0 11 V
0 11 V
0 11 V
1 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
1 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
1 11 V
0 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
1 11 V
0 11 V
1 11 V
0 11 V
0 11 V
1 10 V
0 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 10 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
stroke
1250 1529 M
0 11 V
0 11 V
0 10 V
1 11 V
0 11 V
1 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
0 11 V
0 11 V
1 11 V
1 11 V
0 11 V
1 10 V
0 11 V
0 11 V
0 11 V
1 11 V
1 11 V
0 11 V
1 11 V
0 10 V
0 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
1 11 V
0 10 V
0 11 V
0 11 V
0 11 V
1 11 V
0 11 V
0 11 V
0 10 V
1 11 V
1 11 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
0 10 V
0 11 V
1 11 V
1 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 10 V
0 11 V
0 11 V
1 11 V
0 11 V
0 11 V
0 11 V
1 11 V
0 10 V
0 11 V
2 11 V
2 11 V
1 11 V
0 11 V
1 11 V
0 10 V
1 11 V
2 11 V
0 11 V
0 11 V
2 11 V
1 11 V
0 11 V
0 10 V
2 11 V
2 11 V
0 11 V
1 11 V
0 11 V
1 11 V
1 11 V
0 10 V
1 11 V
0 11 V
1 11 V
1 11 V
0 11 V
8 11 V
1 11 V
0 10 V
1 11 V
1 11 V
1 11 V
1 11 V
1 11 V
1 11 V
1 10 V
1 11 V
stroke
1309 2659 M
1 11 V
10 11 V
1 11 V
2 11 V
1 11 V
0 11 V
1 10 V
3 11 V
1 11 V
5 11 V
2 11 V
2 11 V
0 11 V
14 11 V
4 10 V
2 11 V
2 11 V
0 11 V
10 11 V
3 11 V
3 11 V
8 10 V
12 11 V
3 11 V
1 11 V
1 11 V
0 11 V
3 11 V
0 11 V
11 10 V
5 11 V
4 11 V
13 11 V
14 11 V
1 11 V
2 11 V
7 11 V
12 10 V
1 11 V
2 11 V
3 11 V
4 11 V
33 11 V
1 11 V
3 11 V
9 10 V
1 11 V
1 11 V
1 11 V
8 11 V
2 11 V
1 11 V
3 10 V
8 11 V
8 11 V
12 11 V
18 11 V
6 11 V
6 11 V
0 11 V
5 10 V
6 11 V
18 11 V
1 11 V
17 11 V
7 11 V
8 11 V
0 11 V
0 10 V
22 11 V
5 11 V
13 11 V
0 11 V
13 11 V
10 11 V
14 11 V
25 10 V
5 11 V
0 11 V
8 11 V
7 11 V
7 11 V
1 11 V
8 10 V
32 11 V
27 11 V
10 11 V
20 11 V
1 11 V
2 11 V
81 11 V
16 10 V
13 11 V
46 11 V
95 11 V
65 11 V
112 11 V
156 11 V
4482 0 V
1.000 UL
LTb
1218 420 M
5744 0 V
0 3696 V
-5744 0 V
0 -3696 V
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica

%%EndDocument
 @endspecial 450 3214 a
 /End PSfrag
 450 3214 a 450 1307 a
 /Hide PSfrag
 450 1307
a -300 1369 a Fv(PSfrag)23 b(replacements)p -300 1404
750 4 v 450 1407 a
 /Unhide PSfrag
 450 1407 a 450 1497 a
  {
 450 1497 a -41
1510 a Fd(FDD)14 b Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450
1497 y
  } 0/Place PSfrag
 450 1497 a 450 1610 a
  {
 450 1610 a -5 1623 a Fd(FD)h
Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 1610 y
  } 1/Place PSfrag
 450 1610 a
450 1727 a
  {
 450 1727 a 287 1745 a Fc(Y)-5 b(AHSP)450 1727
y
  } 2/Place PSfrag
 450 1727 a 450 1840 a
  {
 450 1840 a 234 1858 a Fc(Macro-FF)450
1840 y
  } 3/Place PSfrag
 450 1840 a 450 1953 a
  {
 450 1953 a 278 1971 a Fc(SGPlan)450
1953 y
  } 4/Place PSfrag
 450 1953 a 450 2066 a
  {
 450 2066 a 267 2084 a Fc(LPG-TD)450
2066 y
  } 5/Place PSfrag
 450 2066 a 450 2179 a
  {
 450 2179 a 375 2197 a Fc(CG)450
2179 y
  } 6/Place PSfrag
 450 2179 a 450 2292 a
  {
 450 2292 a 389 2310 a Fc(FF)450
2292 y
  } 7/Place PSfrag
 450 2292 a 450 2405 a
  {
 450 2405 a 350 2423 a Fc(LPG)450
2405 y
  } 8/Place PSfrag
 450 2405 a 450 2513 a
  {
 450 2513 a -32 2526 a Fd(An)o(y)14
b Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 2513 y
  } 9/Place PSfrag
 450 2513
a 450 2620 a
  {
 450 2620 a -115 2639 a Fd(G)h(+)g(P)14 2618
y Fb(+)75 2639 y Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450
2620 y
  } 10/Place PSfrag
 450 2620 a 450 2738 a
  {
 450 2738 a -68 2751 a Fd(G)h(+)g(P)g
Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 2738 y
  } 11/Place PSfrag
 450 2738 a
450 2851 a
  {
 450 2851 a 22 2864 a Fd(G)h Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))
450 2851 y
  } 12/Place PSfrag
 450 2851 a 450 2965 a
  {
 450 2965 a -71 2978
a Fd(M)i(+)f(P)g Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450
2965 y
  } 13/Place PSfrag
 450 2965 a 450 3077 a
  {
 450 3077 a 19 3090 a Fd(M)i
Fc(\(F)n(ast)e(Do)o(wnw)o(ard\))450 3077 y
  } 14/Place PSfrag
 450 3077 a
450 3190 a
  {
 450 3190 a 31 3203 a Fd(F)h Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))
450 3190 y
  } 15/Place PSfrag
 450 3190 a 150 3526 a Fv(Figure)24 b(28:)47
b(Number)27 b(of)h(tasks)g(solv)o(ed)h(vs.)e(runtime)i(for)e(the)h(ADL)
d(domains)k(from)f(IPC1,)f(IPC2)f(and)i(IPC3.)572 3639
y(This)g(graph)i(sho)n(ws)f(the)g(results)i(for)e(FF)e(and)i(the)g
(hypothetical)j(\223)-7 b(An)o(y\224)29 b(planner)h(which)f(al)o(w)o
(ays)572 3752 y(chooses)j(the)e(best)g(con\002guration)j(of)d(F)o(ast)f
(Do)n(wnw)o(ard.)47 b(The)30 b(result)h(for)f(multi-heuristic)j(best-)
572 3865 y(\002rst)23 b(search)i(with)e(preferred)j(operators)g(is)d
(repeated)j(for)e(ease)g(of)f(comparison)j(with)e(Fig.)e(27.)1888
5506 y Fy(238)p eop end
%%Page: 239 49
TeXDict begin 239 48 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)150
249 y Fv(Currently)-6 b(,)38 b(we)33 b(ha)n(v)o(e)h(no)g(good)g(e)o
(xplanation)j(for)d(the)i(A)t Fr(S)t(S)t(E)t(M)t(B)t(L)m(Y)i
Fv(beha)n(viour)-5 b(.)62 b(F)o(or)33 b(the)j(S)t Fr(C)t(H)t(E)t(D)t(U)
t(L)t(E)i Fv(do-)150 361 y(main,)g(the)e(weak)f(performance)j(again)e
(seems)f(to)g(be)h(related)g(to)g(missing)g(goal)g(ordering)i
(techniques:)55 b(In)150 474 y(man)o(y)31 b(S)t Fr(C)t(H)t(E)t(D)t(U)t
(L)t(E)i Fv(tasks,)e(se)n(v)o(eral)f(goals)g(are)f(de\002ned)h(for)g
(the)f(same)g(object)h(which)g(can)f(only)h(be)f(satis\002ed)150
587 y(in)f(a)g(certain)i(order)-5 b(.)44 b(F)o(or)28
b(instance,)j(for)d(objects)j(that)d(should)i(be)f(c)o(ylindrical,)j
(polished)e(and)f(painted,)i(these)150 700 y(three)25
b(goals)g(must)f(be)g(satis\002ed)i(in)e(precisely)i(this)f(order:)31
b(making)25 b(an)f(object)i(c)o(ylindrical)h(re)n(v)o(erts)e(the)f(ef)n
(fects)150 813 y(of)k(polishing)j(and)e(painting,)i(and)e(polishing)h
(re)n(v)o(erts)f(the)g(ef)n(fect)g(of)f(painting.)45
b(Not)28 b(recognising)j(these)e(con-)150 926 y(straints,)35
b(the)c(heuristic)i(search)g(algorithm)g(assumes)f(to)f(be)g(close)h
(to)f(the)h(goal)g(when)f(an)g(object)i(is)d(already)150
1039 y(polished)c(and)e(painted)i(b)n(ut)e(not)g(c)o(ylindrical,)j(and)
d(is)g(loathe)h(to)e(transform)j(the)e(object)h(into)g(c)o(ylindrical)h
(shape)150 1152 y(because)f(this)e(w)o(ould)g(undo)h(the)f(already)h
(achie)n(v)o(ed)h(goals.)k(W)l(ith)23 b(some)g(rudimentary)i(manual)f
(goal)f(ordering,)150 1265 y(ignoring)29 b(painting)g(goals)f(until)f
(all)g(other)h(goals)g(ha)n(v)o(e)f(been)h(satis\002ed,)g(the)f(number)
h(of)e(tasks)i(not)f(solv)o(ed)h(by)150 1378 y(multi-heuristic)34
b(best-\002rst)d(search)h(with)e(preferred)j(operators)g(drops)e(from)f
(28)h(to)f(3.)49 b(These)30 b(three)h(f)o(ailures)150
1491 y(appear)22 b(to)f(be)g(due)h(to)f(the)g(remaining)i(ordering)g
(problems)g(with)e(re)o(gard)g(to)g(c)o(ylindrical)j(and)d(polished)j
(objects.)150 1731 y Fz(7.6)46 b(Domains)23 b(fr)n(om)h(IPC4)150
1899 y Fv(Third)d(and)f(\002nally)-6 b(,)22 b(we)d(present)k(results)f
(for)e(the)h(IPC4)e(domains.)29 b(Here,)21 b(we)e(do)i(not)g(compare)g
(to)g(FF:)e(for)h(these)150 2012 y(benchmarks,)i(FF)17
b(does)j(not)g(perform)g(as)f(well)f(as)h(the)h(best)f(planners)j(from)
c(the)i(competition.)30 b(Besides,)20 b(se)n(v)o(eral)150
2125 y(of)j(the)h(IPC4)e(competitors)k(are)e(e)o(xtensions)i(of)d(FF)e
(or)j(hybrids)g(using)h(FF)c(as)j(part)g(of)f(a)g(bigger)h(system,)g
(so)g(FF-)150 2238 y(based)34 b(planning)i(is)d(well-represented)k(e)n
(v)o(en)d(if)f(we)f(limit)i(our)f(attention)j(to)d(the)h(IPC4)e
(planners.)60 b(F)o(or)33 b(this)150 2351 y(comparison,)h(we)c(chose)h
(the)g(four)g(most)g(successful)i(competition)g(participants)h(besides)
e(F)o(ast)e(Do)n(wnw)o(ard,)150 2464 y(namely)24 b(LPG-TD,)c(SGPlan,)i
(Macro-FF)g(and)i(Y)-11 b(AHSP)20 b(\(cf.)j(the)g(results)h(in)f(Hof)n
(fmann)h(&)e(Edelkamp,)h(2005\).)150 2577 y(Similar)29
b(to)h(the)g(pre)n(vious)h(tw)o(o)e(e)o(xperiments,)k(we)c(report)i
(the)f(number)g(of)f(unsolv)o(ed)j(tasks)f(in)e(each)h(domain)150
2689 y(\(Fig.)23 b(29\))h(and)g(present)h(graphs)g(sho)n(wing)g(ho)n(w)
e(quickly)i(the)f(tasks)h(are)e(solv)o(ed)i(\(Figs.)e(30)h(and)g(31\).)
291 2810 y(F)o(ast)d(Do)n(wnw)o(ard)g(is)g(competiti)n(v)o(e)j(with)d
(the)g(other)i(planners)g(across)g(domains,)g(and)f(better)g(than)g
(all)g(others)150 2923 y(in)h(some.)29 b(The)c(P)t Fr(I)t(P)t(E)t(S)t
(W)s(O)t(R)t(L)t(D)k Fv(domains)24 b(are)g(the)f(only)h(ones)g(in)f
(which)h(an)o(y)f(of)g(the)h(other)g(planners)i(is)d(notice-)150
3036 y(ably)e(better)g(than)f(the)h(tw)o(o)e(competition)k(v)o(ersions)
e(of)f(F)o(ast)g(Do)n(wnw)o(ard.)27 b(This)20 b(is)f(the)i(case)f(for)g
(Y)-11 b(AHSP)18 b(in)h(both)152 3148 y(P)t Fr(I)t(P)t(E)t(S)t(W)s(O)t
(R)t(L)t(D)30 b Fv(domain)25 b(v)n(ariants)h(and)f(for)f(SGPlan)f(in)j
(P)t Fr(I)t(P)t(E)t(S)t(W)s(O)t(R)t(L)t(D)t Fv(-)t(N)5
b Fr(O)q Fv(T)l Fr(A)t(N)t(K)t(A)q(G)t(E)s Fv(.)35 b(The)26
b(P)t Fr(I)t(P)t(E)t(S)t(W)s(O)t(R)t(L)t(D)150 3261 y
Fv(domain)35 b(is)g(not)g(v)o(ery)g(hierarchical)i(in)e(nature;)41
b(this)35 b(might)g(be)g(a)f(domain)h(where)g(the)g(decomposition)j
(ap-)150 3374 y(proach)e(of)f(the)f(causal)i(graph)g(heuristic)h(is)d
(not)h(v)o(ery)g(appropriate.)65 b(The)34 b(results)j(of)d(the)h
(heuristic)i(search)150 3487 y(con\002gurations)30 b(in)c(the)j(P)t
Fr(R)q(O)t(M)t(E)t(L)t(A)t Fv(-)t(O)t Fr(P)t(T)t(I)t(C)t(A)t(L)n
Fv(T)t Fr(E)t(L)5 b(E)g(G)t(R)t(A)t(P)g(H)34 b Fv(domain)27
b(are)g(e)o(xtremely)h(bad)e(and)h(require)i(fur)n(-)150
3600 y(ther)24 b(in)l(v)o(estigation.)291 3720 y(Interestingly)-6
b(,)41 b(focused)36 b(iterati)n(v)o(e-broadening)k(search)c(performs)g
(v)o(ery)f(well)f(on)g(some)h(of)f(the)h(bench-)150 3833
y(marks)22 b(from)f(this)h(suite.)29 b(One)21 b(of)g(the)h(reasons)h
(for)f(this)g(is)f(that)h(in)g(man)o(y)f(of)g(the)h(tasks)g(of)g(the)f
(IPC4)g(suite,)h(there)150 3946 y(are)32 b(man)o(y)f(indi)n(vidual)k
(goals)e(which)f(are)f(easy)i(to)f(serialize)h(and)f(can)h(be)e(solv)o
(ed)i(mostly)g(independently)-6 b(.)3675 3913 y FB(10)150
4059 y Fv(Comparing)32 b(the)f(con\002guration)j Fz(G)29
b Fv(to)i Fz(G)f(+)f(P)1684 4026 y Fs(+)1773 4059 y Fv(and)i
(especially)i Fz(M)d Fv(to)h Fz(M)e(+)h(P)p Fv(,)f(we)h(also)h(observ)o
(e)i(that)e(us-)150 4172 y(ing)26 b(preferred)i(operators)f(is)f(v)o
(ery)f(useful)i(for)f(these)g(benchmarks,)i(e)n(v)o(en)e(more)f(so)h
(than)g(in)f(the)h(tw)o(o)f(pre)n(vious)150 4285 y(e)o(xperiments.)291
4405 y(As)c(a)h(\002nal)g(remark,)h(we)e(observ)o(e)j(that)e(if)g(we)f
(implemented)j(the)f(\223)-7 b(An)o(y\224)22 b(meta-planner)j(by)d
(calling)i(the)e(six)150 4518 y(F)o(ast)30 b(Do)n(wnw)o(ard)g
(con\002gurations)k(in)c(a)g(round-robin)k(f)o(ashion,)g(we)c(w)o(ould)
h(obtain)h(a)e(planning)i(system)g(that)150 4631 y(could)23
b(solv)o(e)f(all)g(b)n(ut)g(54)g(of)g(the)g(IPC4)f(benchmarks)j(within)
e(a)f Fm(6)13 b Fo(\001)g Fm(5)27 b(=)e(30)d Fv(minute)h(timeout.)29
b(This)21 b(is)h(almost)g(on)150 4744 y(par)f(with)g(the)g(top)g
(performer)h(of)f(IPC4,)f(F)o(ast)g(Diagonally)j(Do)n(wnw)o(ard,)e
(which)g(solv)o(ed)h(all)f(b)n(ut)g(52)g(of)g(the)g(IPC4)150
4857 y(benchmarks)32 b(under)g(the)e(same)g(timeout.)49
b(Thus,)31 b(this)f(is)g(a)g(benchmark)i(set)e(for)g(which)g(e)o
(xploring)i(dif)n(ferent)150 4970 y(planner)25 b(con\002gurations)i
(de\002nitely)e(pays)g(of)n(f.)p 150 5080 1440 4 v 158
5166 a Fn(10.)f(W)-6 b(e)14 b(ha)o(v)o(e)g(de)n(vised)i(an)f(e)o
(xperiment)g(which)g(sho)n(ws)g(that)g(if)f(this)g(property)i(is)e
(arti\002cially)f(violated)i(by)g(a)g(simple)f(goal)h(reformulation,)
275 5257 y(the)k(performance)h(of)f(the)g(algorithm)g(de)o(grades)h
(quickly;)g(see)f(the)g(electronic)g(appendix)i(for)d(details.)1888
5506 y Fy(239)p eop end
%%Page: 240 50
TeXDict begin 240 49 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)769
1022 y Fz(Domain)566 b(#T)-8 b(asks)p 1956 1106 4 163
v 136 w(G)117 b(G+P)32 b(G+P)2621 989 y Fs(+)2759 1022
y Fz(M)102 b(M+P)116 b(F)p 3404 1106 V 133 w(Any)305
1185 y Fv(A)t Fr(I)t(R)t(P)t(O)t(RT)1167 b Fv(50)p 1956
1219 4 113 v 126 w(28)151 b(30)g(17)h(18)f(14)174 b(0)p
3404 1219 V 197 w(0)305 1298 y(P)t Fr(I)t(P)t(E)t(S)t(W)s(O)t(R)t(L)t
(D)t Fv(-)t(N)t Fr(O)q Fv(T)l Fr(A)t(N)t(K)t(A)q(G)t(E)470
b Fv(50)p 1956 1331 V 126 w(24)151 b(25)g(23)h(14)174
b(7)g(10)p 3404 1331 V 174 w(7)305 1410 y(P)t Fr(I)t(P)t(E)t(S)t(W)s(O)
t(R)t(L)t(D)t Fv(-)t(T)l Fr(A)t(N)t(K)t(A)q(G)t(E)594
b Fv(50)p 1956 1444 V 126 w(36)151 b(36)g(36)h(34)f(17)h(34)p
3404 1444 V 151 w(14)305 1523 y(P)t Fr(R)q(O)t(M)t(E)t(L)t(A)t
Fv(-)t(O)t Fr(P)t(T)t(I)t(C)t(A)t(L)m Fv(T)t Fr(E)5 b(L)g(E)g(G)t(R)t
(A)t(P)g(H)281 b Fv(48)p 1956 1557 V 126 w(48)151 b(47)g(48)h(47)f(46)h
(13)p 3404 1557 V 151 w(13)305 1636 y(P)t Fr(R)q(O)t(M)t(E)t(L)t(A)t
Fv(-)t(P)t Fr(H)t(I)t(L)t(O)t(S)t(O)t(P)5 b(H)t(E)t(R)t(S)505
b Fv(48)p 1956 1670 V 148 w(0)197 b(0)f(0)174 b(16)g(0)g(21)p
3404 1670 V 174 w(0)305 1749 y(P)t(S)t(R)t(-)t(S)t Fr(M)t(A)t(L)t(L)
1030 b Fv(50)p 1956 1783 V 148 w(0)197 b(0)f(0)h(0)f(0)g(1)p
3404 1783 V 197 w(0)305 1862 y(P)t(S)t(R)t(-)t(M)t Fr(I)t(D)t(D)t(L)t
(E)984 b Fv(50)p 1956 1896 V 148 w(0)197 b(0)f(0)h(0)f(0)174
b(22)p 3404 1896 V 174 w(0)305 1975 y(P)t(S)t(R)t(-)t(L)t
Fr(A)t(R)t(G)t(E)1032 b Fv(50)p 1956 2009 V 126 w(22)151
b(20)g(22)h(23)f(22)h(39)p 3404 2009 V 151 w(20)305 2088
y(S)t Fr(A)l(T)t(E)t(L)t(L)t(I)t(T)t(E)31 b Fv(\(IPC4\))818
b(36)p 1956 2122 V 148 w(8)197 b(0)f(0)h(8)f(3)174 b(22)p
3404 2122 V 174 w(0)303 2201 y Fz(T)-8 b(otal)1270 b
Fv(432)p 1956 2235 V 104 w(166)106 b(158)h(146)f(160)g(109)h(162)p
3404 2235 V 129 w(54)675 2422 y Fz(Domain)p 1497 2505
4 163 v 566 w(FD)99 b(FDD)p 2005 2505 V 98 w(LPG-TD)f(Macr)n(o-FF)j
(SGPlan)e(Y)-10 b(AHSP)210 2584 y Fv(A)t Fr(I)t(R)t(P)t(O)t(RT)p
1497 2618 4 113 v 1032 w Fv(0)208 b(0)p 2005 2618 V 320
w(7)402 b(30)380 b(6)330 b(17)210 2697 y(P)t Fr(I)t(P)t(E)t(S)t(W)s(O)t
(R)t(L)t(D)t Fv(-)t(N)t Fr(O)q Fv(T)m Fr(A)t(N)t(K)t(A)q(G)t(E)p
1497 2731 V 311 w Fv(11)186 b(7)p 2005 2731 V 297 w(10)380
b(12)g(0)353 b(0)210 2810 y(P)t Fr(I)t(P)t(E)t(S)t(W)s(O)t(R)t(L)t(D)t
Fv(-)t(T)m Fr(A)t(N)t(K)t(A)q(G)t(E)p 1497 2844 V 435
w Fv(34)164 b(19)p 2005 2844 V 274 w(29)380 b(29)358
b(20)307 b(13)210 2923 y(P)t Fr(R)q(O)t(M)t(E)t(L)t(A)t
Fv(-)t(O)t Fr(P)t(T)t(I)t(C)t(A)t(L)n Fv(T)t Fr(E)5 b(L)g(E)g(G)t(R)t
(A)t(P)t(H)p 1497 2957 V 123 w Fv(22)164 b(22)p 2005
2957 V 274 w(37)380 b(31)358 b(29)307 b(36)210 3036 y(P)t
Fr(R)q(O)t(M)t(E)t(L)t(A)t Fv(-)t(P)t Fr(H)t(I)t(L)t(O)t(S)t(O)t(P)5
b(H)t(E)g(R)t(S)p 1497 3070 V 369 w Fv(0)208 b(0)p 2005
3070 V 320 w(1)402 b(36)380 b(0)330 b(19)210 3149 y(P)t(S)t(R)t(-)t(S)t
Fr(M)t(A)t(L)t(L)p 1497 3183 V 895 w Fv(0)208 b(0)p 2005
3183 V 320 w(2)402 b(50)380 b(6)353 b(3)210 3262 y(P)t(S)t(R)t(-)t(M)t
Fr(I)t(D)t(D)t(L)t(E)p 1497 3296 V 849 w Fv(0)208 b(0)p
2005 3296 V 320 w(0)402 b(19)380 b(4)330 b(50)210 3375
y(P)t(S)t(R)t(-)t(L)t Fr(A)t(R)t(G)t(E)p 1497 3409 V
874 w Fv(22)164 b(22)p 2005 3409 V 274 w(50)380 b(50)358
b(39)307 b(50)210 3488 y(S)t Fr(A)l(T)t(E)t(L)t(L)t(I)t(T)t(E)31
b Fv(\(IPC4\))p 1497 3522 V 683 w(0)208 b(3)p 2005 3522
V 320 w(1)425 b(0)402 b(6)353 b(0)208 3601 y Fz(T)-8
b(otal)p 1497 3634 V 1158 w Fv(89)164 b(73)p 2005 3634
V 252 w(137)335 b(257)312 b(110)263 b(188)150 3904 y(Figure)24
b(29:)47 b(Number)24 b(of)h(unsolv)o(ed)h(tasks)g(for)e(the)h(IPC4)e
(domains.)33 b(Results)25 b(for)g(the)g(v)n(arious)h(con\002gurations)
572 4017 y(of)j(F)o(ast)h(Do)n(wnw)o(ard)f(are)h(listed)h(in)f(the)g
(upper)h(part,)g(results)h(for)d(the)i(competition)h(participants)572
4130 y(in)27 b(the)g(lo)n(wer)g(part.)40 b(\223FD\224)27
b(and)g(\223FDD\224)f(denote)j(the)e(v)o(ersions)i(of)e(F)o(ast)g(Do)n
(wnw)o(ard)g(that)h(partic-)572 4243 y(ipated)34 b(in)e(IPC4)g(under)i
(the)f(names)g(\223F)o(ast)f(Do)n(wnw)o(ard\224)h(and)g(\223F)o(ast)f
(Diagonally)j(Do)n(wnw)o(ard\224)572 4356 y(\(cf.)23
b(Section)i(6\).)1888 5506 y Fy(240)p eop end
%%Page: 241 51
TeXDict begin 241 50 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)450
1979 y
 /PSfrag where{pop(diagonallydownward)[[0(r)1 0]](downward)[[1(r)1
0]](yahsp)[[2(r)1 0]](macro-ff)[[3(r)1 0]](sgplan)[[4(r)1 0]](lpg-td)[[5(r)1
0]](CG)[[6(r)1 0]](FF)[[7(r)1 0]](LPG)[[8(r)1 0]](Any)[[9(r)1 0]](G+P+)[[10(r)1
0]](G+P)[[11(r)1 0]](G)[[12(r)1 0]](M+P)[[13(r)1 0]](M)[[14(r)1 0]](F)[[15(r)1
0]]16 0 -1/Begin PSfrag}{userdict /PSfrag{pop}put}ifelse
 450 1979 a @beginspecial 50 @llx 50 @lly 410 @urx
264 @ury 3600 @rwi @setspecial
%%BeginDocument: figures/experiment3a-graph.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: experiment3a-graph.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Fri Dec 30 17:13:52 2005
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 264
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -46 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 140 scalefont setfont
1.000 UL
LTb
1218 4116 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(432 \(100%\)) Rshow
grestore
1.000 UL
LTb
1218 3748 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(389 \(90%\)) Rshow
grestore
1.000 UL
LTb
1218 3380 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(346 \(80%\)) Rshow
grestore
1.000 UL
LTb
1218 3004 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(302 \(70%\)) Rshow
grestore
1.000 UL
LTb
1218 2636 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(259 \(60%\)) Rshow
grestore
1.000 UL
LTb
1218 2268 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(216 \(50%\)) Rshow
grestore
1.000 UL
LTb
1218 1900 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(173 \(40%\)) Rshow
grestore
1.000 UL
LTb
1218 1532 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(130 \(30%\)) Rshow
grestore
1.000 UL
LTb
1218 1156 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(86 \(20%\)) Rshow
grestore
1.000 UL
LTb
1218 788 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(43 \(10%\)) Rshow
grestore
1.000 UL
LTb
1218 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(0s) Cshow
grestore
1.000 UL
LTb
2175 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(50s) Cshow
grestore
1.000 UL
LTb
3133 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(100s) Cshow
grestore
1.000 UL
LTb
4090 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(150s) Cshow
grestore
1.000 UL
LTb
5047 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(200s) Cshow
grestore
1.000 UL
LTb
6005 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(250s) Cshow
grestore
1.000 UL
LTb
6962 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(300s) Cshow
grestore
1.000 UL
LTb
1.000 UL
LTb
1218 420 M
5744 0 V
0 3696 V
-5744 0 V
0 -3696 V
LTb
140 2268 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 M
(Solved Tasks) Cshow
grestore
grestore
LTb
4090 70 M
gsave 0 setgray
(Search Time) Cshow
grestore
1.000 UP
1.000 UL
LT0
LTb
6311 1253 M
gsave 0 setgray
(M+P) Rshow
grestore
LT0
6395 1253 M
399 0 V
1219 429 M
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
1 9 V
1 8 V
0 9 V
0 8 V
1 9 V
1 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
1 9 V
1 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
2 8 V
0 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 8 V
0 9 V
1 9 V
0 8 V
0 9 V
1 8 V
stroke
1246 1301 M
1 9 V
0 8 V
0 9 V
1 8 V
1 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
1 9 V
1 8 V
0 9 V
2 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
1 9 V
2 8 V
0 9 V
1 8 V
0 9 V
1 8 V
1 9 V
1 8 V
0 9 V
0 9 V
0 8 V
3 9 V
0 8 V
1 9 V
1 8 V
0 9 V
5 8 V
1 9 V
0 9 V
2 8 V
0 9 V
1 8 V
1 9 V
1 8 V
0 9 V
0 8 V
0 9 V
1 9 V
4 8 V
0 9 V
1 8 V
0 9 V
0 8 V
1 9 V
1 8 V
1 9 V
1 9 V
5 8 V
0 9 V
1 8 V
0 9 V
1 8 V
3 9 V
1 8 V
2 9 V
1 9 V
0 8 V
0 9 V
1 8 V
0 9 V
1 8 V
4 9 V
1 8 V
0 9 V
2 9 V
5 8 V
1 9 V
1 8 V
1 9 V
3 8 V
1 9 V
0 8 V
0 9 V
1 9 V
4 8 V
1 9 V
3 8 V
1 9 V
2 8 V
0 9 V
1 8 V
4 9 V
stroke
1343 2191 M
6 9 V
1 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
1 8 V
1 9 V
2 9 V
2 8 V
1 9 V
1 8 V
1 9 V
1 8 V
5 9 V
7 8 V
2 9 V
1 9 V
3 8 V
3 9 V
1 8 V
13 9 V
2 8 V
11 9 V
6 8 V
14 9 V
11 9 V
3 8 V
8 9 V
5 8 V
2 9 V
12 8 V
4 9 V
19 8 V
4 9 V
3 9 V
2 8 V
3 9 V
10 8 V
1 9 V
14 8 V
18 9 V
9 8 V
14 9 V
15 9 V
13 8 V
5 9 V
18 8 V
7 9 V
13 8 V
8 9 V
44 8 V
39 9 V
24 9 V
50 8 V
19 9 V
19 8 V
13 9 V
0 8 V
17 9 V
9 8 V
1 9 V
13 9 V
21 8 V
43 9 V
17 8 V
4 9 V
62 8 V
82 9 V
4 8 V
14 9 V
6 9 V
45 8 V
20 9 V
37 8 V
56 9 V
4 8 V
22 9 V
105 8 V
21 9 V
1 9 V
91 8 V
47 9 V
19 8 V
60 9 V
44 8 V
10 9 V
53 8 V
6 9 V
54 9 V
52 8 V
30 9 V
29 8 V
13 9 V
82 8 V
33 9 V
82 8 V
15 9 V
12 9 V
16 8 V
100 9 V
3 8 V
90 9 V
stroke
3403 3081 M
89 8 V
21 9 V
30 8 V
155 9 V
62 9 V
51 8 V
138 9 V
573 8 V
212 9 V
755 8 V
404 9 V
1068 8 V
1 0 V
1.000 UL
LT1
LTb
6311 1113 M
gsave 0 setgray
(G+P+) Rshow
grestore
LT1
6395 1113 M
399 0 V
1219 429 M
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 9 V
1 8 V
0 9 V
0 8 V
1 9 V
1 8 V
1 9 V
0 8 V
1 9 V
0 9 V
0 8 V
1 9 V
1 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
0 8 V
2 9 V
1 8 V
0 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 9 V
0 8 V
0 9 V
1 8 V
stroke
1246 1301 M
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
1 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
1 8 V
0 9 V
1 9 V
1 8 V
0 9 V
1 8 V
2 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
1 8 V
1 9 V
1 8 V
0 9 V
1 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
1 9 V
1 8 V
2 9 V
1 9 V
1 8 V
1 9 V
1 8 V
2 9 V
1 8 V
1 9 V
0 8 V
1 9 V
0 9 V
1 8 V
2 9 V
2 8 V
1 9 V
0 8 V
1 9 V
1 8 V
0 9 V
1 9 V
2 8 V
1 9 V
6 8 V
1 9 V
0 8 V
2 9 V
0 8 V
2 9 V
3 9 V
0 8 V
0 9 V
2 8 V
0 9 V
0 8 V
0 9 V
0 8 V
3 9 V
2 9 V
1 8 V
1 9 V
5 8 V
3 9 V
0 8 V
1 9 V
1 8 V
3 9 V
0 9 V
2 8 V
1 9 V
0 8 V
1 9 V
0 8 V
1 9 V
1 8 V
0 9 V
1 9 V
1 8 V
0 9 V
1 8 V
0 9 V
3 8 V
2 9 V
2 8 V
10 9 V
stroke
1350 2191 M
0 9 V
1 8 V
0 9 V
1 8 V
8 9 V
1 8 V
9 9 V
3 8 V
3 9 V
1 9 V
1 8 V
8 9 V
0 8 V
3 9 V
3 8 V
1 9 V
13 8 V
19 9 V
6 9 V
1 8 V
8 9 V
3 8 V
13 9 V
2 8 V
6 9 V
2 8 V
15 9 V
26 9 V
7 8 V
2 9 V
0 8 V
9 9 V
24 8 V
12 9 V
15 8 V
11 9 V
13 9 V
26 8 V
26 9 V
1 8 V
10 9 V
31 8 V
25 9 V
30 8 V
6 9 V
14 9 V
23 8 V
2 9 V
30 8 V
3 9 V
39 8 V
53 9 V
29 8 V
58 9 V
5 9 V
109 8 V
33 9 V
178 8 V
152 9 V
8 8 V
25 9 V
171 8 V
15 9 V
180 9 V
39 8 V
180 9 V
106 8 V
1 9 V
294 8 V
16 9 V
11 8 V
239 9 V
610 9 V
367 8 V
329 9 V
233 8 V
212 9 V
265 8 V
815 9 V
363 0 V
1.000 UL
LT2
LTb
6311 973 M
gsave 0 setgray
(G+P) Rshow
grestore
LT2
6395 973 M
399 0 V
1219 429 M
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 9 V
1 8 V
1 9 V
0 8 V
1 9 V
1 8 V
1 9 V
0 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
1 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
2 9 V
1 8 V
0 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 9 V
0 8 V
0 9 V
2 8 V
stroke
1247 1301 M
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 9 V
0 8 V
0 9 V
0 8 V
1 9 V
1 8 V
1 9 V
1 8 V
0 9 V
2 9 V
0 8 V
1 9 V
1 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
0 9 V
3 8 V
0 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
2 8 V
1 9 V
2 8 V
0 9 V
1 9 V
2 8 V
1 9 V
0 8 V
1 9 V
2 8 V
0 9 V
0 8 V
1 9 V
0 9 V
1 8 V
3 9 V
1 8 V
3 9 V
1 8 V
2 9 V
0 8 V
0 9 V
0 9 V
1 8 V
1 9 V
1 8 V
2 9 V
2 8 V
0 9 V
3 8 V
2 9 V
1 9 V
0 8 V
3 9 V
1 8 V
0 9 V
0 8 V
1 9 V
3 8 V
1 9 V
1 9 V
3 8 V
10 9 V
1 8 V
2 9 V
0 8 V
0 9 V
0 8 V
2 9 V
1 9 V
1 8 V
1 9 V
0 8 V
1 9 V
5 8 V
1 9 V
9 8 V
1 9 V
0 9 V
2 8 V
15 9 V
2 8 V
0 9 V
3 8 V
2 9 V
3 8 V
2 9 V
stroke
1377 2191 M
0 9 V
2 8 V
11 9 V
2 8 V
12 9 V
0 8 V
20 9 V
4 8 V
3 9 V
11 9 V
1 8 V
1 9 V
10 8 V
0 9 V
5 8 V
4 9 V
5 8 V
3 9 V
2 9 V
12 8 V
24 9 V
6 8 V
9 9 V
8 8 V
12 9 V
9 8 V
22 9 V
8 9 V
10 8 V
9 9 V
39 8 V
9 9 V
77 8 V
88 9 V
4 8 V
56 9 V
63 9 V
26 8 V
11 9 V
34 8 V
15 9 V
43 8 V
45 9 V
43 8 V
5 9 V
29 9 V
7 8 V
101 9 V
29 8 V
29 9 V
154 8 V
10 9 V
229 8 V
271 9 V
61 9 V
16 8 V
105 9 V
202 8 V
88 9 V
445 8 V
338 9 V
438 8 V
23 9 V
232 9 V
166 8 V
904 9 V
540 8 V
385 0 V
1.000 UL
LT3
LTb
6311 833 M
gsave 0 setgray
(M) Rshow
grestore
LT3
6395 833 M
399 0 V
1219 429 M
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
1 9 V
1 8 V
0 9 V
0 9 V
1 8 V
1 9 V
1 8 V
1 9 V
0 8 V
0 9 V
1 8 V
1 9 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
2 9 V
1 8 V
0 9 V
1 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 8 V
0 9 V
1 8 V
0 9 V
1 9 V
0 8 V
1 9 V
0 8 V
stroke
1249 1301 M
0 9 V
1 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
0 9 V
1 8 V
1 9 V
0 8 V
1 9 V
0 8 V
3 9 V
0 9 V
0 8 V
1 9 V
1 8 V
0 9 V
1 8 V
1 9 V
0 8 V
2 9 V
0 9 V
0 8 V
1 9 V
1 8 V
0 9 V
3 8 V
1 9 V
0 8 V
1 9 V
1 9 V
3 8 V
1 9 V
0 8 V
4 9 V
3 8 V
0 9 V
1 8 V
1 9 V
0 9 V
1 8 V
1 9 V
0 8 V
0 9 V
1 8 V
1 9 V
0 8 V
3 9 V
0 9 V
3 8 V
0 9 V
1 8 V
2 9 V
0 8 V
5 9 V
1 8 V
6 9 V
0 9 V
8 8 V
2 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 8 V
1 9 V
6 9 V
4 8 V
0 9 V
1 8 V
1 9 V
2 8 V
0 9 V
1 8 V
1 9 V
1 9 V
4 8 V
1 9 V
4 8 V
5 9 V
1 8 V
4 9 V
1 8 V
5 9 V
2 9 V
2 8 V
0 9 V
1 8 V
3 9 V
3 8 V
1 9 V
3 8 V
19 9 V
9 9 V
5 8 V
13 9 V
1 8 V
10 9 V
3 8 V
1 9 V
8 8 V
0 9 V
stroke
1448 2191 M
3 9 V
14 8 V
27 9 V
26 8 V
28 9 V
8 8 V
15 9 V
27 8 V
1 9 V
7 9 V
3 8 V
30 9 V
16 8 V
1 9 V
10 8 V
2 9 V
51 8 V
2 9 V
7 9 V
35 8 V
18 9 V
31 8 V
28 9 V
3 8 V
15 9 V
9 8 V
89 9 V
37 9 V
56 8 V
15 9 V
1 8 V
14 9 V
41 8 V
35 9 V
46 8 V
64 9 V
215 9 V
40 8 V
3 9 V
43 8 V
31 9 V
46 8 V
68 9 V
21 8 V
181 9 V
68 9 V
15 8 V
228 9 V
103 8 V
53 9 V
422 8 V
289 9 V
171 8 V
20 9 V
213 9 V
31 8 V
20 9 V
286 8 V
138 9 V
7 8 V
101 9 V
319 8 V
505 9 V
489 9 V
398 8 V
175 0 V
1.000 UL
LT4
LTb
6311 693 M
gsave 0 setgray
(F) Rshow
grestore
LT4
6395 693 M
399 0 V
1219 429 M
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
1 8 V
0 9 V
1 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 8 V
1 9 V
1 8 V
0 9 V
1 9 V
1 8 V
0 9 V
1 8 V
0 9 V
0 8 V
1 9 V
0 8 V
1 9 V
2 9 V
1 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 9 V
1 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
3 9 V
1 9 V
0 8 V
0 9 V
0 8 V
stroke
1251 1301 M
0 9 V
1 8 V
0 9 V
0 8 V
2 9 V
0 9 V
1 8 V
0 9 V
0 8 V
1 9 V
1 8 V
0 9 V
0 8 V
0 9 V
1 9 V
0 8 V
0 9 V
2 8 V
2 9 V
1 8 V
0 9 V
1 8 V
0 9 V
3 9 V
1 8 V
3 9 V
0 8 V
3 9 V
0 8 V
5 9 V
1 8 V
1 9 V
0 9 V
1 8 V
1 9 V
1 8 V
6 9 V
1 8 V
0 9 V
1 8 V
2 9 V
4 9 V
0 8 V
1 9 V
0 8 V
3 9 V
0 8 V
0 9 V
5 8 V
1 9 V
3 9 V
0 8 V
2 9 V
1 8 V
7 9 V
2 8 V
7 9 V
4 8 V
11 9 V
1 9 V
4 8 V
4 9 V
2 8 V
7 9 V
1 8 V
1 9 V
15 8 V
4 9 V
4 9 V
4 8 V
7 9 V
2 8 V
7 9 V
3 8 V
1 9 V
3 8 V
7 9 V
1 9 V
13 8 V
7 9 V
24 8 V
5 9 V
15 8 V
8 9 V
12 8 V
36 9 V
5 9 V
0 8 V
25 9 V
3 8 V
4 9 V
30 8 V
18 9 V
0 8 V
18 9 V
10 9 V
7 8 V
14 9 V
10 8 V
24 9 V
26 8 V
0 9 V
4 8 V
0 9 V
stroke
1741 2191 M
5 9 V
0 8 V
18 9 V
5 8 V
1 9 V
20 8 V
40 9 V
18 8 V
18 9 V
28 9 V
7 8 V
1 9 V
17 8 V
2 9 V
4 8 V
64 9 V
27 8 V
12 9 V
7 9 V
60 8 V
53 9 V
6 8 V
8 9 V
0 8 V
8 9 V
66 8 V
14 9 V
52 9 V
19 8 V
26 9 V
5 8 V
21 9 V
49 8 V
26 9 V
47 8 V
45 9 V
9 9 V
127 8 V
11 9 V
0 8 V
24 9 V
82 8 V
12 9 V
13 8 V
3 9 V
130 9 V
80 8 V
73 9 V
232 8 V
26 9 V
423 8 V
72 9 V
319 8 V
27 9 V
23 9 V
89 8 V
197 9 V
418 8 V
431 9 V
191 8 V
554 9 V
224 8 V
458 9 V
174 0 V
1.000 UL
LT5
LTb
6311 553 M
gsave 0 setgray
(G) Rshow
grestore
LT5
6395 553 M
399 0 V
1219 429 M
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 8 V
0 9 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
2 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
1 8 V
1 9 V
1 8 V
0 9 V
2 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
2 9 V
0 8 V
1 9 V
0 9 V
1 8 V
0 9 V
1 8 V
0 9 V
0 8 V
1 9 V
1 8 V
0 9 V
0 9 V
0 8 V
0 9 V
2 8 V
stroke
1249 1301 M
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
1 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
2 9 V
1 8 V
1 9 V
0 9 V
2 8 V
0 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 8 V
1 9 V
1 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
1 8 V
1 9 V
0 9 V
1 8 V
1 9 V
2 8 V
0 9 V
0 8 V
2 9 V
0 8 V
0 9 V
2 9 V
1 8 V
0 9 V
1 8 V
0 9 V
0 8 V
3 9 V
2 8 V
1 9 V
4 9 V
1 8 V
0 9 V
1 8 V
1 9 V
1 8 V
3 9 V
1 8 V
1 9 V
1 9 V
3 8 V
3 9 V
0 8 V
8 9 V
2 8 V
5 9 V
6 8 V
2 9 V
1 9 V
1 8 V
1 9 V
1 8 V
0 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 9 V
1 8 V
4 9 V
1 8 V
1 9 V
2 8 V
1 9 V
1 8 V
0 9 V
3 9 V
1 8 V
1 9 V
2 8 V
2 9 V
5 8 V
1 9 V
6 8 V
3 9 V
6 9 V
1 8 V
4 9 V
16 8 V
5 9 V
26 8 V
9 9 V
1 8 V
7 9 V
stroke
1440 2191 M
28 9 V
3 8 V
0 9 V
0 8 V
10 9 V
1 8 V
7 9 V
26 8 V
0 9 V
8 9 V
16 8 V
18 9 V
2 8 V
7 9 V
2 8 V
22 9 V
2 8 V
15 9 V
78 9 V
55 8 V
27 9 V
42 8 V
28 9 V
5 8 V
9 9 V
81 8 V
17 9 V
84 9 V
19 8 V
74 9 V
26 8 V
10 9 V
95 8 V
54 9 V
7 8 V
65 9 V
85 9 V
150 8 V
40 9 V
122 8 V
163 9 V
89 8 V
139 9 V
31 8 V
158 9 V
112 9 V
57 8 V
47 9 V
252 8 V
103 9 V
57 8 V
227 9 V
86 8 V
153 9 V
946 9 V
88 8 V
370 9 V
305 8 V
589 9 V
210 0 V
1.000 UL
LTb
1218 420 M
5744 0 V
0 3696 V
-5744 0 V
0 -3696 V
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica

%%EndDocument
 @endspecial 450 1979 a
 /End PSfrag
 450 1979 a 450 72 a
 /Hide PSfrag
 450 72 a
-300 134 a Fv(PSfrag)e(replacements)p -300 168 750 4
v 450 172 a
 /Unhide PSfrag
 450 172 a 450 262 a
  {
 450 262 a -41 275 a Fd(FDD)14
b Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 262 y
  } 0/Place PSfrag
 450 262 a
450 374 a
  {
 450 374 a -5 387 a Fd(FD)h Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))
450 374 y
  } 1/Place PSfrag
 450 374 a 450 492 a
  {
 450 492 a 287 510 a Fc(Y)-5
b(AHSP)450 492 y
  } 2/Place PSfrag
 450 492 a 450 605 a
  {
 450 605 a 234 623
a Fc(Macro-FF)450 605 y
  } 3/Place PSfrag
 450 605 a 450 718 a
  {
 450 718 a
278 736 a Fc(SGPlan)450 718 y
  } 4/Place PSfrag
 450 718 a 450 831 a
  {
 450
831 a 267 849 a Fc(LPG-TD)450 831 y
  } 5/Place PSfrag
 450 831 a 450 944
a
  {
 450 944 a 375 962 a Fc(CG)450 944 y
  } 6/Place PSfrag
 450 944 a 450 1057
a
  {
 450 1057 a 389 1075 a Fc(FF)450 1057 y
  } 7/Place PSfrag
 450 1057 a 450
1169 a
  {
 450 1169 a 350 1187 a Fc(LPG)450 1169 y
  } 8/Place PSfrag
 450 1169
a 450 1278 a
  {
 450 1278 a -32 1291 a Fd(An)o(y)14 b Fc(\(F)n(ast)f(Do)o
(wnw)o(ard\))450 1278 y
  } 9/Place PSfrag
 450 1278 a 450 1385 a
  {
 450 1385
a -115 1404 a Fd(G)h(+)g(P)14 1383 y Fb(+)75 1404 y Fc(\(F)n(ast)f(Do)o
(wnw)o(ard\))450 1385 y
  } 10/Place PSfrag
 450 1385 a 450 1503 a
  {
 450 1503
a -68 1516 a Fd(G)h(+)g(P)g Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450
1503 y
  } 11/Place PSfrag
 450 1503 a 450 1616 a
  {
 450 1616 a 22 1629 a Fd(G)h
Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 1616 y
  } 12/Place PSfrag
 450 1616 a
450 1729 a
  {
 450 1729 a -71 1742 a Fd(M)i(+)f(P)g Fc(\(F)n(ast)f(Do)o
(wnw)o(ard\))450 1729 y
  } 13/Place PSfrag
 450 1729 a 450 1842 a
  {
 450 1842
a 19 1855 a Fd(M)i Fc(\(F)n(ast)e(Do)o(wnw)o(ard\))450
1842 y
  } 14/Place PSfrag
 450 1842 a 450 1955 a
  {
 450 1955 a 31 1968 a Fd(F)h
Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 1955 y
  } 15/Place PSfrag
 450 1955 a
150 2291 a Fv(Figure)24 b(30:)47 b(Number)23 b(of)h(tasks)g(solv)o(ed)h
(vs.)e(runtime)i(for)f(the)f(IPC4)g(domains.)30 b(This)23
b(graph)i(sho)n(ws)f(the)g(results)572 2404 y(for)f(the)h(v)n(arious)h
(con\002gurations)i(of)d(F)o(ast)f(Do)n(wnw)o(ard.)450
4449 y
 /PSfrag where{pop(diagonallydownward)[[0(r)1 0]](downward)[[1(r)1
0]](yahsp)[[2(r)1 0]](macro-ff)[[3(r)1 0]](sgplan)[[4(r)1 0]](lpg-td)[[5(r)1
0]](CG)[[6(r)1 0]](FF)[[7(r)1 0]](LPG)[[8(r)1 0]](Any)[[9(r)1 0]](G+P+)[[10(r)1
0]](G+P)[[11(r)1 0]](G)[[12(r)1 0]](M+P)[[13(r)1 0]](M)[[14(r)1 0]](F)[[15(r)1
0]]16 0 -1/Begin PSfrag}{userdict /PSfrag{pop}put}ifelse
 450 4449 a @beginspecial 50 @llx 50 @lly 410 @urx
264 @ury 3600 @rwi @setspecial
%%BeginDocument: figures/experiment3b-graph.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: experiment3b-graph.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Fri Dec 30 17:13:52 2005
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 264
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -46 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 140 scalefont setfont
1.000 UL
LTb
1218 4116 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(432 \(100%\)) Rshow
grestore
1.000 UL
LTb
1218 3748 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(389 \(90%\)) Rshow
grestore
1.000 UL
LTb
1218 3380 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(346 \(80%\)) Rshow
grestore
1.000 UL
LTb
1218 3004 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(302 \(70%\)) Rshow
grestore
1.000 UL
LTb
1218 2636 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(259 \(60%\)) Rshow
grestore
1.000 UL
LTb
1218 2268 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(216 \(50%\)) Rshow
grestore
1.000 UL
LTb
1218 1900 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(173 \(40%\)) Rshow
grestore
1.000 UL
LTb
1218 1532 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(130 \(30%\)) Rshow
grestore
1.000 UL
LTb
1218 1156 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(86 \(20%\)) Rshow
grestore
1.000 UL
LTb
1218 788 M
63 0 V
5681 0 R
-63 0 V
-5765 0 R
gsave 0 setgray
(43 \(10%\)) Rshow
grestore
1.000 UL
LTb
1218 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(0s) Cshow
grestore
1.000 UL
LTb
2175 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(50s) Cshow
grestore
1.000 UL
LTb
3133 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(100s) Cshow
grestore
1.000 UL
LTb
4090 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(150s) Cshow
grestore
1.000 UL
LTb
5047 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(200s) Cshow
grestore
1.000 UL
LTb
6005 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(250s) Cshow
grestore
1.000 UL
LTb
6962 420 M
0 63 V
0 3633 R
0 -63 V
0 -3773 R
gsave 0 setgray
(300s) Cshow
grestore
1.000 UL
LTb
1.000 UL
LTb
1218 420 M
5744 0 V
0 3696 V
-5744 0 V
0 -3696 V
LTb
140 2268 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 M
(Solved Tasks) Cshow
grestore
grestore
LTb
4090 70 M
gsave 0 setgray
(Search Time) Cshow
grestore
1.000 UP
1.000 UL
LT0
LTb
6311 1393 M
gsave 0 setgray
(Any) Rshow
grestore
LT0
6395 1393 M
399 0 V
1219 429 M
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
1 8 V
0 9 V
1 8 V
0 9 V
0 8 V
1 9 V
1 8 V
1 9 V
0 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
2 8 V
0 9 V
1 8 V
0 9 V
0 9 V
1 8 V
0 9 V
0 8 V
stroke
1244 1301 M
0 9 V
0 8 V
1 9 V
0 8 V
1 9 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
1 9 V
0 8 V
1 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
1 9 V
0 8 V
0 9 V
1 8 V
1 9 V
1 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
1 8 V
0 9 V
1 8 V
1 9 V
0 9 V
1 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
2 9 V
1 9 V
0 8 V
1 9 V
2 8 V
0 9 V
1 8 V
1 9 V
2 8 V
1 9 V
1 9 V
0 8 V
0 9 V
2 8 V
1 9 V
2 8 V
1 9 V
0 8 V
1 9 V
0 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 8 V
2 9 V
0 9 V
1 8 V
0 9 V
1 8 V
1 9 V
2 8 V
1 9 V
0 8 V
2 9 V
3 9 V
0 8 V
1 9 V
0 8 V
0 9 V
1 8 V
1 9 V
1 8 V
1 9 V
0 9 V
1 8 V
1 9 V
3 8 V
0 9 V
1 8 V
1 9 V
2 8 V
2 9 V
stroke
1313 2191 M
1 9 V
0 8 V
2 9 V
3 8 V
1 9 V
1 8 V
1 9 V
0 8 V
1 9 V
1 9 V
2 8 V
0 9 V
1 8 V
0 9 V
1 8 V
1 9 V
0 8 V
1 9 V
1 9 V
1 8 V
2 9 V
3 8 V
2 9 V
1 8 V
5 9 V
1 8 V
1 9 V
1 9 V
1 8 V
1 9 V
5 8 V
2 9 V
1 8 V
3 9 V
0 8 V
2 9 V
1 9 V
2 8 V
1 9 V
5 8 V
1 9 V
3 8 V
2 9 V
1 8 V
0 9 V
5 9 V
2 8 V
4 9 V
2 8 V
7 9 V
5 8 V
2 9 V
16 8 V
3 9 V
6 9 V
5 8 V
7 9 V
0 8 V
0 9 V
8 8 V
3 9 V
4 8 V
5 9 V
7 9 V
1 8 V
1 9 V
9 8 V
6 9 V
15 8 V
5 9 V
0 8 V
8 9 V
10 9 V
18 8 V
5 9 V
0 8 V
0 9 V
1 8 V
27 9 V
0 8 V
4 9 V
20 9 V
26 8 V
2 9 V
13 8 V
5 9 V
17 8 V
0 9 V
24 8 V
7 9 V
25 9 V
18 8 V
9 9 V
9 8 V
2 9 V
7 8 V
5 9 V
1 8 V
20 9 V
2 9 V
27 8 V
7 9 V
1 8 V
3 9 V
stroke
1830 3081 M
7 8 V
29 9 V
0 8 V
19 9 V
9 9 V
8 8 V
17 9 V
6 8 V
58 9 V
6 8 V
27 9 V
12 8 V
7 9 V
77 9 V
19 8 V
20 9 V
11 8 V
8 9 V
26 8 V
54 9 V
59 8 V
12 9 V
5 9 V
21 8 V
5 9 V
88 8 V
55 9 V
14 8 V
40 9 V
127 8 V
11 9 V
46 9 V
15 8 V
44 9 V
13 8 V
13 9 V
28 8 V
52 9 V
13 8 V
17 9 V
103 9 V
21 8 V
28 9 V
16 8 V
105 9 V
161 8 V
41 9 V
88 8 V
22 9 V
30 9 V
217 8 V
97 9 V
319 8 V
27 9 V
23 8 V
48 9 V
238 8 V
200 9 V
23 9 V
195 8 V
203 9 V
228 8 V
745 9 V
224 8 V
247 9 V
211 8 V
173 9 V
1 0 V
1.000 UL
LT1
LTb
6311 1253 M
gsave 0 setgray
(diagonallydownward) Rshow
grestore
LT1
6395 1253 M
399 0 V
1218 429 M
1 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
2 9 V
0 9 V
1 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
1 8 V
0 9 V
1 9 V
1 8 V
0 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
1 8 V
1 9 V
0 8 V
0 9 V
1 8 V
0 9 V
1 8 V
0 9 V
0 9 V
1 8 V
0 9 V
0 8 V
stroke
1244 1301 M
0 9 V
1 8 V
2 9 V
0 8 V
0 9 V
0 9 V
1 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
1 8 V
1 9 V
0 9 V
1 8 V
1 9 V
0 8 V
1 9 V
0 8 V
0 9 V
1 8 V
1 9 V
0 9 V
2 8 V
0 9 V
1 8 V
0 9 V
1 8 V
1 9 V
1 8 V
0 9 V
1 9 V
1 8 V
0 9 V
2 8 V
0 9 V
0 8 V
1 9 V
1 8 V
0 9 V
2 9 V
1 8 V
0 9 V
2 8 V
1 9 V
0 8 V
1 9 V
0 8 V
0 9 V
3 9 V
0 8 V
3 9 V
0 8 V
2 9 V
0 8 V
1 9 V
1 8 V
0 9 V
0 9 V
2 8 V
2 9 V
0 8 V
2 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 9 V
2 8 V
0 9 V
1 8 V
0 9 V
1 8 V
1 9 V
3 8 V
4 9 V
1 9 V
2 8 V
1 9 V
3 8 V
1 9 V
0 8 V
0 9 V
1 8 V
3 9 V
0 9 V
2 8 V
1 9 V
0 8 V
2 9 V
0 8 V
2 9 V
0 8 V
3 9 V
stroke
1329 2191 M
1 9 V
1 8 V
0 9 V
0 8 V
2 9 V
1 8 V
4 9 V
2 8 V
1 9 V
3 9 V
2 8 V
0 9 V
1 8 V
1 9 V
2 8 V
0 9 V
3 8 V
0 9 V
5 9 V
6 8 V
1 9 V
0 8 V
1 9 V
5 8 V
1 9 V
1 8 V
4 9 V
1 9 V
3 8 V
2 9 V
12 8 V
0 9 V
3 8 V
2 9 V
9 8 V
1 9 V
16 9 V
13 8 V
5 9 V
0 8 V
1 9 V
4 8 V
1 9 V
17 8 V
14 9 V
10 9 V
5 8 V
17 9 V
15 8 V
5 9 V
10 8 V
8 9 V
17 8 V
31 9 V
2 9 V
22 8 V
8 9 V
22 8 V
16 9 V
2 8 V
4 9 V
6 8 V
9 9 V
6 9 V
5 8 V
17 9 V
16 8 V
17 9 V
1 8 V
9 9 V
20 8 V
1 9 V
3 9 V
3 8 V
31 9 V
3 8 V
1 9 V
31 8 V
1 9 V
10 8 V
13 9 V
3 9 V
2 8 V
10 9 V
6 8 V
10 9 V
17 8 V
0 9 V
0 8 V
17 9 V
38 9 V
16 8 V
26 9 V
1 8 V
10 9 V
28 8 V
16 9 V
48 8 V
44 9 V
11 9 V
11 8 V
100 9 V
15 8 V
26 9 V
stroke
2333 3081 M
10 8 V
90 9 V
12 8 V
48 9 V
6 9 V
64 8 V
29 9 V
10 8 V
0 9 V
6 8 V
16 9 V
61 8 V
0 9 V
17 9 V
41 8 V
10 9 V
34 8 V
71 9 V
29 8 V
76 9 V
3 8 V
4 9 V
145 9 V
20 8 V
70 9 V
47 8 V
41 9 V
28 8 V
27 9 V
4 8 V
87 9 V
51 9 V
119 8 V
6 9 V
59 8 V
113 9 V
210 8 V
27 9 V
65 8 V
199 9 V
56 9 V
335 8 V
22 9 V
9 8 V
1000 9 V
520 8 V
47 9 V
502 8 V
183 0 V
1.000 UL
LT2
LTb
6311 1113 M
gsave 0 setgray
(downward) Rshow
grestore
LT2
6395 1113 M
399 0 V
1218 429 M
1 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
1 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
2 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
2 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
1 9 V
1 8 V
1 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
stroke
1243 1301 M
1 9 V
0 8 V
2 9 V
1 8 V
0 9 V
1 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
2 8 V
0 9 V
1 8 V
0 9 V
1 8 V
0 9 V
1 8 V
0 9 V
1 9 V
0 8 V
1 9 V
1 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
2 9 V
0 8 V
0 9 V
1 8 V
1 9 V
0 8 V
2 9 V
0 8 V
1 9 V
1 9 V
1 8 V
0 9 V
3 8 V
0 9 V
1 8 V
2 9 V
1 8 V
0 9 V
0 9 V
1 8 V
2 9 V
0 8 V
2 9 V
2 8 V
0 9 V
0 8 V
1 9 V
0 9 V
0 8 V
1 9 V
1 8 V
2 9 V
0 8 V
1 9 V
1 8 V
3 9 V
2 9 V
0 8 V
0 9 V
1 8 V
0 9 V
2 8 V
0 9 V
2 8 V
0 9 V
1 9 V
1 8 V
0 9 V
2 8 V
1 9 V
2 8 V
2 9 V
5 8 V
0 9 V
2 9 V
0 8 V
1 9 V
0 8 V
0 9 V
1 8 V
1 9 V
2 8 V
2 9 V
1 9 V
1 8 V
0 9 V
3 8 V
0 9 V
0 8 V
0 9 V
2 8 V
2 9 V
stroke
1330 2191 M
1 9 V
3 8 V
0 9 V
0 8 V
1 9 V
0 8 V
3 9 V
1 8 V
1 9 V
1 9 V
4 8 V
0 9 V
1 8 V
0 9 V
0 8 V
5 9 V
2 8 V
13 9 V
0 9 V
0 8 V
6 9 V
0 8 V
2 9 V
4 8 V
1 9 V
11 8 V
3 9 V
2 9 V
4 8 V
2 9 V
2 8 V
3 9 V
2 8 V
0 9 V
2 8 V
13 9 V
3 9 V
5 8 V
9 9 V
4 8 V
24 9 V
6 8 V
16 9 V
17 8 V
9 9 V
32 9 V
5 8 V
12 9 V
3 8 V
6 9 V
6 8 V
6 9 V
80 8 V
1 9 V
11 9 V
0 8 V
3 9 V
2 8 V
6 9 V
0 8 V
3 9 V
8 8 V
1 9 V
1 9 V
2 8 V
2 9 V
5 8 V
10 9 V
22 8 V
3 9 V
17 8 V
6 9 V
2 9 V
3 8 V
15 9 V
3 8 V
10 9 V
13 8 V
9 9 V
47 8 V
0 9 V
7 9 V
20 8 V
2 9 V
26 8 V
5 9 V
4 8 V
9 9 V
17 8 V
34 9 V
1 9 V
8 8 V
21 9 V
14 8 V
7 9 V
3 8 V
1 9 V
14 8 V
4 9 V
38 9 V
38 8 V
39 9 V
4 8 V
6 9 V
stroke
2193 3081 M
42 8 V
24 9 V
104 8 V
3 9 V
6 9 V
127 8 V
101 9 V
20 8 V
172 9 V
83 8 V
1 9 V
78 8 V
0 9 V
4 9 V
154 8 V
33 9 V
56 8 V
255 9 V
18 8 V
117 9 V
156 8 V
95 9 V
186 9 V
57 8 V
51 9 V
7 8 V
163 9 V
52 8 V
97 9 V
257 8 V
1066 9 V
161 9 V
1023 0 V
1.000 UL
LT3
LTb
6311 973 M
gsave 0 setgray
(sgplan) Rshow
grestore
LT3
6395 973 M
399 0 V
1218 429 M
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
stroke
1221 1301 M
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
1 8 V
0 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
1 9 V
1 8 V
0 9 V
0 8 V
0 9 V
1 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
1 8 V
1 9 V
1 9 V
1 8 V
0 9 V
0 8 V
0 9 V
1 8 V
1 9 V
0 8 V
0 9 V
1 9 V
1 8 V
2 9 V
0 8 V
1 9 V
1 8 V
2 9 V
1 8 V
2 9 V
stroke
1256 2191 M
4 9 V
3 8 V
5 9 V
2 8 V
1 9 V
0 8 V
2 9 V
1 8 V
0 9 V
1 9 V
2 8 V
0 9 V
5 8 V
1 9 V
1 8 V
1 9 V
4 8 V
0 9 V
3 9 V
2 8 V
2 9 V
0 8 V
8 9 V
1 8 V
1 9 V
9 8 V
4 9 V
4 9 V
8 8 V
3 9 V
14 8 V
9 9 V
1 8 V
4 9 V
3 8 V
6 9 V
1 9 V
4 8 V
4 9 V
5 8 V
3 9 V
3 8 V
10 9 V
5 8 V
12 9 V
4 9 V
10 8 V
7 9 V
60 8 V
6 9 V
2 8 V
15 9 V
3 8 V
19 9 V
9 9 V
25 8 V
4 9 V
24 8 V
17 9 V
14 8 V
19 9 V
11 8 V
9 9 V
7 9 V
4 8 V
31 9 V
35 8 V
11 9 V
10 8 V
6 9 V
14 8 V
10 9 V
13 9 V
14 8 V
8 9 V
16 8 V
67 9 V
24 8 V
8 9 V
32 8 V
26 9 V
1 9 V
43 8 V
3 9 V
0 8 V
16 9 V
39 8 V
87 9 V
29 8 V
33 9 V
126 9 V
7 8 V
102 9 V
40 8 V
2 9 V
1 8 V
15 9 V
119 8 V
70 9 V
9 9 V
25 8 V
208 9 V
83 8 V
44 9 V
stroke
3114 3081 M
117 8 V
19 9 V
14 8 V
148 9 V
153 9 V
308 8 V
266 9 V
99 8 V
680 9 V
761 8 V
611 9 V
672 0 V
1.000 UL
LT4
LTb
6311 833 M
gsave 0 setgray
(lpg-td) Rshow
grestore
LT4
6395 833 M
399 0 V
1218 429 M
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
stroke
1223 1301 M
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 8 V
0 9 V
1 9 V
1 8 V
0 9 V
2 8 V
0 9 V
1 8 V
0 9 V
2 8 V
0 9 V
0 9 V
0 8 V
2 9 V
0 8 V
0 9 V
2 8 V
1 9 V
2 8 V
2 9 V
1 9 V
0 8 V
1 9 V
0 8 V
0 9 V
1 8 V
0 9 V
2 8 V
1 9 V
4 9 V
0 8 V
2 9 V
0 8 V
2 9 V
3 8 V
1 9 V
0 8 V
8 9 V
2 9 V
2 8 V
0 9 V
1 8 V
3 9 V
1 8 V
2 9 V
3 8 V
0 9 V
8 9 V
3 8 V
2 9 V
1 8 V
3 9 V
2 8 V
3 9 V
2 8 V
1 9 V
2 9 V
1 8 V
2 9 V
11 8 V
2 9 V
2 8 V
0 9 V
5 8 V
6 9 V
stroke
1345 2191 M
3 9 V
5 8 V
3 9 V
1 8 V
1 9 V
1 8 V
5 9 V
5 8 V
10 9 V
17 9 V
23 8 V
3 9 V
18 8 V
0 9 V
3 8 V
13 9 V
0 8 V
0 9 V
2 9 V
1 8 V
2 9 V
7 8 V
28 9 V
1 8 V
43 9 V
9 8 V
7 9 V
7 9 V
8 8 V
21 9 V
31 8 V
20 9 V
4 8 V
9 9 V
1 8 V
8 9 V
36 9 V
1 8 V
10 9 V
13 8 V
32 9 V
51 8 V
7 9 V
2 8 V
6 9 V
31 9 V
52 8 V
9 9 V
22 8 V
45 9 V
3 8 V
48 9 V
24 8 V
6 9 V
17 9 V
4 8 V
9 9 V
17 8 V
16 9 V
29 8 V
9 9 V
38 8 V
10 9 V
55 9 V
37 8 V
94 9 V
6 8 V
20 9 V
35 8 V
6 9 V
100 8 V
37 9 V
13 9 V
62 8 V
523 9 V
38 8 V
55 9 V
49 8 V
14 9 V
277 8 V
175 9 V
111 9 V
130 8 V
145 9 V
27 8 V
1389 9 V
551 8 V
707 9 V
94 0 V
1.000 UL
LT5
LTb
6311 693 M
gsave 0 setgray
(yahsp) Rshow
grestore
LT5
6395 693 M
399 0 V
1218 429 M
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
stroke
1220 1301 M
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
1 9 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
1 8 V
0 9 V
0 8 V
1 9 V
1 9 V
1 8 V
0 9 V
1 8 V
1 9 V
1 8 V
0 9 V
0 8 V
0 9 V
1 9 V
0 8 V
0 9 V
1 8 V
1 9 V
0 8 V
2 9 V
0 8 V
2 9 V
1 9 V
3 8 V
1 9 V
3 8 V
7 9 V
6 8 V
3 9 V
1 8 V
0 9 V
4 9 V
0 8 V
1 9 V
5 8 V
7 9 V
1 8 V
2 9 V
2 8 V
4 9 V
5 9 V
8 8 V
1 9 V
1 8 V
2 9 V
5 8 V
13 9 V
2 8 V
4 9 V
stroke
1333 2191 M
7 9 V
6 8 V
9 9 V
3 8 V
22 9 V
32 8 V
30 9 V
21 8 V
53 9 V
4 9 V
20 8 V
12 9 V
60 8 V
40 9 V
38 8 V
50 9 V
38 8 V
62 9 V
26 9 V
161 8 V
1 9 V
46 8 V
301 9 V
27 8 V
64 9 V
128 8 V
12 9 V
28 9 V
78 8 V
652 9 V
90 8 V
1902 9 V
142 8 V
93 9 V
91 8 V
379 9 V
854 9 V
47 0 V
1.000 UL
LT6
LTb
6311 553 M
gsave 0 setgray
(macro-ff) Rshow
grestore
LT6
6395 553 M
399 0 V
1218 429 M
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
0 8 V
0 9 V
1 8 V
0 9 V
0 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 9 V
1 8 V
1 9 V
0 8 V
0 9 V
0 8 V
1 9 V
0 8 V
1 9 V
1 9 V
1 8 V
0 9 V
1 8 V
1 9 V
0 8 V
0 9 V
1 8 V
2 9 V
2 9 V
0 8 V
0 9 V
2 8 V
1 9 V
3 8 V
2 9 V
1 8 V
1 9 V
1 9 V
0 8 V
3 9 V
0 8 V
2 9 V
1 8 V
0 9 V
1 8 V
1 9 V
4 9 V
4 8 V
1 9 V
3 8 V
stroke
1267 1301 M
3 9 V
1 8 V
4 9 V
2 8 V
2 9 V
2 9 V
10 8 V
3 9 V
0 8 V
6 9 V
16 8 V
1 9 V
7 8 V
28 9 V
1 9 V
12 8 V
52 9 V
20 8 V
1 9 V
44 8 V
10 9 V
4 8 V
5 9 V
77 9 V
91 8 V
27 9 V
2 8 V
21 9 V
44 8 V
1 9 V
23 8 V
86 9 V
34 9 V
1 8 V
16 9 V
117 8 V
15 9 V
28 8 V
35 9 V
7 8 V
5 9 V
6 9 V
27 8 V
63 9 V
7 8 V
18 9 V
50 8 V
102 9 V
371 8 V
14 9 V
133 9 V
206 8 V
68 9 V
131 8 V
231 9 V
354 8 V
98 9 V
146 8 V
300 9 V
44 9 V
236 8 V
276 9 V
89 8 V
485 9 V
114 8 V
104 9 V
35 8 V
488 9 V
121 9 V
403 8 V
12 9 V
51 8 V
48 0 V
1.000 UL
LTb
1218 420 M
5744 0 V
0 3696 V
-5744 0 V
0 -3696 V
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica

%%EndDocument
 @endspecial 450 4449 a
 /End PSfrag
 450 4449 a 450 2542 a
 /Hide PSfrag
 450 2542
a -300 2604 a Fv(PSfrag)g(replacements)p -300 2639 750
4 v 450 2642 a
 /Unhide PSfrag
 450 2642 a 450 2732 a
  {
 450 2732 a -41 2745
a Fd(FDD)14 b Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 2732
y
  } 0/Place PSfrag
 450 2732 a 450 2845 a
  {
 450 2845 a -5 2858 a Fd(FD)h
Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 2845 y
  } 1/Place PSfrag
 450 2845 a
450 2962 a
  {
 450 2962 a 287 2980 a Fc(Y)-5 b(AHSP)450 2962
y
  } 2/Place PSfrag
 450 2962 a 450 3076 a
  {
 450 3076 a 234 3093 a Fc(Macro-FF)450
3076 y
  } 3/Place PSfrag
 450 3076 a 450 3188 a
  {
 450 3188 a 278 3206 a Fc(SGPlan)450
3188 y
  } 4/Place PSfrag
 450 3188 a 450 3301 a
  {
 450 3301 a 267 3319 a Fc(LPG-TD)450
3301 y
  } 5/Place PSfrag
 450 3301 a 450 3414 a
  {
 450 3414 a 375 3432 a Fc(CG)450
3414 y
  } 6/Place PSfrag
 450 3414 a 450 3528 a
  {
 450 3528 a 389 3546 a Fc(FF)450
3528 y
  } 7/Place PSfrag
 450 3528 a 450 3640 a
  {
 450 3640 a 350 3658 a Fc(LPG)450
3640 y
  } 8/Place PSfrag
 450 3640 a 450 3748 a
  {
 450 3748 a -32 3761 a Fd(An)o(y)14
b Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 3748 y
  } 9/Place PSfrag
 450 3748
a 450 3855 a
  {
 450 3855 a -115 3874 a Fd(G)h(+)g(P)14 3853
y Fb(+)75 3874 y Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450
3855 y
  } 10/Place PSfrag
 450 3855 a 450 3974 a
  {
 450 3974 a -68 3987 a Fd(G)h(+)g(P)g
Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450 3974 y
  } 11/Place PSfrag
 450 3974 a
450 4087 a
  {
 450 4087 a 22 4100 a Fd(G)h Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))
450 4087 y
  } 12/Place PSfrag
 450 4087 a 450 4200 a
  {
 450 4200 a -71 4213
a Fd(M)i(+)f(P)g Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))450
4200 y
  } 13/Place PSfrag
 450 4200 a 450 4313 a
  {
 450 4313 a 19 4326 a Fd(M)i
Fc(\(F)n(ast)e(Do)o(wnw)o(ard\))450 4313 y
  } 14/Place PSfrag
 450 4313 a
450 4426 a
  {
 450 4426 a 31 4439 a Fd(F)h Fc(\(F)n(ast)f(Do)o(wnw)o(ard\))
450 4426 y
  } 15/Place PSfrag
 450 4426 a 150 4761 a Fv(Figure)24 b(31:)47
b(Number)23 b(of)h(tasks)g(solv)o(ed)h(vs.)e(runtime)i(for)f(the)f
(IPC4)g(domains.)30 b(This)23 b(graph)i(sho)n(ws)f(the)g(results)572
4874 y(for)g(the)h(hypothetical)i(\223)-7 b(An)o(y\224)24
b(planner)j(which)d(al)o(w)o(ays)h(chooses)i(the)d(best)h
(con\002guration)j(of)c(F)o(ast)572 4987 y(Do)n(wnw)o(ard,)32
b(the)g(competition)i(con\002gurations)g(of)d(F)o(ast)g(Do)n(wnw)o(ard)
g(and)g(the)h(best)f(four)h(other)572 5100 y(participants.)1888
5506 y Fy(241)p eop end
%%Page: 242 52
TeXDict begin 242 51 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)150
249 y Fz(7.7)46 b(Conclusions)24 b(fr)n(om)g(the)e(Experiment)150
411 y Fv(Ho)n(w)31 b(can)h(we)g(interpret)i(these)f(e)o(xperimental)i
(results?)57 b(Our)32 b(\002rst)g(conclusion)j(is)d(that)h(F)o(ast)e
(Do)n(wnw)o(ard)h(is)150 524 y(clearly)37 b(competiti)n(v)o(e)h(with)e
(the)g(state)h(of)e(the)i(art.)65 b(This)36 b(is)g(especially)i(true)f
(for)f(the)g(con\002guration)j(using)150 637 y(multi-heuristic)31
b(best-\002rst)d(search)h(with)e(preferred)i(operators)h(\()p
Fz(M+P)p Fv(\),)c(which)h(outperforms)j(all)d(competing)150
750 y(planning)f(systems)f(both)f(on)g(the)g(set)g(of)f(STRIPS)e
(domains)k(from)f(IPC1\2263)f(and)h(on)g(the)g(domains)h(from)e(IPC4.)
150 863 y(If)g(it)g(were)f(not)i(for)f(the)g(problems)i(in)e(the)i(S)t
Fr(C)t(H)t(E)t(D)t(U)t(L)t(E)i Fv(domain,)d(the)f(same)h(w)o(ould)f(be)
g(true)h(for)f(the)g(remaining)150 976 y(group)i(of)e(benchmarks,)j
(the)e(ADL)d(domains)k(from)f(IPC1\2263.)291 1090 y(W)l(ith)i(re)o
(gard)g(to)f(the)g(second)i(objecti)n(v)o(e)h(of)d(the)g(in)l(v)o
(estigation,)k(e)n(v)n(aluating)f(the)d(relati)n(v)o(e)i(strengths)h
(of)d(the)150 1203 y(dif)n(ferent)g(planner)h(con\002gurations,)g(the)e
Fz(M+P)e Fv(con\002guration)k(emer)n(ges)f(as)e(a)g(clear)n(-cut)j
(winner)-5 b(.)30 b(In)23 b(23)g(out)h(of)150 1316 y(29)i(domains,)i
(no)f(other)g(con\002guration)i(solv)o(es)e(more)f(tasks,)i(and)f
(unlik)o(e)h(the)e(other)h(con\002gurations,)j(there)d(is)150
1429 y(only)22 b(one)g(domain)h(\()r(P)t Fr(R)q(O)t(M)t(E)t(L)t(A)t
Fv(-)t(O)t Fr(P)t(T)t(I)t(C)t(A)t(L)n Fv(T)t Fr(E)5 b(L)g(E)t(G)t(R)t
(A)t(P)g(H)r Fv(\))27 b(in)22 b(which)g(it)f(performs)i(v)o(ery)f
(badly)-6 b(.)29 b(W)-7 b(e)21 b(conclude)150 1542 y(that)f(both)g
(multi-heuristic)k(best-\002rst)c(search)h(and)f(the)g(use)g(of)g
(preferred)h(operators)h(are)e(promising)i(e)o(xtensions)150
1655 y(to)h(heuristic)j(planners.)291 1769 y(This)j(is)f(particularly)k
(true)d(for)g(preferred)i(operators.)47 b(Indeed,)31
b(after)f(the)f Fz(M+P)e Fv(con\002guration,)33 b(the)c(tw)o(o)150
1882 y(v)n(ariants)24 b(of)d(greedy)j(best-\002rst)f(search)g(with)f
(preferred)i(operators)h(sho)n(w)c(the)h(ne)o(xt)h(best)f(o)o(v)o
(erall)h(performance,)150 1995 y(both)28 b(in)f(terms)h(of)f(the)g
(number)h(of)g(domains)g(where)g(the)o(y)f(are)h(among)g(the)f(top)h
(performers)h(and)f(in)f(terms)g(of)150 2108 y(the)e(total)h(number)f
(of)g(tasks)h(solv)o(ed.)34 b(Comparing)26 b Fz(G)d Fv(to)i
Fz(G+P)p Fv(,)e(there)j(are)f(ten)g(domains)h(in)f(which)g(the)g(v)n
(ariant)150 2221 y(using)g(preferred)h(operators)h(solv)o(es)e(more)f
(tasks)h(than)f(the)h(one)f(not)g(using)h(them;)g(the)f(opposite)i(is)e
(true)g(in)g(\002)n(v)o(e)150 2334 y(domains.)41 b(Comparing)29
b Fz(M)d Fv(to)i Fz(M+P)p Fv(,)d(the)j(dif)n(ference)i(is)d(e)n(v)o(en)
g(more)h(striking,)i(with)d(the)g(preferred)j(operator)150
2447 y(v)n(ariant)h(outperforming)h(the)e(other)g(in)f(\002fteen)h
(domains,)h(while)f(being)g(w)o(orse)f(in)h(tw)o(o)e(\(in)i(both)g(of)f
(which)g(it)150 2559 y(only)24 b(solv)o(es)h(one)f(task)g(less\).)30
b(These)24 b(are)f(con)l(vincing)k(ar)n(guments)f(for)e(the)g(use)g(of)
f(preferred)j(operators.)150 2821 y Fw(8.)35 b(Summary)25
b(and)h(Discussion)150 2996 y Fv(Before)i(we)e(turn)i(to)f(discussion,)
k(let)c(us)g(brie\003y)h(summarize)g(the)g(contrib)n(utions)j(of)c
(this)h(article.)41 b(As)26 b(a)h(moti-)150 3109 y(v)n(ating)e
(starting)g(point,)f(we)f(e)o(xplained)i(that)f(planning)i(tasks)f
(often)f(e)o(xhibit)h(a)e(simpler)h(structure)i(if)d(e)o(xpressed)150
3222 y(with)h Fq(multi-valued)j(state)e(variables)p Fv(,)i(rather)e
(than)g(the)g(traditional)i(propositional)h(representations.)35
b(W)-7 b(e)23 b(then)150 3335 y(introduced)31 b Fq(F)-7
b(ast)29 b(Downwar)m(d)p Fv(,)g(a)f(planning)j(system)e(based)h(on)e
(the)h(idea)g(of)g(con)l(v)o(erting)i(tasks)f(into)f(a)f(multi-)150
3447 y(v)n(alued)d(formalism)f(and)g(e)o(xploiting)i(the)e(causal)h
(information)h(underlying)h(such)d(encodings.)291 3562
y(F)o(ast)k(Do)n(wnw)o(ard)h(processes)i(PDDL)c(planning)k(tasks)f(in)f
(three)g(stages.)46 b(W)-7 b(e)28 b(skipped)j(the)e(\002rst)f(of)h
(these)150 3675 y(stages,)34 b Fq(tr)o(anslation)p Fv(,)j(which)31
b(automatically)k(transforms)e(a)e(PDDL)e(task)j(into)g(an)g(equi)n(v)n
(alent)i(multi-v)n(alued)150 3788 y(planning)d(task)e(with)f(a)g(nicer)
h(causal)h(structure.)45 b(W)-7 b(e)28 b(e)o(xplained)i(the)f(inner)h
(w)o(orkings)g(of)e(the)g(second)i(stage,)150 3901 y
Fq(knowledg)o(e)f(compilation)p Fv(,)g(demonstrating)h(in)d(depth)g
(what)g(kind)g(of)g(kno)n(wledge)h(the)f(planner)h(e)o(xtracts)g(from)
150 4014 y(the)35 b(problem)g(representation,)42 b(discussing)37
b Fq(causal)f(gr)o(aphs)p Fv(,)j Fq(domain)c(tr)o(ansition)i(gr)o(aphs)
p Fv(,)h Fq(successor)f(g)o(en-)150 4126 y(er)o(ator)o(s)31
b Fv(and)g Fq(axiom)f(e)o(valuator)o(s)p Fv(.)50 b(During)30
b(our)g(discussion)j(of)d(F)o(ast)f(Do)n(wnw)o(ard')-5
b(s)30 b Fq(sear)m(c)o(h)h Fv(component,)i(we)150 4239
y(introduced)27 b(its)d(heuristic)j(search)e(algorithms,)h(which)f(use)
f(the)g(technique)j(of)d Fq(deferr)m(ed)i(heuristic)h(e)o(valuation)150
4352 y Fv(to)i(reduce)h(the)f(number)g(of)g(states)h(for)f(which)g(a)f
(heuristic)j(goal)e(distance)i(estimate)f(must)f(be)f(computed.)46
b(In)150 4465 y(addition)35 b(to)d(greedy)i(best-\002rst)g(search,)i(F)
o(ast)c(Do)n(wnw)o(ard)h(emplo)o(ys)g(the)g Fq(multi-heuristic)j
(best-\002r)o(st)f(sear)m(c)o(h)150 4578 y Fv(algorithm)24
b(to)d(usefully)j(inte)o(grate)g(the)e(information)i(of)e(tw)o(o)f
(heuristic)j(estimators,)g(namely)f(the)f Fq(causal)h(gr)o(aph)150
4691 y(heuristic)39 b Fv(and)d Fq(FF)f(heuristic)p Fv(.)69
b(Both)37 b(heuristic)h(search)g(algorithms)g(can)f(utilize)h
(preference)h(information)150 4804 y(about)30 b(operators.)49
b(W)-7 b(e)28 b(also)i(introduced)j(F)o(ast)28 b(Do)n(wnw)o(ard')-5
b(s)30 b(e)o(xperimental)i Fq(focused)f(iter)o(ative-br)l(oadenin)q(g)
150 4917 y(sear)m(c)o(h)c Fv(algorithm,)h(which)e(is)f(based)i(on)f
(the)g(idea)h(of)f(pruning)h(the)g(set)f(of)f(operators)k(to)c(only)i
(consider)h(those)150 5030 y(successor)e(states)f(which)f(are)f(lik)o
(ely)i(to)f(lead)g(to)n(w)o(ards)g(a)f(speci\002c)i(goal.)291
5144 y(W)-7 b(e)25 b(thus)h(tried)g(to)f(gi)n(v)o(e)h(a)f(complete)i
(account)g(of)e(the)h(F)o(ast)f(Do)n(wnw)o(ard)g(planning)j(system')-5
b(s)27 b(approach)g(to)150 5257 y(solving)e(multi-v)n(alued)g(planning)
g(tasks,)f(including)i(its)c(moti)n(v)n(ation,)j(architecture,)h(and)d
(algorithmic)i(founda-)1888 5506 y Fy(242)p eop end
%%Page: 243 53
TeXDict begin 243 52 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)150
249 y Fv(tions.)k(In)23 b(the)g(pre)n(vious)i(section,)f(we)e
(demonstrated)k(its)d(empirical)h(beha)n(viour)l(,)i(sho)n(wing)e(good)
g(performance)150 361 y(across)h(the)f(whole)g(range)g(of)g
(propositional)j(benchmarks)f(from)e(the)g(pre)n(vious)h(planning)h
(competitions.)291 481 y(Among)21 b(all)h(the)g(no)o(v)o(el)g
(algorithms)h(and)f(search)h(enhancements)h(discussed)g(in)e(this)g
(article,)h(there)f(are)g(tw)o(o)150 594 y(aspects)33
b(of)d(F)o(ast)h(Do)n(wnw)o(ard)f(which)i(we)e(consider)j(of)d(central)
j(importance)g(and)e(which)g(we)f(w)o(ould)i(lik)o(e)f(to)150
707 y(emphasize.)52 b(One)30 b(of)g(them)h(is)f(the)h(use)g(of)g
(multi-v)n(alued)i(state)e(v)n(ariables)i(for)e(PDDL-style)f(planning.)
52 b(W)-7 b(e)150 820 y(belie)n(v)o(e)23 b(that)f(multi-v)n(alued)i
(representations)i(are)21 b(much)h(more)g(structured)i(and)e(hence)g
(much)g(more)g(amenable)150 933 y(to)30 b(automated)i(reasoning)h(\227)
c(be)h(it)g(for)g(the)h(purposes)h(of)e(heuristic)j(e)n(v)n(aluation,)h
(problem)d(decomposition,)150 1045 y(or)h(other)g(aspects)h(of)f
(planning)i(such)e(as)g(goal)g(ordering)i(or)e(e)o(xtraction)i(of)d
(landmarks.)55 b(The)31 b(other)i(central)150 1158 y(idea)26
b(is)g(the)g(use)g(of)g(hierarchical)j(decompositions)g(within)d(a)g
(heuristic)i(planning)g(frame)n(w)o(ork.)36 b(Hierarchical)150
1271 y(approaches)f(to)c(domain-independent)37 b(planning)d(ha)n(v)o(e)
f(a)e(considerable)k(potential,)h(b)n(ut)c(since)h(the)f(w)o(ork)f(of)
150 1384 y(Knoblock)d(\(1994\))h(and)e(Bacchus)h(and)f(Y)-9
b(ang)27 b(\(1994\),)i(little)e(w)o(ork)g(has)g(been)h(published.)41
b(W)l(ith)27 b(F)o(ast)f(Do)n(wn-)150 1497 y(w)o(ard,)k(we)d(hope)j(to)
e(rene)n(w)h(interest)i(in)d(this)h(area,)h(which)f(we)f(belie)n(v)o(e)
i(to)e(be)h(a)f(v)o(ery)h(promising)i(ground)f(for)150
1610 y(further)25 b(adv)n(ances)h(in)d(automated)j(planning.)291
1729 y(F)o(or)32 b(the)h(future,)k(there)c(are)h(se)n(v)o(eral)f
(aspects)i(of)e(F)o(ast)f(Do)n(wnw)o(ard)h(that)h(we)e(w)o(ould)h(lik)o
(e)h(to)f(in)l(v)o(estigate)150 1842 y(further)-5 b(.)67
b(First,)38 b(we)d(intend)i(to)f(e)o(xperiment)h(with)f(other)g(search)
i(techniques)g(along)f(the)f(lines)h(of)e(focused)150
1955 y(iterati)n(v)o(e-broadening)42 b(search,)f(which)c(emphasize)h
(heuristically)i(e)n(v)n(aluating)f(operator)g(usefulness)g(rather)150
2068 y(than)24 b(heuristically)j(e)n(v)n(aluating)f(states.)291
2188 y(Second,)33 b(we)d(w)o(ould)h(lik)o(e)g(to)f(come)h(up)g(with)f
(an)g(ef)n(\002cient)i(heuristic)h(for)d(multi-v)n(alued)j(planning)g
(tasks)150 2301 y(which)23 b(does)g(not)g(require)h(pruning)h(c)o
(ycles)e(of)g(the)f(causal)i(graph.)30 b(Initial)24 b(e)o(xperiments)g
(in)f(this)g(direction)i(ha)n(v)o(e)150 2414 y(sho)n(wn)31
b(that)f(it)g(is)g(dif)n(\002cult)h(to)g(achie)n(v)o(e)g(this)g(goal)g
(without)g(losing)h(the)e(performance)j(of)d(F)o(ast)g(Do)n(wnw)o(ard')
-5 b(s)150 2526 y(heuristic)25 b(estimator)l(,)f(b)n(ut)f(perhaps)i
(better)f(heuristic)g(accurac)o(y)h(can)e(outweigh)h(w)o(orse)f(per)n
(-state)i(performance)150 2639 y(in)e(man)o(y)h(cases.)291
2759 y(Third,)37 b(we)c(w)o(ant)i(to)f(in)l(v)o(estigate)j(in)d(ho)n(w)
g(f)o(ar)g(the)h(performance)i(of)d(the)g(planner)j(could)e(be)f(impro)
o(v)o(ed)150 2872 y(by)c(encoding)i(some)e(domains)g(dif)n(ferently)-6
b(.)50 b(In)30 b(some)f(cases,)j(mer)n(ging)f(a)f(set)f(of)h(state)g(v)
n(ariables)i(which)e(are)150 2985 y(closely)g(interrelated)h(into)e(a)e
(single)j(state)f(v)n(ariable)h(whose)e(domain)h(is)f(the)g(product)i
(of)e(the)h(domains)g(of)f(the)150 3098 y(original)e(state)e(v)n
(ariables)h(might)f(be)g(bene\002cial.)30 b(Also,)23
b(we)g(w)o(ant)h(to)f(test)h(if)f(hand-tailored)28 b(encodings)e(lead)e
(to)150 3210 y(better)h(performance)h(than)e(automatically)j(deri)n(v)o
(ed)d(ones,)h(and)f(if)f(so,)g(ho)n(w)g(lar)n(ge)i(the)f(performance)i
(gap)d(is.)291 3330 y(F)o(ourth)36 b(and)g(\002nally)-6
b(,)39 b(we)34 b(w)o(ould)i(lik)o(e)g(to)g(e)n(v)n(aluate)h(the)f(beha)
n(viour)i(of)d(the)h(causal)h(graph)g(heuristic)g(in)150
3443 y(speci\002c)22 b(planning)i(domains)e(both)g(empirically)i(and)d
(theoretically)-6 b(,)26 b(follo)n(wing)c(Hof)n(fmann')-5
b(s)23 b(w)o(ork)e(on)g(the)h(FF)150 3556 y(heuristic)34
b(\(Hof)n(fmann,)g(2001,)e(2002,)g(2005\).)53 b(Hopefully)-6
b(,)35 b(this)d(will)f(gi)n(v)o(e)h(some)f(indication)k(when)c(we)g
(can)150 3669 y(e)o(xpect)26 b(good)f(performance)i(from)e(the)g
(causal)h(graph)f(heuristic)i(and)e(when)g(it)f(is)g(advisable)k(to)c
(look)h(for)g(other)150 3782 y(approaches.)150 4048 y
Fw(Ackno)o(wledgements)150 4228 y Fv(The)33 b(author)h(wishes)g(to)f
(thank)i(Silvia)e(Richter)l(,)k(the)c(other)h(member)g(of)f(the)g(F)o
(ast)g(Do)n(wnw)o(ard)g(team)g(at)g(the)150 4341 y(4th)28
b(International)k(Planning)d(Competition,)i(for)d(her)g(part)g(in)g
(implementing)i(the)e(planner)i(and)e(for)g(v)n(aluable)150
4454 y(advice)d(before,)h(throughout,)h(and)d(after)h(the)f
(competition.)33 b(She)24 b(also)g(deserv)o(es)i(thanks)g(for)e
(helping)i(out)e(with)150 4567 y(the)g(e)o(xperiments,)h(for)f
(proof-reading)k(this)c(article,)g(and)g(for)g(suggesting)j(a)c(number)
h(of)g(impro)o(v)o(ements.)291 4686 y(The)h(anon)o(ymous)j(re)n(vie)n
(wers)f(of)e(the)h(article)i(and)e(the)g(handling)i(editor)l(,)f(Maria)
f(F)o(ox,)g(made)f(a)h(number)g(of)150 4799 y(useful)f(suggestions)i
(that)d(led)g(to)f(signi\002cant)j(impro)o(v)o(ements.)291
4918 y(This)j(w)o(ork)g(w)o(as)f(partly)j(supported)g(by)e(the)g
(German)g(Research)i(Council)f(\(DFG\))d(within)j(the)f(Graduate)150
5031 y(Programme)c(\223Mathematical)i(Logic)e(and)f(Applications\224)k
(and)d(as)g(part)g(of)f(the)h(T)m(ransre)o(gional)i(Collaborati)n(v)o
(e)150 5144 y(Research)c(Centre)f(\223)-7 b(Automatic)22
b(V)-10 b(eri\002cation)23 b(and)e(Analysis)i(of)e(Comple)o(x)h
(Systems\224)g(\(SFB/TR)d(14)i(A)-12 b(V)g(A)l(CS\).)150
5257 y(See)23 b Fp(www.avacs.org)17 b Fv(for)24 b(more)f(information.)
1888 5506 y Fy(243)p eop end
%%Page: 244 54
TeXDict begin 244 53 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)150
249 y Fw(Refer)n(ences)150 425 y Fv(Bacchus,)27 b(F)-7
b(.,)25 b(&)g(Y)-9 b(ang,)27 b(Q.)e(\(1994\).)44 b(Do)n(wnw)o(ard)27
b(re\002nement)g(and)g(the)g(ef)n(\002cienc)o(y)h(of)e(hierarchical)k
(problem)377 537 y(solving.)35 b Fq(Arti\002cial)25 b(Intellig)o(ence)p
Fv(,)i Fq(71)p Fv(\(1\),)e(43\226100.)150 694 y(B)5 b(\250)-35
b(ackstr)8 b(\250)-38 b(om,)24 b(C.,)d(&)h(Nebel,)i(B.)d(\(1995\).)34
b(Comple)o(xity)25 b(results)f(for)g(SAS)2482 661 y Fs(+)2562
694 y Fv(planning.)35 b Fq(Computational)26 b(Intelli-)377
807 y(g)o(ence)p Fv(,)f Fq(11)p Fv(\(4\),)f(625\226655.)150
964 y(Bonet,)g(B.,)d(&)i(Gef)n(fner)l(,)h(H.)e(\(2001\).)35
b(Planning)25 b(as)e(heuristic)j(search.)35 b Fq(Arti\002cial)25
b(Intellig)o(ence)p Fv(,)i Fq(129)p Fv(\(1\),)d(5\22633.)150
1120 y(Brafman,)d(R.)f(I.,)g(&)g(Domshlak,)i(C.)e(\(2003\).)30
b(Structure)23 b(and)e(comple)o(xity)j(in)d(planning)i(with)f(unary)g
(operators.)377 1233 y Fq(J)n(ournal)k(of)d(Arti\002cial)i(Intellig)o
(ence)i(Resear)m(c)o(h)p Fv(,)d Fq(18)p Fv(,)f(315\226349.)150
1390 y(Bylander)l(,)30 b(T)-7 b(.)28 b(\(1994\).)52 b(The)28
b(computational)33 b(comple)o(xity)d(of)f(propositional)k(STRIPS)26
b(planning.)53 b Fq(Arti\002cial)377 1503 y(Intellig)o(ence)p
Fv(,)27 b Fq(69)p Fv(\(1\2262\),)e(165\226204.)150 1659
y(Domshlak,)d(C.,)d(&)i(Brafman,)g(R.)f(I.)g(\(2002\).)30
b(Structure)23 b(and)e(comple)o(xity)j(in)d(planning)i(with)f(unary)g
(operators.)377 1772 y(In)31 b(Ghallab,)g(M.,)e(Hertzber)n(g,)j(J.,)d
(&)h(T)m(ra)n(v)o(erso,)h(P)-10 b(.)29 b(\(Eds.\),)h
Fq(Pr)l(oceedings)j(of)d(the)h(Sixth)g(International)377
1885 y(Confer)m(ence)21 b(on)e(Arti\002cial)i(Intellig)o(ence)h
(Planning)e(and)g(Sc)o(heduling)i(\(AIPS)c(2002\))p Fv(,)i(pp.)f
(34\22643.)h(AAAI)377 1998 y(Press.)150 2154 y(Domshlak,)32
b(C.,)d(&)i(Dinitz,)g(Y)-12 b(.)30 b(\(2001\).)59 b(Multi-agent)34
b(of)n(f-line)f(coordination:)i(Structure)e(and)e(comple)o(xity)-6
b(.)377 2267 y(In)35 b(Cesta,)f(A.,)e(&)i(Borrajo,)h(D.)e(\(Eds.\),)h
Fq(Pr)m(e-pr)l(oceedings)k(of)c(the)g(Sixth)i(Eur)l(opean)g(Confer)m
(ence)g(on)377 2380 y(Planning)25 b(\(ECP'01\))p Fv(,)e(pp.)h
(277\226288,)h(T)-7 b(oledo,)24 b(Spain.)150 2537 y(Do)n(wling,)35
b(W)-8 b(.)34 b(F)-7 b(.,)34 b(&)g(Gallier)l(,)i(J.)f(H.)f(\(1984\).)74
b(Linear)n(-time)37 b(algorithms)g(for)f(testing)h(the)f
(satis\002ability)i(of)377 2650 y(propositional)28 b(Horn)23
b(formulae.)35 b Fq(J)n(ournal)25 b(of)f(Lo)o(gic)g(Pr)l(o)o(gr)o
(amming)p Fv(,)g Fq(1)p Fv(\(3\),)g(367\226383.)150 2806
y(Edelkamp,)35 b(S.,)d(&)h(Helmert,)g(M.)g(\(1999\).)68
b(Exhibiting)36 b(kno)n(wledge)g(in)e(planning)i(problems)g(to)e
(minimize)377 2919 y(state)g(encoding)h(length.)63 b(In)33
b(F)o(ox,)e(M.,)g(&)h(Biundo,)h(S.)e(\(Eds.\),)h Fq(Recent)h(Advances)h
(in)f(AI)e(Planning)o(.)377 3032 y(5th)k(Eur)l(opean)i(Confer)m(ence)f
(on)f(Planning)h(\(ECP'99\))p Fv(,)e(V)-12 b(ol.)34 b(1809)i(of)e
Fq(Lectur)m(e)h(Notes)g(in)g(Arti\002cial)377 3145 y(Intellig)o(ence)p
Fv(,)27 b(pp.)c(135\226147,)j(Ne)n(w)c(Y)-10 b(ork.)23
b(Springer)n(-V)-10 b(erlag.)150 3302 y(Edelkamp,)33
b(S.,)e(&)h(Hof)n(fmann,)h(J.)f(\(2004\).)64 b(PDDL2.2:)32
b(The)g(language)j(for)e(the)g(classical)i(part)e(of)g(the)g(4th)377
3414 y(International)38 b(Planning)e(Competition.)69
b(T)-6 b(ech.)34 b(rep.)g(195,)h(Albert-Ludwigs-Uni)n(v)o(ersit)5
b(\250)-35 b(at)39 b(Freib)n(ur)n(g,)377 3527 y(Institut)26
b(f)8 b(\250)-38 b(ur)23 b(Informatik.)150 3684 y(F)o(ox,)k(M.,)f(&)g
(Long,)i(D.)e(\(2003\).)48 b(PDDL2.1:)26 b(An)h(e)o(xtension)j(to)d
(PDDL)f(for)i(e)o(xpressing)i(temporal)f(planning)377
3797 y(domains.)35 b Fq(J)n(ournal)25 b(of)f(Arti\002cial)h(Intellig)o
(ence)i(Resear)m(c)o(h)p Fv(,)d Fq(20)p Fv(,)f(61\226124.)150
3953 y(Gare)o(y)-6 b(,)26 b(M.)f(R.,)g(&)h(Johnson,)i(D.)d(S.)g
(\(1979\).)44 b Fq(Computer)o(s)28 b(and)f(Intr)o(actability)j(\227)c
(A)f(Guide)i(to)f(the)h(Theory)g(of)377 4066 y(NP-Completeness)p
Fv(.)35 b(Freeman.)150 4223 y(Gere)n(vini,)25 b(A.,)d(Saetti,)i(A.,)f
(&)g(Serina,)h(I.)f(\(2003\).)37 b(Planning)26 b(through)g(stochastic)h
(local)e(search)g(and)g(temporal)377 4336 y(action)g(graphs)g(in)f
(LPG.)31 b Fq(J)n(ournal)25 b(of)f(Arti\002cial)h(Intellig)o(ence)i
(Resear)m(c)o(h)p Fv(,)d Fq(20)p Fv(,)f(239\226290.)150
4492 y(Ginsber)n(g,)f(M.)e(L.,)f(&)h(Harv)o(e)o(y)-6
b(,)21 b(W)-8 b(.)19 b(D.)h(\(1992\).)29 b(Iterati)n(v)o(e)22
b(broadening.)31 b Fq(Arti\002cial)22 b(Intellig)o(ence)p
Fv(,)i Fq(55)p Fv(,)d(367\226383.)150 4649 y(Helmert,)e(M.)f(\(2004\).)
26 b(A)18 b(planning)k(heuristic)f(based)g(on)e(causal)i(graph)f
(analysis.)26 b(In)20 b(Zilberstein,)h(S.,)c(K)m(oehler)l(,)377
4762 y(J.,)h(&)f(K)m(oenig,)i(S.)e(\(Eds.\),)h Fq(Pr)l(oceedings)k(of)c
(the)h(F)-10 b(ourteenth)21 b(International)i(Confer)m(ence)d(on)f(A)n
(utomated)377 4875 y(Planning)25 b(and)f(Sc)o(heduling)j(\(ICAPS)22
b(2004\))p Fv(,)j(pp.)e(161\226170.)j(AAAI)c(Press.)150
5031 y(Hof)n(fmann,)32 b(J.)e(\(2001\).)60 b(Local)32
b(search)g(topology)i(in)e(planning)h(benchmarks:)h(An)d(empirical)i
(analysis.)60 b(In)377 5144 y(Nebel,)27 b(B.)e(\(Ed.\),)h
Fq(Pr)l(oceedings)k(of)d(the)g(17th)g(International)k(J)n(oint)d
(Confer)m(ence)g(on)f(Arti\002cial)i(Intelli-)377 5257
y(g)o(ence)c(\(IJCAI'01\))p Fv(,)f(pp.)g(453\226458.)h(Mor)n(gan)g
(Kaufmann.)1888 5506 y Fy(244)p eop end
%%Page: 245 55
TeXDict begin 245 54 bop 1171 -200 a Fy(T)t FB(H)t(E)25
b Fy(F)o FB(A)t(S)t(T)f Fy(D)t FB(O)r(W)t(N)t(W)l(A)t(R)t(D)h
Fy(P)t FB(L)t(A)t(N)t(N)t(I)t(N)t(G)g Fy(S)t FB(Y)t(S)t(T)t(E)t(M)150
249 y Fv(Hof)n(fmann,)32 b(J.)f(\(2002\).)61 b(Local)32
b(search)h(topology)h(in)d(planning)j(benchmarks:)h(A)30
b(theoretical)35 b(analysis.)61 b(In)377 361 y(Ghallab,)23
b(M.,)e(Hertzber)n(g,)j(J.,)d(&)h(T)m(ra)n(v)o(erso,)g(P)-10
b(.)21 b(\(Eds.\),)h Fq(Pr)l(oceedings)j(of)d(the)h(Sixth)g
(International)j(Con-)377 474 y(fer)m(ence)k(on)f(Arti\002cial)h
(Intellig)o(ence)i(Planning)e(and)f(Sc)o(heduling)j(\(AIPS)c(2002\))p
Fv(,)h(pp.)g(92\226100.)h(AAAI)377 587 y(Press.)150 738
y(Hof)n(fmann,)21 b(J.)f(\(2005\).)28 b(Where)21 b(`ignoring)i(delete)f
(lists')f(w)o(orks:)h(Local)e(search)i(topology)h(in)e(planning)i
(bench-)377 851 y(marks.)34 b Fq(J)n(ournal)25 b(of)f(Arti\002cial)h
(Intellig)o(ence)i(Resear)m(c)o(h)p Fv(,)d Fq(24)p Fv(,)f(685\226758.)
150 1002 y(Hof)n(fmann,)29 b(J.,)f(&)g(Edelkamp,)h(S.)f(\(2005\).)52
b(The)28 b(deterministic)k(part)d(of)g(IPC-4:)g(An)f(o)o(v)o(ervie)n(w)
-6 b(.)51 b Fq(J)n(ournal)30 b(of)377 1115 y(Arti\002cial)25
b(Intellig)o(ence)i(Resear)m(c)o(h)p Fv(,)d Fq(24)p Fv(,)g(519\226579.)
150 1265 y(Hof)n(fmann,)h(J.,)e(&)g(Nebel,)i(B.)d(\(2001\).)38
b(The)24 b(FF)e(planning)27 b(system:)f(F)o(ast)d(plan)i(generation)j
(through)e(heuristic)377 1378 y(search.)35 b Fq(J)n(ournal)25
b(of)f(Arti\002cial)h(Intellig)o(ence)i(Resear)m(c)o(h)p
Fv(,)d Fq(14)p Fv(,)f(253\226302.)150 1529 y(Jonsson,)29
b(P)-10 b(.,)26 b(&)h(B)5 b(\250)-35 b(ackstr)8 b(\250)-38
b(om,)28 b(C.)e(\(1995\).)48 b(Incremental)30 b(planning.)49
b(In)27 b(Ghallab,)i(M.,)d(&)g(Milani,)i(A.)f(\(Eds.\),)377
1642 y Fq(Ne)o(w)e(Dir)m(ections)j(in)e(AI)f(Planning:)j(EWSP)c('95)j
(\227)e(3r)m(d)h(Eur)l(opean)i(W)-8 b(orkshop)28 b(on)e(Planning)p
Fv(,)h(V)-12 b(ol.)26 b(31)377 1755 y(of)e Fq(F)-5 b(r)l(ontier)o(s)25
b(in)e(Arti\002cial)i(Intellig)o(ence)i(and)d(Applications)p
Fv(,)j(pp.)c(79\22690,)i(Amsterdam.)e(IOS)f(Press.)150
1905 y(Jonsson,)30 b(P)-10 b(.,)25 b(&)i(B)5 b(\250)-35
b(ackstr)8 b(\250)-38 b(om,)28 b(C.)f(\(1998a\).)48 b(State-v)n
(ariable)31 b(planning)f(under)f(structural)h(restrictions:)h(Algo-)377
2018 y(rithms)24 b(and)g(comple)o(xity)-6 b(.)36 b Fq(Arti\002cial)25
b(Intellig)o(ence)p Fv(,)h Fq(100)p Fv(\(1\2262\),)g(125\226176.)150
2169 y(Jonsson,)h(P)-10 b(.,)24 b(&)h(B)5 b(\250)-35
b(ackstr)8 b(\250)-38 b(om,)26 b(C.)f(\(1998b\).)42 b(T)m(ractable)27
b(plan)f(e)o(xistence)i(does)e(not)g(imply)g(tractable)i(plan)e(gen-)
377 2282 y(eration.)35 b Fq(Annals)24 b(of)g(Mathematics)h(and)f
(Arti\002cial)h(Intellig)o(ence)p Fv(,)i Fq(22)p Fv(\(3\),)d
(281\226296.)150 2433 y(Joslin,)37 b(D.,)d(&)h(Roach,)h(J.)f(\(1989\).)
75 b(A)34 b(theoretical)39 b(analysis)f(of)e(conjuncti)n(v)o(e-goal)k
(problems.)75 b Fq(Arti\002cial)377 2546 y(Intellig)o(ence)p
Fv(,)27 b Fq(41)p Fv(\(1\),)d(97\226106.)36 b(Research)24
b(Note.)150 2696 y(Knoblock,)f(C.)d(A.)g(\(1994\).)31
b(Automatically)24 b(generating)g(abstractions)h(for)d(planning.)31
b Fq(Arti\002cial)23 b(Intellig)o(ence)p Fv(,)377 2809
y Fq(68)p Fv(\(2\),)i(243\226302.)150 2960 y(K)m(orf,)35
b(R.)e(E.)h(\(1987\).)72 b(Planning)37 b(as)e(search:)i(A)d(quantitati)
n(v)o(e)k(approach.)73 b Fq(Arti\002cial)37 b(Intellig)o(ence)p
Fv(,)h Fq(33)p Fv(\(1\),)377 3073 y(65\22688.)150 3224
y(Lo)n(werre,)25 b(B.)g(T)-7 b(.)25 b(\(1976\).)42 b
Fq(The)27 b Fv(H)t(A)t(R)t(P)t(Y)h Fq(Speec)o(h)f(Reco)o(gnition)i
(System)p Fv(.)41 b(Ph.D.)25 b(thesis,)i(Computer)f(Science)377
3337 y(Department,)f(Carne)o(gie-Mellon)h(Uni)n(v)o(ersity)-6
b(,)25 b(Pittsb)n(ur)n(gh,)h(Pennsylv)n(ania.)150 3487
y(Ne)n(well,)19 b(A.,)f(&)g(Simon,)h(H.)f(A.)g(\(1963\).)26
b(GPS:)18 b(A)g(program)j(that)f(simulates)i(human)e(thought.)26
b(In)20 b(Feigenbaum,)377 3600 y(E.)i(A.,)g(&)h(Feldman,)g(J.)g
(\(Eds.\),)g Fq(Computer)o(s)i(and)f(Thought)p Fv(,)h(pp.)e
(279\226293.)j(Oldenbour)n(g.)150 3751 y(Russell,)e(S.,)e(&)g(Norvig,)i
(P)-10 b(.)22 b(\(2003\).)35 b Fq(Arti\002cial)25 b(Intellig)o(ence)i
(\227)c(A)f(Modern)i(Appr)l(oac)o(h)p Fv(.)35 b(Prentice)25
b(Hall.)150 3902 y(Sacerdoti,)32 b(E.)e(D.)g(\(1974\).)59
b(Planning)33 b(in)e(a)f(hierarchy)j(of)f(abstraction)i(spaces.)59
b Fq(Arti\002cial)32 b(Intellig)o(ence)p Fv(,)j Fq(5)p
Fv(,)377 4015 y(115\226135.)150 4165 y(T)-6 b(enenber)n(g,)35
b(J.)d(D.)f(\(1991\).)65 b(Abstraction)35 b(in)e(planning.)66
b(In)32 b(Allen,)h(J.)f(F)-7 b(.,)31 b(Kautz,)i(H.)f(A.,)f(Pela)n(vin,)
i(R.)f(N.,)377 4278 y(&)27 b(T)-6 b(enenber)n(g,)30 b(J.)d(D.,)f
Fq(Reasoning)k(About)f(Plans)p Fv(,)e(chap.)i(4,)e(pp.)h(213\226283.)i
(Mor)n(gan)f(Kaufmann,)g(San)377 4391 y(Mateo.)150 4542
y(v)n(an)36 b(den)h(Briel,)f(M.,)f(V)-12 b(ossen,)37
b(T)-7 b(.,)34 b(&)i(Kambhampati,)h(S.)d(\(2005\).)76
b(Re)n(vi)n(ving)37 b(inte)o(ger)h(programming)g(ap-)377
4655 y(proaches)28 b(for)e(AI)f(planning:)j(A)c(branch-and-cut)30
b(frame)n(w)o(ork.)41 b(In)25 b(Biundo,)h(S.,)e(Myers,)i(K.,)e(&)g
(Rajan,)377 4768 y(K.)d(\(Eds.\),)h Fq(Pr)l(oceedings)j(of)d(the)h(F)l
(ifteenth)h(International)i(Confer)m(ence)f(on)d(A)n(utomated)i
(Planning)g(and)377 4881 y(Sc)o(heduling)j(\(ICAPS)22
b(2005\))p Fv(,)j(pp.)e(310\226319.)j(AAAI)c(Press.)150
5031 y(W)l(illiams,)h(B.)e(C.,)g(&)h(Nayak,)h(P)-10 b(.)21
b(P)-10 b(.)21 b(\(1997\).)32 b(A)22 b(reacti)n(v)o(e)i(planner)g(for)f
(a)f(model-based)k(e)o(x)o(ecuti)n(v)o(e.)32 b(In)23
b(Pollack,)377 5144 y(M.)g(E.)f(\(Ed.\),)g Fq(Pr)l(oceedings)k(of)e
(the)g(15th)g(International)j(J)n(oint)e(Confer)m(ence)g(on)f
(Arti\002cial)h(Intellig)o(ence)377 5257 y(\(IJCAI'97\))p
Fv(,)g(pp.)e(1178\2261195.)j(Mor)n(gan)f(Kaufmann.)1888
5506 y Fy(245)p eop end
%%Page: 246 56
TeXDict begin 246 55 bop 1765 -200 a Fy(H)t FB(E)t(L)t(M)t(E)t(RT)150
249 y Fv(Y)-10 b(oshizumi,)30 b(T)-7 b(.,)28 b(Miura,)h(T)-7
b(.,)27 b(&)h(Ishida,)i(T)-7 b(.)28 b(\(2000\).)53 b(A)1962
216 y Fu(\003)2029 249 y Fv(with)29 b(partial)i(e)o(xpansion)g(for)e
(lar)n(ge)i(branching)h(f)o(ac-)377 361 y(tor)i(problems.)68
b(In)34 b(Kautz,)g(H.,)e(&)h(Porter)l(,)h(B.)f(\(Eds.\),)g
Fq(Pr)l(oceedings)k(of)d(the)g(Se)o(venteenth)j(National)377
474 y(Confer)m(ence)26 b(on)d(Arti\002cial)i(Intellig)o(ence)i
(\(AAAI-2000\))p Fv(,)d(pp.)g(923\226929.)h(AAAI)d(Press.)1888
5506 y Fy(246)p eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
